[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] maha parent                                                        [pom]
[INFO] maha-par-request-2                                                 [jar]
[INFO] maha db                                                            [jar]
[INFO] maha request log                                                   [jar]
[INFO] maha-druid-lookups                                                 [jar]
[INFO] maha core                                                          [jar]
[INFO] maha job service                                                   [jar]
[INFO] maha druid executor                                                [jar]
[INFO] maha oracle executor                                               [jar]
[INFO] maha presto executor                                               [jar]
[INFO] maha postgres executor                                             [jar]
[INFO] maha service                                                       [jar]
[INFO] maha worker                                                        [jar]
[INFO] maha api-jersey                                                    [jar]
[INFO] maha api-example                                                   [war]
[INFO] 
[INFO] ---------------------< com.yahoo.maha:maha-parent >---------------------
[INFO] Building maha parent 6.24-SNAPSHOT                                [1/15]
[INFO] --------------------------------[ pom ]---------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ maha-parent ---
[INFO] Deleting /Users/lgadde/git/Native-Ads/maha/target
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-parent ---
[INFO] Add Source directory: /Users/lgadde/git/Native-Ads/maha/src/main/scala
[INFO] Add Test Source directory: /Users/lgadde/git/Native-Ads/maha/src/test/scala
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-parent ---
[INFO] No sources to compile
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-parent ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ maha-parent ---
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/pom.xml to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-parent/6.24-SNAPSHOT/maha-parent-6.24-SNAPSHOT.pom
[INFO] 
[INFO] >>> scoverage-maven-plugin:1.4.1:report (coverage) > [scoverage]test @ maha-parent >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-parent ---
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:pre-compile (coverage) @ maha-parent ---
[INFO] Skipping SCoverage execution for project with packaging type 'pom'
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-parent ---
[INFO] No sources to compile
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:post-compile (coverage) @ maha-parent ---
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-parent ---
[INFO] No sources to compile
[INFO] 
[INFO] <<< scoverage-maven-plugin:1.4.1:report (coverage) < [scoverage]test @ maha-parent <<<
[INFO] 
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:report (coverage) @ maha-parent ---
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:check-only (coverage) @ maha-parent ---
[INFO] Skipping SCoverage execution for project with packaging type 'pom'
[INFO] 
[INFO] -----------------< com.yahoo.maha:maha-par-request-2 >------------------
[INFO] Building maha-par-request-2 6.24-SNAPSHOT                         [2/15]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ maha-par-request-2 ---
[INFO] Deleting /Users/lgadde/git/Native-Ads/maha/par-request-2/target
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-par-request-2 ---
[INFO] Add Source directory: /Users/lgadde/git/Native-Ads/maha/par-request-2/src/main/scala
[INFO] Add Test Source directory: /Users/lgadde/git/Native-Ads/maha/par-request-2/src/test/scala
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:prepare-agent (prepare-agent) @ maha-par-request-2 ---
[INFO] surefireArgLine set to -javaagent:/Users/lgadde/.m2/repository/org/jacoco/org.jacoco.agent/0.8.5/org.jacoco.agent-0.8.5-runtime.jar=destfile=/Users/lgadde/git/Native-Ads/maha/par-request-2/target/jacoco.exec
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-par-request-2 ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/lgadde/git/Native-Ads/maha/par-request-2/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ maha-par-request-2 ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 40 source files to /Users/lgadde/git/Native-Ads/maha/par-request-2/target/classes
[INFO] /Users/lgadde/git/Native-Ads/maha/par-request-2/src/main/java/com/yahoo/maha/parrequest2/future/ParRequestListEither.java: Some input files use unchecked or unsafe operations.
[INFO] /Users/lgadde/git/Native-Ads/maha/par-request-2/src/main/java/com/yahoo/maha/parrequest2/future/ParRequestListEither.java: Recompile with -Xlint:unchecked for details.
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-par-request-2 ---
[INFO] /Users/lgadde/git/Native-Ads/maha/par-request-2/src/main/java:-1: info: compiling
[INFO] /Users/lgadde/git/Native-Ads/maha/par-request-2/target/generated-sources/annotations:-1: info: compiling
[INFO] Compiling 40 source files to /Users/lgadde/git/Native-Ads/maha/par-request-2/target/classes at 1605028044392
[INFO] prepare-compile in 0 s
[INFO] compile in 4 s
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-par-request-2 ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/lgadde/git/Native-Ads/maha/par-request-2/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ maha-par-request-2 ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 19 source files to /Users/lgadde/git/Native-Ads/maha/par-request-2/target/test-classes
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-par-request-2 ---
[INFO] /Users/lgadde/git/Native-Ads/maha/par-request-2/src/test/java:-1: info: compiling
[INFO] /Users/lgadde/git/Native-Ads/maha/par-request-2/target/generated-test-sources/test-annotations:-1: info: compiling
[INFO] Compiling 19 source files to /Users/lgadde/git/Native-Ads/maha/par-request-2/target/test-classes at 1605028052533
[INFO] prepare-compile in 0 s
[INFO] compile in 3 s
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-par-request-2 ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running com.yahoo.maha.parrequest2.TestCollectionsUtil
[INFO] Running com.yahoo.maha.parrequest2.TestArithmeticUtil
[INFO] Running com.yahoo.maha.parrequest2.TestTimeUtil
[INFO] Running com.yahoo.maha.parrequest2.TestGeneralError
[INFO] Running com.yahoo.maha.parrequest2.future.TestParRequest3Option
[INFO] Running com.yahoo.maha.parrequest2.future.TestParRequest6
[INFO] Running com.yahoo.maha.parrequest2.future.TestParRequest4
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.016 s - in com.yahoo.maha.parrequest2.TestCollectionsUtil
[INFO] Running com.yahoo.maha.parrequest2.future.TestParallelServiceExecutor
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.267 s - in com.yahoo.maha.parrequest2.TestArithmeticUtil
[INFO] Running com.yahoo.maha.parrequest2.future.TestParRequest2
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.202 s - in com.yahoo.maha.parrequest2.TestTimeUtil
[INFO] Running com.yahoo.maha.parrequest2.future.TestParRequest5
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.99 s - in com.yahoo.maha.parrequest2.TestGeneralError
[INFO] Running com.yahoo.maha.parrequest2.future.TestParRequestListOption
[INFO] Tests run: 33, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 17.921 s - in com.yahoo.maha.parrequest2.future.TestParallelServiceExecutor
[INFO] Running com.yahoo.maha.parrequest2.future.TestParRequest3
[INFO] Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 17.647 s - in com.yahoo.maha.parrequest2.future.TestParRequest2
[INFO] Running com.yahoo.maha.parrequest2.future.TestParRequest
[INFO] Tests run: 24, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 21.315 s - in com.yahoo.maha.parrequest2.future.TestParRequest4
[INFO] Running com.yahoo.maha.parrequest2.future.TestParRequest2Option
[INFO] Tests run: 26, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 21.825 s - in com.yahoo.maha.parrequest2.future.TestParRequest6
[INFO] Running com.yahoo.maha.parrequest2.future.TestParRequestListEither
[INFO] Tests run: 25, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 17.961 s - in com.yahoo.maha.parrequest2.future.TestParRequest5
[INFO] Running com.yahoo.maha.parrequest2.future.TestParCallable
[INFO] Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 18.306 s - in com.yahoo.maha.parrequest2.future.TestParRequestListOption
[INFO] Running com.yahoo.maha.parrequest2.TestCustomRejectPolicy
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.026 s - in com.yahoo.maha.parrequest2.TestCustomRejectPolicy
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.051 s - in com.yahoo.maha.parrequest2.future.TestParCallable
[INFO] Tests run: 35, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 34.23 s - in com.yahoo.maha.parrequest2.future.TestParRequest3Option
[INFO] Tests run: 22, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 14.676 s - in com.yahoo.maha.parrequest2.future.TestParRequest3
[INFO] Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 17.14 s - in com.yahoo.maha.parrequest2.future.TestParRequest
[INFO] Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 17.649 s - in com.yahoo.maha.parrequest2.future.TestParRequestListEither
[INFO] Tests run: 21, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 19.643 s - in com.yahoo.maha.parrequest2.future.TestParRequest2Option
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 280, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:report (report) @ maha-par-request-2 ---
[INFO] Loading execution data file /Users/lgadde/git/Native-Ads/maha/par-request-2/target/jacoco.exec
[INFO] Analyzed bundle 'maha-par-request-2' with 95 classes
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:check (check) @ maha-par-request-2 ---
[INFO] Loading execution data file /Users/lgadde/git/Native-Ads/maha/par-request-2/target/jacoco.exec
[INFO] Analyzed bundle 'maha-par-request-2' with 95 classes
[INFO] All coverage checks have been met.
[INFO] 
[INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ maha-par-request-2 ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/par-request-2/target/maha-par-request-2-6.24-SNAPSHOT.jar
[INFO] 
[INFO] --- maven-jar-plugin:2.6:test-jar (default) @ maha-par-request-2 ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/par-request-2/target/maha-par-request-2-6.24-SNAPSHOT-tests.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:jar (default) > generate-sources @ maha-par-request-2 >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-par-request-2 ---
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:prepare-agent (prepare-agent) @ maha-par-request-2 ---
[INFO] surefireArgLine set to -javaagent:/Users/lgadde/.m2/repository/org/jacoco/org.jacoco.agent/0.8.5/org.jacoco.agent-0.8.5-runtime.jar=destfile=/Users/lgadde/git/Native-Ads/maha/par-request-2/target/jacoco.exec
[INFO] 
[INFO] <<< maven-source-plugin:2.4:jar (default) < generate-sources @ maha-par-request-2 <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:jar (default) @ maha-par-request-2 ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/par-request-2/target/maha-par-request-2-6.24-SNAPSHOT-sources.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:test-jar (default) > generate-sources @ maha-par-request-2 >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-par-request-2 ---
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:prepare-agent (prepare-agent) @ maha-par-request-2 ---
[INFO] surefireArgLine set to -javaagent:/Users/lgadde/.m2/repository/org/jacoco/org.jacoco.agent/0.8.5/org.jacoco.agent-0.8.5-runtime.jar=destfile=/Users/lgadde/git/Native-Ads/maha/par-request-2/target/jacoco.exec
[INFO] 
[INFO] <<< maven-source-plugin:2.4:test-jar (default) < generate-sources @ maha-par-request-2 <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:test-jar (default) @ maha-par-request-2 ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/par-request-2/target/maha-par-request-2-6.24-SNAPSHOT-test-sources.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ maha-par-request-2 ---
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/par-request-2/target/maha-par-request-2-6.24-SNAPSHOT.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-par-request-2/6.24-SNAPSHOT/maha-par-request-2-6.24-SNAPSHOT.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/par-request-2/pom.xml to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-par-request-2/6.24-SNAPSHOT/maha-par-request-2-6.24-SNAPSHOT.pom
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/par-request-2/target/maha-par-request-2-6.24-SNAPSHOT-tests.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-par-request-2/6.24-SNAPSHOT/maha-par-request-2-6.24-SNAPSHOT-tests.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/par-request-2/target/maha-par-request-2-6.24-SNAPSHOT-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-par-request-2/6.24-SNAPSHOT/maha-par-request-2-6.24-SNAPSHOT-sources.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/par-request-2/target/maha-par-request-2-6.24-SNAPSHOT-test-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-par-request-2/6.24-SNAPSHOT/maha-par-request-2-6.24-SNAPSHOT-test-sources.jar
[INFO] 
[INFO] >>> scoverage-maven-plugin:1.4.1:report (coverage) > [scoverage]test @ maha-par-request-2 >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-par-request-2 ---
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:prepare-agent (prepare-agent) @ maha-par-request-2 ---
[INFO] surefireArgLine set to -javaagent:/Users/lgadde/.m2/repository/org/jacoco/org.jacoco.agent/0.8.5/org.jacoco.agent-0.8.5-runtime.jar=destfile=/Users/lgadde/git/Native-Ads/maha/par-request-2/target/jacoco.exec
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:pre-compile (coverage) @ maha-par-request-2 ---
[INFO] Skipping Scoverage execution
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-par-request-2 ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/lgadde/git/Native-Ads/maha/par-request-2/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ maha-par-request-2 ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 40 source files to /Users/lgadde/git/Native-Ads/maha/par-request-2/target/classes
[INFO] /Users/lgadde/git/Native-Ads/maha/par-request-2/src/main/java/com/yahoo/maha/parrequest2/future/ParRequestListEither.java: Some input files use unchecked or unsafe operations.
[INFO] /Users/lgadde/git/Native-Ads/maha/par-request-2/src/main/java/com/yahoo/maha/parrequest2/future/ParRequestListEither.java: Recompile with -Xlint:unchecked for details.
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-par-request-2 ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:post-compile (coverage) @ maha-par-request-2 ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-par-request-2 ---
[INFO] Not copying test resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ maha-par-request-2 ---
[INFO] Not compiling test sources
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-par-request-2 ---
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-par-request-2 ---
[INFO] Tests are skipped.
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:report (report) @ maha-par-request-2 ---
[INFO] Loading execution data file /Users/lgadde/git/Native-Ads/maha/par-request-2/target/jacoco.exec
[INFO] Analyzed bundle 'maha-par-request-2' with 95 classes
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:check (check) @ maha-par-request-2 ---
[INFO] Loading execution data file /Users/lgadde/git/Native-Ads/maha/par-request-2/target/jacoco.exec
[INFO] Analyzed bundle 'maha-par-request-2' with 95 classes
[INFO] All coverage checks have been met.
[INFO] 
[INFO] <<< scoverage-maven-plugin:1.4.1:report (coverage) < [scoverage]test @ maha-par-request-2 <<<
[INFO] 
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:report (coverage) @ maha-par-request-2 ---
[INFO] Skipping SCoverage report generation
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:check-only (coverage) @ maha-par-request-2 ---
[INFO] Skipping Scoverage execution
[INFO] 
[INFO] -----------------------< com.yahoo.maha:maha-db >-----------------------
[INFO] Building maha db 6.24-SNAPSHOT                                    [3/15]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ maha-db ---
[INFO] Deleting /Users/lgadde/git/Native-Ads/maha/db/target
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-db ---
[INFO] Add Source directory: /Users/lgadde/git/Native-Ads/maha/db/src/main/scala
[INFO] Add Test Source directory: /Users/lgadde/git/Native-Ads/maha/db/src/test/scala
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:prepare-agent (prepare-agent) @ maha-db ---
[INFO] surefireArgLine set to -javaagent:/Users/lgadde/.m2/repository/org/jacoco/org.jacoco.agent/0.8.5/org.jacoco.agent-0.8.5-runtime.jar=destfile=/Users/lgadde/git/Native-Ads/maha/db/target/jacoco.exec
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-db ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/lgadde/git/Native-Ads/maha/db/src/main/resources
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (scala-compile-first) @ maha-db ---
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (scala-compile-first) @ maha-db ---
[INFO] /Users/lgadde/git/Native-Ads/maha/db/src/main/java:-1: info: compiling
[INFO] /Users/lgadde/git/Native-Ads/maha/db/src/main/scala:-1: info: compiling
[INFO] Compiling 19 source files to /Users/lgadde/git/Native-Ads/maha/db/target/classes at 1605028103079
[WARNING] /Users/lgadde/git/Native-Ads/maha/db/src/main/scala/com/yahoo/maha/rocksdb/RocksDBAccessor.scala:50: warning: method setBlockCacheSize in class BlockBasedTableConfig is deprecated: see corresponding Javadoc for more information.
[WARNING]     blockCacheOptions.setBlockCacheSize(builder.cacheSize)
[WARNING]                       ^
[WARNING] one warning found
[INFO] prepare-compile in 0 s
[INFO] compile in 6 s
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ maha-db ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 13 source files to /Users/lgadde/git/Native-Ads/maha/db/target/classes
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-db ---
[INFO] /Users/lgadde/git/Native-Ads/maha/db/src/main/java:-1: info: compiling
[INFO] /Users/lgadde/git/Native-Ads/maha/db/src/main/scala:-1: info: compiling
[INFO] /Users/lgadde/git/Native-Ads/maha/db/target/generated-sources/annotations:-1: info: compiling
[INFO] Compiling 19 source files to /Users/lgadde/git/Native-Ads/maha/db/target/classes at 1605028109961
[WARNING] /Users/lgadde/git/Native-Ads/maha/db/src/main/scala/com/yahoo/maha/rocksdb/RocksDBAccessor.scala:50: warning: method setBlockCacheSize in class BlockBasedTableConfig is deprecated: see corresponding Javadoc for more information.
[WARNING]     blockCacheOptions.setBlockCacheSize(builder.cacheSize)
[WARNING]                       ^
[WARNING] one warning found
[INFO] prepare-compile in 0 s
[INFO] compile in 6 s
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default) @ maha-db ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 13 source files to /Users/lgadde/git/Native-Ads/maha/db/target/classes
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-db ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (scala-test-compile) @ maha-db ---
[INFO] /Users/lgadde/git/Native-Ads/maha/db/src/test/java:-1: info: compiling
[INFO] /Users/lgadde/git/Native-Ads/maha/db/src/test/scala:-1: info: compiling
[INFO] Compiling 8 source files to /Users/lgadde/git/Native-Ads/maha/db/target/test-classes at 1605028116414
[WARNING] /Users/lgadde/git/Native-Ads/maha/db/src/test/scala/com/yahoo/maha/jdbc/JdbcConnectionTest.scala:134: warning: local val resultSet in value <local JdbcConnectionTest> is never used
[WARNING]     val resultSet : ResultSet = result.get
[WARNING]         ^
[WARNING] one warning found
[INFO] prepare-compile in 0 s
[INFO] compile in 6 s
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ maha-db ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 5 source files to /Users/lgadde/git/Native-Ads/maha/db/target/test-classes
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-db ---
[INFO] /Users/lgadde/git/Native-Ads/maha/db/src/test/java:-1: info: compiling
[INFO] /Users/lgadde/git/Native-Ads/maha/db/src/test/scala:-1: info: compiling
[INFO] /Users/lgadde/git/Native-Ads/maha/db/target/generated-test-sources/test-annotations:-1: info: compiling
[INFO] Compiling 8 source files to /Users/lgadde/git/Native-Ads/maha/db/target/test-classes at 1605028123437
[WARNING] /Users/lgadde/git/Native-Ads/maha/db/src/test/scala/com/yahoo/maha/jdbc/JdbcConnectionTest.scala:134: warning: local val resultSet in value <local JdbcConnectionTest> is never used
[WARNING]     val resultSet : ResultSet = result.get
[WARNING]         ^
[WARNING] one warning found
[INFO] prepare-compile in 0 s
[INFO] compile in 6 s
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-db ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running com.yahoo.maha.data.TestCompressors
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.711 s - in com.yahoo.maha.data.TestCompressors
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:report (report) @ maha-db ---
[INFO] Loading execution data file /Users/lgadde/git/Native-Ads/maha/db/target/jacoco.exec
[INFO] Analyzed bundle 'maha db' with 34 classes
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:check (check) @ maha-db ---
[INFO] Loading execution data file /Users/lgadde/git/Native-Ads/maha/db/target/jacoco.exec
[INFO] Analyzed bundle 'maha-db' with 34 classes
[INFO] All coverage checks have been met.
[INFO] 
[INFO] --- scalatest-maven-plugin:2.0.0:test (test) @ maha-db ---
Discovery starting.
Discovery completed in 1 second, 582 milliseconds.
Run starting. Expected test count is: 24
RocksDBAccessorTest:
- basic put and get operations should succeed
- successfully perform put batch and should be able to retrieve
- Test RocksDB Accessor with Time To Live
- Failure put
09:09:00.595 ERROR [ScalaTest-main-running-RocksDBAccessorTest] c.y.m.r.RocksDBAccessor - Failed to put 'key => value' into RocksDB
java.lang.NullPointerException: null
	at com.yahoo.maha.rocksdb.RocksDBAccessor.put(RocksDBAccessor.scala:75)
	at com.yahoo.maha.rocksdb.RocksDBAccessorTest.$anonfun$new$5(RocksDBAccessorTest.scala:86)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.funsuite.AnyFunSuiteLike$$anon$1.apply(AnyFunSuiteLike.scala:189)
	at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
09:09:00.599 ERROR [ScalaTest-main-running-RocksDBAccessorTest] c.y.m.r.RocksDBAccessor - Failed to put batch of size '1' into Level DB
java.lang.NullPointerException: null
	at com.yahoo.maha.rocksdb.RocksDBAccessor.$anonfun$putBatch$1(RocksDBAccessor.scala:118)
	at com.yahoo.maha.rocksdb.RocksDBAccessor.$anonfun$putBatch$1$adapted(RocksDBAccessor.scala:118)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at com.yahoo.maha.rocksdb.RocksDBAccessor.putBatch(RocksDBAccessor.scala:118)
	at com.yahoo.maha.rocksdb.RocksDBAccessorTest.$anonfun$new$5(RocksDBAccessorTest.scala:87)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
- DB closed, error cases
- test delete key
- test cleanup base dir
- Long Serde Test
JdbcConnectionTest:
- create table
- create table with interpolated input
- insert rows
- Update DB with new table
- read rows
- mapSingle on an already limited query
- query table for a list
- map a query
- map a single row
- Verify SqlAndArgs can execute stripMargin
- Get RowData on a query
LevelDBAccessorTest:
- basic put and get operations should succeed
- Failure put
- successfully perform put batch and should be able to retrieve
09:09:01.059 ERROR [ScalaTest-main-running-LevelDBAccessorTest] c.y.m.l.LevelDBAccessor - Failed to put 'key => value' into LevelDB
java.lang.NullPointerException: null
	at com.yahoo.maha.leveldb.LevelDBAccessor.put(LevelDBAccessor.scala:43)
	at com.yahoo.maha.leveldb.LevelDBAccessorTest.$anonfun$new$5(LevelDBAccessorTest.scala:78)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.funsuite.AnyFunSuiteLike$$anon$1.apply(AnyFunSuiteLike.scala:189)
	at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
- Set LevelDBAccessorBuilder parameters
09:09:01.061 ERROR [ScalaTest-main-running-LevelDBAccessorTest] c.y.m.l.LevelDBAccessor - Failed to put batch of size '1' into Level DB
java.lang.NullPointerException: null
	at com.yahoo.maha.leveldb.LevelDBAccessor.$anonfun$putBatch$1(LevelDBAccessor.scala:58)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at com.yahoo.maha.leveldb.LevelDBAccessor.putBatch(LevelDBAccessor.scala:58)
	at com.yahoo.maha.leveldb.LevelDBAccessorTest.$anonfun$new$5(LevelDBAccessorTest.scala:79)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
- DB closed, error cases
Run completed in 4 seconds, 822 milliseconds.
Total number of tests run: 24
Suites: completed 4, aborted 0
Tests: succeeded 24, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
[INFO] 
[INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ maha-db ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/db/target/maha-db-6.24-SNAPSHOT.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:jar (default) > generate-sources @ maha-db >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-db ---
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:prepare-agent (prepare-agent) @ maha-db ---
[INFO] surefireArgLine set to -javaagent:/Users/lgadde/.m2/repository/org/jacoco/org.jacoco.agent/0.8.5/org.jacoco.agent-0.8.5-runtime.jar=destfile=/Users/lgadde/git/Native-Ads/maha/db/target/jacoco.exec
[INFO] 
[INFO] <<< maven-source-plugin:2.4:jar (default) < generate-sources @ maha-db <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:jar (default) @ maha-db ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/db/target/maha-db-6.24-SNAPSHOT-sources.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:test-jar (default) > generate-sources @ maha-db >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-db ---
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:prepare-agent (prepare-agent) @ maha-db ---
[INFO] surefireArgLine set to -javaagent:/Users/lgadde/.m2/repository/org/jacoco/org.jacoco.agent/0.8.5/org.jacoco.agent-0.8.5-runtime.jar=destfile=/Users/lgadde/git/Native-Ads/maha/db/target/jacoco.exec
[INFO] 
[INFO] <<< maven-source-plugin:2.4:test-jar (default) < generate-sources @ maha-db <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:test-jar (default) @ maha-db ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/db/target/maha-db-6.24-SNAPSHOT-test-sources.jar
[INFO] 
[INFO] --- maven-jar-plugin:2.6:test-jar (default) @ maha-db ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/db/target/maha-db-6.24-SNAPSHOT-tests.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ maha-db ---
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/db/target/maha-db-6.24-SNAPSHOT.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-db/6.24-SNAPSHOT/maha-db-6.24-SNAPSHOT.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/db/pom.xml to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-db/6.24-SNAPSHOT/maha-db-6.24-SNAPSHOT.pom
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/db/target/maha-db-6.24-SNAPSHOT-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-db/6.24-SNAPSHOT/maha-db-6.24-SNAPSHOT-sources.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/db/target/maha-db-6.24-SNAPSHOT-test-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-db/6.24-SNAPSHOT/maha-db-6.24-SNAPSHOT-test-sources.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/db/target/maha-db-6.24-SNAPSHOT-tests.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-db/6.24-SNAPSHOT/maha-db-6.24-SNAPSHOT-tests.jar
[INFO] 
[INFO] >>> scoverage-maven-plugin:1.4.1:report (coverage) > [scoverage]test @ maha-db >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-db ---
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:prepare-agent (prepare-agent) @ maha-db ---
[INFO] surefireArgLine set to -javaagent:/Users/lgadde/.m2/repository/org/jacoco/org.jacoco.agent/0.8.5/org.jacoco.agent-0.8.5-runtime.jar=destfile=/Users/lgadde/git/Native-Ads/maha/db/target/jacoco.exec
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:pre-compile (coverage) @ maha-db ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-db ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/lgadde/git/Native-Ads/maha/db/src/main/resources
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (scala-compile-first) @ maha-db ---
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (scala-compile-first) @ maha-db ---
[INFO] /Users/lgadde/git/Native-Ads/maha/db/src/main/java:-1: info: compiling
[INFO] /Users/lgadde/git/Native-Ads/maha/db/src/main/scala:-1: info: compiling
[INFO] /Users/lgadde/git/Native-Ads/maha/db/target/generated-sources/annotations:-1: info: compiling
[INFO] Compiling 19 source files to /Users/lgadde/git/Native-Ads/maha/db/target/scoverage-classes at 1605028141304
[INFO] Cleaning datadir [/Users/lgadde/git/Native-Ads/maha/db/target/scoverage-data]
[INFO] Beginning coverage instrumentation
[INFO] Instrumentation completed [445 statements]
[INFO] Wrote instrumentation file [/Users/lgadde/git/Native-Ads/maha/db/target/scoverage-data/scoverage.coverage]
[INFO] Will write measurement data to [/Users/lgadde/git/Native-Ads/maha/db/target/scoverage-data]
[WARNING] /Users/lgadde/git/Native-Ads/maha/db/src/main/scala/com/yahoo/maha/rocksdb/RocksDBAccessor.scala:50: warning: method setBlockCacheSize in class BlockBasedTableConfig is deprecated: see corresponding Javadoc for more information.
[WARNING]     blockCacheOptions.setBlockCacheSize(builder.cacheSize)
[WARNING]                       ^
[WARNING] one warning found
[INFO] prepare-compile in 0 s
[INFO] compile in 9 s
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ maha-db ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 13 source files to /Users/lgadde/git/Native-Ads/maha/db/target/scoverage-classes
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-db ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default) @ maha-db ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:post-compile (coverage) @ maha-db ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-db ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (scala-test-compile) @ maha-db ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ maha-db ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-db ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-db ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running com.yahoo.maha.data.TestCompressors
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.414 s - in com.yahoo.maha.data.TestCompressors
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:report (report) @ maha-db ---
[INFO] Loading execution data file /Users/lgadde/git/Native-Ads/maha/db/target/jacoco.exec
[INFO] Analyzed bundle 'maha db' with 34 classes
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:check (check) @ maha-db ---
[INFO] Loading execution data file /Users/lgadde/git/Native-Ads/maha/db/target/jacoco.exec
[INFO] Analyzed bundle 'maha-db' with 34 classes
[INFO] All coverage checks have been met.
[INFO] 
[INFO] --- scalatest-maven-plugin:2.0.0:test (test) @ maha-db ---
Discovery starting.
Discovery completed in 1 second, 83 milliseconds.
Run starting. Expected test count is: 24
RocksDBAccessorTest:
- basic put and get operations should succeed
- successfully perform put batch and should be able to retrieve
- Test RocksDB Accessor with Time To Live
- Failure put
09:09:19.231 ERROR [ScalaTest-main-running-RocksDBAccessorTest] c.y.m.r.RocksDBAccessor - Failed to put 'key => value' into RocksDB
java.lang.NullPointerException: null
	at com.yahoo.maha.rocksdb.RocksDBAccessor.put(RocksDBAccessor.scala:75)
	at com.yahoo.maha.rocksdb.RocksDBAccessorTest.$anonfun$new$5(RocksDBAccessorTest.scala:86)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.funsuite.AnyFunSuiteLike$$anon$1.apply(AnyFunSuiteLike.scala:189)
	at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
09:09:19.235 ERROR [ScalaTest-main-running-RocksDBAccessorTest] c.y.m.r.RocksDBAccessor - Failed to put batch of size '1' into Level DB
java.lang.NullPointerException: null
	at com.yahoo.maha.rocksdb.RocksDBAccessor.$anonfun$putBatch$1(RocksDBAccessor.scala:118)
	at com.yahoo.maha.rocksdb.RocksDBAccessor.$anonfun$putBatch$1$adapted(RocksDBAccessor.scala:118)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at com.yahoo.maha.rocksdb.RocksDBAccessor.putBatch(RocksDBAccessor.scala:118)
	at com.yahoo.maha.rocksdb.RocksDBAccessorTest.$anonfun$new$5(RocksDBAccessorTest.scala:87)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
- DB closed, error cases
- test delete key
- test cleanup base dir
- Long Serde Test
JdbcConnectionTest:
- create table
- create table with interpolated input
- insert rows
- Update DB with new table
- read rows
- mapSingle on an already limited query
- query table for a list
- map a query
- map a single row
- Verify SqlAndArgs can execute stripMargin
- Get RowData on a query
LevelDBAccessorTest:
- basic put and get operations should succeed
09:09:19.686 ERROR [ScalaTest-main-running-LevelDBAccessorTest] c.y.m.l.LevelDBAccessor - Failed to put 'key => value' into LevelDB
java.lang.NullPointerException: null
	at com.yahoo.maha.leveldb.LevelDBAccessor.put(LevelDBAccessor.scala:43)
	at com.yahoo.maha.leveldb.LevelDBAccessorTest.$anonfun$new$5(LevelDBAccessorTest.scala:78)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.funsuite.AnyFunSuiteLike$$anon$1.apply(AnyFunSuiteLike.scala:189)
	at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
- Failure put
- successfully perform put batch and should be able to retrieve
09:09:19.688 ERROR [ScalaTest-main-running-LevelDBAccessorTest] c.y.m.l.LevelDBAccessor - Failed to put batch of size '1' into Level DB
java.lang.NullPointerException: null
	at com.yahoo.maha.leveldb.LevelDBAccessor.$anonfun$putBatch$1(LevelDBAccessor.scala:58)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at com.yahoo.maha.leveldb.LevelDBAccessor.putBatch(LevelDBAccessor.scala:58)
	at com.yahoo.maha.leveldb.LevelDBAccessorTest.$anonfun$new$5(LevelDBAccessorTest.scala:79)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
- Set LevelDBAccessorBuilder parameters
- DB closed, error cases
Run completed in 4 seconds, 247 milliseconds.
Total number of tests run: 24
Suites: completed 4, aborted 0
Tests: succeeded 24, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
[INFO] 
[INFO] <<< scoverage-maven-plugin:1.4.1:report (coverage) < [scoverage]test @ maha-db <<<
[INFO] 
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:report (coverage) @ maha-db ---
[INFO] Reading scoverage instrumentation [/Users/lgadde/git/Native-Ads/maha/db/target/scoverage-data/scoverage.coverage]...
[INFO] Reading scoverage measurements [/Users/lgadde/git/Native-Ads/maha/db/target/scoverage-data/scoverage.measurements.*]...
[INFO] Generating coverage reports...
[INFO] Written Cobertura XML report [/Users/lgadde/git/Native-Ads/maha/db/target/cobertura.xml]
[INFO] Written XML coverage report [/Users/lgadde/git/Native-Ads/maha/db/target/scoverage.xml]
[INFO] Written HTML coverage report [/Users/lgadde/git/Native-Ads/maha/db/target/site/scoverage/index.html]
[INFO] Statement coverage.: 91.01%
[INFO] Branch coverage....: 96.97%
[INFO] Coverage reports completed.
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:check-only (coverage) @ maha-db ---
[INFO] Statement coverage.: 91.01%
[INFO] Branch coverage....: 96.97%
[INFO] Coverage is above minimum [91.01% >= 90.00%]
[INFO] 
[INFO] ------------------< com.yahoo.maha:maha-request-log >-------------------
[INFO] Building maha request log 6.24-SNAPSHOT                           [4/15]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ maha-request-log ---
[INFO] Deleting /Users/lgadde/git/Native-Ads/maha/request-log/target
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-request-log ---
[INFO] Add Source directory: /Users/lgadde/git/Native-Ads/maha/request-log/src/main/scala
[INFO] Add Test Source directory: /Users/lgadde/git/Native-Ads/maha/request-log/src/test/scala
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-request-log ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/lgadde/git/Native-Ads/maha/request-log/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ maha-request-log ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 1 source file to /Users/lgadde/git/Native-Ads/maha/request-log/target/classes
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-request-log ---
[INFO] /Users/lgadde/git/Native-Ads/maha/request-log/src/main/java:-1: info: compiling
[INFO] /Users/lgadde/git/Native-Ads/maha/request-log/src/main/scala:-1: info: compiling
[INFO] /Users/lgadde/git/Native-Ads/maha/request-log/target/generated-sources/annotations:-1: info: compiling
[INFO] Compiling 5 source files to /Users/lgadde/git/Native-Ads/maha/request-log/target/classes at 1605028162365
[INFO] prepare-compile in 0 s
[INFO] compile in 7 s
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-request-log ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ maha-request-log ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-request-log ---
[INFO] /Users/lgadde/git/Native-Ads/maha/request-log/src/test/scala:-1: info: compiling
[INFO] Compiling 3 source files to /Users/lgadde/git/Native-Ads/maha/request-log/target/test-classes at 1605028169549
[WARNING] /Users/lgadde/git/Native-Ads/maha/request-log/src/test/scala/com/yahoo/maha/log/KafkaMahaRequestLogWriterTest.scala:5: warning: Unused import
[WARNING] import java.net.{ServerSocket, SocketTimeoutException}
[WARNING]                                ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/request-log/src/test/scala/com/yahoo/maha/log/KafkaMahaRequestLogWriterTest.scala:36: warning: private val fromDate in class KafkaMahaRequestLogWriterTest is never used
[WARNING]   private[this] val fromDate = "2016-02-07"
[WARNING]                     ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/request-log/src/test/scala/com/yahoo/maha/log/KafkaMahaRequestLogWriterTest.scala:37: warning: private val toDate in class KafkaMahaRequestLogWriterTest is never used
[WARNING]   private[this] val toDate = "2016-02-12"
[WARNING]                     ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/request-log/src/test/scala/com/yahoo/maha/log/KafkaMahaRequestLogWriterTest.scala:143: warning: method poll in class KafkaConsumer is deprecated: see corresponding Javadoc for more information.
[WARNING]           val consumerRecords = kafkaConsumer.poll(1000)
[WARNING]                                               ^
[WARNING] four warnings found
[INFO] prepare-compile in 0 s
[INFO] compile in 10 s
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-request-log ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running com.yahoo.maha.log.KafkaStringEventBatchTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.913 s - in com.yahoo.maha.log.KafkaStringEventBatchTest
[INFO] Running com.yahoo.maha.log.KryoStringEventBatchTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in com.yahoo.maha.log.KryoStringEventBatchTest
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- scalatest-maven-plugin:2.0.0:test (test) @ maha-request-log ---
Discovery starting.
Discovery completed in 276 milliseconds.
Run starting. Expected test count is: 6
KafkaMahaRequestLogWriterTest:
- Create blank, invalid requestLog
- RequestLogWriter Test
- Create a noopRequestLogWriter
- successfully return exception in future
- successfully return exception when logging disabled
- Multi Colo Request Log Writer Test
Run completed in 7 seconds, 910 milliseconds.
Total number of tests run: 6
Suites: completed 2, aborted 0
Tests: succeeded 6, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
[INFO] 
[INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ maha-request-log ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/request-log/target/maha-request-log-6.24-SNAPSHOT.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:jar (default) > generate-sources @ maha-request-log >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-request-log ---
[INFO] 
[INFO] <<< maven-source-plugin:2.4:jar (default) < generate-sources @ maha-request-log <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:jar (default) @ maha-request-log ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/request-log/target/maha-request-log-6.24-SNAPSHOT-sources.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:test-jar (default) > generate-sources @ maha-request-log >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-request-log ---
[INFO] 
[INFO] <<< maven-source-plugin:2.4:test-jar (default) < generate-sources @ maha-request-log <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:test-jar (default) @ maha-request-log ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/request-log/target/maha-request-log-6.24-SNAPSHOT-test-sources.jar
[INFO] 
[INFO] --- maven-jar-plugin:2.6:test-jar (default) @ maha-request-log ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/request-log/target/maha-request-log-6.24-SNAPSHOT-tests.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ maha-request-log ---
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/request-log/target/maha-request-log-6.24-SNAPSHOT.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-request-log/6.24-SNAPSHOT/maha-request-log-6.24-SNAPSHOT.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/request-log/pom.xml to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-request-log/6.24-SNAPSHOT/maha-request-log-6.24-SNAPSHOT.pom
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/request-log/target/maha-request-log-6.24-SNAPSHOT-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-request-log/6.24-SNAPSHOT/maha-request-log-6.24-SNAPSHOT-sources.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/request-log/target/maha-request-log-6.24-SNAPSHOT-test-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-request-log/6.24-SNAPSHOT/maha-request-log-6.24-SNAPSHOT-test-sources.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/request-log/target/maha-request-log-6.24-SNAPSHOT-tests.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-request-log/6.24-SNAPSHOT/maha-request-log-6.24-SNAPSHOT-tests.jar
[INFO] 
[INFO] >>> scoverage-maven-plugin:1.4.1:report (coverage) > [scoverage]test @ maha-request-log >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-request-log ---
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:pre-compile (coverage) @ maha-request-log ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-request-log ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/lgadde/git/Native-Ads/maha/request-log/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ maha-request-log ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 1 source file to /Users/lgadde/git/Native-Ads/maha/request-log/target/scoverage-classes
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-request-log ---
[INFO] /Users/lgadde/git/Native-Ads/maha/request-log/src/main/java:-1: info: compiling
[INFO] /Users/lgadde/git/Native-Ads/maha/request-log/src/main/scala:-1: info: compiling
[INFO] /Users/lgadde/git/Native-Ads/maha/request-log/target/generated-sources/annotations:-1: info: compiling
[INFO] Compiling 5 source files to /Users/lgadde/git/Native-Ads/maha/request-log/target/scoverage-classes at 1605028191687
[INFO] Cleaning datadir [/Users/lgadde/git/Native-Ads/maha/request-log/target/scoverage-data]
[INFO] Beginning coverage instrumentation
[INFO] Instrumentation completed [194 statements]
[INFO] Wrote instrumentation file [/Users/lgadde/git/Native-Ads/maha/request-log/target/scoverage-data/scoverage.coverage]
[INFO] Will write measurement data to [/Users/lgadde/git/Native-Ads/maha/request-log/target/scoverage-data]
[INFO] prepare-compile in 0 s
[INFO] compile in 7 s
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:post-compile (coverage) @ maha-request-log ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-request-log ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ maha-request-log ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-request-log ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-request-log ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running com.yahoo.maha.log.KafkaStringEventBatchTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.842 s - in com.yahoo.maha.log.KafkaStringEventBatchTest
[INFO] Running com.yahoo.maha.log.KryoStringEventBatchTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in com.yahoo.maha.log.KryoStringEventBatchTest
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- scalatest-maven-plugin:2.0.0:test (test) @ maha-request-log ---
Discovery starting.
Discovery completed in 260 milliseconds.
Run starting. Expected test count is: 6
KafkaMahaRequestLogWriterTest:
- Create blank, invalid requestLog
- RequestLogWriter Test
- Create a noopRequestLogWriter
- successfully return exception in future
- successfully return exception when logging disabled
- Multi Colo Request Log Writer Test
Run completed in 7 seconds, 590 milliseconds.
Total number of tests run: 6
Suites: completed 2, aborted 0
Tests: succeeded 6, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
[INFO] 
[INFO] <<< scoverage-maven-plugin:1.4.1:report (coverage) < [scoverage]test @ maha-request-log <<<
[INFO] 
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:report (coverage) @ maha-request-log ---
[INFO] Reading scoverage instrumentation [/Users/lgadde/git/Native-Ads/maha/request-log/target/scoverage-data/scoverage.coverage]...
[INFO] Reading scoverage measurements [/Users/lgadde/git/Native-Ads/maha/request-log/target/scoverage-data/scoverage.measurements.*]...
[INFO] Generating coverage reports...
[INFO] Written Cobertura XML report [/Users/lgadde/git/Native-Ads/maha/request-log/target/cobertura.xml]
[INFO] Written XML coverage report [/Users/lgadde/git/Native-Ads/maha/request-log/target/scoverage.xml]
[INFO] Written HTML coverage report [/Users/lgadde/git/Native-Ads/maha/request-log/target/site/scoverage/index.html]
[INFO] Statement coverage.: 94.85%
[INFO] Branch coverage....: 87.50%
[INFO] Coverage reports completed.
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:check-only (coverage) @ maha-request-log ---
[INFO] Statement coverage.: 94.85%
[INFO] Branch coverage....: 87.50%
[INFO] Coverage is above minimum [94.85% >= 90.00%]
[INFO] 
[INFO] -----------------< com.yahoo.maha:maha-druid-lookups >------------------
[INFO] Building maha-druid-lookups 6.24-SNAPSHOT                         [5/15]
[INFO] --------------------------------[ jar ]---------------------------------
[WARNING] The POM for com.google.inject:guice:jar:4.2.3-SNAPSHOT is missing, no dependency information available
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ maha-druid-lookups ---
[INFO] Deleting /Users/lgadde/git/Native-Ads/maha/druid-lookups/target
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-druid-lookups ---
[INFO] Add Source directory: /Users/lgadde/git/Native-Ads/maha/druid-lookups/src/main/scala
[INFO] Add Test Source directory: /Users/lgadde/git/Native-Ads/maha/druid-lookups/src/test/scala
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:prepare-agent (prepare-agent) @ maha-druid-lookups ---
[INFO] surefireArgLine set to -javaagent:/Users/lgadde/.m2/repository/org/jacoco/org.jacoco.agent/0.8.5/org.jacoco.agent-0.8.5-runtime.jar=destfile=/Users/lgadde/git/Native-Ads/maha/druid-lookups/target/jacoco.exec
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-druid-lookups ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ maha-druid-lookups ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 68 source files to /Users/lgadde/git/Native-Ads/maha/druid-lookups/target/classes
[INFO] /Users/lgadde/git/Native-Ads/maha/druid-lookups/src/main/java/com/yahoo/maha/maha_druid_lookups/server/lookup/namespace/KafkaManager.java: Some input files use or override a deprecated API.
[INFO] /Users/lgadde/git/Native-Ads/maha/druid-lookups/src/main/java/com/yahoo/maha/maha_druid_lookups/server/lookup/namespace/KafkaManager.java: Recompile with -Xlint:deprecation for details.
[INFO] /Users/lgadde/git/Native-Ads/maha/druid-lookups/src/main/java/com/yahoo/maha/maha_druid_lookups/server/lookup/namespace/AuthHeaderFactory.java: Some input files use unchecked or unsafe operations.
[INFO] /Users/lgadde/git/Native-Ads/maha/druid-lookups/src/main/java/com/yahoo/maha/maha_druid_lookups/server/lookup/namespace/AuthHeaderFactory.java: Recompile with -Xlint:unchecked for details.
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-druid-lookups ---
[INFO] /Users/lgadde/git/Native-Ads/maha/druid-lookups/src/main/java:-1: info: compiling
[INFO] /Users/lgadde/git/Native-Ads/maha/druid-lookups/target/generated-sources/annotations:-1: info: compiling
[INFO] Compiling 68 source files to /Users/lgadde/git/Native-Ads/maha/druid-lookups/target/classes at 1605028216902
[INFO] prepare-compile in 0 s
[INFO] compile in 3 s
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-druid-lookups ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 10 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ maha-druid-lookups ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 28 source files to /Users/lgadde/git/Native-Ads/maha/druid-lookups/target/test-classes
[INFO] /Users/lgadde/git/Native-Ads/maha/druid-lookups/src/test/java/com/yahoo/maha/maha_druid_lookups/missing/lookup/MissingLookupManagerTest.java: /Users/lgadde/git/Native-Ads/maha/druid-lookups/src/test/java/com/yahoo/maha/maha_druid_lookups/missing/lookup/MissingLookupManagerTest.java uses or overrides a deprecated API.
[INFO] /Users/lgadde/git/Native-Ads/maha/druid-lookups/src/test/java/com/yahoo/maha/maha_druid_lookups/missing/lookup/MissingLookupManagerTest.java: Recompile with -Xlint:deprecation for details.
[INFO] /Users/lgadde/git/Native-Ads/maha/druid-lookups/src/test/java/com/yahoo/maha/maha_druid_lookups/query/lookup/namespace/RocksDBExtractionNamespaceTest.java: Some input files use unchecked or unsafe operations.
[INFO] /Users/lgadde/git/Native-Ads/maha/druid-lookups/src/test/java/com/yahoo/maha/maha_druid_lookups/query/lookup/namespace/RocksDBExtractionNamespaceTest.java: Recompile with -Xlint:unchecked for details.
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-druid-lookups ---
[INFO] /Users/lgadde/git/Native-Ads/maha/druid-lookups/src/test/java:-1: info: compiling
[INFO] /Users/lgadde/git/Native-Ads/maha/druid-lookups/target/generated-test-sources/test-annotations:-1: info: compiling
[INFO] Compiling 28 source files to /Users/lgadde/git/Native-Ads/maha/druid-lookups/target/test-classes at 1605028223439
[INFO] prepare-compile in 0 s
[INFO] compile in 3 s
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-druid-lookups ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.cache.OnHeapMahaExtractionCacheManagerTest
[INFO] Running com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.JdbcSqlLocalQueryTest
[INFO] Running com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.MahaNamespacesCacheResourceTest
[INFO] Running com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.RocksDBExtractionNamespaceCacheFactoryTest
[INFO] Running com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.entity.TestProtobufSchemaFactory
[INFO] Running com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.MongoExtractionNamespaceCacheFactoryTest
[INFO] Running com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.entity.TestPasswordProvider
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.078 s - in com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.cache.OnHeapMahaExtractionCacheManagerTest
[INFO] Running com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.MahaNamespaceExtractionModuleTest
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.164 s - in com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.entity.TestPasswordProvider
[INFO] Running com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.schema.flatbuffer.TestFlatBufferSchemaFactory
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.314 s - in com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.entity.TestProtobufSchemaFactory
[INFO] Running com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.RocksDBExtractionNamespaceCacheFactoryFlatBufferTest
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.039 s - in com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.schema.flatbuffer.TestFlatBufferSchemaFactory
[INFO] Running com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.JdbcH2QueryTest
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.501 s - in com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.JdbcSqlLocalQueryTest
[INFO] Running com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.JDBCExtractionNamespaceCacheFactoryTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.842 s - in com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.JDBCExtractionNamespaceCacheFactoryTest
[INFO] Running com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.JdbcExtractionNamespaceCacheFactorySqlLocalQueryTest
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.041 s - in com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.JdbcExtractionNamespaceCacheFactorySqlLocalQueryTest
[INFO] Running com.yahoo.maha.maha_druid_lookups.missing.lookup.MissingLookupManagerTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 7.573 s - in com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.MahaNamespacesCacheResourceTest
[INFO] Running com.yahoo.maha.maha_druid_lookups.query.lookup.MahaRegisteredLookupExtractionFnTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.849 s - in com.yahoo.maha.maha_druid_lookups.query.lookup.MahaRegisteredLookupExtractionFnTest
[INFO] Running com.yahoo.maha.maha_druid_lookups.query.lookup.namespace.RocksDBExtractionNamespaceTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 7.836 s - in com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.RocksDBExtractionNamespaceCacheFactoryFlatBufferTest
[INFO] Running com.yahoo.maha.maha_druid_lookups.query.lookup.namespace.MongoExtractionNamespaceTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 9.184 s - in com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.RocksDBExtractionNamespaceCacheFactoryTest
[INFO] Running com.yahoo.maha.maha_druid_lookups.query.lookup.namespace.MongoStorageConnectorConfigTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.506 s - in com.yahoo.maha.maha_druid_lookups.query.lookup.namespace.RocksDBExtractionNamespaceTest
[INFO] Running com.yahoo.maha.maha_druid_lookups.query.lookup.JDBCLookupExtractorTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.162 s - in com.yahoo.maha.maha_druid_lookups.query.lookup.JDBCLookupExtractorTest
[INFO] Running com.yahoo.maha.maha_druid_lookups.query.lookup.MahaLookupExtractionFactoryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.744 s - in com.yahoo.maha.maha_druid_lookups.query.lookup.namespace.MongoExtractionNamespaceTest
[INFO] Running com.yahoo.maha.maha_druid_lookups.query.lookup.MongoLookupExtractorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.645 s - in com.yahoo.maha.maha_druid_lookups.query.lookup.namespace.MongoStorageConnectorConfigTest
[INFO] Running com.yahoo.maha.maha_druid_lookups.query.lookup.RocksDBLookupExtractorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.173 s - in com.yahoo.maha.maha_druid_lookups.missing.lookup.MissingLookupManagerTest
[INFO] Running com.yahoo.maha.maha_druid_lookups.query.lookup.RocksDBLookupExtractorWithFlatBufferTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.003 s - in com.yahoo.maha.maha_druid_lookups.query.lookup.RocksDBLookupExtractorTest
[INFO] Running com.yahoo.maha.maha_druid_lookups.TestMongoServer
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 s - in com.yahoo.maha.maha_druid_lookups.TestMongoServer
[INFO] Running com.yahoo.maha.query.aggregation.RoundingDoubleSumAggregatorFactoryTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.089 s - in com.yahoo.maha.query.aggregation.RoundingDoubleSumAggregatorFactoryTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 12.99 s - in com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.JdbcH2QueryTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.509 s - in com.yahoo.maha.maha_druid_lookups.query.lookup.MongoLookupExtractorTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.42 s - in com.yahoo.maha.maha_druid_lookups.query.lookup.RocksDBLookupExtractorWithFlatBufferTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 18.483 s - in com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.MongoExtractionNamespaceCacheFactoryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 18.879 s - in com.yahoo.maha.maha_druid_lookups.server.lookup.namespace.MahaNamespaceExtractionModuleTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 11.238 s - in com.yahoo.maha.maha_druid_lookups.query.lookup.MahaLookupExtractionFactoryTest
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 79, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:report (report) @ maha-druid-lookups ---
[INFO] Loading execution data file /Users/lgadde/git/Native-Ads/maha/druid-lookups/target/jacoco.exec
[INFO] Analyzed bundle 'maha-druid-lookups' with 87 classes
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:check (check) @ maha-druid-lookups ---
[INFO] Loading execution data file /Users/lgadde/git/Native-Ads/maha/druid-lookups/target/jacoco.exec
[INFO] Analyzed bundle 'maha-druid-lookups' with 87 classes
[INFO] All coverage checks have been met.
[INFO] 
[INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ maha-druid-lookups ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/druid-lookups/target/maha-druid-lookups-6.24-SNAPSHOT.jar
[INFO] 
[INFO] --- maven-assembly-plugin:2.2-beta-5:single (default) @ maha-druid-lookups ---
[INFO] Reading assembly descriptor: src/main/assembly/druid-lookups.xml
[WARNING] The following patterns were never triggered in this artifact exclusion filter:
o  'net.jpountz.lz4:lz4'

[INFO] Building zip: /Users/lgadde/git/Native-Ads/maha/druid-lookups/target/maha-druid-lookups-6.24-SNAPSHOT.zip
[INFO] 
[INFO] --- maven-jar-plugin:2.6:test-jar (default) @ maha-druid-lookups ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/druid-lookups/target/maha-druid-lookups-6.24-SNAPSHOT-tests.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ maha-druid-lookups ---
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/druid-lookups/target/maha-druid-lookups-6.24-SNAPSHOT.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-druid-lookups/6.24-SNAPSHOT/maha-druid-lookups-6.24-SNAPSHOT.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/druid-lookups/pom.xml to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-druid-lookups/6.24-SNAPSHOT/maha-druid-lookups-6.24-SNAPSHOT.pom
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/druid-lookups/target/maha-druid-lookups-6.24-SNAPSHOT.zip to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-druid-lookups/6.24-SNAPSHOT/maha-druid-lookups-6.24-SNAPSHOT.zip
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/druid-lookups/target/maha-druid-lookups-6.24-SNAPSHOT-tests.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-druid-lookups/6.24-SNAPSHOT/maha-druid-lookups-6.24-SNAPSHOT-tests.jar
[INFO] 
[INFO] >>> scoverage-maven-plugin:1.4.1:report (coverage) > [scoverage]test @ maha-druid-lookups >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-druid-lookups ---
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:prepare-agent (prepare-agent) @ maha-druid-lookups ---
[INFO] surefireArgLine set to -javaagent:/Users/lgadde/.m2/repository/org/jacoco/org.jacoco.agent/0.8.5/org.jacoco.agent-0.8.5-runtime.jar=destfile=/Users/lgadde/git/Native-Ads/maha/druid-lookups/target/jacoco.exec
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:pre-compile (coverage) @ maha-druid-lookups ---
[INFO] Skipping Scoverage execution
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-druid-lookups ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ maha-druid-lookups ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 68 source files to /Users/lgadde/git/Native-Ads/maha/druid-lookups/target/classes
[INFO] /Users/lgadde/git/Native-Ads/maha/druid-lookups/src/main/java/com/yahoo/maha/maha_druid_lookups/server/lookup/namespace/KafkaManager.java: Some input files use or override a deprecated API.
[INFO] /Users/lgadde/git/Native-Ads/maha/druid-lookups/src/main/java/com/yahoo/maha/maha_druid_lookups/server/lookup/namespace/KafkaManager.java: Recompile with -Xlint:deprecation for details.
[INFO] /Users/lgadde/git/Native-Ads/maha/druid-lookups/src/main/java/com/yahoo/maha/maha_druid_lookups/server/lookup/namespace/AuthHeaderFactory.java: Some input files use unchecked or unsafe operations.
[INFO] /Users/lgadde/git/Native-Ads/maha/druid-lookups/src/main/java/com/yahoo/maha/maha_druid_lookups/server/lookup/namespace/AuthHeaderFactory.java: Recompile with -Xlint:unchecked for details.
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-druid-lookups ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:post-compile (coverage) @ maha-druid-lookups ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-druid-lookups ---
[INFO] Not copying test resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ maha-druid-lookups ---
[INFO] Not compiling test sources
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-druid-lookups ---
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-druid-lookups ---
[INFO] Tests are skipped.
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:report (report) @ maha-druid-lookups ---
[INFO] Loading execution data file /Users/lgadde/git/Native-Ads/maha/druid-lookups/target/jacoco.exec
[INFO] Analyzed bundle 'maha-druid-lookups' with 87 classes
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:check (check) @ maha-druid-lookups ---
[INFO] Loading execution data file /Users/lgadde/git/Native-Ads/maha/druid-lookups/target/jacoco.exec
[INFO] Analyzed bundle 'maha-druid-lookups' with 87 classes
[INFO] All coverage checks have been met.
[INFO] 
[INFO] <<< scoverage-maven-plugin:1.4.1:report (coverage) < [scoverage]test @ maha-druid-lookups <<<
[INFO] 
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:report (coverage) @ maha-druid-lookups ---
[INFO] Skipping SCoverage report generation
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:check-only (coverage) @ maha-druid-lookups ---
[INFO] Skipping Scoverage execution
[INFO] 
[INFO] ----------------------< com.yahoo.maha:maha-core >----------------------
[INFO] Building maha core 6.24-SNAPSHOT                                  [6/15]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ maha-core ---
[INFO] Deleting /Users/lgadde/git/Native-Ads/maha/core/target
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-core ---
[INFO] Add Source directory: /Users/lgadde/git/Native-Ads/maha/core/src/main/scala
[INFO] Add Test Source directory: /Users/lgadde/git/Native-Ads/maha/core/src/test/scala
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ maha-core ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-core ---
[INFO] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala:-1: info: compiling
[INFO] Compiling 81 source files to /Users/lgadde/git/Native-Ads/maha/core/target/classes at 1605028267878
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/BaseUTCTimeProvider.scala:259: warning: local val sortedHours in method updateHours is never used
[WARNING]         val sortedHours = hours.sortWith((x, y) => HourlyGrain.getAsInt(x) < HourlyGrain.getAsInt(y))
[WARNING]             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/Column.scala:6: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JObject, JValue}
[WARNING]                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/Column.scala:6: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JObject, JValue}
[WARNING]                                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/ColumnAnnotation.scala:5: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JNull, JObject, JValue}
[WARNING]                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/ColumnAnnotation.scala:5: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JNull, JObject, JValue}
[WARNING]                                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/DataType.scala:7: warning: Unused import
[WARNING] import com.github.benmanes.caffeine.cache.{Cache, CacheLoader, Caffeine, LoadingCache}
[WARNING]                                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/DataType.scala:10: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JNull, JObject, JValue}
[WARNING]                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/DataType.scala:10: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JNull, JObject, JValue}
[WARNING]                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/DerivedExpression.scala:22: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JNull, JObject, JValue}
[WARNING]                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/DerivedExpression.scala:22: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JNull, JObject, JValue}
[WARNING]                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/DerivedExpression.scala:22: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JNull, JObject, JValue}
[WARNING]                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/DerivedExpression.scala:636: warning: local val expression in method / is never used
[WARNING]       val expression = if(that.hasNumericOperation) {
[WARNING]           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/FilterOperation.scala:1588: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: filter.field, outerColName
[WARNING]  after adaptation: ArrowAssoc.->((filter.field, outerColName): (String, String))
[WARNING]     renderFilterWithAlias(filter, Map(filter.field -> (filter.field, outerColName)), column, engine, literalMapper, grainOption = grainOption)
[WARNING]                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/FilterOperation.scala:1945: warning: Unused import
[WARNING]       import _root_.scalaz.Success
[WARNING]                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/FilterOperation.scala:1131: warning: local val exFn in value selectorList is never used
[WARNING]             val exFn = new TimeFormatExtractionFn(fmt, timezone, null, null, false)
[WARNING]                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/FilterOperation.scala:1176: warning: local val exFn in value selectorList is never used
[WARNING]             val exFn = new TimeFormatExtractionFn(fmt, timezone, null, null, false)
[WARNING]                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/FilterOperation.scala:1318: warning: local val grain in method renderFilterDim is never used
[WARNING]     val grain = grainOption.getOrElse(DailyGrain)
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/PostResultFunction.scala:81: warning: non-variable type argument com.yahoo.maha.core.Column in type Some[com.yahoo.maha.core.Column] is unchecked since it is eliminated by erasure
[WARNING]         if(mapValue.isInstanceOf[Some[Column]]) {
[WARNING]                                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/PostResultFunction.scala:5: warning: Unused import
[WARNING] import com.yahoo.maha.core.fact.DruidDerFactCol
[WARNING]                                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/PostResultFunction.scala:12: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JNull, JObject, JValue}
[WARNING]                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/PostResultFunction.scala:12: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JNull, JObject, JValue}
[WARNING]                                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/RequestModel.scala:367: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: MapLike.get(key: K): Option[V]
[WARNING]   given arguments: request.requestType, queryGrain.getOrElse(DailyGrain)
[WARNING]  after adaptation: MapLike.get((request.requestType, queryGrain.getOrElse(DailyGrain)): (com.yahoo.maha.core.request.RequestType, com.yahoo.maha.core.Grain))
[WARNING]           val maxDaysWindowOption = publicFact.maxDaysWindow.get(request.requestType, queryGrain.getOrElse(DailyGrain))
[WARNING]                                                                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/RequestModel.scala:368: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: MapLike.get(key: K): Option[V]
[WARNING]   given arguments: request.requestType, queryGrain.getOrElse(DailyGrain)
[WARNING]  after adaptation: MapLike.get((request.requestType, queryGrain.getOrElse(DailyGrain)): (com.yahoo.maha.core.request.RequestType, com.yahoo.maha.core.Grain))
[WARNING]           val maxDaysLookBackOption = publicFact.maxDaysLookBack.get(request.requestType, queryGrain.getOrElse(DailyGrain))
[WARNING]                                                                     ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/RequestModel.scala:461: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: MapLike.contains(key: K): Boolean
[WARNING]   given arguments: registry.getDimColIdentity(reqCol).get.publcDimName, publicFact.dimRevision
[WARNING]  after adaptation: MapLike.contains((registry.getDimColIdentity(reqCol).get.publcDimName, publicFact.dimRevision): (String, Int))
[WARNING]                 .filter(reqCol => registry.getDimColIdentity(reqCol).isDefined && registry.dimMap.contains(registry.getDimColIdentity(reqCol).get.publcDimName, publicFact.dimRevision))
[WARNING]                                                                                                           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/RequestModel.scala:462: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: MapLike.apply(key: K): V
[WARNING]   given arguments: registry.getDimColIdentity(reqCol).get.publcDimName, publicFact.dimRevision
[WARNING]  after adaptation: MapLike((registry.getDimColIdentity(reqCol).get.publcDimName, publicFact.dimRevision): (String, Int))
[WARNING]                 .map(reqCol => reqCol -> registry.dimMap(registry.getDimColIdentity(reqCol).get.publcDimName, publicFact.dimRevision))
[WARNING]                                                         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/RequestModel.scala:471: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: MapLike.contains(key: K): Boolean
[WARNING]   given arguments: pdName, publicFact.dimToRevisionMap(pdName)
[WARNING]  after adaptation: MapLike.contains((pdName, publicFact.dimToRevisionMap(pdName)): (String, Int))
[WARNING]                       publicFact.dimToRevisionMap.contains(pdName) && registry.dimMap.contains(pdName, publicFact.dimToRevisionMap(pdName))
[WARNING]                                                                                               ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/RequestModel.scala:477: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: MapLike.apply(key: K): V
[WARNING]   given arguments: pdName, publicFact.dimToRevisionMap(pdName)
[WARNING]  after adaptation: MapLike((pdName, publicFact.dimToRevisionMap(pdName)): (String, Int))
[WARNING]                     reqCol -> registry.dimMap(pdName, publicFact.dimToRevisionMap(pdName))
[WARNING]                                              ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/RequestModel.scala:5: warning: Unused import
[WARNING] import com.yahoo.maha.core
[WARNING]                       ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/RequestModel.scala:6: warning: Unused import
[WARNING] import com.yahoo.maha.core.MetaType.MetaType
[WARNING]                                     ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/RequestModel.scala:8: warning: Unused import
[WARNING] import com.yahoo.maha.core.dimension.{PublicDim, PublicDimension, RequiredAlias}
[WARNING]                                       ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/RequestModel.scala:17: warning: Unused import
[WARNING] import org.joda.time.DateTimeZone
[WARNING]                      ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/dimension/Dimension.scala:13: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JObject, JValue}
[WARNING]                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/dimension/Dimension.scala:13: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JObject, JValue}
[WARNING]                                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/dimension/Dimension.scala:1018: warning: private val aliasColumnMap in class PublicDim is never used
[WARNING]   private[this] val aliasColumnMap = columns.map(col => (col.alias, col.name)).toMap
[WARNING]                     ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/fact/Fact.scala:16: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JNull, JObject, JValue}
[WARNING]                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/fact/Fact.scala:16: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JNull, JObject, JValue}
[WARNING]                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/fact/Fact.scala:16: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JNull, JObject, JValue}
[WARNING]                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/fact/RollupExpression.scala:6: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JObject}
[WARNING]                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/HivePrestoQueryCommon.scala:232: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: LinkedHashSet.add(elem: A): Boolean
[WARNING]   given arguments: parentCol.get._2, parentCol.get._1
[WARNING]  after adaptation: LinkedHashSet.add((parentCol.get._2, parentCol.get._1): (String, com.yahoo.maha.core.Column))
[WARNING]         noopRollupColSet.add(parentCol.get._2, parentCol.get._1)
[WARNING]                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/HivePrestoQueryCommon.scala:234: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: LinkedHashSet.add(elem: A): Boolean
[WARNING]   given arguments: alias, col
[WARNING]  after adaptation: LinkedHashSet.add((alias, col): (String, com.yahoo.maha.core.Column))
[WARNING]         noopRollupColSet.add(alias, col)
[WARNING]                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/QueryGenerator.scala:296: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: nameOrAlias, colFn(column)
[WARNING]  after adaptation: ArrowAssoc.->((nameOrAlias, colFn(column)): (String, String))
[WARNING]       Map(name -> (nameOrAlias, colFn(column)))
[WARNING]                ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/QueryGenerator.scala:7: warning: Unused import
[WARNING] import com.yahoo.maha.core.fact.{Fact, FactBestCandidate, FactCol, PublicFact}
[WARNING]                                                           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/QueryGenerator.scala:8: warning: Unused import
[WARNING] import com.yahoo.maha.core.query.Version.{v0, v1, v2}
[WARNING]                                           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/QueryGenerator.scala:8: warning: Unused import
[WARNING] import com.yahoo.maha.core.query.Version.{v0, v1, v2}
[WARNING]                                               ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/QueryGenerator.scala:8: warning: Unused import
[WARNING] import com.yahoo.maha.core.query.Version.{v0, v1, v2}
[WARNING]                                                   ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/QueryGenerator.scala:37: warning: private val columnToAliasNames in class QueryBuilderContext is never used
[WARNING]   private[this] val columnToAliasNames =  new mutable.HashMap[String, mutable.TreeSet[String]]
[WARNING]                     ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/QueryGenerator.scala:202: warning: private val logger in trait BaseQueryGenerator is never used
[WARNING]   private val logger = LoggerFactory.getLogger(classOf[BaseQueryGenerator[T]])
[WARNING]               ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/QueryGenerator.scala:318: warning: local var fMap in method handleFilterSqlRender is never updated: consider using immutable val
[WARNING]     var fMap = new mutable.HashMap[String, (String, String)]()
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/QueryPipeline.scala:670: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: HashMap.contains(key: A): Boolean
[WARNING]   given arguments: dc.dim.name, engine
[WARNING]  after adaptation: HashMap.contains((dc.dim.name, engine): (String, com.yahoo.maha.core.Engine))
[WARNING]             if (publicDimToConcreteDimMapWhichCanSupportAllDim.contains(dc.dim.name, engine)) {
[WARNING]                                                                        ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/QueryPipeline.scala:742: warning: private default argument in class DefaultQueryPipelineFactory is never used
[WARNING]   private[this] def getFactQuery(bestFactCandidate: FactBestCandidate, requestModel: => RequestModel, indexAlias: String, factGroupByKeys: List[String], queryGenVersion: Version, bestDimCandidates: Option[SortedSet[DimensionBundle]] = None): Query = {
[WARNING]                                                                                                                                                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/QueryPipeline.scala:589: warning: local var dc in method findBestDimCandidates is never updated: consider using immutable val
[WARNING]         var dc = bundles.filter(_.dim.engine == factEngine)
[WARNING]             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/RowList.scala:5: warning: Unused import
[WARNING] import com.twitter.chill.ScalaKryoInstantiator
[WARNING]                          ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/RowList.scala:9: warning: Unused import
[WARNING] import com.yahoo.maha.serde.SerDe
[WARNING]                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/RowList.scala:10: warning: Unused import
[WARNING] import org.json4s.JValue
[WARNING]                   ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/RowList.scala:711: warning: private var rowsWritten in class CSVRowList is never used
[WARNING]   private[this] var rowsWritten: Int = 0
[WARNING]                     ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/druid/DruidQueryGenerator.scala:48: warning: Unused import
[WARNING] import org.apache.druid.query.lookup.LookupReferencesManager;
[WARNING]                                      ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/druid/DruidQueryGenerator.scala:549: warning: local val maximumMaxRowsForReq in method generateFactQuery is never used
[WARNING]         val maximumMaxRowsForReq = if (queryContext.requestModel.isAsyncRequest) maximumMaxRowsAsync else maximumMaxRows
[WARNING]             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/druid/DruidQueryGenerator.scala:1328: warning: local val name in method renderColumnWithAliasUsingDimensionBundle is never used
[WARNING]       val name = column.alias.getOrElse(column.name)
[WARNING]           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/hive/HiveOuterGroupByQueryGenerator.scala:315: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: HivePrestoQueryCommon.concat(tuple: (String, String)): String
[WARNING]   given arguments: renderedCol, renderedAlias
[WARNING]  after adaptation: HivePrestoQueryCommon.concat((renderedCol, renderedAlias): (String, String))
[WARNING]             queryBuilder.addPreOuterColumn(concat(renderedCol, renderedAlias))
[WARNING]                                                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/hive/HiveOuterGroupByQueryGenerator.scala:324: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: HivePrestoQueryCommon.concat(tuple: (String, String)): String
[WARNING]   given arguments: renderedCol, renderedAlias
[WARNING]  after adaptation: HivePrestoQueryCommon.concat((renderedCol, renderedAlias): (String, String))
[WARNING]         queryBuilder.addPreOuterColumn(concat(renderedCol, renderedAlias))
[WARNING]                                              ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/hive/HiveOuterGroupByQueryGenerator.scala:339: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: HivePrestoQueryCommon.concat(tuple: (String, String)): String
[WARNING]   given arguments: StringContext("", " ", "").s(renderedCol, renderedAlias), ""
[WARNING]  after adaptation: HivePrestoQueryCommon.concat((StringContext("", " ", "").s(renderedCol, renderedAlias), ""): (String, String))
[WARNING]             queryBuilder.addPreOuterColumn(concat(s"$renderedCol $renderedAlias",""))
[WARNING]                                                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/hive/HiveOuterGroupByQueryGenerator.scala:25: warning: local val publicFact in method generateOuterGroupByQuery is never used
[WARNING]     val publicFact = queryContext.factBestCandidate.publicFact
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/hive/HiveOuterGroupByQueryGenerator.scala:31: warning: local val requestedCols in method generateOuterGroupByQuery is never used
[WARNING]     val requestedCols = queryContext.requestModel.requestCols
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/hive/HiveOuterGroupByQueryGenerator.scala:282: warning: local val isFactOnlyQuery in method ogbGeneratePreOuterColumns is never used
[WARNING]     val isFactOnlyQuery = queryContext.dims.isEmpty
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/hive/HiveQueryGenerator.scala:49: warning: local val publicFact in method generateQuery is never used
[WARNING]     val publicFact = queryContext.factBestCandidate.publicFact
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/hive/HiveQueryGenerator.scala:58: warning: local default argument in method generateQuery is never used
[WARNING]     def renderOuterColumn(columnInfo: ColumnInfo, queryBuilderContext: QueryBuilderContext, duplicateAliasMapping: Map[String, Set[String]], factCandidate: FactBestCandidate, isOuterGroupBy: Boolean = false): (String,String) = {
[WARNING]                                                                                                                                                                                ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/hive/HiveQueryGenerator.scala:106: warning: local default argument in method generateQuery is never used
[WARNING]     def renderRollupExpression(expression: String, rollupExpression: RollupExpression, renderedColExp: Option[String] = None) : String = {
[WARNING]                                                                                        ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/hive/HiveQueryGeneratorCommon.scala:92: warning: local val renderedAlias in value $anonfun is never used
[WARNING]           val renderedAlias = s""""$alias""""
[WARNING]               ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/hive/HiveQueryGeneratorV2.scala:48: warning: local val publicFact in method generateQuery is never used
[WARNING]     val publicFact = queryContext.factBestCandidate.publicFact
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleOuterGroupByQueryGenerator.scala:127: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: name1, exp
[WARNING]  after adaptation: ArrowAssoc.->((name1, exp): (String, String))
[WARNING]                   Map(alias -> (name1, exp)),
[WARNING]                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleOuterGroupByQueryGenerator.scala:150: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: name2, exp
[WARNING]  after adaptation: ArrowAssoc.->((name2, exp): (String, String))
[WARNING]                   Map(alias -> (name2, exp), alias2 -> (name2, exp2)),
[WARNING]                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleOuterGroupByQueryGenerator.scala:150: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: name2, exp2
[WARNING]  after adaptation: ArrowAssoc.->((name2, exp2): (String, String))
[WARNING]                   Map(alias -> (name2, exp), alias2 -> (name2, exp2)),
[WARNING]                                                     ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleOuterGroupByQueryGenerator.scala:387: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: LinkedHashSet.add(elem: A): Boolean
[WARNING]   given arguments: parentCol.get._2, parentCol.get._1
[WARNING]  after adaptation: LinkedHashSet.add((parentCol.get._2, parentCol.get._1): (String, com.yahoo.maha.core.Column))
[WARNING]             noopRollupColSet.add(parentCol.get._2, parentCol.get._1)
[WARNING]                                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleOuterGroupByQueryGenerator.scala:389: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: LinkedHashSet.add(elem: A): Boolean
[WARNING]   given arguments: alias, col
[WARNING]  after adaptation: LinkedHashSet.add((alias, col): (String, com.yahoo.maha.core.Column))
[WARNING]             noopRollupColSet.add(alias, col)
[WARNING]                                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleOuterGroupByQueryGenerator.scala:564: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: OracleQueryCommon.concat(tuple: (String, String)): String
[WARNING]   given arguments: renderedCol, renderedAlias
[WARNING]  after adaptation: OracleQueryCommon.concat((renderedCol, renderedAlias): (String, String))
[WARNING]               queryBuilder.addPreOuterColumn(concat(renderedCol, renderedAlias))
[WARNING]                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleOuterGroupByQueryGenerator.scala:574: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: OracleQueryCommon.concat(tuple: (String, String)): String
[WARNING]   given arguments: renderedCol, renderedAlias
[WARNING]  after adaptation: OracleQueryCommon.concat((renderedCol, renderedAlias): (String, String))
[WARNING]           queryBuilder.addPreOuterColumn(concat(renderedCol, renderedAlias))
[WARNING]                                                ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleOuterGroupByQueryGenerator.scala:588: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: OracleQueryCommon.concat(tuple: (String, String)): String
[WARNING]   given arguments: StringContext("", " ", "").s(renderedCol, renderedAlias), ""
[WARNING]  after adaptation: OracleQueryCommon.concat((StringContext("", " ", "").s(renderedCol, renderedAlias), ""): (String, String))
[WARNING]               queryBuilder.addPreOuterColumn(concat(s"$renderedCol $renderedAlias",""))
[WARNING]                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleOuterGroupByQueryGenerator.scala:210: warning: local val factTableAlias in method ogbGenerateFactViewColumns is never used
[WARNING]       val factTableAlias = queryBuilderContext.getAliasForTable(queryContext.factBestCandidate.fact.name)
[WARNING]           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleQueryGenerator.scala:858: warning: local method toChar in method applyDataTypeCleanup is never used
[WARNING]     def toChar(alias: String): String = s"""to_char($alias)"""
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleQueryGenerator.scala:1152: warning: local val factTableAlias in method generateFactViewColumns is never used
[WARNING]       val factTableAlias = queryBuilderContext.getAliasForTable(queryContext.factBestCandidate.fact.name)
[WARNING]           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleQueryGenerator.scala:1196: warning: local val renderedAlias in value $anonfun is never used
[WARNING]             val renderedAlias = s""""$alias""""
[WARNING]                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleQueryGenerator.scala:1207: warning: local val renderedAlias in value $anonfun is never used
[WARNING]             val renderedAlias = s""""$alias""""
[WARNING]                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresOuterGroupByQueryGenerator.scala:127: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: name1, exp
[WARNING]  after adaptation: ArrowAssoc.->((name1, exp): (String, String))
[WARNING]                   Map(alias -> (name1, exp)),
[WARNING]                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresOuterGroupByQueryGenerator.scala:150: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: name2, exp
[WARNING]  after adaptation: ArrowAssoc.->((name2, exp): (String, String))
[WARNING]                   Map(alias -> (name2, exp), alias2 -> (name2, exp2)),
[WARNING]                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresOuterGroupByQueryGenerator.scala:150: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: name2, exp2
[WARNING]  after adaptation: ArrowAssoc.->((name2, exp2): (String, String))
[WARNING]                   Map(alias -> (name2, exp), alias2 -> (name2, exp2)),
[WARNING]                                                     ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresOuterGroupByQueryGenerator.scala:387: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: LinkedHashSet.add(elem: A): Boolean
[WARNING]   given arguments: parentCol.get._2, parentCol.get._1
[WARNING]  after adaptation: LinkedHashSet.add((parentCol.get._2, parentCol.get._1): (String, com.yahoo.maha.core.Column))
[WARNING]             noopRollupColSet.add(parentCol.get._2, parentCol.get._1)
[WARNING]                                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresOuterGroupByQueryGenerator.scala:389: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: LinkedHashSet.add(elem: A): Boolean
[WARNING]   given arguments: alias, col
[WARNING]  after adaptation: LinkedHashSet.add((alias, col): (String, com.yahoo.maha.core.Column))
[WARNING]             noopRollupColSet.add(alias, col)
[WARNING]                                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresOuterGroupByQueryGenerator.scala:560: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: PostgresQueryCommon.concat(tuple: (String, String)): String
[WARNING]   given arguments: renderedCol, renderedAlias
[WARNING]  after adaptation: PostgresQueryCommon.concat((renderedCol, renderedAlias): (String, String))
[WARNING]               queryBuilder.addPreOuterColumn(concat(renderedCol, renderedAlias))
[WARNING]                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresOuterGroupByQueryGenerator.scala:570: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: PostgresQueryCommon.concat(tuple: (String, String)): String
[WARNING]   given arguments: renderedCol, renderedAlias
[WARNING]  after adaptation: PostgresQueryCommon.concat((renderedCol, renderedAlias): (String, String))
[WARNING]           queryBuilder.addPreOuterColumn(concat(renderedCol, renderedAlias))
[WARNING]                                                ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresOuterGroupByQueryGenerator.scala:584: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: PostgresQueryCommon.concat(tuple: (String, String)): String
[WARNING]   given arguments: StringContext("", " ", "").s(renderedCol, renderedAlias), ""
[WARNING]  after adaptation: PostgresQueryCommon.concat((StringContext("", " ", "").s(renderedCol, renderedAlias), ""): (String, String))
[WARNING]               queryBuilder.addPreOuterColumn(concat(s"$renderedCol $renderedAlias",""))
[WARNING]                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresOuterGroupByQueryGenerator.scala:210: warning: local val factTableAlias in method ogbGenerateFactViewColumns is never used
[WARNING]       val factTableAlias = queryBuilderContext.getAliasForTable(queryContext.factBestCandidate.fact.name)
[WARNING]           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresQueryGenerator.scala:856: warning: local method toChar in method applyDataTypeCleanup is never used
[WARNING]     def toChar(alias: String): String = s"""to_char($alias)"""
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresQueryGenerator.scala:1150: warning: local val factTableAlias in method generateFactViewColumns is never used
[WARNING]       val factTableAlias = queryBuilderContext.getAliasForTable(queryContext.factBestCandidate.fact.name)
[WARNING]           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresQueryGenerator.scala:1194: warning: local val renderedAlias in value $anonfun is never used
[WARNING]             val renderedAlias = s""""$alias""""
[WARNING]                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresQueryGenerator.scala:1205: warning: local val renderedAlias in value $anonfun is never used
[WARNING]             val renderedAlias = s""""$alias""""
[WARNING]                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/presto/PrestoOuterGroupByQueryGenerator.scala:358: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: HivePrestoQueryCommon.concat(tuple: (String, String)): String
[WARNING]   given arguments: renderedCol, renderedAlias
[WARNING]  after adaptation: HivePrestoQueryCommon.concat((renderedCol, renderedAlias): (String, String))
[WARNING]             queryBuilder.addPreOuterColumn(concat(renderedCol, renderedAlias))
[WARNING]                                                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/presto/PrestoOuterGroupByQueryGenerator.scala:367: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: HivePrestoQueryCommon.concat(tuple: (String, String)): String
[WARNING]   given arguments: renderedCol, renderedAlias
[WARNING]  after adaptation: HivePrestoQueryCommon.concat((renderedCol, renderedAlias): (String, String))
[WARNING]         queryBuilder.addPreOuterColumn(concat(renderedCol, renderedAlias))
[WARNING]                                              ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/presto/PrestoOuterGroupByQueryGenerator.scala:382: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: HivePrestoQueryCommon.concat(tuple: (String, String)): String
[WARNING]   given arguments: StringContext("", " ", "").s(renderedCol, renderedAlias), ""
[WARNING]  after adaptation: HivePrestoQueryCommon.concat((StringContext("", " ", "").s(renderedCol, renderedAlias), ""): (String, String))
[WARNING]             queryBuilder.addPreOuterColumn(concat(s"$renderedCol $renderedAlias",""))
[WARNING]                                                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/presto/PrestoOuterGroupByQueryGenerator.scala:25: warning: local val publicFact in method generateOuterGroupByQuery is never used
[WARNING]     val publicFact = queryContext.factBestCandidate.publicFact
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/presto/PrestoOuterGroupByQueryGenerator.scala:32: warning: local val requestedCols in method generateOuterGroupByQuery is never used
[WARNING]     val requestedCols = queryContext.requestModel.requestCols
[WARNING]         ^
[WARNING] 131 warnings found
[INFO] prepare-compile in 0 s
[INFO] compile in 58 s
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 49 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ maha-core ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-core ---
[INFO] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala:-1: info: compiling
[INFO] Compiling 97 source files to /Users/lgadde/git/Native-Ads/maha/core/target/test-classes at 1605028327608
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/BaseUTCTimeProviderTest.scala:472: warning: local val expected in value <local BaseUTCTimeProviderTest> is never used
[WARNING]     val expected = if (getOffsetHours("Australia/Melbourne") == 10) "17" else "16";
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/ColumnAnnotationTest.scala:7: warning: Unused import
[WARNING] import org.json4s.JObject
[WARNING]                   ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/ColumnAnnotationTest.scala:69: warning: local val formats in value <local ColumnAnnotationTest> is never used
[WARNING]     implicit val formats = DefaultFormats
[WARNING]                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/ColumnTest.scala:19: warning: local val col2 in value $anonfun is never used
[WARNING]         val col2 = HiveDerFactCol("noop_rollup_spend", DecType(0, "0.0"), HiveDerivedExpression("{spend}" * "{forecasted_clicks}" / "{actual_clicks}" * "{recommended_bid}" / "{modified_bid}"), rollupExpression = NoopRollup, annotations = Set(EscapingRequired))
[WARNING]             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/ColumnTest.scala:31: warning: local val col in value $anonfun is never used
[WARNING]         val col = DimCol("dimcol1", IntType())
[WARNING]             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/DataTypeTest.scala:124: warning: local val date in value thrown is never used
[WARNING]       val date = DateType("XXXX-YY-ZZ")
[WARNING]           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/DataTypeTest.scala:146: warning: local val validTimestamp in value <local DataTypeTest> is never used
[WARNING]     val validTimestamp = TimestampType("MM")
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/DerivedExpressionTest.scala:130: warning: local val col in value $anonfun is never used
[WARNING]       val col = DruidDerFactCol("BLAH", IntType(), "{clicks}" ++ "{impressions}")
[WARNING]           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/DerivedExpressionTest.scala:131: warning: local val col2 in value $anonfun is never used
[WARNING]       val col2 = DimCol("fakeDim", IntType(), alias = Option("account_id"))
[WARNING]           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/DerivedExpressionTest.scala:207: warning: local val postResultCopy in value $anonfun is never used
[WARNING]       val postResultCopy = postResultCol.copyWith(cc, Map("copyWithTest" -> "copyWithResult"), true)
[WARNING]           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/DerivedExpressionTest.scala:208: warning: local val postResultCopyNoReset in value $anonfun is never used
[WARNING]       val postResultCopyNoReset = postResultCol.copyWith(cc2, Map("copyWithTest" -> "copyWithResult"), false)
[WARNING]           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/DerivedExpressionTest.scala:690: warning: local val cc in value <local DerivedExpressionTest> is never used
[WARNING]     implicit val cc = new ColumnContext
[WARNING]                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/DerivedExpressionTest.scala:888: warning: local val formats in value $anonfun is never used
[WARNING]         implicit val formats = DefaultFormats
[WARNING]                      ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/DerivedFunctionTest.scala:3: warning: Unused import
[WARNING] import java.util.TimeZone
[WARNING]                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/DerivedFunctionTest.scala:85: warning: local val formats in value <local DerivedFunctionTest> is never used
[WARNING]     implicit val formats = DefaultFormats
[WARNING]                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:57: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "stats_date", "stats_date"
[WARNING]  after adaptation: ArrowAssoc.->(("stats_date", "stats_date"): (String, String))
[WARNING]     val dailyResult = renderWithGrain(SqlBetweenFilterRenderer, filter, oracleLiteralMapper, OracleEngine, dateCol, DailyGrain, Map("stats_date" -> ("stats_date", "stats_date"))).filter
[WARNING]                                                                                                                                                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:59: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "stats_date", "stats_date"
[WARNING]  after adaptation: ArrowAssoc.->(("stats_date", "stats_date"): (String, String))
[WARNING]     val hourlyResult = renderWithGrain(SqlBetweenFilterRenderer, filter, oracleLiteralMapper, OracleEngine, dateCol, HourlyGrain, Map("stats_date" -> ("stats_date", "stats_date"))).filter
[WARNING]                                                                                                                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:63: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "date_sid", "date_sid"
[WARNING]  after adaptation: ArrowAssoc.->(("date_sid", "date_sid"): (String, String))
[WARNING]     val intHourlyResult = renderWithGrain(SqlBetweenFilterRenderer, intBetweenfilter, oracleLiteralMapper, OracleEngine, intDateCol, HourlyGrain, Map("date_sid" -> ("date_sid", "date_sid"))).filter
[WARNING]                                                                                                                                                                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:67: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "date_sid2", "date_sid2"
[WARNING]  after adaptation: ArrowAssoc.->(("date_sid2", "date_sid2"): (String, String))
[WARNING]     val strHourlyResult = renderWithGrain(SqlBetweenFilterRenderer, strBetweenfilter, oracleLiteralMapper, OracleEngine, strDateCol, HourlyGrain, Map("date_sid2" -> ("date_sid2", "date_sid2"))).filter
[WARNING]                                                                                                                                                                   ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:73: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "stats_date", "stats_date"
[WARNING]  after adaptation: ArrowAssoc.->(("stats_date", "stats_date"): (String, String))
[WARNING]     val dailyResult = renderWithGrain(SqlDateTimeBetweenFilterRenderer, filter, oracleLiteralMapper, OracleEngine, dateCol, DailyGrain, Map("stats_date" -> ("stats_date", "stats_date"))).filter
[WARNING]                                                                                                                                                          ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:75: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "stats_date", "stats_date"
[WARNING]  after adaptation: ArrowAssoc.->(("stats_date", "stats_date"): (String, String))
[WARNING]     val hourlyResult = renderWithGrain(SqlDateTimeBetweenFilterRenderer, filter, oracleLiteralMapper, OracleEngine, dateCol, HourlyGrain, Map("stats_date" -> ("stats_date", "stats_date"))).filter
[WARNING]                                                                                                                                                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:81: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "timestamp_date", "timestamp_date"
[WARNING]  after adaptation: ArrowAssoc.->(("timestamp_date", "timestamp_date"): (String, String))
[WARNING]     val dailyResult = renderWithGrain(SqlDateTimeBetweenFilterRenderer, filter, oracleLiteralMapper, OracleEngine, timestampCol, DailyGrain, Map("timestamp_date" -> ("timestamp_date", "timestamp_date"))).filter
[WARNING]                                                                                                                                                                   ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:83: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "timestamp_date", "timestamp_date"
[WARNING]  after adaptation: ArrowAssoc.->(("timestamp_date", "timestamp_date"): (String, String))
[WARNING]     val hourlyResult = renderWithGrain(SqlDateTimeBetweenFilterRenderer, filter, oracleLiteralMapper, OracleEngine, timestampCol, HourlyGrain, Map("timestamp_date" -> ("timestamp_date", "timestamp_date"))).filter
[WARNING]                                                                                                                                                                     ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:89: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "stats_date", "stats_date"
[WARNING]  after adaptation: ArrowAssoc.->(("stats_date", "stats_date"): (String, String))
[WARNING]     val dailyResult = renderWithGrain(SqlDateTimeBetweenFilterRenderer, filter, postgresLiteralMapper, PostgresEngine, dateCol, DailyGrain, Map("stats_date" -> ("stats_date", "stats_date"))).filter
[WARNING]                                                                                                                                                              ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:91: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "stats_date", "stats_date"
[WARNING]  after adaptation: ArrowAssoc.->(("stats_date", "stats_date"): (String, String))
[WARNING]     val hourlyResult = renderWithGrain(SqlDateTimeBetweenFilterRenderer, filter, postgresLiteralMapper, PostgresEngine, dateCol, HourlyGrain, Map("stats_date" -> ("stats_date", "stats_date"))).filter
[WARNING]                                                                                                                                                                ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:97: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "timestamp_date", "timestamp_date"
[WARNING]  after adaptation: ArrowAssoc.->(("timestamp_date", "timestamp_date"): (String, String))
[WARNING]     val dailyResult = renderWithGrain(SqlDateTimeBetweenFilterRenderer, filter, postgresLiteralMapper, PostgresEngine, timestampCol, DailyGrain, Map("timestamp_date" -> ("timestamp_date", "timestamp_date"))).filter
[WARNING]                                                                                                                                                                       ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:99: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "timestamp_date", "timestamp_date"
[WARNING]  after adaptation: ArrowAssoc.->(("timestamp_date", "timestamp_date"): (String, String))
[WARNING]     val hourlyResult = renderWithGrain(SqlDateTimeBetweenFilterRenderer, filter, postgresLiteralMapper, PostgresEngine, timestampCol, HourlyGrain, Map("timestamp_date" -> ("timestamp_date", "timestamp_date"))).filter
[WARNING]                                                                                                                                                                         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:105: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "stats_date", "stats_date"
[WARNING]  after adaptation: ArrowAssoc.->(("stats_date", "stats_date"): (String, String))
[WARNING]     val dailyResult = renderWithGrain(SqlDateTimeBetweenFilterRenderer, filter, hiveLiteralMapper, HiveEngine, dateCol, DailyGrain, Map("stats_date" -> ("stats_date", "stats_date"))).filter
[WARNING]                                                                                                                                                      ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:107: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "stats_date", "stats_date"
[WARNING]  after adaptation: ArrowAssoc.->(("stats_date", "stats_date"): (String, String))
[WARNING]     val hourlyResult = renderWithGrain(SqlDateTimeBetweenFilterRenderer, filter, hiveLiteralMapper, HiveEngine, dateCol, HourlyGrain, Map("stats_date" -> ("stats_date", "stats_date"))).filter
[WARNING]                                                                                                                                                        ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:113: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "timestamp_date", "timestamp_date"
[WARNING]  after adaptation: ArrowAssoc.->(("timestamp_date", "timestamp_date"): (String, String))
[WARNING]     val dailyResult = renderWithGrain(SqlDateTimeBetweenFilterRenderer, filter, hiveLiteralMapper, HiveEngine, timestampCol, DailyGrain, Map("timestamp_date" -> ("timestamp_date", "timestamp_date"))).filter
[WARNING]                                                                                                                                                               ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:115: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "timestamp_date", "timestamp_date"
[WARNING]  after adaptation: ArrowAssoc.->(("timestamp_date", "timestamp_date"): (String, String))
[WARNING]     val hourlyResult = renderWithGrain(SqlDateTimeBetweenFilterRenderer, filter, hiveLiteralMapper, HiveEngine, timestampCol, HourlyGrain, Map("timestamp_date" -> ("timestamp_date", "timestamp_date"))).filter
[WARNING]                                                                                                                                                                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:121: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "stats_date", "stats_date"
[WARNING]  after adaptation: ArrowAssoc.->(("stats_date", "stats_date"): (String, String))
[WARNING]     val dailyResult = renderWithGrain(SqlDateTimeBetweenFilterRenderer, filter, hiveLiteralMapper, PrestoEngine, dateCol, DailyGrain, Map("stats_date" -> ("stats_date", "stats_date"))).filter
[WARNING]                                                                                                                                                        ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:123: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "stats_date", "stats_date"
[WARNING]  after adaptation: ArrowAssoc.->(("stats_date", "stats_date"): (String, String))
[WARNING]     val hourlyResult = renderWithGrain(SqlDateTimeBetweenFilterRenderer, filter, hiveLiteralMapper, PrestoEngine, dateCol, HourlyGrain, Map("stats_date" -> ("stats_date", "stats_date"))).filter
[WARNING]                                                                                                                                                          ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:129: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "timestamp_date", "timestamp_date"
[WARNING]  after adaptation: ArrowAssoc.->(("timestamp_date", "timestamp_date"): (String, String))
[WARNING]     val dailyResult = renderWithGrain(SqlDateTimeBetweenFilterRenderer, filter, hiveLiteralMapper, PrestoEngine, timestampCol, DailyGrain, Map("timestamp_date" -> ("timestamp_date", "timestamp_date"))).filter
[WARNING]                                                                                                                                                                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:131: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "timestamp_date", "timestamp_date"
[WARNING]  after adaptation: ArrowAssoc.->(("timestamp_date", "timestamp_date"): (String, String))
[WARNING]     val hourlyResult = renderWithGrain(SqlDateTimeBetweenFilterRenderer, filter, hiveLiteralMapper, PrestoEngine, timestampCol, HourlyGrain, Map("timestamp_date" -> ("timestamp_date", "timestamp_date"))).filter
[WARNING]                                                                                                                                                                   ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:138: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "stats_date", "stats_date"
[WARNING]  after adaptation: ArrowAssoc.->(("stats_date", "stats_date"): (String, String))
[WARNING]     val dailyResult = renderWithGrain(SqlDateTimeBetweenFilterRenderer, filter, oracleLiteralMapper, OracleEngine, dateCol, DailyGrain, Map("stats_date" -> ("stats_date", "stats_date"))).filter
[WARNING]                                                                                                                                                          ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:140: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "stats_date", "stats_date"
[WARNING]  after adaptation: ArrowAssoc.->(("stats_date", "stats_date"): (String, String))
[WARNING]     val hourlyResult = renderWithGrain(SqlDateTimeBetweenFilterRenderer, filter, oracleLiteralMapper, OracleEngine, dateCol, HourlyGrain, Map("stats_date" -> ("stats_date", "stats_date"))).filter
[WARNING]                                                                                                                                                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:147: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "timestamp_date", "timestamp_date"
[WARNING]  after adaptation: ArrowAssoc.->(("timestamp_date", "timestamp_date"): (String, String))
[WARNING]     val dailyResult = renderWithGrain(SqlDateTimeBetweenFilterRenderer, filter, oracleLiteralMapper, OracleEngine, timestampCol, DailyGrain, Map("timestamp_date" -> ("timestamp_date", "timestamp_date"))).filter
[WARNING]                                                                                                                                                                   ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:149: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "timestamp_date", "timestamp_date"
[WARNING]  after adaptation: ArrowAssoc.->(("timestamp_date", "timestamp_date"): (String, String))
[WARNING]     val hourlyResult = renderWithGrain(SqlDateTimeBetweenFilterRenderer, filter, oracleLiteralMapper, OracleEngine, timestampCol, HourlyGrain, Map("timestamp_date" -> ("timestamp_date", "timestamp_date"))).filter
[WARNING]                                                                                                                                                                     ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:167: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "field1", "field1"
[WARNING]  after adaptation: ArrowAssoc.->(("field1", "field1"): (String, String))
[WARNING]     render(SqlInFilterRenderer, filter, oracleLiteralMapper, OracleEngine, col, Map("field1" -> ("field1", "field1"))) shouldBe DefaultResult("field1 IN ('abc','def','ghi')")
[WARNING]                                                                                              ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:169: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "insensitive", "insensitive"
[WARNING]  after adaptation: ArrowAssoc.->(("insensitive", "insensitive"): (String, String))
[WARNING]     render(SqlInFilterRenderer, insensitiveFilter, oracleLiteralMapper, OracleEngine, insensitiveCol, Map("insensitive" -> ("insensitive", "insensitive"))) shouldBe DefaultResult("lower(insensitive) IN (lower('abc'),lower('def'),lower('ghi'))")
[WARNING]                                                                                                                         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:174: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "field1", "field1"
[WARNING]  after adaptation: ArrowAssoc.->(("field1", "field1"): (String, String))
[WARNING]     render(SqlNotInFilterRenderer, filter, oracleLiteralMapper, OracleEngine, col,  Map("field1" -> ("field1", "field1"))) shouldBe DefaultResult("field1 NOT IN ('abc','def','ghi')")
[WARNING]                                                                                                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:179: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "field1", "field1"
[WARNING]  after adaptation: ArrowAssoc.->(("field1", "field1"): (String, String))
[WARNING]     render(SqlBetweenFilterRenderer, filter, oracleLiteralMapper, OracleEngine, col,  Map("field1" -> ("field1", "field1"))).filter shouldBe "field1 >= 'abc' AND field1 <= 'def'"
[WARNING]                                                                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:184: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "field1", "field1"
[WARNING]  after adaptation: ArrowAssoc.->(("field1", "field1"): (String, String))
[WARNING]     render(SqlEqualityFilterRenderer, filter, oracleLiteralMapper, OracleEngine, col,  Map("field1" -> ("field1", "field1"))) shouldBe DefaultResult("field1 = \'ghi\'")
[WARNING]                                                                                                     ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:189: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "field1", "field1"
[WARNING]  after adaptation: ArrowAssoc.->(("field1", "field1"): (String, String))
[WARNING]     render(SqlLikeFilterRenderer, filter, oracleLiteralMapper, OracleEngine, col,  Map("field1" -> ("field1", "field1"))) shouldBe DefaultResult("field1 LIKE \'%ghi%\'")
[WARNING]                                                                                                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:194: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "field1", "field1"
[WARNING]  after adaptation: ArrowAssoc.->(("field1", "field1"): (String, String))
[WARNING]     render(SqlLikeFilterRenderer, filter, hiveLiteralMapper, PrestoEngine, col,  Map("field1" -> ("field1", "field1"))) shouldBe DefaultResult("field1 LIKE \'%ghi%\'")
[WARNING]                                                                                               ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:199: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "field1", "field1"
[WARNING]  after adaptation: ArrowAssoc.->(("field1", "field1"): (String, String))
[WARNING]     render(SqlNotEqualToFilterRenderer, filter, hiveLiteralMapper, PrestoEngine, col,  Map("field1" -> ("field1", "field1"))) shouldBe DefaultResult("field1 <> \'ghi\'")
[WARNING]                                                                                                     ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:204: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "field1", "field1"
[WARNING]  after adaptation: ArrowAssoc.->(("field1", "field1"): (String, String))
[WARNING]     render(SqlNotEqualToFilterRenderer, filter, oracleLiteralMapper, OracleEngine, col,  Map("field1" -> ("field1", "field1"))) shouldBe DefaultResult("field1 <> \'ghi\'")
[WARNING]                                                                                                       ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:209: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "field1", "field1"
[WARNING]  after adaptation: ArrowAssoc.->(("field1", "field1"): (String, String))
[WARNING]     render(SqlIsNullFilterRenderer, filter, oracleLiteralMapper, OracleEngine, col,  Map("field1" -> ("field1", "field1"))) shouldBe DefaultResult("field1 IS NULL")
[WARNING]                                                                                                   ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:214: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "field1", "field1"
[WARNING]  after adaptation: ArrowAssoc.->(("field1", "field1"): (String, String))
[WARNING]     render(SqlIsNotNullFilterRenderer, filter, oracleLiteralMapper, OracleEngine, col,  Map("field1" -> ("field1", "field1"))) shouldBe DefaultResult("field1 IS NOT NULL")
[WARNING]                                                                                                      ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:219: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "field1", "field1"
[WARNING]  after adaptation: ArrowAssoc.->(("field1", "field1"): (String, String))
[WARNING]     render(SqlIsNullFilterRenderer, filter, hiveLiteralMapper, PrestoEngine, col,  Map("field1" -> ("field1", "field1"))) shouldBe DefaultResult("field1 IS NULL")
[WARNING]                                                                                                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:224: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "field1", "field1"
[WARNING]  after adaptation: ArrowAssoc.->(("field1", "field1"): (String, String))
[WARNING]     render(SqlIsNotNullFilterRenderer, filter, hiveLiteralMapper, PrestoEngine, col,  Map("field1" -> ("field1", "field1"))) shouldBe DefaultResult("field1 IS NOT NULL")
[WARNING]                                                                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:229: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "field1", "field1"
[WARNING]  after adaptation: ArrowAssoc.->(("field1", "field1"): (String, String))
[WARNING]     render(SqlInFilterRenderer, filter, hiveLiteralMapper, HiveEngine, col,  Map("field1" -> ("field1", "field1"))) shouldBe DefaultResult("field1 IN ('abc','def','ghi')")
[WARNING]                                                                                           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:231: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "insensitive", "insensitive"
[WARNING]  after adaptation: ArrowAssoc.->(("insensitive", "insensitive"): (String, String))
[WARNING]     render(SqlInFilterRenderer, insensitiveFilter, oracleLiteralMapper, HiveEngine, insensitiveCol,  Map("insensitive" -> ("insensitive", "insensitive"))) shouldBe DefaultResult("lower(insensitive) IN (lower('abc'),lower('def'),lower('ghi'))")
[WARNING]                                                                                                                        ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:236: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "field1", "field1"
[WARNING]  after adaptation: ArrowAssoc.->(("field1", "field1"): (String, String))
[WARNING]     render(SqlNotInFilterRenderer, filter, hiveLiteralMapper, HiveEngine, col,  Map("field1" -> ("field1", "field1"))) shouldBe DefaultResult("field1 NOT IN ('abc','def','ghi')")
[WARNING]                                                                                              ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:241: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "field1", "field1"
[WARNING]  after adaptation: ArrowAssoc.->(("field1", "field1"): (String, String))
[WARNING]     render(SqlBetweenFilterRenderer, filter, hiveLiteralMapper, HiveEngine, col,  Map("field1" -> ("field1", "field1"))) shouldBe DefaultResult("field1 >= 'abc' AND field1 <= 'def'")
[WARNING]                                                                                                ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:246: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "field1", "field1"
[WARNING]  after adaptation: ArrowAssoc.->(("field1", "field1"): (String, String))
[WARNING]     render(SqlEqualityFilterRenderer, filter, hiveLiteralMapper, HiveEngine, col,  Map("field1" -> ("field1", "field1"))) shouldBe DefaultResult("field1 = \'ghi\'")
[WARNING]                                                                                                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:251: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "field1", "field1"
[WARNING]  after adaptation: ArrowAssoc.->(("field1", "field1"): (String, String))
[WARNING]     render(SqlLikeFilterRenderer, filter, hiveLiteralMapper, HiveEngine, col,  Map("field1" -> ("field1", "field1"))) shouldBe DefaultResult("field1 LIKE \'%ghi%\'")
[WARNING]                                                                                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:256: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "field1", "field1"
[WARNING]  after adaptation: ArrowAssoc.->(("field1", "field1"): (String, String))
[WARNING]     render(SqlNotEqualToFilterRenderer, filter, hiveLiteralMapper, HiveEngine, col,  Map("field1" -> ("field1", "field1"))) shouldBe DefaultResult("field1 <> \'ghi\'")
[WARNING]                                                                                                   ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:261: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "field1", "field1"
[WARNING]  after adaptation: ArrowAssoc.->(("field1", "field1"): (String, String))
[WARNING]     render(SqlIsNullFilterRenderer, filter, hiveLiteralMapper, HiveEngine, col,  Map("field1" -> ("field1", "field1"))) shouldBe DefaultResult("field1 IS NULL")
[WARNING]                                                                                               ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:266: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "field1", "field1"
[WARNING]  after adaptation: ArrowAssoc.->(("field1", "field1"): (String, String))
[WARNING]     render(SqlIsNotNullFilterRenderer, filter, hiveLiteralMapper, HiveEngine, col,  Map("field1" -> ("field1", "field1"))) shouldBe DefaultResult("field1 IS NOT NULL")
[WARNING]                                                                                                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:323: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: col.alias.getOrElse("field1"), "field1"
[WARNING]  after adaptation: ArrowAssoc.->((col.alias.getOrElse("field1"), "field1"): (String, String))
[WARNING]       "field1" -> (col.alias.getOrElse("field1"), "field1")
[WARNING]                ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:324: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "stats_date", "field2"
[WARNING]  after adaptation: ArrowAssoc.->(("stats_date", "field2"): (String, String))
[WARNING]       , "field2" -> ("stats_date", "field2")
[WARNING]                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:325: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "date_sid", "field3"
[WARNING]  after adaptation: ArrowAssoc.->(("date_sid", "field3"): (String, String))
[WARNING]       , "field3" -> ("date_sid", "field3"))
[WARNING]                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:373: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: col.alias.getOrElse("field1"), "field1"
[WARNING]  after adaptation: ArrowAssoc.->((col.alias.getOrElse("field1"), "field1"): (String, String))
[WARNING]       "field1" -> (col.alias.getOrElse("field1"), "field1")
[WARNING]                ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:374: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "stats_date", "field2"
[WARNING]  after adaptation: ArrowAssoc.->(("stats_date", "field2"): (String, String))
[WARNING]       , "field2" -> ("stats_date", "field2")
[WARNING]                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:375: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "date_sid", "field3"
[WARNING]  after adaptation: ArrowAssoc.->(("date_sid", "field3"): (String, String))
[WARNING]       , "field3" -> ("date_sid", "field3"))
[WARNING]                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:422: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "filed1", "filed1"
[WARNING]  after adaptation: ArrowAssoc.->(("filed1", "filed1"): (String, String))
[WARNING]       render(SqlBetweenFilterRenderer, filter, oracleLiteralMapper, DruidEngine, col,  Map("filed1" -> ("filed1", "filed1")))
[WARNING]                                                                                                     ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:435: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "filed1", "filed1"
[WARNING]  after adaptation: ArrowAssoc.->(("filed1", "filed1"): (String, String))
[WARNING]       render(SqlInFilterRenderer, filter, oracleLiteralMapper, DruidEngine, col,  Map("filed1" -> ("filed1", "filed1")))
[WARNING]                                                                                                ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:443: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "filed1", "filed1"
[WARNING]  after adaptation: ArrowAssoc.->(("filed1", "filed1"): (String, String))
[WARNING]       render(SqlNotInFilterRenderer, filter, oracleLiteralMapper, DruidEngine, col,  Map("filed1" -> ("filed1", "filed1")))
[WARNING]                                                                                                   ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:451: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "filed1", "filed1"
[WARNING]  after adaptation: ArrowAssoc.->(("filed1", "filed1"): (String, String))
[WARNING]       render(SqlEqualityFilterRenderer, filter, oracleLiteralMapper, DruidEngine, col,  Map("filed1" -> ("filed1", "filed1")))
[WARNING]                                                                                                      ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:459: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "filed1", "filed1"
[WARNING]  after adaptation: ArrowAssoc.->(("filed1", "filed1"): (String, String))
[WARNING]       render(SqlLikeFilterRenderer, filter, oracleLiteralMapper, DruidEngine, col,  Map("filed1" -> ("filed1", "filed1")))
[WARNING]                                                                                                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:467: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "%sfield__1", "%sfield__1"
[WARNING]  after adaptation: ArrowAssoc.->(("%sfield__1", "%sfield__1"): (String, String))
[WARNING]     val rendered = render(SqlLikeFilterRenderer, filter, oracleLiteralMapper, OracleEngine, escapedCol,  Map("%sfield__1" -> ("%sfield__1", "%sfield__1")))
[WARNING]                                                                                                                           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:468: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "field1", "field1"
[WARNING]  after adaptation: ArrowAssoc.->(("field1", "field1"): (String, String))
[WARNING]     val renderedNonEscaped = render(SqlLikeFilterRenderer, normalFilter, oracleLiteralMapper, OracleEngine, col,  Map("field1" -> ("field1", "field1")))
[WARNING]                                                                                                                                ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:476: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "filed1", "filed1"
[WARNING]  after adaptation: ArrowAssoc.->(("filed1", "filed1"): (String, String))
[WARNING]       render(SqlNotEqualToFilterRenderer, filter, oracleLiteralMapper, DruidEngine, col,  Map("filed1" -> ("filed1", "filed1")))
[WARNING]                                                                                                        ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:483: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "filed1", "filed1"
[WARNING]  after adaptation: ArrowAssoc.->(("filed1", "filed1"): (String, String))
[WARNING]     render(SqlInFilterRenderer, filter, oracleLiteralMapper, OracleEngine, col,  Map("filed1" -> ("filed1", "filed1")))
[WARNING]                                                                                               ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:489: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "filed1", "filed1"
[WARNING]  after adaptation: ArrowAssoc.->(("filed1", "filed1"): (String, String))
[WARNING]       render(SqlIsNullFilterRenderer, filter, oracleLiteralMapper, DruidEngine, col,  Map("filed1" -> ("filed1", "filed1")))
[WARNING]                                                                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/FilterTest.scala:497: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: "filed1", "filed1"
[WARNING]  after adaptation: ArrowAssoc.->(("filed1", "filed1"): (String, String))
[WARNING]       render(SqlIsNotNullFilterRenderer, filter, oracleLiteralMapper, DruidEngine, col,  Map("filed1" -> ("filed1", "filed1")))
[WARNING]                                                                                                       ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/HiveLiteralMapperTest.scala:131: warning: local val dateValue in value <local HiveLiteralMapperTest> is never used
[WARNING]       val dateValue = HiveLiteralMapper.toLiteral(column, exp, None)
[WARNING]           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/LiteralMapperTest.scala:28: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: Assertions.assertThrows[T <: AnyRef](f: => Any)(implicit classTag: scala.reflect.ClassTag[T],implicit pos: org.scalactic.source.Position): org.scalatest.Assertion
[WARNING]   given arguments: druidMapper.toNumber(colTSNoFmt, "1"), "Expected UnsupportedOperationException, but didn\'t get it."
[WARNING]  after adaptation: Assertions.assertThrows((druidMapper.toNumber(colTSNoFmt, "1"), "Expected UnsupportedOperationException, but didn\'t get it."): (Number, String))
[WARNING]     assertThrows[UnsupportedOperationException](druidMapper.toNumber(colTSNoFmt, "1"), "Expected UnsupportedOperationException, but didn't get it.")
[WARNING]                                                ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/ReportingRequestTest.scala:202: warning: local val ser in value <local ReportingRequestTest> is never used
[WARNING]     val ser = new String(ReportingRequest.serialize(request), StandardCharsets.UTF_8)
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/ReportingRequestTest.scala:221: warning: local val ser in value <local ReportingRequestTest> is never used
[WARNING]     val ser = new String(ReportingRequest.serialize(request), StandardCharsets.UTF_8)
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/ReportingRequestTest.scala:239: warning: local val ser in value <local ReportingRequestTest> is never used
[WARNING]     val ser = new String(ReportingRequest.serialize(request), StandardCharsets.UTF_8)
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/ReportingRequestTest.scala:256: warning: local val ser in value <local ReportingRequestTest> is never used
[WARNING]     val ser = new String(ReportingRequest.serialize(request), StandardCharsets.UTF_8)
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/ReportingRequestTest.scala:1584: warning: local val ser in value <local ReportingRequestTest> is never used
[WARNING]     val ser = new String(ReportingRequest.serialize(request), StandardCharsets.UTF_8)
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/ReportingRequestTest.scala:1618: warning: local val ser in value <local ReportingRequestTest> is never used
[WARNING]     val ser = new String(ReportingRequest.serialize(request), StandardCharsets.UTF_8)
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/RequestModelTest.scala:4488: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: 25, None
[WARNING]  after adaptation: ArrowAssoc.->((25, None): (Int, None.type))
[WARNING]           .dryRunPercentage(Map(1 -> (25, None), 2 -> (100, Some(DruidEngine))))
[WARNING]                                   ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/RequestModelTest.scala:4488: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: 100, Some(DruidEngine)
[WARNING]  after adaptation: ArrowAssoc.->((100, Some(DruidEngine)): (Int, Some[com.yahoo.maha.core.DruidEngine.type]))
[WARNING]           .dryRunPercentage(Map(1 -> (25, None), 2 -> (100, Some(DruidEngine))))
[WARNING]                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/RequestModelTest.scala:4532: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: 25, None
[WARNING]  after adaptation: ArrowAssoc.->((25, None): (Int, None.type))
[WARNING]           .dryRunPercentage(Map(1 -> (25, None), 2 -> (100, Some(OracleEngine))))
[WARNING]                                   ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/RequestModelTest.scala:4532: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: 100, Some(OracleEngine)
[WARNING]  after adaptation: ArrowAssoc.->((100, Some(OracleEngine)): (Int, Some[com.yahoo.maha.core.OracleEngine.type]))
[WARNING]           .dryRunPercentage(Map(1 -> (25, None), 2 -> (100, Some(OracleEngine))))
[WARNING]                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/RequestModelTest.scala:4574: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: 25, None
[WARNING]  after adaptation: ArrowAssoc.->((25, None): (Int, None.type))
[WARNING]             .dryRunPercentage(Map(1 -> (25, None), 2 -> (100, Some(HiveEngine))))
[WARNING]                                     ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/RequestModelTest.scala:4574: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: 100, Some(HiveEngine)
[WARNING]  after adaptation: ArrowAssoc.->((100, Some(HiveEngine)): (Int, Some[com.yahoo.maha.core.HiveEngine.type]))
[WARNING]             .dryRunPercentage(Map(1 -> (25, None), 2 -> (100, Some(HiveEngine))))
[WARNING]                                                      ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/RequestModelTest.scala:4617: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: 100, Some(PrestoEngine)
[WARNING]  after adaptation: ArrowAssoc.->((100, Some(PrestoEngine)): (Int, Some[com.yahoo.maha.core.PrestoEngine.type]))
[WARNING]           .dryRunPercentage(Map(2 -> (100, Some(PrestoEngine))))
[WARNING]                                   ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/RequestModelTest.scala:4662: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: 0, None
[WARNING]  after adaptation: ArrowAssoc.->((0, None): (Int, None.type))
[WARNING]           .dryRunPercentage(Map(1 -> (0, None), 2 -> (0, Some(DruidEngine))))
[WARNING]                                   ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/RequestModelTest.scala:4662: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: 0, Some(DruidEngine)
[WARNING]  after adaptation: ArrowAssoc.->((0, Some(DruidEngine)): (Int, Some[com.yahoo.maha.core.DruidEngine.type]))
[WARNING]           .dryRunPercentage(Map(1 -> (0, None), 2 -> (0, Some(DruidEngine))))
[WARNING]                                                   ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/RequestModelTest.scala:4703: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: 0, None
[WARNING]  after adaptation: ArrowAssoc.->((0, None): (Int, None.type))
[WARNING]           .dryRunPercentage(Map(1 -> (0, None), 2 -> (0, Some(DruidEngine))))
[WARNING]                                   ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/RequestModelTest.scala:4703: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: 0, Some(DruidEngine)
[WARNING]  after adaptation: ArrowAssoc.->((0, Some(DruidEngine)): (Int, Some[com.yahoo.maha.core.DruidEngine.type]))
[WARNING]           .dryRunPercentage(Map(1 -> (0, None), 2 -> (0, Some(DruidEngine))))
[WARNING]                                                   ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/RequestModelTest.scala:34: warning: private val fromDateTime in class RequestModelTest is never used
[WARNING]   private[this] val fromDateTime = DateTimeBetweenFilterHelper.iso8601FormattedString(DateTime.now(DateTimeZone.UTC).minusDays(7))
[WARNING]                     ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/RequestModelTest.scala:35: warning: private val toDateTime in class RequestModelTest is never used
[WARNING]   private[this] val toDateTime = DateTimeBetweenFilterHelper.iso8601FormattedString(DateTime.now(DateTimeZone.UTC))
[WARNING]                     ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/test/scala/com/yahoo/maha/core/RequestModelTest.scala:5010: warning: local val request in value <local RequestModelTest> is never used
[WARNING]       val request: ReportingRequest = getReportingRequestAsync(jsonString)
[WARNING]           ^
[WARNING] 283 warnings found
[INFO] prepare-compile in 0 s
[INFO] compile in 45 s
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-core ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- scalatest-maven-plugin:2.0.0:test (test) @ maha-core ---
Discovery starting.
09:12:57.962 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - Detected a Darwin x86_64 system
09:12:58.098 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - Extracting Postgres...
09:13:02.565 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - Postgres binaries at /Users/lgadde/git/Native-Ads/maha/core/target/embedded-pg/PG-3d7ce5d05cd575a649dd635576931b19
09:13:04.327 INFO  [log:pid(87191)] init-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc:initdb - The files belonging to this database system will be owned by user "lgadde".
09:13:04.327 INFO  [log:pid(87191)] init-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc:initdb - This user must also own the server process.
09:13:04.327 INFO  [log:pid(87191)] init-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc:initdb - 
09:13:04.327 INFO  [log:pid(87191)] init-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc:initdb - The database cluster will be initialized with locale "en_US.UTF-8".
09:13:04.327 INFO  [log:pid(87191)] init-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc:initdb - The default text search configuration will be set to "english".
09:13:04.328 INFO  [log:pid(87191)] init-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc:initdb - 
09:13:04.328 INFO  [log:pid(87191)] init-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc:initdb - Data page checksums are disabled.
09:13:04.328 INFO  [log:pid(87191)] init-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc:initdb - 
09:13:04.328 INFO  [log:pid(87191)] init-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc:initdb - fixing permissions on existing directory /Users/lgadde/git/Native-Ads/maha/core/target/epg1077876742420052429 ... ok
09:13:04.328 INFO  [log:pid(87191)] init-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc:initdb - creating subdirectories ... ok
09:13:04.364 INFO  [log:pid(87191)] init-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc:initdb - selecting default max_connections ... 100
09:13:04.401 INFO  [log:pid(87191)] init-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc:initdb - selecting default shared_buffers ... 128MB
09:13:04.401 INFO  [log:pid(87191)] init-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc:initdb - selecting dynamic shared memory implementation ... posix
09:13:04.477 INFO  [log:pid(87191)] init-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc:initdb - creating configuration files ... ok
09:13:04.835 INFO  [log:pid(87191)] init-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc:initdb - running bootstrap script ... ok
09:13:09.093 INFO  [log:pid(87191)] init-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc:initdb - performing post-bootstrap initialization ... ok
09:13:09.162 INFO  [log:pid(87191)] init-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc:initdb - syncing data to disk ... ok
09:13:09.162 INFO  [log:pid(87191)] init-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc:initdb - 
09:13:09.162 INFO  [log:pid(87191)] init-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc:initdb - Success. You can now start the database server using:
09:13:09.162 INFO  [log:pid(87191)] init-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc:initdb - 
09:13:09.162 INFO  [log:pid(87191)] init-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc:initdb -     /Users/lgadde/git/Native-Ads/maha/core/target/embedded-pg/PG-3d7ce5d05cd575a649dd635576931b19/bin/pg_ctl -D /Users/lgadde/git/Native-Ads/maha/core/target/epg1077876742420052429 -l logfile start
09:13:09.162 INFO  [log:pid(87191)] init-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc:initdb - 
09:13:09.163 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - 0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc initdb completed in 00:00:06.594
09:13:09.183 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - 0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc postmaster started as java.lang.UNIXProcess@1b266842 on port 51353.  Waiting up to PT10S for server startup to finish.
09:13:09.371 INFO  [log:pid(87206)] pg-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc - waiting for server to start....2020-11-10 09:13:09.370 PST [87208] LOG:  listening on IPv4 address "127.0.0.1", port 51353
09:13:09.371 INFO  [log:pid(87206)] pg-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc - 2020-11-10 09:13:09.370 PST [87208] LOG:  listening on IPv6 address "::1", port 51353
09:13:09.373 INFO  [log:pid(87206)] pg-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc - 2020-11-10 09:13:09.373 PST [87208] LOG:  listening on Unix socket "/tmp/.s.PGSQL.51353"
09:13:09.393 INFO  [log:pid(87206)] pg-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc - 2020-11-10 09:13:09.393 PST [87210] LOG:  database system was shut down at 2020-11-10 09:13:09 PST
09:13:09.397 INFO  [log:pid(87206)] pg-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc - 2020-11-10 09:13:09.397 PST [87208] LOG:  database system is ready to accept connections
09:13:09.433 INFO  [log:pid(87206)] pg-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc - 2020-11-10 09:13:09.433 PST [87217] LOG:  incomplete startup packet
09:13:09.437 INFO  [log:pid(87206)] pg-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc -  done
09:13:09.437 INFO  [log:pid(87206)] pg-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc - server started
09:13:09.556 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - 0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc postmaster startup finished in 00:00:00.389
09:13:09.694 INFO  [log:pid(87219)] init-909ffb35-979c-42ee-a2c0-f1046fb47933:initdb - The files belonging to this database system will be owned by user "lgadde".
09:13:09.694 INFO  [log:pid(87219)] init-909ffb35-979c-42ee-a2c0-f1046fb47933:initdb - This user must also own the server process.
09:13:09.694 INFO  [log:pid(87219)] init-909ffb35-979c-42ee-a2c0-f1046fb47933:initdb - 
09:13:09.694 INFO  [log:pid(87219)] init-909ffb35-979c-42ee-a2c0-f1046fb47933:initdb - The database cluster will be initialized with locale "en_US.UTF-8".
09:13:09.694 INFO  [log:pid(87219)] init-909ffb35-979c-42ee-a2c0-f1046fb47933:initdb - The default text search configuration will be set to "english".
09:13:09.694 INFO  [log:pid(87219)] init-909ffb35-979c-42ee-a2c0-f1046fb47933:initdb - 
09:13:09.694 INFO  [log:pid(87219)] init-909ffb35-979c-42ee-a2c0-f1046fb47933:initdb - Data page checksums are disabled.
09:13:09.694 INFO  [log:pid(87219)] init-909ffb35-979c-42ee-a2c0-f1046fb47933:initdb - 
09:13:09.695 INFO  [log:pid(87219)] init-909ffb35-979c-42ee-a2c0-f1046fb47933:initdb - fixing permissions on existing directory /Users/lgadde/git/Native-Ads/maha/core/target/epg6325665113299343680 ... ok
09:13:09.697 INFO  [log:pid(87219)] init-909ffb35-979c-42ee-a2c0-f1046fb47933:initdb - creating subdirectories ... ok
09:13:09.729 INFO  [log:pid(87219)] init-909ffb35-979c-42ee-a2c0-f1046fb47933:initdb - selecting default max_connections ... 100
09:13:09.763 INFO  [log:pid(87219)] init-909ffb35-979c-42ee-a2c0-f1046fb47933:initdb - selecting default shared_buffers ... 128MB
09:13:09.763 INFO  [log:pid(87219)] init-909ffb35-979c-42ee-a2c0-f1046fb47933:initdb - selecting dynamic shared memory implementation ... posix
09:13:09.833 INFO  [log:pid(87219)] init-909ffb35-979c-42ee-a2c0-f1046fb47933:initdb - creating configuration files ... ok
09:13:10.166 INFO  [log:pid(87219)] init-909ffb35-979c-42ee-a2c0-f1046fb47933:initdb - running bootstrap script ... ok
09:13:11.197 INFO  [log:pid(87219)] init-909ffb35-979c-42ee-a2c0-f1046fb47933:initdb - performing post-bootstrap initialization ... ok
09:13:11.261 INFO  [log:pid(87219)] init-909ffb35-979c-42ee-a2c0-f1046fb47933:initdb - syncing data to disk ... ok
09:13:11.261 INFO  [log:pid(87219)] init-909ffb35-979c-42ee-a2c0-f1046fb47933:initdb - 
09:13:11.261 INFO  [log:pid(87219)] init-909ffb35-979c-42ee-a2c0-f1046fb47933:initdb - Success. You can now start the database server using:
09:13:11.261 INFO  [log:pid(87219)] init-909ffb35-979c-42ee-a2c0-f1046fb47933:initdb - 
09:13:11.261 INFO  [log:pid(87219)] init-909ffb35-979c-42ee-a2c0-f1046fb47933:initdb -     /Users/lgadde/git/Native-Ads/maha/core/target/embedded-pg/PG-3d7ce5d05cd575a649dd635576931b19/bin/pg_ctl -D /Users/lgadde/git/Native-Ads/maha/core/target/epg6325665113299343680 -l logfile start
09:13:11.261 INFO  [log:pid(87219)] init-909ffb35-979c-42ee-a2c0-f1046fb47933:initdb - 
09:13:11.262 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - 909ffb35-979c-42ee-a2c0-f1046fb47933 initdb completed in 00:00:01.612
09:13:11.270 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - 909ffb35-979c-42ee-a2c0-f1046fb47933 postmaster started as java.lang.UNIXProcess@4f0100a7 on port 5433.  Waiting up to PT10S for server startup to finish.
09:13:11.340 INFO  [log:pid(87229)] pg-909ffb35-979c-42ee-a2c0-f1046fb47933 - waiting for server to start....2020-11-10 09:13:11.340 PST [87231] LOG:  listening on IPv4 address "127.0.0.1", port 5433
09:13:11.340 INFO  [log:pid(87229)] pg-909ffb35-979c-42ee-a2c0-f1046fb47933 - 2020-11-10 09:13:11.340 PST [87231] LOG:  listening on IPv6 address "::1", port 5433
09:13:11.341 INFO  [log:pid(87229)] pg-909ffb35-979c-42ee-a2c0-f1046fb47933 - 2020-11-10 09:13:11.341 PST [87231] LOG:  listening on Unix socket "/tmp/.s.PGSQL.5433"
09:13:11.359 INFO  [log:pid(87229)] pg-909ffb35-979c-42ee-a2c0-f1046fb47933 - 2020-11-10 09:13:11.359 PST [87232] LOG:  database system was shut down at 2020-11-10 09:13:11 PST
09:13:11.365 INFO  [log:pid(87229)] pg-909ffb35-979c-42ee-a2c0-f1046fb47933 - 2020-11-10 09:13:11.364 PST [87231] LOG:  database system is ready to accept connections
09:13:11.377 INFO  [log:pid(87229)] pg-909ffb35-979c-42ee-a2c0-f1046fb47933 - 2020-11-10 09:13:11.377 PST [87239] LOG:  incomplete startup packet
09:13:11.391 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - 909ffb35-979c-42ee-a2c0-f1046fb47933 postmaster startup finished in 00:00:00.128
09:13:11.406 INFO  [log:pid(87229)] pg-909ffb35-979c-42ee-a2c0-f1046fb47933 -  done
09:13:11.407 INFO  [log:pid(87229)] pg-909ffb35-979c-42ee-a2c0-f1046fb47933 - server started
Discovery completed in 17 seconds, 315 milliseconds.
Run starting. Expected test count is: 1472
QueryPipelineWithFallbackTest:
OracleQueryCommonTest:
OracleLiteralMapperTest:
UnionViewRowListTest:
PartialRowListTest:
CompleteRowListTest:
PostgresDDLDumperTest:
ColumnTest:
EngineTest:
LiteralMapperTest:
WithNewSchemaFactTest:
RegistryTest:
NewRollupFactTest:
DerivedExpressionTest:
BaseDruidQueryGeneratorTest:
PrestoQueryGeneratorV1Test:
HiveLiteralMapperTest:
SqlHelperTest:
FilterTest:
WithAlternativeEngineFactTest:
PostgresQueryGeneratorTest:
ErrorTest:
DruidDerFunctionTest:
BaseDDLGeneratorTest:
ESAPI: WARNING: System property [org.owasp.esapi.opsteam] is not set
ESAPI: WARNING: System property [org.owasp.esapi.devteam] is not set
ESAPI: Attempting to load ESAPI.properties via file I/O.
ESAPI: Attempting to load ESAPI.properties as resource file via file I/O.
ESAPI: Not found in 'org.owasp.esapi.resources' directory or file not readable: /Users/lgadde/git/Native-Ads/maha/core/ESAPI.properties
ESAPI: Not found in SystemResource Directory/resourceDirectory: .esapi/ESAPI.properties
ESAPI: Not found in 'user.home' (/Users/lgadde) directory: /Users/lgadde/esapi/ESAPI.properties
ESAPI: Loading ESAPI.properties via file I/O failed. Exception was: java.io.FileNotFoundException
ESAPI: Attempting to load ESAPI.properties via the classpath.
ESAPI: SUCCESSFULLY LOADED ESAPI.properties via the CLASSPATH from '/ (root)' using current thread context class loader!
ESAPI: SecurityConfiguration for Validator.ConfigurationFile.MultiValued not found in ESAPI.properties. Using default: false
ESAPI: Attempting to load validation.properties via file I/O.
ESAPI: Attempting to load validation.properties as resource file via file I/O.
ESAPI: Not found in 'org.owasp.esapi.resources' directory or file not readable: /Users/lgadde/git/Native-Ads/maha/core/validation.properties
ESAPI: Not found in SystemResource Directory/resourceDirectory: .esapi/validation.properties
ESAPI: Not found in 'user.home' (/Users/lgadde) directory: /Users/lgadde/esapi/validation.properties
ESAPI: Loading validation.properties via file I/O failed.
ESAPI: Attempting to load validation.properties via the classpath.
ESAPI: SUCCESSFULLY LOADED validation.properties via the CLASSPATH from '/ (root)' using current thread context class loader!
09:13:13.680 ERROR [ScalaTest-10-running-SafeCloseableTest] safeOperation - Failed on safeOperation doWork
java.lang.IllegalArgumentException: requirement failed: fail
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.report.SafeCloseableTest.failWork(SafeCloseableTest.scala:28)
	at com.yahoo.maha.report.SafeCloseableTest.$anonfun$new$4(SafeCloseableTest.scala:35)
	at com.yahoo.maha.report.SafeCloseableTest.$anonfun$new$4$adapted(SafeCloseableTest.scala:35)
	at com.yahoo.maha.report.package$.safeOperation(package.scala:18)
	at com.yahoo.maha.report.package$.safeCloseable(package.scala:35)
	at com.yahoo.maha.report.SafeCloseableTest.$anonfun$new$3(SafeCloseableTest.scala:35)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
09:13:13.754 ERROR [ScalaTest-1-running-DaysUtilsTest] c.y.m.u.DaysUtils$ - Unchecked input to function 20171101
java.lang.IllegalArgumentException: Invalid format: "20171101" is too short
	at org.joda.time.format.DateTimeFormatter.parseDateTime(DateTimeFormatter.java:945)
	at com.yahoo.maha.utils.DaysUtils$.truncateHourFromGivenHourString(DaysUtils.scala:133)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$2(DaysUtilsTest.scala:16)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at org.scalatest.Assertions.intercept(Assertions.scala:749)
	at org.scalatest.Assertions.intercept$(Assertions.scala:746)
	at org.scalatest.funsuite.AnyFunSuite.intercept(AnyFunSuite.scala:1562)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$1(DaysUtilsTest.scala:15)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
09:13:13.779 ERROR [ScalaTest-1-running-DaysUtilsTest] c.y.m.u.DaysUtils$ - Unchecked input to function from=2017-12-01a, to=2017-12-02
java.lang.IllegalArgumentException: Invalid format: "2017-12-01a" is malformed at "a"
	at org.joda.time.format.DateTimeFormatter.parseDateTime(DateTimeFormatter.java:945)
	at com.yahoo.maha.utils.DaysUtils$.refactorFilter(DaysUtils.scala:205)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$5(DaysUtilsTest.scala:38)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at org.scalatest.Assertions.intercept(Assertions.scala:749)
	at org.scalatest.Assertions.intercept$(Assertions.scala:746)
	at org.scalatest.funsuite.AnyFunSuite.intercept(AnyFunSuite.scala:1562)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$4(DaysUtilsTest.scala:36)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
09:13:13.782 WARN  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator$ - Another query generator registered for HiveEngine : null
09:13:13.795 ERROR [ScalaTest-1-running-DaysUtilsTest] c.y.m.u.DaysUtils$ - Unchecked input to function List(2017-12-01a, 2017-12-02)
java.lang.IllegalArgumentException: Invalid format: "2017-12-01a" is malformed at "a"
	at org.joda.time.format.DateTimeFormatter.parseDateTime(DateTimeFormatter.java:945)
	at com.yahoo.maha.utils.DaysUtils$.$anonfun$refactorFilter$3(DaysUtils.scala:217)
	at com.yahoo.maha.utils.DaysUtils$.$anonfun$refactorFilter$3$adapted(DaysUtils.scala:217)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.utils.DaysUtils$.refactorFilter(DaysUtils.scala:217)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$6(DaysUtilsTest.scala:44)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at org.scalatest.Assertions.intercept(Assertions.scala:749)
	at org.scalatest.Assertions.intercept$(Assertions.scala:746)
	at org.scalatest.funsuite.AnyFunSuite.intercept(AnyFunSuite.scala:1562)
09:13:13.808 ERROR [ScalaTest-10-running-SafeCloseableTest] safeOperation - Failed on safeOperation doWork
java.lang.IllegalArgumentException: requirement failed: fail
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.report.SafeCloseableTest.failWork(SafeCloseableTest.scala:28)
	at com.yahoo.maha.report.SafeCloseableTest.$anonfun$new$6(SafeCloseableTest.scala:40)
	at com.yahoo.maha.report.SafeCloseableTest.$anonfun$new$6$adapted(SafeCloseableTest.scala:40)
	at com.yahoo.maha.report.package$.safeOperation(package.scala:18)
	at com.yahoo.maha.report.package$.safeCloseable(package.scala:35)
	at com.yahoo.maha.report.SafeCloseableTest.$anonfun$new$5(SafeCloseableTest.scala:40)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
09:13:13.822 ERROR [ScalaTest-1-running-DaysUtilsTest] c.y.m.u.DaysUtils$ - Unchecked input to function 2017-12-01a
java.lang.IllegalArgumentException: Invalid format: "2017-12-01a" is malformed at "a"
	at org.joda.time.format.DateTimeFormatter.parseDateTime(DateTimeFormatter.java:945)
	at com.yahoo.maha.utils.DaysUtils$.refactorFilter(DaysUtils.scala:227)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$7(DaysUtilsTest.scala:50)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at org.scalatest.Assertions.intercept(Assertions.scala:749)
	at org.scalatest.Assertions.intercept$(Assertions.scala:746)
	at org.scalatest.funsuite.AnyFunSuite.intercept(AnyFunSuite.scala:1562)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$4(DaysUtilsTest.scala:48)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
09:13:13.824 ERROR [ScalaTest-10-running-SafeCloseableTest] safeOperation - Failed on safeOperation cleanup
java.io.IOException: fail
	at com.yahoo.maha.report.FailCloseable.close(SafeCloseableTest.scala:20)
	at com.yahoo.maha.report.package$.$anonfun$safeCloseable$1(package.scala:35)
	at com.yahoo.maha.report.package$.$anonfun$safeCloseable$1$adapted(package.scala:35)
	at com.yahoo.maha.report.package$.safeOperation(package.scala:24)
	at com.yahoo.maha.report.package$.safeCloseable(package.scala:35)
	at com.yahoo.maha.report.SafeCloseableTest.$anonfun$new$5(SafeCloseableTest.scala:40)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
09:13:13.833 ERROR [ScalaTest-1-running-DaysUtilsTest] c.y.m.u.DaysUtils$ - Unchecked input to function from=2017-12-02, to=2017-12-01
java.lang.IllegalArgumentException: From date (2017-12-02) cannot be after To date (2017-12-01)
	at com.yahoo.maha.utils.DaysUtils$.getDaysBetweenIntoLongList(DaysUtils.scala:26)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$10(DaysUtilsTest.scala:64)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at org.scalatest.Assertions.intercept(Assertions.scala:749)
	at org.scalatest.Assertions.intercept$(Assertions.scala:746)
	at org.scalatest.funsuite.AnyFunSuite.intercept(AnyFunSuite.scala:1562)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$9(DaysUtilsTest.scala:62)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
09:13:13.930 ERROR [ScalaTest-1-running-DaysUtilsTest] c.y.m.u.DaysUtils$ - Unchecked input to function getDaysIntoLongList
java.lang.IllegalArgumentException: Invalid format: "20160104abc" is malformed at "abc"
	at org.joda.time.format.DateTimeFormatter.parseDateTime(DateTimeFormatter.java:945)
	at com.yahoo.maha.utils.DaysUtils$.$anonfun$getDaysIntoLongList$1(DaysUtils.scala:49)
	at com.yahoo.maha.utils.DaysUtils$.$anonfun$getDaysIntoLongList$1$adapted(DaysUtils.scala:48)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.utils.DaysUtils$.getDaysIntoLongList(DaysUtils.scala:48)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$34(DaysUtilsTest.scala:206)
	at org.scalatest.Assertions.intercept(Assertions.scala:749)
	at org.scalatest.Assertions.intercept$(Assertions.scala:746)
	at org.scalatest.funsuite.AnyFunSuite.intercept(AnyFunSuite.scala:1562)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$33(DaysUtilsTest.scala:204)
09:13:13.933 ERROR [ScalaTest-1-running-DaysUtilsTest] c.y.m.u.DaysUtils$ - Unchecked input to function from=, to=
java.lang.IllegalArgumentException: Invalid format: ""
	at org.joda.time.format.DateTimeFormatter.parseDateTime(DateTimeFormatter.java:945)
	at com.yahoo.maha.utils.DaysUtils$.getDaysBetweenIntoLongList(DaysUtils.scala:23)
	at com.yahoo.maha.utils.DaysUtils$.getDayIntoLongList(DaysUtils.scala:241)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$36(DaysUtilsTest.scala:212)
	at org.scalatest.Assertions.intercept(Assertions.scala:749)
	at org.scalatest.Assertions.intercept$(Assertions.scala:746)
	at org.scalatest.funsuite.AnyFunSuite.intercept(AnyFunSuite.scala:1562)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$35(DaysUtilsTest.scala:211)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
09:13:13.980 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(UTC)
09:13:13.981 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: None
09:13:13.983 WARN  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Failed to validate day/hour filters, or timezone cannot be fetched. Extending day filter by one day
09:13:13.984 INFO  [ScalaTest-23-running-FkFactMapStorageTest] c.y.m.r.RocksDBAccessor - Creating rocksDB : /Users/lgadde/git/Native-Ads/maha/core/target/test/rocksdb_1-1605028393980-PowerSetStorage_
09:13:13.985 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: None
09:13:13.985 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: None
09:13:13.986 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: None
09:13:13.986 WARN  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Failed to validate day/hour filters, or timezone cannot be fetched. Extending day filter by one day
09:13:13.990 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(Australia/Melbourne)
09:13:13.994 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetMinutes: -660
09:13:13.996 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetHours: -11
09:13:13.997 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - minUtcHour: -6 maxUtcHour: -6
09:13:13.998 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(Australia/Melbourne)
09:13:13.998 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetMinutes: -660
09:13:13.999 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetHours: -11
09:13:14.003 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - minUtcHour: -6 maxUtcHour: -6
09:13:14.006 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(Australia/Melbourne)
09:13:14.006 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetMinutes: -660
09:13:14.006 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetHours: -11
09:13:14.006 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - minUtcHour: -11 maxUtcHour: 12
09:13:14.007 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(Australia/Melbourne)
09:13:14.008 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetMinutes: -660
09:13:14.008 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetHours: -11
09:13:14.008 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - minUtcHour: -6 maxUtcHour: -6
09:13:14.010 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(Australia/Melbourne)
09:13:14.010 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetMinutes: -660
09:13:14.010 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetHours: -11
09:13:14.010 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - minUtcHour: -10 maxUtcHour: -6
09:13:14.014 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(UTC)
09:13:14.031 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(UTC)
09:13:14.032 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(America/Los_Angeles)
09:13:14.033 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetMinutes: 480
09:13:14.033 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetHours: 8
09:13:14.033 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - minUtcHour: 8 maxUtcHour: 31
09:13:14.034 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(America/Los_Angeles)
09:13:14.034 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetMinutes: 480
09:13:14.034 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetHours: 8
09:13:14.034 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - minUtcHour: 8 maxUtcHour: 31
09:13:14.036 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(Australia/Melbourne)
09:13:14.037 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetMinutes: -660
09:13:14.037 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetHours: -11
09:13:14.037 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - minUtcHour: -11 maxUtcHour: 12
09:13:14.037 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(America/Los_Angeles)
09:13:14.038 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(America/Los_Angeles)
09:13:14.038 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(Asia/Calcutta)
09:13:14.039 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(Australia/Melbourne)
09:13:14.040 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(Australia/Melbourne)
09:13:14.040 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(America/Los_Angeles)
09:13:14.041 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(Australia/Melbourne)
09:13:14.041 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(America/Los_Angeles)
09:13:14.042 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(America/Los_Angeles)
09:13:14.042 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(Australia/Melbourne)
09:13:14.044 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(America/Los_Angeles)
09:13:14.045 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(Australia/Melbourne)
09:13:14.070 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(America/Los_Angeles)
09:13:14.071 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetMinutes: 480
09:13:14.071 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetHours: 8
09:13:14.072 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - minUtcHour: 24 maxUtcHour: 24
09:13:14.084 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.090 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(America/Los_Angeles)
09:13:14.091 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetMinutes: 480
09:13:14.091 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetHours: 8
09:13:14.091 INFO  [ScalaTest-1-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - minUtcHour: 24 maxUtcHour: 24
09:13:14.113 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - Processing tables in order : List(advertiser, campaign_stats, campaign, ad_group, targetingattribute, ad)
09:13:14.236 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - Map(generate_create_table_statement -> ColumnMetadata(generate_create_table_statement,false,columnNullableUnknown,2147483647,0,VARCHAR,text,java.lang.String,2147483647))
09:13:14.244 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - CREATE TABLE public.advertiser (
    device_id numeric(3,0)  NOT NULL,
    name character varying  NOT NULL,
    booking_country character varying  NOT NULL,
    id numeric  NOT NULL,
    last_updated character varying  NOT NULL,
    status character varying  NOT NULL,
    currency character varying  NOT NULL,
    managed_by numeric  NOT NULL,
CONSTRAINT advertiser_pkey
    PRIMARY KEY (id));

09:13:14.250 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - Map(generate_create_table_statement -> ColumnMetadata(generate_create_table_statement,false,columnNullableUnknown,2147483647,0,VARCHAR,text,java.lang.String,2147483647))
09:13:14.250 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - CREATE TABLE public.campaign_stats (
    impressions numeric(3,0) DEFAULT 1 NOT NULL,
    spend numeric DEFAULT 0.0 NOT NULL,
    stats_date date  NOT NULL,
    advertiser_id numeric  NOT NULL,
    clicks numeric(3,0) DEFAULT 0 NOT NULL,
    campaign_id numeric  NOT NULL);

09:13:14.255 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - Map(generate_create_table_statement -> ColumnMetadata(generate_create_table_statement,false,columnNullableUnknown,2147483647,0,VARCHAR,text,java.lang.String,2147483647))
09:13:14.256 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - CREATE TABLE public.campaign (
    device_id numeric(3,0)  NOT NULL,
    campaign_name character varying  NOT NULL,
    id numeric  NOT NULL,
    advertiser_id numeric  NULL,
    status character varying  NOT NULL,
    campaign_total character varying  NOT NULL,
    campaign_start_date character varying  NOT NULL,
    campaign_end_date character varying  NOT NULL,
CONSTRAINT campaign_pkey
    PRIMARY KEY (id),
CONSTRAINT campaign_advertiser_id_fkey
    FOREIGN KEY (advertiser_id) REFERENCES advertiser(id));

09:13:14.261 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - Map(generate_create_table_statement -> ColumnMetadata(generate_create_table_statement,false,columnNullableUnknown,2147483647,0,VARCHAR,text,java.lang.String,2147483647))
09:13:14.261 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - CREATE TABLE public.ad_group (
    device_id numeric(3,0)  NOT NULL,
    name character varying  NOT NULL,
    column2_id numeric  NOT NULL,
    id numeric  NOT NULL,
    advertiser_id numeric  NULL,
    status character varying  NOT NULL,
    campaign_id numeric  NOT NULL,
CONSTRAINT ad_group_pkey
    PRIMARY KEY (id),
CONSTRAINT ad_group_advertiser_id_fkey
    FOREIGN KEY (advertiser_id) REFERENCES advertiser(id),
CONSTRAINT ad_group_campaign_id_fkey
    FOREIGN KEY (campaign_id) REFERENCES campaign(id));

09:13:14.263 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.266 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.266 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - Map(generate_create_table_statement -> ColumnMetadata(generate_create_table_statement,false,columnNullableUnknown,2147483647,0,VARCHAR,text,java.lang.String,2147483647))
09:13:14.266 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - CREATE TABLE public.targetingattribute (
    device_id numeric(3,0)  NOT NULL,
    created_date date  NOT NULL,
    parent_id numeric  NOT NULL,
    landing_url character varying(2048)  NOT NULL,
    created_by_user character varying(255)  NOT NULL,
    ad_param_value_2 character varying(200)  NOT NULL,
    hidden numeric  NOT NULL,
    ad_param_value_3 character varying(200)  NOT NULL,
    cpc numeric  NOT NULL,
    editorial_results character varying(256)  NOT NULL,
    ad_param_value_1 character varying(2048)  NOT NULL,
    id numeric  NOT NULL,
    parent_type character varying(64)  NOT NULL,
    last_updated date  NOT NULL,
    advertiser_id numeric  NULL,
    status character varying(255)  NOT NULL,
    modifier numeric  NOT NULL,
    deleted_date date  NOT NULL,
    last_updated_by_user character varying(255)  NOT NULL,
    match_type character varying(64)  NOT NULL,
    value character varying(255)  NOT NULL,
CONSTRAINT targetingattribute_pkey
    PRIMARY KEY (id),
CONSTRAINT targetingattribute_advertiser_id_fkey
    FOREIGN KEY (advertiser_id) REFERENCES advertiser(id),
CONSTRAINT targetingattribute_ad_group_id_fkey
    FOREIGN KEY (parent_id) REFERENCES ad_group(id));

09:13:14.267 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 2, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
DerivedRowListTest:
NewFactTest:
09:13:14.271 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.272 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - Map(generate_create_table_statement -> ColumnMetadata(generate_create_table_statement,false,columnNullableUnknown,2147483647,0,VARCHAR,text,java.lang.String,2147483647))
09:13:14.272 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - CREATE TABLE public.ad (
    impressions numeric  NOT NULL,
    device_id numeric(3,0)  NOT NULL,
    ad_group_id numeric  NOT NULL,
    id numeric  NOT NULL,
    user_count numeric  NOT NULL,
    advertiser_id numeric  NULL,
    status character varying  NOT NULL,
    title character varying  NOT NULL,
    campaign_id numeric  NOT NULL,
CONSTRAINT ad_pkey
    PRIMARY KEY (id),
CONSTRAINT ad_advertiser_id_fkey
    FOREIGN KEY (advertiser_id) REFERENCES advertiser(id),
CONSTRAINT ad_campaign_id_fkey
    FOREIGN KEY (campaign_id) REFERENCES campaign(id),
CONSTRAINT ad_ad_group_id_fkey
    FOREIGN KEY (ad_group_id) REFERENCES ad_group(id));

09:13:14.273 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.273 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- newFact should fail with duplicate columns
- decode function
- Ensure a valid return in Engine.from(String)
- Test QueryCommon
- Test DruidLiteralMapper 
- Throw GranularityNotSupportedError
- registering Presto query generation multiple times should fail
- Attempt to use each join-able engine
09:13:14.279 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.279 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.281 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.282 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.284 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.284 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.285 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.285 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.286 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.286 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.287 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - Map(routine_definition -> ColumnMetadata(routine_definition,false,columnNullable,2147483647,0,VARCHAR,varchar,java.lang.String,2147483647), routine_name -> ColumnMetadata(routine_name,false,columnNullable,2147483647,0,VARCHAR,varchar,java.lang.String,2147483647))
09:13:14.287 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.287 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - 
CREATE OR REPLACE FUNCTION update_last_updated_column() RETURNS TRIGGER AS $BODY$ BEGIN   NEW.last_updated = now();   RETURN NEW;END;  $BODY$ LANGUAGE plpgsql;
09:13:14.287 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.288 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.288 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.290 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.290 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.294 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.295 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.296 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.296 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.297 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.297 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.297 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - Map(view_definition -> ColumnMetadata(view_definition,false,columnNullable,2147483647,0,VARCHAR,varchar,java.lang.String,2147483647), table_name -> ColumnMetadata(table_name,false,columnNullable,2147483647,0,VARCHAR,varchar,java.lang.String,2147483647))
09:13:14.298 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - 
DROP VIEW IF EXISTS account_stats;
CREATE VIEW account_stats AS
 SELECT campaign_stats.stats_date,
    campaign_stats.advertiser_id,
    sum(campaign_stats.impressions) AS impressions,
    sum(campaign_stats.clicks) AS clicks,
    sum(campaign_stats.spend) AS spend
   FROM campaign_stats
  GROUP BY campaign_stats.stats_date, campaign_stats.advertiser_id;

09:13:14.298 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.298 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.299 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.299 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.300 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.300 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.301 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.301 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.302 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:13:14.302 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.304 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.304 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.305 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:13:14.305 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.306 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:13:14.306 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.307 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.308 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.309 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - Map(table_name -> ColumnMetadata(table_name,false,columnNullable,2147483647,0,VARCHAR,varchar,java.lang.String,2147483647), trigger_name -> ColumnMetadata(trigger_name,false,columnNullable,2147483647,0,VARCHAR,varchar,java.lang.String,2147483647), action_statement -> ColumnMetadata(action_statement,false,columnNullable,2147483647,0,VARCHAR,varchar,java.lang.String,2147483647), action_timing -> ColumnMetadata(action_timing,false,columnNullable,2147483647,0,VARCHAR,varchar,java.lang.String,2147483647), action_orientation -> ColumnMetadata(action_orientation,false,columnNullable,2147483647,0,VARCHAR,varchar,java.lang.String,2147483647))
09:13:14.310 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:13:14.310 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.311 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.311 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.312 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.312 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.314 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.314 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.316 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.316 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.317 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.317 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.318 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.318 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.320 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:13:14.320 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.322 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.322 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.323 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:13:14.323 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.324 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.325 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.326 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:13:14.332 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.333 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - Map(tgnargs -> ColumnMetadata(tgnargs,false,columnNoNulls,5,0,SMALLINT,int2,java.lang.Integer,6), function_name -> ColumnMetadata(function_name,false,columnNoNulls,2147483647,0,VARCHAR,name,java.lang.String,2147483647), tginitdeferred -> ColumnMetadata(tginitdeferred,false,columnNoNulls,1,0,BIT,bool,java.lang.Boolean,1), tgname -> ColumnMetadata(tgname,false,columnNoNulls,2147483647,0,VARCHAR,name,java.lang.String,2147483647), table_name -> ColumnMetadata(table_name,false,columnNoNulls,2147483647,0,VARCHAR,name,java.lang.String,2147483647), tgconstraint -> ColumnMetadata(tgconstraint,false,columnNoNulls,10,0,BIGINT,oid,java.lang.Long,10), tgdeferrable -> ColumnMetadata(tgdeferrable,false,columnNoNulls,1,0,BIT,bool,java.lang.Boolean,1), tgtype -> ColumnMetadata(tgtype,false,columnNoNulls,5,0,SMALLINT,int2,java.lang.Integer,6), trigger_name -> ColumnMetadata(trigger_name,false,columnNoNulls,2147483647,0,VARCHAR,name,java.lang.String,2147483647), tgoldtable -> ColumnMetadata(tgoldtable,false,columnNullable,2147483647,0,VARCHAR,name,java.lang.String,2147483647), trigger_event -> ColumnMetadata(trigger_event,false,columnNullableUnknown,2147483647,0,VARCHAR,text,java.lang.String,2147483647), tgisinternal -> ColumnMetadata(tgisinternal,false,columnNoNulls,1,0,BIT,bool,java.lang.Boolean,1), tgconstrindid -> ColumnMetadata(tgconstrindid,false,columnNoNulls,10,0,BIGINT,oid,java.lang.Long,10), tgfoid -> ColumnMetadata(tgfoid,false,columnNoNulls,10,0,BIGINT,oid,java.lang.Long,10), tgenabled -> ColumnMetadata(tgenabled,false,columnNoNulls,1,0,CHAR,char,java.lang.String,1), tgconstrrelid -> ColumnMetadata(tgconstrrelid,false,columnNoNulls,10,0,BIGINT,oid,java.lang.Long,10), tgrelid -> ColumnMetadata(tgrelid,false,columnNoNulls,10,0,BIGINT,oid,java.lang.Long,10), tgattr -> ColumnMetadata(tgattr,false,columnNoNulls,2147483647,0,OTHER,int2vector,java.lang.String,2147483647), tgnewtable -> ColumnMetadata(tgnewtable,false,columnNullable,2147483647,0,VARCHAR,name,java.lang.String,2147483647), tgargs -> ColumnMetadata(tgargs,false,columnNoNulls,2147483647,0,BINARY,bytea,[B,2147483647), action_timing -> ColumnMetadata(action_timing,false,columnNullableUnknown,2147483647,0,VARCHAR,text,java.lang.String,2147483647), action_orientation -> ColumnMetadata(action_orientation,false,columnNullableUnknown,2147483647,0,VARCHAR,text,java.lang.String,2147483647), tgqual -> ColumnMetadata(tgqual,false,columnNullable,2147483647,0,OTHER,pg_node_tree,java.lang.String,2147483647))
09:13:14.334 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - 
DROP TRIGGER IF EXISTS update_targetingattribute_last_updated ON targetingattribute;
CREATE TRIGGER update_targetingattribute_last_updated BEFORE UPDATE ON targetingattribute
    FOR EACH ROW EXECUTE PROCEDURE update_last_updated_column();

09:13:14.335 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.335 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.336 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:13:14.336 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.337 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.338 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.424 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.424 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.429 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.429 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.431 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:13:14.431 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.432 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.432 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.443 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.443 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.444 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.444 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.445 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:13:14.445 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.446 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.446 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.449 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:13:14.450 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.451 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.451 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.452 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.452 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.453 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:13:14.453 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.454 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.454 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.455 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:13:14.456 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.457 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.457 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.458 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:13:14.458 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.458 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.459 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.460 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.460 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.461 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.461 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.462 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.462 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.462 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.462 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.465 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.465 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.469 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:13:14.469 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.470 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.470 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.471 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.471 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
CREATE TABLE pg_ad_k_stats
(impressions	NUMERIC(10)	DEFAULT 0	NOT NULL, 
term_id	NUMERIC		NOT NULL, 
avg_pos	NUMERIC		NULL, 
spend	NUMERIC	DEFAULT 0.0	NOT NULL, 
landing_page_url	VARCHAR		NOT NULL, 
price_type	NUMERIC(3)		NOT NULL, 
stats_date_test	DATE		NOT NULL, 
device_type_id	NUMERIC(10)		NOT NULL, 
post_imp_conversions	NUMERIC	DEFAULT 0	NOT NULL, 
ad_group_id	NUMERIC		NOT NULL, 
account_id	NUMERIC		NOT NULL, 
stats_dates	DATE		NOT NULL, 
stats_source	NUMERIC(3)		NOT NULL, 
conversions	NUMERIC	DEFAULT 0	NOT NULL, 
max_bid	NUMERIC	DEFAULT 0.0	NOT NULL, 
stats_date	DATE		NOT NULL, 
clicks	NUMERIC(10)	DEFAULT 0	NOT NULL, 
ad_id	NUMERIC		NOT NULL, 
campaign_id	NUMERIC		NOT NULL)
;
         
ALTER TABLE pg_ad_k_stats
ADD CONSTRAINT pg_ad_k_stats_pk
PRIMARY KEY
(stats_date,stats_source,account_id,price_type)
;
       
     
09:13:14.472 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.472 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.473 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:13:14.473 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.474 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.474 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.475 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:13:14.475 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.476 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.476 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.477 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:13:14.477 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.478 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.478 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.479 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.479 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.480 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.480 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.481 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:13:14.481 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.482 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.482 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.488 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.491 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
CREATE TABLE postgres_advertiser
(channel	VARCHAR(1024)		NOT NULL, 
tier	VARCHAR		NOT NULL, 
created_date	VARCHAR		NOT NULL, 
is_test	NUMERIC		NOT NULL, 
created_by_user	VARCHAR		NOT NULL, 
timezone	VARCHAR		NOT NULL, 
adv_type	VARCHAR		NOT NULL, 
mdm_company_name	VARCHAR(255)		NOT NULL, 
account_type	VARCHAR		NOT NULL, 
shard_id	NUMERIC(3)		NOT NULL, 
booking_country	VARCHAR		NOT NULL, 
id	NUMERIC		NOT NULL, 
mdm_id	NUMERIC		NOT NULL, 
am_contact	VARCHAR(1000)		NOT NULL, 
billing_country	VARCHAR		NOT NULL, 
snapshot_ts	NUMERIC(10)		NOT NULL, 
last_updated	VARCHAR		NOT NULL, 
status	VARCHAR(255)		NOT NULL, 
currency	VARCHAR		NOT NULL, 
managed_by	NUMERIC		NOT NULL, 
crm_id	VARCHAR		NOT NULL, 
website_url	VARCHAR(1000)		NOT NULL, 
vat_id	VARCHAR		NOT NULL, 
last_updated_by_user	VARCHAR		NOT NULL)
;
ALTER TABLE postgres_advertiser
ADD CONSTRAINT postgres_advertiser_pk
PRIMARY KEY
(id)
;
       
     
09:13:14.492 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.492 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.494 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.495 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.496 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.496 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.497 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.497 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.499 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.499 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.500 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.501 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.502 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.502 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.511 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.511 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.515 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:13:14.516 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.516 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:13:14.517 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.518 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.518 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.519 WARN  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator$ - Another query generator registered for HiveEngine : null
09:13:14.522 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.522 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.551 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.552 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.558 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:13:14.559 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.680 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.680 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.684 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.684 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.686 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:13:14.686 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.687 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.687 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.688 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.688 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.689 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.689 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.690 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.690 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.691 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:13:14.691 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.692 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.693 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.702 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.702 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.703 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.703 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.704 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.708 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
QueryExecutorContextTest:
CSVRowListTest:
PublicFactTest:
09:13:14.711 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.711 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- get_interval_date
FkFactMapStorageTest:
09:13:14.712 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:13:14.714 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube-2 with params: UserId: test-user, isInternal: true, dryRunRevision: Some(1), forceRevision: None, forceEngine: Some(Oracle)forceQueryGenVersion: None
09:13:14.715 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Bucketing config is not defined for cube: test-cube-2
09:13:14.715 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube-2, revision: 1, dryRunRevision: Some(1) dryrunEngine: Some(Oracle)
09:13:14.716 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube-2 with params: UserId: test-user, isInternal: true, dryRunRevision: Some(1), forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.717 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Bucketing config is not defined for cube: test-cube-2
09:13:14.719 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube-2, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:13:14.719 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: invalid-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.721 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.809 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-campaign filters:Map(Campaign Name -> TreeSet(EqualityFilter(Campaign Name,MegaCampaign,false,false)), Source -> TreeSet(EqualityFilter(Source,2,true,false)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:13:14.812 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:13:14.816 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:13:14.816 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:13:14.816 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:13:14.838 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - hasLowCardinalityDimFilters=true forceDimDriven=false hasDimAndFactOperations=true
09:13:14.839 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - isFactDriven=false hasIndexInOutput=true dimEngines=Set(Oracle, Postgres, Presto, Hive) dimCandidates=TreeSet(campaign)
09:13:14.845 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: None dryrunEngine: None
ExpressionTest:
09:13:14.848 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- toPublicFact should fail with no underlying facts will fail
- newFact should succeed with no duplicate columns
09:13:14.849 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.849 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- toPublicFact should fail with two dim columns with same alias
09:13:14.850 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.850 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- register duplicate column in one column context should fail
- generate hive expression with +
09:13:14.851 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.851 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- successfully derive dependent columns from HiveDerivedExpression
- generate hive expression with -
09:13:14.852 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.852 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- render column that does not exist in column context should fail
- newFact should fail with columns with different engine requirement
09:13:14.853 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.853 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- successfully register a query executor
09:13:14.854 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.854 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.855 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.855 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.856 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.856 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.857 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.857 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.858 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.858 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.859 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.859 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.860 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.860 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.861 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.861 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.862 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.862 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.864 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.864 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.865 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.865 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.866 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.866 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.867 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.867 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.868 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.868 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.869 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.869 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.870 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.870 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.871 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.871 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.872 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.872 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.873 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.873 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.874 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.874 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.875 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.875 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.876 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.876 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.877 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.877 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.878 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.878 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.879 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.879 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.880 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.880 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.881 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: None dryrunEngine: None
09:13:14.881 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.882 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.882 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.883 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.883 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.884 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.884 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.885 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
- generate hive expression with *
09:13:14.885 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
ResultSetTransformerTest:
- toPublicFact should fail with two dim columns with same name
09:13:14.886 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.886 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.887 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.888 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- successfully derive dependent columns from HiveDerivedExpression TRIM
- generate hive expression with /
09:13:14.888 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.889 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- generate hive expression with /-
- newFact should fail with fact annotated with different engine requirement
09:13:14.890 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.890 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- generate hive expression with SUM
- successfully derive dependent columns from HiveShardingExpression
09:13:14.890 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.891 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- toPublicFact should fail with two fact columns with same alias
- newFact should fail with column annotated with different engine requirement
09:13:14.891 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.892 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- generate hive expression with nested derivation
- Should fail with DruidEngine
- generate hive expression with MAX
- Create a ResultSetTransformer
09:13:14.894 INFO  [ScalaTest-3-running-QueryPipelineWithFallbackTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 7e787351-1560-4f43-a550-d6facfd45847
- Should fail with invalid JoinType
09:13:14.907 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Druid, Hive, Presto)
09:13:14.909 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact_table_keywords engine=Oracle cost=800 level=9998 cardinalityPreference=2147483647
09:13:14.910 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact0_table_keywords engine=Oracle cost=800 level=9999 cardinalityPreference=2147483647
09:13:14.916 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats
       requestCols=Vector(DimColumnInfo(Campaign ID), FactColumnInfo(Impressions), DimColumnInfo(Campaign Name), DimColumnInfo(Campaign Status), FactColumnInfo(CTR))
       requestSortByCols=Vector(DimSortByColumnInfo(Campaign Name,ASC))
       dimColumnAliases=Set(Campaign ID, Campaign Name, Campaign Status)
       dimCardinalityEstimate=None
       factCost=Map((fact_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true), (fact0_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true))
       factSortByMap=Map()
       dimSortByMap=Map(Campaign Name -> ASC)
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=true
       hasDimFilters=true
       hasNonFKDimFilters=true
       hasFactSortBy=false
       hasDimSortBy=true
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=true
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=true
       hasLowCardinalityDimFilters=true
       isFactDriven=false
       forceDimDriven=false
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=SyncRequest
       startIndex=-1
       maxRows=100
       includeRowCount=true
       hasDimAndFactOperations=true
       isTimeSeries=false
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true))
       factSchemaRequiredAliasesMap=Map(fact0_table_keywords -> Set(Advertiser ID), fact_table_keywords -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(campaign -> InnerJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(Advertiser ID, Campaign Name)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=true
       hasNonFKNonForceFilters=true
       hasNonFKSortBy=true
       hasNonFKNonPKSortBy=true
       hasLowCardinalityFilter=true
       hasPKRequested=true
       hasNonPushDownFilters=true
     )
     
09:13:14.918 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=campaign_oracle
       publicDim.name=campaign
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,213,false,false)), EqualityFilter(Campaign Name,MegaCampaign,false,false))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=true
       hasNonFKSortBy=true
       hasNonPushDownFilters=true
       hasPKRequested=true
     
09:13:14.919 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=fact_table_keywords
       publicFact.name=k_stats
       fkCols=TreeSet(advertiser_id, campaign_id)
       nonFkCols=Set(CTR, impressions, stats_source)
       requestCols=Set(CTR, campaign_id, impressions)
       filterCols=Set(stats_source, advertiser_id)
       factCost=800
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(advertiser_id -> Advertiser ID, campaign_id -> Campaign ID, stats_source -> Source)
       factColMapping=Map(impressions -> Impressions, CTR -> CTR)
       filters=TreeSet(EqualityFilter(Advertiser ID,213,false,false), EqualityFilter(Source,2,true,false))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:13:14.920 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:13:14.920 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = false
09:13:14.922 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - runSingleEngineQuery
09:13:14.924 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set()
09:13:14.925 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet()
09:13:14.968 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.968 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.969 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.969 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.970 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.970 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.971 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.972 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.975 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.975 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.979 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.979 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.980 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.980 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.981 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.981 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.981 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.982 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.982 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.983 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.983 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:14.986 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:14.983 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:14.990 INFO  [ScalaTest-9-running-QueryContextTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:14.999 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:14.999 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.001 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.001 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.017 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.027 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.027 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.028 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.029 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query option defined!
09:13:15.030 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.030 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.031 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.031 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.033 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.033 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.033 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.033 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.034 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.034 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.035 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.035 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.044 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.044 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.045 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.046 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.046 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.047 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.046 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.047 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.047 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.047 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.048 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.048 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.049 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.049 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.050 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.050 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.051 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.051 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.052 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.052 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.052 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
09:13:15.053 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.053 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.054 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.054 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- newFact should fail if there's no reference column fo derived fact column
- generate hive expression with TIMESTAMP_TO_FORMATTED_DATE
AuthValidatorTest:
- generate hive expression with GET_INTERVAL_DATE
- successfully derive dependent columns from OracleDerivedExpression
- generate hive expression with DECODE
- Const Cols Tests
- generate hive expression with COALESCE
- newFact should fail if there's no reference column fo derived dim column
- generate hive expression with GET_A_BY_B
- successfully derive dependent columns from PostgresDerivedExpression
- Attempt to validate columns in the CC
- newFact should fail if ddl annotation is of a different engine other than the engine of the fact
- generate hive expression with GET_A_BY_B_PLUS_C
- successfully derive dependent columns from OracleDerivedExpression NVL
- newFact should fail if derived expression is not defined for derived columns
09:13:15.065 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.219 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.220 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.221 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.221 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- generate hive expression with GET_CONDITIONAL_A_BY_B
09:13:15.223 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.223 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- generate oracle expression with +
09:13:15.224 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
- successfully derive dependent columns from PostgresDerivedExpression NVL
09:13:15.224 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- generate oracle expression with -
09:13:15.225 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.225 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- successfully derive dependent columns from OracleDerivedExpression TRUNC
09:13:15.226 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.226 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- generate oracle expression with *
- DruidConstDerFactCol test
09:13:15.227 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.227 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.228 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.228 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.231 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: None dryrunEngine: None
09:13:15.231 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.232 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.232 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.233 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.233 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.234 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.234 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.237 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.237 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.239 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.239 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.241 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.242 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.243 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.244 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.246 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.246 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.249 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.249 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.272 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.272 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.274 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.275 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
SafeCloseableTest:
- generate oracle expression with /
09:13:15.276 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.277 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- generate oracle expression with /-
09:13:15.278 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.278 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- successfully derive dependent columns from PostgresDerivedExpression TRUNC
09:13:15.279 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.279 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- generate oracle expression with sum
- generate oracle expression with nested derivation
- isCubeDefined should return true on valid registered cube
09:13:15.280 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.280 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.280 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.281 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.281 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.283 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.283 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.284 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.284 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.285 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:13:15.286 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.286 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- generate oracle expression with max
- generate oracle expression with TIMESTAMP_TO_FORMATTED_DATE
- generate oracle expression with GET_INTERVAL_DATE
- successfully doWork
- generate oracle expression with DECODE
- generate oracle expression with COALESCE
- generate oracle expression with TO_CHAR
- generate Postgres expression with +
- generate Postgres expression with -
- registering Postgres query generation multiple times should fail
- generate Postgres expression with *
- generate Postgres expression with /
- generate Postgres expression with /-
- generate Postgres expression with sum
- generate Postgres expression with nested derivation
- generate Postgres expression with max
- isCubeDefined with revision should return true on valid registered cube
- generate Postgres expression with TIMESTAMP_TO_FORMATTED_DATE
- generate Postgres expression with GET_INTERVAL_DATE
- Successful ResultSet conversion
09:13:15.309 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.311 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.313 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: None dryrunEngine: None
09:13:15.314 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.316 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(1), dryRunQueryGenVersion: Some(Version(1))
09:13:15.317 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: Some(Version(2))
09:13:15.318 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Bucketing config for query generator is not defined for engine: Hive: None
09:13:15.318 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:15.318 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: Some(Version(2))
09:13:15.319 INFO  [ScalaTest-10-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: Some(Version(2))
09:13:15.328 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.328 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.348 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.349 ERROR [ScalaTest-14-running-WithNewGrainFactTest] c.y.m.c.DailyGrain$ - Unchecked input to function from=2018-02-01, to=2018-01-01
java.lang.IllegalArgumentException: requirement failed: From date must be before or equal to To date : from=2018-02-01, to=2018-01-01
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.core.DailyGrain$.getDaysBetween(Grain.scala:79)
	at com.yahoo.maha.core.fact.WithNewGrainFactTest.$anonfun$new$40(WithNewGrainFactTest.scala:130)
	at scala.runtime.java8.JFunction0$mcI$sp.apply(JFunction0$mcI$sp.java:23)
	at org.scalatest.Assertions.intercept(Assertions.scala:749)
	at org.scalatest.Assertions.intercept$(Assertions.scala:746)
	at org.scalatest.funsuite.AnyFunSuite.intercept(AnyFunSuite.scala:1562)
	at com.yahoo.maha.core.fact.WithNewGrainFactTest.$anonfun$new$39(WithNewGrainFactTest.scala:129)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
09:13:15.349 ERROR [ScalaTest-14-running-WithNewGrainFactTest] c.y.m.c.DailyGrain$ - Unchecked input to function from=2018-01-01, to=not a date
java.lang.IllegalArgumentException: Invalid format: "not a date"
	at org.joda.time.format.DateTimeFormatter.parseDateTime(DateTimeFormatter.java:945)
	at com.yahoo.maha.core.DailyGrain$.getDaysBetween(Grain.scala:78)
	at com.yahoo.maha.core.fact.WithNewGrainFactTest.$anonfun$new$41(WithNewGrainFactTest.scala:134)
	at scala.runtime.java8.JFunction0$mcI$sp.apply(JFunction0$mcI$sp.java:23)
	at org.scalatest.Assertions.intercept(Assertions.scala:749)
	at org.scalatest.Assertions.intercept$(Assertions.scala:746)
	at org.scalatest.funsuite.AnyFunSuite.intercept(AnyFunSuite.scala:1562)
	at com.yahoo.maha.core.fact.WithNewGrainFactTest.$anonfun$new$39(WithNewGrainFactTest.scala:133)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
09:13:15.352 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.352 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.363 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.364 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.366 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.367 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.367 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.373 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.374 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.378 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.378 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.397 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.397 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.418 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.418 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.419 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.433 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.433 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
PostgresDDLGeneratorTest:
- Should correctly display source columns when the source is also derived
- toPublicFact should fail with one dim and one fact columns with same alias
- generate Postgres expression with DECODE
- generate Postgres expression with DECODE_DIM
- generate Postgres expression with COALESCE
- toPublicFact should fail with dim column name referencing non-existing column in fact
- generate Postgres expression with TO_CHAR
- Should create a column from a tree of derivation
- toPublicFact should fail with fact column name referencing non-existing column in fact
- isCubeDefined should return false on invalid cube
09:13:15.440 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.443 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.443 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.452 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
- toPublicFact should fail with forced filter referencing non-existing column in fact
- toPublicFact should fail with empty max days window
- newFact should fail if columns have difference column context
- toPublicFact should fail with empty max days look back window
- Validation on FactCol with DruidFilteredRollup should fail if filter refers to invalid dimension column
- toPublicFact should succeed with forced filter at fact level which exists
- Validation on FactCol with DruidFilteredListRollup should fail if filter refers to invalid dimension column
- build should fail on missing dimension table on foreign keys for fact
- toPublicFact should fail with forced filter at fact level which does not exist
- Validation on FactCol with DruidFilteredRollup should fail if it refers to non-existent fact column
- build should fail on missing dimension table on foreign keys for dimension
- toPublicFact should fail with forced filter at fact level which does not support filter operation
09:13:15.469 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.469 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- Validation on DimCol with DruidFuncDimCol should fail if it refers to non-existent Dim column
- toPublicFact should succeed with forced filter at fact level which does support filter operation
- toPublicFact should fail if forced filter columns ARE in the base dim, but resolve to the same base column (duplicate where clause)
- toPublicFact should fail if a declared forced filter doesn't have isForcedFilter=true
- toPublicFact should succeed with forced filter at public fact level which is overridden at fact level
09:13:15.485 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.489 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.489 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.516 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.519 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.523 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.523 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.527 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to e1afbc64-92c2-4501-8a43-2badc450b3d6
09:13:15.531 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.531 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.537 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.539 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.539 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-campaign filters:Map(Campaign Name -> TreeSet(EqualityFilter(Campaign Name,MegaCampaign,false,false)), Source -> TreeSet(EqualityFilter(Source,2,true,false)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:13:15.540 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:13:15.540 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:13:15.540 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.540 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.540 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:13:15.540 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:13:15.541 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - hasLowCardinalityDimFilters=true forceDimDriven=false hasDimAndFactOperations=true
09:13:15.541 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - isFactDriven=false hasIndexInOutput=true dimEngines=Set(Oracle, Postgres, Presto, Hive) dimCandidates=TreeSet(campaign)
09:13:15.542 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Druid, Hive, Presto)
09:13:15.545 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact_table_keywords engine=Oracle cost=800 level=9998 cardinalityPreference=2147483647
09:13:15.545 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact0_table_keywords engine=Oracle cost=800 level=9999 cardinalityPreference=2147483647
09:13:15.546 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats
       requestCols=Vector(DimColumnInfo(Campaign ID), FactColumnInfo(Impressions), DimColumnInfo(Campaign Name), DimColumnInfo(Campaign Status), FactColumnInfo(CTR))
       requestSortByCols=Vector(DimSortByColumnInfo(Campaign Name,ASC))
       dimColumnAliases=Set(Campaign ID, Campaign Name, Campaign Status)
       dimCardinalityEstimate=None
       factCost=Map((fact_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true), (fact0_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true))
       factSortByMap=Map()
       dimSortByMap=Map(Campaign Name -> ASC)
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=true
       hasDimFilters=true
       hasNonFKDimFilters=true
       hasFactSortBy=false
       hasDimSortBy=true
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=true
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=true
       hasLowCardinalityDimFilters=true
       isFactDriven=false
       forceDimDriven=false
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=SyncRequest
       startIndex=-1
       maxRows=100
       includeRowCount=true
       hasDimAndFactOperations=true
       isTimeSeries=false
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true))
       factSchemaRequiredAliasesMap=Map(fact0_table_keywords -> Set(Advertiser ID), fact_table_keywords -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(campaign -> InnerJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(Advertiser ID, Campaign Name)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=true
       hasNonFKNonForceFilters=true
       hasNonFKSortBy=true
       hasNonFKNonPKSortBy=true
       hasLowCardinalityFilter=true
       hasPKRequested=true
       hasNonPushDownFilters=true
     )
     
09:13:15.546 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=campaign_oracle
       publicDim.name=campaign
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,213,false,false)), EqualityFilter(Campaign Name,MegaCampaign,false,false))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=true
       hasNonFKSortBy=true
       hasNonPushDownFilters=true
       hasPKRequested=true
     
09:13:15.546 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=fact_table_keywords
       publicFact.name=k_stats
       fkCols=TreeSet(advertiser_id, campaign_id)
       nonFkCols=Set(CTR, impressions, stats_source)
       requestCols=Set(CTR, campaign_id, impressions)
       filterCols=Set(stats_source, advertiser_id)
       factCost=800
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(advertiser_id -> Advertiser ID, campaign_id -> Campaign ID, stats_source -> Source)
       factColMapping=Map(impressions -> Impressions, CTR -> CTR)
       filters=TreeSet(EqualityFilter(Advertiser ID,213,false,false), EqualityFilter(Source,2,true,false))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:13:15.546 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:13:15.546 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = false
09:13:15.546 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - runSingleEngineQuery
09:13:15.546 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set()
09:13:15.547 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet()
09:13:15.549 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.549 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query option defined!
09:13:15.549 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
09:13:15.572 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.572 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.584 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.590 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.594 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.594 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.606 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.609 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.609 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
LongRangeTest:
- Validation on PostResultDerivedFactCol should fail if it refers to non-existent column
- set and check requestCol
- getPrimaryKeyAlias should be able to return the primaryKey alias for specified attribute alias for dimensions
- Fact with FK flag should fail
- successfully test an element in range
09:13:15.614 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.614 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.620 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.623 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.626 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.626 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.627 WARN  [ScalaTest-2-running-CSVRowListTest] c.y.m.c.q.CSVRowList - foreach not supported on CSVRowList
09:13:15.628 WARN  [ScalaTest-2-running-CSVRowListTest] c.y.m.c.q.CSVRowList - map not supported on CSVRowList
09:13:15.662 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.662 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.663 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.666 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.666 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.669 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.669 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.674 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.674 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.675 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.675 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.676 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.676 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.681 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.683 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.700 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.700 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.701 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.701 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.709 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.710 INFO  [ScalaTest-9-running-QueryContextTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.710 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.715 INFO  [ScalaTest-9-running-QueryContextTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 94042e46-47aa-4b00-8256-bc5089e423da
09:13:15.716 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.716 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- successfully test an element out of range
DaysUtilsTest:
- successfully test an element is before range
- successfully test an element is not before range
09:13:15.730 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
- withNewSchema should success given different schemas
- fail to create an invalid range
09:13:15.737 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.738 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.746 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.752 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.752 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.764 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.764 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.772 INFO  [ScalaTest-3-running-QueryPipelineWithFallbackTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain defined
09:13:15.776 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.777 ERROR [ScalaTest-3-running-QueryPipelineWithFallbackTest] c.y.m.c.q.QueryPipelineWithFallback - Primary query chain failed, recovering with fall back
java.lang.IllegalArgumentException: Executor not found for engine=Druid, query=GroupByDruidQuery
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$7(QueryPipeline.scala:264)
	at scala.Option.fold(Option.scala:251)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:265)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.$anonfun$execute$1(QueryPipeline.scala:127)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.execute(QueryPipeline.scala:126)
09:13:15.778 ERROR [ScalaTest-3-running-QueryPipelineWithFallbackTest] c.y.m.c.q.QueryPipelineWithFallback - Primary query chain failed, recovering with fall back
java.lang.IllegalArgumentException: Executor not found for engine=Druid, query=GroupByDruidQuery
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$7(QueryPipeline.scala:264)
	at scala.Option.fold(Option.scala:251)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:265)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.$anonfun$execute$3(QueryPipeline.scala:140)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.execute(QueryPipeline.scala:139)
09:13:15.791 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.791 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.802 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:13:15.802 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.807 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.807 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.811 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:13:15.850 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.850 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.867 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
MultiEngineQueryTest:
- newRollup should succeed with discarding foreign key
- String with quotes
- String with quotes
- Arbitrary String Patterns
- Arbitrary String Patterns
- Wildcard Escaping
- withAlternativeEngine should success with new name and new engine
- Wildcard Escaping
- withNewSchema should success given different schemas and copy force filters
- Semicolon statement
- newRollup should succeed with NoopSchema and no availableOnwardsDate
- BetweenFilter with a defined grain should modify the output result to include it.
- Semicolon statement
- Invalid IntType
- valid IntType
- newRollup should fail is trying to make a rollup without available onwards
- Invalid IntType
- Reject the facts which are running out of lookback days and days window
- valid IntType
- withNewSchema should fail given the same schemas
09:13:15.884 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.884 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:15.884 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
- Invalid DecType
- valid DecType
- withNewSchema should fail given a non-existing from
- Invalid DecType
- valid DateType
09:13:15.886 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.886 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.888 INFO  [ScalaTest-8-running-CompleteRowListTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to d12b63f9-41e1-48f9-9388-b158b6ab679b
- valid DecType
- successfully render DateTimeBetweenFilter with daily and hourly grain and date type on oracle engine
- fake truncated hour, followed by real hour
- successfully render DateTimeBetweenFilter with daily and hourly grain and timestamp type on oracle engine
- withNewSchema should fail given the same names
09:13:15.891 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.891 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:15.891 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
- invalid DateType
09:13:15.893 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.897 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.897 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.900 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.900 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.901 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.902 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.906 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.911 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.911 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.922 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.926 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.926 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.928 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.932 INFO  [ScalaTest-13-running-MultiQueryTest] c.y.m.c.q.QueryChain - No data from driving query, running fall back query for MultiQuery
09:13:15.934 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 9c433207-75ab-49a5-9633-f6c758d66768
09:13:15.939 WARN  [ScalaTest-18-running-ReportingRequestTest] c.y.m.c.r.Parameter$ - Found unrecognized param Content-Type
HiveQueryGeneratorTest:
- successfully render DateTimeBetweenFilter with daily and hourly grain and date type on postgres engine
09:13:15.952 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.952 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- valid DateType
09:13:15.953 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 2bcbcb14-c9b1-433e-9bb4-83fe7ff4b178
- invalid TimeStampType
09:13:15.955 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.957 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.957 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:15.957 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:15.959 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.959 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.960 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 734bcc57-eb71-4cff-990c-1446555ce633
09:13:15.966 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.970 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.970 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.984 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.984 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.985 WARN  [ScalaTest-8-running-CompleteRowListTest] c.y.m.c.q.InMemRowList - Failed to get total row count.
Failure(java.lang.IllegalArgumentException: requirement failed: TOTALROWS not defined in alias map)
09:13:15.988 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.991 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:15.991 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:15.991 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:15.992 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:15.993 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:15.993 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:15.994 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-campaign filters:Map(Campaign Name -> TreeSet(EqualityFilter(Campaign Name,MegaCampaign,false,false)), Source -> TreeSet(EqualityFilter(Source,2,true,false)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:13:15.995 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:13:15.996 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:13:15.996 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:13:15.996 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:13:15.997 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - hasLowCardinalityDimFilters=true forceDimDriven=false hasDimAndFactOperations=true
09:13:15.997 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - isFactDriven=false hasIndexInOutput=true dimEngines=Set(Oracle, Postgres, Presto, Hive) dimCandidates=TreeSet(campaign)
09:13:15.997 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Druid, Hive, Presto)
09:13:15.997 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact_table_keywords engine=Oracle cost=800 level=9998 cardinalityPreference=2147483647
09:13:15.997 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact0_table_keywords engine=Oracle cost=800 level=9999 cardinalityPreference=2147483647
09:13:15.998 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats
       requestCols=Vector(DimColumnInfo(Campaign ID), FactColumnInfo(Impressions), DimColumnInfo(Campaign Name), DimColumnInfo(Campaign Status), FactColumnInfo(CTR))
       requestSortByCols=Vector(DimSortByColumnInfo(Campaign Name,ASC))
       dimColumnAliases=Set(Campaign ID, Campaign Name, Campaign Status)
       dimCardinalityEstimate=None
       factCost=Map((fact_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true), (fact0_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true))
       factSortByMap=Map()
       dimSortByMap=Map(Campaign Name -> ASC)
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=true
       hasDimFilters=true
       hasNonFKDimFilters=true
       hasFactSortBy=false
       hasDimSortBy=true
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=true
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=true
       hasLowCardinalityDimFilters=true
       isFactDriven=false
       forceDimDriven=false
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=SyncRequest
       startIndex=-1
       maxRows=100
       includeRowCount=true
       hasDimAndFactOperations=true
       isTimeSeries=false
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true))
       factSchemaRequiredAliasesMap=Map(fact0_table_keywords -> Set(Advertiser ID), fact_table_keywords -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(campaign -> InnerJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(Advertiser ID, Campaign Name)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=true
       hasNonFKNonForceFilters=true
       hasNonFKSortBy=true
       hasNonFKNonPKSortBy=true
       hasLowCardinalityFilter=true
       hasPKRequested=true
       hasNonPushDownFilters=true
     )
     
09:13:15.998 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=campaign_oracle
       publicDim.name=campaign
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,213,false,false)), EqualityFilter(Campaign Name,MegaCampaign,false,false))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=true
       hasNonFKSortBy=true
       hasNonPushDownFilters=true
       hasPKRequested=true
     
09:13:15.998 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=fact_table_keywords
       publicFact.name=k_stats
       fkCols=TreeSet(advertiser_id, campaign_id)
       nonFkCols=Set(CTR, impressions, stats_source)
       requestCols=Set(CTR, campaign_id, impressions)
       filterCols=Set(stats_source, advertiser_id)
       factCost=800
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(advertiser_id -> Advertiser ID, campaign_id -> Campaign ID, stats_source -> Source)
       factColMapping=Map(impressions -> Impressions, CTR -> CTR)
       filters=TreeSet(EqualityFilter(Advertiser ID,213,false,false), EqualityFilter(Source,2,true,false))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:13:15.998 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:13:15.998 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = false
09:13:15.998 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - runSingleEngineQuery
09:13:15.998 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set()
09:13:15.998 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet()
09:13:16.001 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.001 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query option defined!
09:13:16.001 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
09:13:16.016 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.016 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.023 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.023 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.033 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.034 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.043 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:16.057 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.057 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.071 INFO  [ScalaTest-3-running-QueryPipelineWithFallbackTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 46f4684c-6c21-4c6d-a3de-60313690acdb
DataTypeTest:
- newRollup should success with discarding foreign key and change of max days and max lookback
09:13:16.073 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
- invalid DateType
- withAlternativeEngine should success with new name and new engine without copying force filters
- successfully render DateTimeBetweenFilter with daily and hourly grain and timestamp type on postgres engine
- invalid TimeStampType
- newRollUp should always discard some columns
09:13:16.077 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.077 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.079 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.079 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:16.079 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:16.112 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:16.113 INFO  [ScalaTest-3-running-QueryPipelineWithFallbackTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to a27c63ad-4dc3-48c0-b9fb-5e372d13d275
09:13:16.115 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.115 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.118 INFO  [ScalaTest-3-running-QueryPipelineWithFallbackTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:16.119 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.120 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.148 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:16.151 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.151 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.155 INFO  [ScalaTest-3-running-QueryPipelineWithFallbackTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to e3d37615-a755-4c53-b1f8-83a2642ea11a
09:13:16.156 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:16.160 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.160 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:16.160 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:16.161 INFO  [ScalaTest-3-running-QueryPipelineWithFallbackTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Failure(java.lang.IllegalArgumentException: requirement failed: Failed to find best candidate, forceEngine=None, engine disqualifyingSet=Set(Druid, Oracle, Hive), candidates=Set((fact_druid,Druid), (fact_hive,Hive), (fact_oracle,Oracle)))
09:13:16.161 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.161 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.162 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.162 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.162 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.162 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:16.162 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:16.165 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.165 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.167 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:16.169 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.169 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.170 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.170 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:16.170 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:16.171 INFO  [ScalaTest-7-running-PartialRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.171 INFO  [ScalaTest-7-running-PartialRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.173 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.173 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.174 ERROR [ScalaTest-7-running-PartialRowListTest] c.y.m.c.q.FactDrivenIndexedRowList - Index alias (Campaign ID) value is null on addRow, dropping row : Row(Map(Campaign ID -> 1, Campaign Status -> 4, Day -> 0, Impressions -> 2, Campaign Name -> 3, CTR -> 5),ArrayBuffer(2016-10-11, null, 100, null, null, 1.11))
OracleDDLGeneratorTest:
09:13:16.180 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.180 ERROR [ScalaTest-7-running-PartialRowListTest] c.y.m.c.q.FactDrivenIndexedRowList - Index alias (Campaign ID) value is null on updateRow, dropping row : Row(Map(Campaign ID -> 1, Campaign Status -> 4, Day -> 0, Impressions -> 2, Campaign Name -> 3, CTR -> 5),ArrayBuffer(null, null, null, null, null, null))
09:13:16.180 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:16.180 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:16.183 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.184 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.191 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.191 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:16.192 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
- successfully render DateTimeBetweenFilter with daily and hourly grain and date type on hive engine
09:13:16.199 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-campaign filters:Map(Campaign Name -> TreeSet(EqualityFilter(Campaign Name,MegaCampaign,false,false)), Source -> TreeSet(EqualityFilter(Source,2,true,false)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:13:16.199 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:13:16.199 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:13:16.200 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:13:16.200 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:13:16.200 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - hasLowCardinalityDimFilters=true forceDimDriven=false hasDimAndFactOperations=true
09:13:16.200 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - isFactDriven=false hasIndexInOutput=true dimEngines=Set(Oracle, Postgres, Presto, Hive) dimCandidates=TreeSet(campaign)
09:13:16.201 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Druid, Hive, Presto)
09:13:16.201 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.201 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.201 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact_table_keywords engine=Oracle cost=800 level=9998 cardinalityPreference=2147483647
09:13:16.202 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact0_table_keywords engine=Oracle cost=800 level=9999 cardinalityPreference=2147483647
09:13:16.202 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats
       requestCols=Vector(DimColumnInfo(Campaign ID), FactColumnInfo(Impressions), DimColumnInfo(Campaign Name), DimColumnInfo(Campaign Status), FactColumnInfo(CTR))
       requestSortByCols=Vector(DimSortByColumnInfo(Campaign Name,ASC))
       dimColumnAliases=Set(Campaign ID, Campaign Name, Campaign Status)
       dimCardinalityEstimate=None
       factCost=Map((fact_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true), (fact0_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true))
       factSortByMap=Map()
       dimSortByMap=Map(Campaign Name -> ASC)
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=true
       hasDimFilters=true
       hasNonFKDimFilters=true
       hasFactSortBy=false
       hasDimSortBy=true
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=true
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=true
       hasLowCardinalityDimFilters=true
       isFactDriven=false
       forceDimDriven=false
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=SyncRequest
       startIndex=-1
       maxRows=100
       includeRowCount=true
       hasDimAndFactOperations=true
       isTimeSeries=false
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true))
       factSchemaRequiredAliasesMap=Map(fact0_table_keywords -> Set(Advertiser ID), fact_table_keywords -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(campaign -> InnerJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(Advertiser ID, Campaign Name)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=true
       hasNonFKNonForceFilters=true
       hasNonFKSortBy=true
       hasNonFKNonPKSortBy=true
       hasLowCardinalityFilter=true
       hasPKRequested=true
       hasNonPushDownFilters=true
     )
     
09:13:16.203 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=campaign_oracle
       publicDim.name=campaign
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,213,false,false)), EqualityFilter(Campaign Name,MegaCampaign,false,false))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=true
       hasNonFKSortBy=true
       hasNonPushDownFilters=true
       hasPKRequested=true
     
09:13:16.203 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=fact_table_keywords
       publicFact.name=k_stats
       fkCols=TreeSet(advertiser_id, campaign_id)
       nonFkCols=Set(CTR, impressions, stats_source)
       requestCols=Set(CTR, campaign_id, impressions)
       filterCols=Set(stats_source, advertiser_id)
       factCost=800
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(advertiser_id -> Advertiser ID, campaign_id -> Campaign ID, stats_source -> Source)
       factColMapping=Map(impressions -> Impressions, CTR -> CTR)
       filters=TreeSet(EqualityFilter(Advertiser ID,213,false,false), EqualityFilter(Source,2,true,false))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:13:16.203 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:13:16.203 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = false
09:13:16.203 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - runSingleEngineQuery
09:13:16.203 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set()
09:13:16.203 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet()
09:13:16.207 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.207 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query option defined!
09:13:16.207 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
09:13:16.208 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.208 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:16.208 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
- IntType should not have negative length
- successfully render DateTimeBetweenFilter with daily and hourly grain and timestamp type on hive engine
- successfully render DateTimeBetweenFilter with daily and hourly grain and date type on presto engine
- withAlternativeEngine should fail with non existing from
- IntType should successfully being constructed with length and default value
- withAlternativeEngine should fail with same engine
- StrType should not have negative length
- Attempt to refactor a filter success cases
- successfully render DateTimeBetweenFilter with daily and hourly grain and timestamp type on presto engine
- successfully render DateTimeBetweenFilter with input zone offset, daily and hourly grain and date type on oracle engine
- withAlternativeEngine should fail with existing name
- successfully render DateTimeBetweenFilter with input zone offset, daily and hourly grain and timestamp type on oracle engine
- registering Hive query generation multiple times should fail
- newRollup should succeed with 2 rollups
- Filter Types in Druid should return valid MaxDate
- withAlternativeEngine should fail with existing name after a rollup
- successfully close on failed doWork
- newRollup should succeed when discarding column that is not a foreign key dim col
- InFilter should render correct string for Oracle
- withAlternativeEngine should fail if tableMap is empty
- newRollup should fail when discarding non-existing column
09:13:16.223 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.223 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
- getPrimaryKeyAlias should be able to return the primaryKey alias for attribute alias which is duplicate for dimensions
09:13:16.223 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
- NotInFilter should render correct string for Oracle
- StrType should successfully being constructed with length and default value
- BetweenFilter should render correct string for Oracle
- withAlternativeEngine should fail with existing engine
09:13:16.226 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.226 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- EqualityFilter should render correct string for Oracle
- LikeFilter should render correct string for Oracle
- newRollup should fail when discarding last remaining foreign key
- LikeFilter should render correct string for Presto
- DecType should not have negative length
09:13:16.229 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.229 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
- NotEqualToFilter should render correct string for Presto
09:13:16.230 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
- newRollup should fail when from table is does not exist
- DecType should not have negative scale
- NotEqualToFilter should render correct string for Oracle
- DecType should not have scale that's larger than the length
- domainJsonAsString should be able to return the correct json output
- IsNullFilter should render correct string for Oracle
09:13:16.245 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.245 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- DecType should successfully being constructed with length and default
- IsNotNullFilter should render correct string for Oracle
- withAlternativeEngine should fail with missing override for fact column annotation with engine requirement
- DateType with invalid format should fail
- IsNullFilter should render correct string for Presto
- IsNotNullFilter should render correct string for Presto
- DecType success cases
- newRollup should fail when rollup to an existing table
- InFilter should render correct string for Hive
- TimestampType test for valid/invalid format
09:13:16.276 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.276 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.284 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.284 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.291 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.291 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:16.291 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:16.326 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.326 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.365 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.365 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
- NotInFilter should render correct string for Hive
- BetweenFilter should render correct string for Hive
- EqualityFilter should render correct string for Hive
09:13:16.366 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
- withAlternativeEngine should fail with missing override for fact column rollup with engine requirement
- LikeFilter should render correct string for Hive
- NotEqualToFilter should render correct string for Hive
- IsNullFilter should render correct string for Hive
- getCubeJsonForName should be able to return the correct json for given cube name
- IsNotNullFilter should render correct string for Hive
- withAlternativeEngine should fail if ddl annotation is of a different engine other than the engine of the fact
- newRollup should fail if tableMap is empty
09:13:16.373 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.373 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.376 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.376 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.392 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Advertiser ID
09:13:16.394 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.394 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.404 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.404 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:16.404 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:16.405 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Advertiser ID
09:13:16.406 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.406 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.411 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.411 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:16.411 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
- AndFilter should render combined filters with AND
- OrFilter should render combined filters with OR
- withAlternativeEngine should fail if derived expression is not defined for derived columns
- PreRenderedAndFilter should render combined filters with AND
- PreRenderedOrFilter should render combined filters with OR
- fail to close on failed closeable after failed doWork
09:13:16.423 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-campaign filters:Map(Campaign Name -> TreeSet(EqualityFilter(Campaign Name,MegaCampaign,false,false)), Source -> TreeSet(EqualityFilter(Source,2,true,false)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:13:16.423 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:13:16.426 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.426 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.427 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.427 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.434 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:13:16.434 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:13:16.434 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.435 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:16.435 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:16.437 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 8ac3c97a-8807-46aa-8e7c-b31133e86ca0
09:13:16.438 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.438 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.434 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:13:16.445 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Druid)
09:13:16.445 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact_table_keywords engine=Oracle cost=800 level=9998 cardinalityPreference=2147483647
09:13:16.446 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact0_table_keywords engine=Oracle cost=800 level=9999 cardinalityPreference=2147483647
09:13:16.446 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats
       requestCols=Vector(FactColumnInfo(Campaign ID), FactColumnInfo(Impressions), DimColumnInfo(Campaign Name), DimColumnInfo(Campaign Status), FactColumnInfo(CTR))
       requestSortByCols=Vector(DimSortByColumnInfo(Campaign Name,ASC))
       dimColumnAliases=Set(Campaign Name, Campaign Status)
       dimCardinalityEstimate=None
       factCost=Map((fact_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true), (fact0_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true))
       factSortByMap=Map()
       dimSortByMap=Map(Campaign Name -> ASC)
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=true
       hasDimFilters=true
       hasNonFKDimFilters=true
       hasFactSortBy=false
       hasDimSortBy=true
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=true
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=true
       hasLowCardinalityDimFilters=true
       isFactDriven=true
       forceDimDriven=false
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=AsyncRequest
       startIndex=0
       maxRows=200
       includeRowCount=false
       hasDimAndFactOperations=true
       isTimeSeries=false
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true))
       factSchemaRequiredAliasesMap=Map(fact0_table_keywords -> Set(Advertiser ID), fact_table_keywords -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(campaign -> InnerJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(Advertiser ID, Campaign Name)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=true
       hasNonFKNonForceFilters=true
       hasNonFKSortBy=true
       hasNonFKNonPKSortBy=true
       hasLowCardinalityFilter=true
       hasPKRequested=true
       hasNonPushDownFilters=true
     )
     
09:13:16.446 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=campaign_oracle
       publicDim.name=campaign
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,213,false,false)), EqualityFilter(Campaign Name,MegaCampaign,false,false))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=true
       hasNonFKSortBy=true
       hasNonPushDownFilters=true
       hasPKRequested=true
     
09:13:16.446 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=fact_table_keywords
       publicFact.name=k_stats
       fkCols=TreeSet(advertiser_id, campaign_id)
       nonFkCols=Set(CTR, impressions, stats_source)
       requestCols=Set(CTR, campaign_id, impressions)
       filterCols=Set(stats_source, advertiser_id)
       factCost=800
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(advertiser_id -> Advertiser ID, campaign_id -> Campaign ID, stats_source -> Source)
       factColMapping=Map(impressions -> Impressions, CTR -> CTR)
       filters=TreeSet(EqualityFilter(Advertiser ID,213,false,false), EqualityFilter(Source,2,true,false))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:13:16.446 INFO  [ScalaTest-24-running-OffHeapRowListTest] c.y.m.c.q.OffHeapRowList$ - Created tmp dir to store off heap row list /Users/lgadde/git/Native-Ads/maha/core/target/off_heap_row_list
09:13:16.446 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:13:16.446 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = false
09:13:16.446 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.447 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.447 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set()
09:13:16.447 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet()
09:13:16.452 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.453 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.453 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
09:13:16.453 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.453 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.481 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.481 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:16.482 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:16.488 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.488 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
PostgresQueryCommonTest:
- withAlternativeEngine should fail if override dim columns have static mapping
- Test QueryCommon
09:13:16.506 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:16.506 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.507 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:16.507 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:16.507 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.507 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.510 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.510 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.515 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 43acb558-83d0-4b29-904f-a13308cd1f23
09:13:16.527 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:16.528 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.538 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.538 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:16.538 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
SELECT CAST(advertiser_id as VARCHAR) AS advertiser_id, CAST(mang_impressions as VARCHAR) AS mang_impressions, CAST(network_id as VARCHAR) AS network_id
FROM(
SELECT COALESCE(CAST(account_id as bigint), 0) advertiser_id, COALESCE(CAST(impressions as bigint), 1) mang_impressions, COALESCE(CAST(network_type as VARCHAR), 'NA') network_id
FROM(SELECT CASE WHEN (network_type IN ('TEST_PUBLISHER')) THEN 'Test Publisher' WHEN (network_type IN ('CONTENT_S')) THEN 'Content Secured' WHEN (network_type IN ('EXTERNAL')) THEN 'External Partners' WHEN (network_type IN ('INTERNAL')) THEN 'Internal Properties' ELSE 'NONE' END network_type, account_id, SUM(impressions) impressions
FROM s_stats_fact_underlying
WHERE (account_id = 12345) AND (stats_date >= '2020-11-03' AND stats_date <= '2020-11-10')
GROUP BY CASE WHEN (network_type IN ('TEST_PUBLISHER')) THEN 'Test Publisher' WHEN (network_type IN ('CONTENT_S')) THEN 'Content Secured' WHEN (network_type IN ('EXTERNAL')) THEN 'External Partners' WHEN (network_type IN ('INTERNAL')) THEN 'Internal Properties' ELSE 'NONE' END, account_id
HAVING (SUM(impressions) < 1608) AND (MAX(max_bid) = SUM(spend))
       )
ssfu0


          )
        queryAlias LIMIT 200requirement failed: ERROR_CODE:10007 (Ad Format Name) can't be used with advertiser schema in publicFact cube
result: {"queryType":"groupBy","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"statsDate","value":"20201103"},{"type":"selector","dimension":"statsDate","value":"20201110"}]},{"type":"selector","dimension":"advertiser_id","value":"12345"},{"type":"selector","dimension":"landing_page_url"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impressions"}],"postAggregations":[],"having":{"type":"and","havingSpecs":[{"type":"lessThan","aggregation":"Impressions","value":1000}]},"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":1020},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":5000,"queryId":"d240be11-73cb-4d44-99ed-70d839e2c6f1"},"descending":false}SELECT CONCAT_WS(',', CAST(NVL(device_id,'') AS STRING),CAST(NVL(mang_campaign_name,'') AS STRING),CAST(NVL(mang_impressions,'') AS STRING),CAST(NVL(mang_pricing_type,'') AS STRING),CAST(NVL(mang_max_price_type,'') AS STRING))
FROM(
SELECT device_id AS device_id, mang_campaign_name AS mang_campaign_name, impressions AS mang_impressions, mang_pricing_type AS mang_pricing_type, price_type AS mang_max_price_type
FROM(
SELECT CASE WHEN (device_id IN (11)) THEN 'Desktop' WHEN (device_id IN (22)) THEN 'Tablet' WHEN (device_id IN (33)) THEN 'SmartPhone' WHEN (device_id IN (-1)) THEN 'UNKNOWN' ELSE 'UNKNOWN' END device_id, getCsvEscapedString(CAST(NVL(c1.mang_campaign_name, '') AS STRING)) mang_campaign_name, SUM(impressions) AS impressions, CASE WHEN (price_type IN (1)) THEN 'CPC' WHEN (price_type IN (6)) THEN 'CPV' WHEN (price_type IN (2)) THEN 'CPA' WHEN (price_type IN (-10)) THEN 'CPE' WHEN (price_type IN (-20)) THEN 'CPF' WHEN (price_type IN (7)) THEN 'CPCV' WHEN (price_type IN (3)) THEN 'CPM' ELSE 'NONE' END mang_pricing_type, price_type AS price_type
FROM(SELECT price_type, campaign_id, device_id, SUM(impressions) impressions
FROM s_stats_fact
WHERE (account_id = 12345) AND (stats_date >= '2020-11-03' AND stats_date <= '2020-11-10')
GROUP BY price_type, campaign_id, device_id

       )
ssf0
LEFT OUTER JOIN (
SELECT campaign_name AS mang_campaign_name, id c1_id
FROM campaing_hive
WHERE ((load_time = '%DEFAULT_DIM_PARTITION_PREDICTATE%' ) AND (shard = 'all' )) AND (advertiser_id = 12345)
)
c1
ON
ssf0.campaign_id = c1.c1_id
       
GROUP BY CASE WHEN (device_id IN (11)) THEN 'Desktop' WHEN (device_id IN (22)) THEN 'Tablet' WHEN (device_id IN (33)) THEN 'SmartPhone' WHEN (device_id IN (-1)) THEN 'UNKNOWN' ELSE 'UNKNOWN' END, getCsvEscapedString(CAST(NVL(c1.mang_campaign_name, '') AS STRING)), CASE WHEN (price_type IN (1)) THEN 'CPC' WHEN (price_type IN (6)) THEN 'CPV' WHEN (price_type IN (2)) THEN 'CPA' WHEN (price_type IN (-10)) THEN 'CPE' WHEN (price_type IN (-20)) THEN 'CPF' WHEN (price_type IN (7)) THEN 'CPCV' WHEN (price_type IN (3)) THEN 'CPM' ELSE 'NONE' END, price_type
) OgbQueryAlias
) queryAlias LIMIT 200
       
09:13:16.542 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.542 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.547 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.551 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.551 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:16.551 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
createSubsetTest:
09:13:16.553 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.554 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:16.554 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:16.555 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.555 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.556 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.556 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- Attempt to refactor a filter failure cases
09:13:16.562 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.562 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:16.562 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:16.566 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.566 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.566 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.566 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:16.566 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
{"queryType":"groupBy","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"statsDate","value":"20201103"},{"type":"selector","dimension":"statsDate","value":"20201110"}]},{"type":"selector","dimension":"advertiser_id","value":"12345"},{"type":"not","field":{"type":"selector","dimension":"landing_page_url"}}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impressions"}],"postAggregations":[],"having":{"type":"and","havingSpecs":[{"type":"lessThan","aggregation":"Impressions","value":1000}]},"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":1020},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":5000,"queryId":"7dcf8840-a337-45c4-8b0a-28740676b39f"},"descending":false}SELECT *
FROM (SELECT cp1.id "Campaign ID", coalesce(f0."impressions", 1) "Impressions"
      FROM (SELECT /*+ PUSH_PRED PARALLEL_INDEX(cb_campaign_k_stats 4) CONDITIONAL_HINT1 CONDITIONAL_HINT2 CONDITIONAL_HINT3 */
                   campaign_id, SUM(impressions) AS "impressions"
            FROM fact2 FactAlias
            WHERE (advertiser_id = 12345) AND (stats_source = 2) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY campaign_id
            HAVING (SUM(impressions) > 1608)
           ) f0
           INNER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT /*+ CampaignHint */ id, advertiser_id
            FROM campaign_postgres
            WHERE (advertiser_id = 12345)
             ) sqalias1 LIMIT 120) D ) sqalias2 WHERE ROWNUM >= 21 AND ROWNUM <= 120) cp1 
            ON (f0.campaign_id = cp1.id)

) sqalias3 
   09:13:16.569 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
SELECT *
FROM (SELECT co1.id "Campaign ID", coalesce(f0."impressions", 1) "Impressions"
      FROM (SELECT /*+ PUSH_PRED PARALLEL_INDEX(cb_campaign_k_stats 4) CONDITIONAL_HINT1 CONDITIONAL_HINT2 CONDITIONAL_HINT3 */
                   campaign_id, SUM(impressions) AS "impressions"
            FROM fact2 FactAlias
            WHERE (advertiser_id = 12345) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY campaign_id
            HAVING (SUM(impressions) > 1608)
           ) f0
           INNER JOIN
                (SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT /*+ CampaignHint */ id, advertiser_id
            FROM campaign_oracle
            WHERE (advertiser_id = 12345)
             ) WHERE ROWNUM <= 120) D ) WHERE ROW_NUMBER >= 21 AND ROW_NUMBER <= 120) co1 
            ON (f0.campaign_id = co1.id)

) 
   got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Campaign Name",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Spend",
                               "alias": null,
                               "value": null
                             }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
- OrFilter should be able to successfully render with an alias.
09:13:16.569 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.569 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.569 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.580 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-campaign filters:Map(Campaign Name -> TreeSet(EqualityFilter(Campaign Name,MegaCampaign,false,false)), Source -> TreeSet(EqualityFilter(Source,2,true,true)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:13:16.580 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:13:16.580 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:13:16.581 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:13:16.581 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:13:16.581 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - hasLowCardinalityDimFilters=true forceDimDriven=false hasDimAndFactOperations=true
09:13:16.582 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - isFactDriven=false hasIndexInOutput=true dimEngines=Set(Oracle, Postgres, Presto, Hive) dimCandidates=TreeSet(campaign)
09:13:16.582 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Druid, Hive, Presto)
09:13:16.582 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact2 engine=Oracle cost=800 level=9998 cardinalityPreference=2147483647
09:13:16.582 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact1 engine=Oracle cost=800 level=9999 cardinalityPreference=2147483647
09:13:16.582 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.582 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.583 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats
       requestCols=Vector(DimColumnInfo(Campaign ID), FactColumnInfo(Impressions), DimColumnInfo(Campaign Name), DimColumnInfo(Campaign Status), FactColumnInfo(CTR))
       requestSortByCols=Vector(DimSortByColumnInfo(Campaign Name,ASC))
       dimColumnAliases=Set(Campaign ID, Campaign Name, Campaign Status)
       dimCardinalityEstimate=None
       factCost=Map((fact2,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true), (fact1,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true))
       factSortByMap=Map()
       dimSortByMap=Map(Campaign Name -> ASC)
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=true
       hasDimFilters=true
       hasNonFKDimFilters=true
       hasFactSortBy=false
       hasDimSortBy=true
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=true
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=true
       hasLowCardinalityDimFilters=true
       isFactDriven=false
       forceDimDriven=false
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=SyncRequest
       startIndex=-1
       maxRows=100
       includeRowCount=true
       hasDimAndFactOperations=true
       isTimeSeries=false
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true))
       factSchemaRequiredAliasesMap=Map(fact1 -> Set(Advertiser ID), fact2 -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(campaign -> InnerJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(Advertiser ID, Campaign Name)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=true
       hasNonFKNonForceFilters=true
       hasNonFKSortBy=true
       hasNonFKNonPKSortBy=true
       hasLowCardinalityFilter=true
       hasPKRequested=true
       hasNonPushDownFilters=true
     )
     
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Campaign Name",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Source"
                             },
                             {
                               "field": "N Spend",
                               "alias": null,
                               "value": null
                             }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
- Invalid from, to
09:13:16.583 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=campaign_oracle
       publicDim.name=campaign
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,213,false,false)), EqualityFilter(Campaign Name,MegaCampaign,false,false))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=true
       hasNonFKSortBy=true
       hasNonPushDownFilters=true
       hasPKRequested=true
     
09:13:16.583 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=fact2
       publicFact.name=k_stats
       fkCols=TreeSet(advertiser_id, campaign_id)
       nonFkCols=Set(CTR, impressions, stats_source)
       requestCols=Set(CTR, campaign_id, impressions)
       filterCols=Set(stats_source, advertiser_id)
       factCost=800
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(advertiser_id -> Advertiser ID, campaign_id -> Campaign ID, stats_source -> Source)
       factColMapping=Map(impressions -> Impressions, CTR -> CTR)
       filters=TreeSet(EqualityFilter(Advertiser ID,213,false,false), EqualityFilter(Source,2,true,true))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:13:16.583 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:13:16.583 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = false
09:13:16.583 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - runSingleEngineQuery
09:13:16.584 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set(IsGrainOptimized(false), ForceDimDriven(false), IsIndexOptimized(true))
09:13:16.584 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet(CONDITIONAL_HINT1, CONDITIONAL_HINT2)
09:13:16.587 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.587 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.601 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query option defined!
09:13:16.601 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
09:13:16.601 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:16.601 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
RequestModelTest:
09:13:16.599 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-campaign filters:Map(Campaign Name -> TreeSet(EqualityFilter(Campaign Name,MegaCampaign,false,false)), Source -> TreeSet(EqualityFilter(Source,2,true,false)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:13:16.601 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:13:16.602 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:13:16.602 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.NoopExecutionLifecycleListener - acquired : SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT co1.id "Campaign ID", coalesce(f0."impressions", 1) "Impressions", co1.campaign_name "Campaign Name", co1."Campaign Status" "Campaign Status", ROUND(f0."CTR", 10) "CTR", Count(*) OVER() TOTALROWS
      FROM (SELECT /*+ PUSH_PRED PARALLEL_INDEX(cb_campaign_k_stats 4) CONDITIONAL_HINT1 CONDITIONAL_HINT2 */
                   campaign_id, SUM(impressions) AS "impressions", (SUM(CASE WHEN impressions = 0 THEN 0.0 ELSE clicks / impressions END)) AS "CTR"
            FROM fact2 FactAlias
            WHERE (advertiser_id = 213) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY campaign_id
            
           ) f0
           INNER JOIN
                (SELECT /*+ CampaignHint */ campaign_name, DECODE(status, 'ON', 'ON', 'OFF') AS "Campaign Status", id, advertiser_id
            FROM campaign_oracle
            WHERE (advertiser_id = 213) AND (lower(campaign_name) = lower('MegaCampaign'))
            ORDER BY 1 ASC NULLS LAST ) co1 
            ON (f0.campaign_id = co1.id)

) 
   ) WHERE ROWNUM <= 100) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 100
09:13:16.603 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.NoopExecutionLifecycleListener - started : SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT co1.id "Campaign ID", coalesce(f0."impressions", 1) "Impressions", co1.campaign_name "Campaign Name", co1."Campaign Status" "Campaign Status", ROUND(f0."CTR", 10) "CTR", Count(*) OVER() TOTALROWS
      FROM (SELECT /*+ PUSH_PRED PARALLEL_INDEX(cb_campaign_k_stats 4) CONDITIONAL_HINT1 CONDITIONAL_HINT2 */
                   campaign_id, SUM(impressions) AS "impressions", (SUM(CASE WHEN impressions = 0 THEN 0.0 ELSE clicks / impressions END)) AS "CTR"
            FROM fact2 FactAlias
            WHERE (advertiser_id = 213) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY campaign_id
            
           ) f0
           INNER JOIN
                (SELECT /*+ CampaignHint */ campaign_name, DECODE(status, 'ON', 'ON', 'OFF') AS "Campaign Status", id, advertiser_id
            FROM campaign_oracle
            WHERE (advertiser_id = 213) AND (lower(campaign_name) = lower('MegaCampaign'))
            ORDER BY 1 ASC NULLS LAST ) co1 
            ON (f0.campaign_id = co1.id)

) 
   ) WHERE ROWNUM <= 100) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 100
SELECT *
FROM (SELECT cp1.id "Campaign ID", coalesce(f0."impressions", 1) "Impressions"
      FROM (SELECT /*+ PUSH_PRED PARALLEL_INDEX(cb_campaign_k_stats 4) CONDITIONAL_HINT1 CONDITIONAL_HINT2 CONDITIONAL_HINT3 */
                   campaign_id, SUM(impressions) AS "impressions"
            FROM fact2 FactAlias
            WHERE (advertiser_id = 12345) AND (stats_source = 2) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY campaign_id
            HAVING (SUM(impressions) < 1608)
           ) f0
           INNER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT /*+ CampaignHint */ id, advertiser_id
            FROM campaign_postgres
            WHERE (advertiser_id = 12345)
             ) sqalias1 LIMIT 120) D ) sqalias2 WHERE ROWNUM >= 21 AND ROWNUM <= 120) cp1 
            ON (f0.campaign_id = cp1.id)

) sqalias3 
   got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Day",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Campaign Name",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Spend",
                               "alias": null,
                               "value": null
                             }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
SELECT *
FROM (SELECT co1.id "Campaign ID", coalesce(f0."impressions", 1) "Impressions"
      FROM (SELECT /*+ PUSH_PRED PARALLEL_INDEX(cb_campaign_k_stats 4) CONDITIONAL_HINT1 CONDITIONAL_HINT2 CONDITIONAL_HINT3 */
                   campaign_id, SUM(impressions) AS "impressions"
            FROM fact2 FactAlias
            WHERE (advertiser_id = 12345) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY campaign_id
            HAVING (SUM(impressions) < 1608)
           ) f0
           INNER JOIN
                (SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT /*+ CampaignHint */ id, advertiser_id
            FROM campaign_oracle
            WHERE (advertiser_id = 12345)
             ) WHERE ROWNUM <= 120) D ) WHERE ROW_NUMBER >= 21 AND ROW_NUMBER <= 120) co1 
            ON (f0.campaign_id = co1.id)

) 
   - createSubSet should be successful with discarding fact columns
09:13:16.604 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.NoopExecutionLifecycleListener - completed : SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT co1.id "Campaign ID", coalesce(f0."impressions", 1) "Impressions", co1.campaign_name "Campaign Name", co1."Campaign Status" "Campaign Status", ROUND(f0."CTR", 10) "CTR", Count(*) OVER() TOTALROWS
      FROM (SELECT /*+ PUSH_PRED PARALLEL_INDEX(cb_campaign_k_stats 4) CONDITIONAL_HINT1 CONDITIONAL_HINT2 */
                   campaign_id, SUM(impressions) AS "impressions", (SUM(CASE WHEN impressions = 0 THEN 0.0 ELSE clicks / impressions END)) AS "CTR"
            FROM fact2 FactAlias
            WHERE (advertiser_id = 213) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY campaign_id
            
           ) f0
           INNER JOIN
                (SELECT /*+ CampaignHint */ campaign_name, DECODE(status, 'ON', 'ON', 'OFF') AS "Campaign Status", id, advertiser_id
            FROM campaign_oracle
            WHERE (advertiser_id = 213) AND (lower(campaign_name) = lower('MegaCampaign'))
            ORDER BY 1 ASC NULLS LAST ) co1 
            ON (f0.campaign_id = co1.id)

) 
   ) WHERE ROWNUM <= 100) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 100
09:13:16.604 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:13:16.605 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to c055478a-4de1-4b80-8f99-5f526aed1eba
09:13:16.613 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:13:16.613 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - hasLowCardinalityDimFilters=true forceDimDriven=false hasDimAndFactOperations=true
09:13:16.614 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - isFactDriven=false hasIndexInOutput=true dimEngines=Set(Oracle, Postgres, Presto, Hive) dimCandidates=TreeSet(campaign)
09:13:16.614 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Druid, Hive, Presto)
09:13:16.614 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact_table_keywords engine=Oracle cost=800 level=9998 cardinalityPreference=2147483647
09:13:16.614 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact0_table_keywords engine=Oracle cost=800 level=9999 cardinalityPreference=2147483647
09:13:16.614 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats
       requestCols=Vector(DimColumnInfo(Campaign ID), FactColumnInfo(Impressions), DimColumnInfo(Campaign Name), DimColumnInfo(Campaign Status), FactColumnInfo(CTR))
       requestSortByCols=Vector(DimSortByColumnInfo(Campaign Name,ASC))
       dimColumnAliases=Set(Campaign ID, Campaign Name, Campaign Status)
       dimCardinalityEstimate=None
       factCost=Map((fact_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true), (fact0_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true))
       factSortByMap=Map()
       dimSortByMap=Map(Campaign Name -> ASC)
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=true
       hasDimFilters=true
       hasNonFKDimFilters=true
       hasFactSortBy=false
       hasDimSortBy=true
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=true
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=true
       hasLowCardinalityDimFilters=true
       isFactDriven=false
       forceDimDriven=false
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=SyncRequest
       startIndex=-1
       maxRows=100
       includeRowCount=true
       hasDimAndFactOperations=true
       isTimeSeries=false
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true))
       factSchemaRequiredAliasesMap=Map(fact0_table_keywords -> Set(Advertiser ID), fact_table_keywords -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(campaign -> InnerJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(Advertiser ID, Campaign Name)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=true
       hasNonFKNonForceFilters=true
       hasNonFKSortBy=true
       hasNonFKNonPKSortBy=true
       hasLowCardinalityFilter=true
       hasPKRequested=true
       hasNonPushDownFilters=true
     )
     
- Test long list for days
09:13:16.615 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=campaign_oracle
       publicDim.name=campaign
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,213,false,false)), EqualityFilter(Campaign Name,MegaCampaign,false,false))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=true
       hasNonFKSortBy=true
       hasNonPushDownFilters=true
       hasPKRequested=true
     
09:13:16.615 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=fact_table_keywords
       publicFact.name=k_stats
       fkCols=TreeSet(advertiser_id, campaign_id)
       nonFkCols=Set(CTR, impressions, stats_source)
       requestCols=Set(CTR, campaign_id, impressions)
       filterCols=Set(stats_source, advertiser_id)
       factCost=800
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(advertiser_id -> Advertiser ID, campaign_id -> Campaign ID, stats_source -> Source)
       factColMapping=Map(impressions -> Impressions, CTR -> CTR)
       filters=TreeSet(EqualityFilter(Advertiser ID,213,false,false), EqualityFilter(Source,2,true,false))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:13:16.615 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:13:16.615 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = false
09:13:16.615 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - runSingleEngineQuery
09:13:16.615 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.615 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.615 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set()
09:13:16.616 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet()
09:13:16.617 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.617 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- withAlternativeEngine should fail if override fact columns have static mapping
09:13:16.619 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.619 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query option defined!
09:13:16.619 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
09:13:16.628 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.628 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:16.629 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:16.633 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.633 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.640 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.640 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.651 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.651 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:16.651 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:16.656 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 23a27f25-5f02-4db0-9d9c-be18da244b88
- createSubSet should be successful with noopschema
09:13:16.658 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.658 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.681 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.681 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:16.681 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:16.683 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.683 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.690 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:16.690 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:16.690 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
- createSubset should fail if trying to discard dim columns
09:13:16.691 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 822a6f52-04d8-48e3-a053-2ef361cc68d1
09:13:16.720 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:16.722 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.722 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.726 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:13:16.728 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:13:16.737 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.737 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.749 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to ffa3937f-5f80-4d42-bb2b-bcac97b3a328
- createSubset should fail if trying to form public rollup without available onwards
09:13:16.753 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-campaign filters:Map(Campaign Name -> TreeSet(EqualityFilter(Campaign Name,MegaCampaign,false,false)), Source -> TreeSet(EqualityFilter(Source,2,true,false)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:13:16.753 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:13:16.753 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:13:16.754 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:13:16.754 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:13:16.754 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - hasLowCardinalityDimFilters=true forceDimDriven=false hasDimAndFactOperations=true
09:13:16.754 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - isFactDriven=false hasIndexInOutput=true dimEngines=Set(Oracle, Postgres, Presto, Hive) dimCandidates=TreeSet(campaign)
09:13:16.754 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Druid, Hive, Presto)
09:13:16.755 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact_table_keywords engine=Oracle cost=800 level=9998 cardinalityPreference=2147483647
09:13:16.755 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact0_table_keywords engine=Oracle cost=800 level=9999 cardinalityPreference=2147483647
09:13:16.755 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats
       requestCols=Vector(DimColumnInfo(Campaign ID), FactColumnInfo(Impressions), DimColumnInfo(Campaign Name), DimColumnInfo(Campaign Status), FactColumnInfo(CTR))
       requestSortByCols=Vector(DimSortByColumnInfo(Campaign Name,ASC))
       dimColumnAliases=Set(Campaign ID, Campaign Name, Campaign Status)
       dimCardinalityEstimate=None
       factCost=Map((fact_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true), (fact0_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true))
       factSortByMap=Map()
       dimSortByMap=Map(Campaign Name -> ASC)
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=true
       hasDimFilters=true
       hasNonFKDimFilters=true
       hasFactSortBy=false
       hasDimSortBy=true
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=true
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=true
       hasLowCardinalityDimFilters=true
       isFactDriven=false
       forceDimDriven=false
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=SyncRequest
       startIndex=-1
       maxRows=100
       includeRowCount=true
       hasDimAndFactOperations=true
       isTimeSeries=false
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true))
       factSchemaRequiredAliasesMap=Map(fact0_table_keywords -> Set(Advertiser ID), fact_table_keywords -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(campaign -> InnerJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(Advertiser ID, Campaign Name)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=true
       hasNonFKNonForceFilters=true
       hasNonFKSortBy=true
       hasNonFKNonPKSortBy=true
       hasLowCardinalityFilter=true
       hasPKRequested=true
       hasNonPushDownFilters=true
     )
     
09:13:16.755 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=campaign_oracle
       publicDim.name=campaign
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,213,false,false)), EqualityFilter(Campaign Name,MegaCampaign,false,false))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=true
       hasNonFKSortBy=true
       hasNonPushDownFilters=true
       hasPKRequested=true
     
09:13:16.756 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=fact_table_keywords
       publicFact.name=k_stats
       fkCols=TreeSet(advertiser_id, campaign_id)
       nonFkCols=Set(CTR, impressions, stats_source)
       requestCols=Set(CTR, campaign_id, impressions)
       filterCols=Set(stats_source, advertiser_id)
       factCost=800
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(advertiser_id -> Advertiser ID, campaign_id -> Campaign ID, stats_source -> Source)
       factColMapping=Map(impressions -> Impressions, CTR -> CTR)
       filters=TreeSet(EqualityFilter(Advertiser ID,213,false,false), EqualityFilter(Source,2,true,false))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:13:16.756 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:13:16.756 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = false
09:13:16.756 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - runSingleEngineQuery
09:13:16.756 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set()
09:13:16.756 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet()
- createSubset should fail discarding non-exist columns
09:13:16.765 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.765 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query option defined!
09:13:16.765 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
09:13:16.771 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Keyword ID
09:13:16.773 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.773 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.788 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Keyword ID
09:13:16.791 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.791 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.793 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:16.795 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.795 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.810 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.810 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.828 INFO  [ScalaTest-2-running-CSVRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.828 INFO  [ScalaTest-2-running-CSVRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.859 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.859 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.872 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.872 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- withAlternativeEngine: dim column override failure case
09:13:16.875 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:16.877 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.877 INFO  [ScalaTest-15-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.882 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.882 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.891 INFO  [ScalaTest-9-running-QueryContextTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 76f9fe6e-bf33-4d40-a694-097cee458527
09:13:16.900 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:16.901 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:16.915 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-ad_group filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:13:16.915 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:13:16.915 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=9223372036854775807 isGrainOptimized=false isIndexOptimized=true
09:13:16.915 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
- Get all hours for a day
09:13:16.917 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=9223372036854775807 isGrainOptimized=false isIndexOptimized=true
09:13:16.917 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:13:16.917 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=9223372036854775807 isGrainOptimized=false isIndexOptimized=true
09:13:16.918 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Hive, Presto)
09:13:16.918 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact_druid engine=Druid cost=9223372036854775807 level=9999 cardinalityPreference=2147483647
09:13:16.918 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact_oracle engine=Oracle cost=9223372036854775807 level=9999 cardinalityPreference=2147483647
09:13:16.919 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats
       requestCols=Vector(DimColumnInfo(Advertiser ID), DimColumnInfo(Ad Group Status), DimColumnInfo(Ad Group ID), FactColumnInfo(Source), FactColumnInfo(Pricing Type), FactColumnInfo(Destination URL), FactColumnInfo(Spend), FactColumnInfo(Impressions), FactColumnInfo(Clicks))
       requestSortByCols=Vector()
       dimColumnAliases=Set(Ad Group ID, Ad Group Status, Advertiser ID)
       dimCardinalityEstimate=None
       factCost=Map((fact_druid,Druid) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),9223372036854775807,true), (fact_hive,Hive) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),9223372036854775807,true), (fact_oracle,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),9223372036854775807,true))
       factSortByMap=Map()
       dimSortByMap=Map()
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=false
       hasDimFilters=false
       hasNonFKDimFilters=false
       hasFactSortBy=false
       hasDimSortBy=false
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=false
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=false
       hasLowCardinalityDimFilters=false
       isFactDriven=false
       forceDimDriven=false
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=SyncRequest
       startIndex=0
       maxRows=100
       includeRowCount=false
       hasDimAndFactOperations=false
       isTimeSeries=false
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true))
       factSchemaRequiredAliasesMap=Map(fact_oracle -> Set(Advertiser ID), fact_druid -> Set(Advertiser ID), fact_hive -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(ad_group -> LeftOuterJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Ad Group Status, Advertiser ID, Ad Group ID)
       filters=TreeSet(Advertiser ID)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=false
       hasNonFKNonForceFilters=false
       hasNonFKSortBy=false
       hasNonFKNonPKSortBy=false
       hasLowCardinalityFilter=false
       hasPKRequested=true
       hasNonPushDownFilters=false
     )
     
09:13:16.919 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=ad_group_oracle
       publicDim.name=ad_group
       fields=Set(Ad Group Status, Advertiser ID, Ad Group ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,213,false,false)))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=false
       hasNonFKSortBy=false
       hasNonPushDownFilters=false
       hasPKRequested=true
     
09:13:16.919 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=fact_druid
       publicFact.name=k_stats
       fkCols=TreeSet(ad_group_id, advertiser_id)
       nonFkCols=Set(impressions, spend, landing_page_url, price_type, stats_source, clicks)
       requestCols=Set(impressions, spend, landing_page_url, price_type, ad_group_id, stats_source, advertiser_id, clicks)
       filterCols=Set(advertiser_id)
       factCost=9223372036854775807
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(landing_page_url -> Destination URL, price_type -> Pricing Type, ad_group_id -> Ad Group ID, stats_source -> Source, advertiser_id -> Advertiser ID)
       factColMapping=Map(clicks -> Clicks, impressions -> Impressions, spend -> Spend)
       filters=TreeSet(EqualityFilter(Advertiser ID,213,false,false))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:13:16.919 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:13:16.919 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = true
09:13:16.920 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - dimEngine=Oracle
09:13:16.921 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - factEngine=Druid
09:13:16.921 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - runMultiEngineQuery
09:13:16.921 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - factQueryThenDimQuery
09:13:16.922 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 87b27cb5-1c0d-4fea-bd83-1921d388c9c4
09:13:16.951 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - hasFallbackQueryAndRowList
09:13:16.952 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Hive, Presto, Druid)
09:13:16.952 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact_oracle engine=Oracle cost=9223372036854775807 level=9999 cardinalityPreference=2147483647
09:13:16.953 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set()
09:13:16.953 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet()
09:13:16.955 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - factDrivenPartialRowList
- newRollup should fail if dim column context is not the same as source
09:13:16.956 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
09:13:16.959 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:13:16.960 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:13:16.970 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 69e40331-e7b1-413f-a5f6-2fb6bb043235
09:13:16.987 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 1b2a42f8-6ea7-4feb-97c6-c6a6770c51d8
09:13:17.004 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 761b859e-0248-42f0-b2c2-0afcf1ee0279
09:13:17.005 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.QueryChain - No data from driving query, running fall back query
09:13:17.017 INFO  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 244ab06d-b83d-447a-8fdd-0cfc17ad52ea
09:13:17.020 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-campaign filters:Map(Campaign Name -> TreeSet(EqualityFilter(Campaign Name,MegaCampaign,false,false)), Source -> TreeSet(EqualityFilter(Source,2,true,true)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:13:17.020 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:13:17.020 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:13:17.020 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:13:17.021 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:13:17.021 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - hasLowCardinalityDimFilters=true forceDimDriven=false hasDimAndFactOperations=true
- Joda should not skip one hour (2nd hour) as daylight saving starts
09:13:17.021 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - isFactDriven=false hasIndexInOutput=true dimEngines=Set(Oracle, Postgres, Presto, Hive) dimCandidates=TreeSet(campaign)
09:13:17.021 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Druid, Hive, Presto)
09:13:17.022 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact2 engine=Oracle cost=800 level=9998 cardinalityPreference=2147483647
09:13:17.022 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact1 engine=Oracle cost=800 level=9999 cardinalityPreference=2147483647
09:13:17.030 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:17.032 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Campaign Name",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Advertiser Currency",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Spend",
                               "alias": null,
                               "value": null
                             }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
- createSubset should discard column in hive ddl annotation
09:13:17.032 INFO  [ScalaTest-6-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:17.033 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats
       requestCols=Vector(DimColumnInfo(Campaign ID), FactColumnInfo(Impressions), DimColumnInfo(Campaign Name), DimColumnInfo(Campaign Status), FactColumnInfo(CTR))
       requestSortByCols=Vector(DimSortByColumnInfo(Campaign Name,ASC))
       dimColumnAliases=Set(Campaign ID, Campaign Name, Campaign Status)
       dimCardinalityEstimate=None
       factCost=Map((fact2,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true), (fact1,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true))
       factSortByMap=Map()
       dimSortByMap=Map(Campaign Name -> ASC)
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=true
       hasDimFilters=true
       hasNonFKDimFilters=true
       hasFactSortBy=false
       hasDimSortBy=true
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=true
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=true
       hasLowCardinalityDimFilters=true
       isFactDriven=false
       forceDimDriven=false
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=SyncRequest
       startIndex=-1
       maxRows=100
       includeRowCount=true
       hasDimAndFactOperations=true
       isTimeSeries=false
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true))
       factSchemaRequiredAliasesMap=Map(fact1 -> Set(Advertiser ID), fact2 -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(campaign -> InnerJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(Advertiser ID, Campaign Name)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=true
       hasNonFKNonForceFilters=true
       hasNonFKSortBy=true
       hasNonFKNonPKSortBy=true
       hasLowCardinalityFilter=true
       hasPKRequested=true
       hasNonPushDownFilters=true
     )
     
09:13:17.033 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=campaign_oracle
       publicDim.name=campaign
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,213,false,false)), EqualityFilter(Campaign Name,MegaCampaign,false,false))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=true
       hasNonFKSortBy=true
       hasNonPushDownFilters=true
       hasPKRequested=true
     
09:13:17.033 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=fact2
       publicFact.name=k_stats
       fkCols=TreeSet(advertiser_id, campaign_id)
       nonFkCols=Set(CTR, impressions, stats_source)
       requestCols=Set(CTR, campaign_id, impressions)
       filterCols=Set(stats_source, advertiser_id)
       factCost=800
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(advertiser_id -> Advertiser ID, campaign_id -> Campaign ID, stats_source -> Source)
       factColMapping=Map(impressions -> Impressions, CTR -> CTR)
       filters=TreeSet(EqualityFilter(Advertiser ID,213,false,false), EqualityFilter(Source,2,true,true))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:13:17.034 INFO  [ScalaTest-13-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:13:17.382 WARN  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - No concrete dimension found for factEngine=Oracle, schema=advertiser, dim=advertiser
09:13:17.421 WARN  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.p.PrestoQueryGenerator$ - Another query generator registered for PrestoEngine : null
09:13:17.502 ERROR [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.QueryPipelineWithFallback - Primary query chain failed, recovering with fall back
java.lang.RuntimeException: query execution failed
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:22)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.$anonfun$execute$3(QueryPipeline.scala:140)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.execute(QueryPipeline.scala:139)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactoryTest$PipelineRunner.run(DefaultQueryPipelineFactoryTest.scala:47)
09:13:17.518 ERROR [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.QueryPipelineWithFallback - Primary query chain failed, recovering with fall back
java.lang.RuntimeException: query execution failed
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:22)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.$anonfun$execute$3(QueryPipeline.scala:140)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.execute(QueryPipeline.scala:139)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactoryTest$PipelineRunner.run(DefaultQueryPipelineFactoryTest.scala:47)
09:13:17.543 ERROR [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.QueryPipelineWithFallback - Primary query chain failed, recovering with fall back
java.lang.RuntimeException: query execution failed
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:22)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.$anonfun$execute$3(QueryPipeline.scala:140)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.execute(QueryPipeline.scala:139)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactoryTest$PipelineRunner.run(DefaultQueryPipelineFactoryTest.scala:47)
- Test long list for days IN Filter
09:13:17.556 ERROR [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.QueryPipelineWithFallback - Primary query chain failed, recovering with fall back
java.lang.RuntimeException: query execution failed
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:22)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.$anonfun$execute$3(QueryPipeline.scala:140)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.execute(QueryPipeline.scala:139)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactoryTest$PipelineRunner.run(DefaultQueryPipelineFactoryTest.scala:47)
09:13:17.580 ERROR [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.QueryPipelineWithFallback - Primary query chain failed, recovering with fall back
java.lang.RuntimeException: query execution failed
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:22)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.$anonfun$execute$3(QueryPipeline.scala:140)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.execute(QueryPipeline.scala:139)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactoryTest$PipelineRunner.run(DefaultQueryPipelineFactoryTest.scala:47)
09:13:17.591 WARN  [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - No concrete dimension found for factEngine=Oracle, schema=advertiser, dim=woeid
09:13:17.604 ERROR [ScalaTest-11-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.QueryPipelineWithFallback - Primary query chain failed, recovering with fall back
java.lang.RuntimeException: query execution failed
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:22)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.$anonfun$execute$3(QueryPipeline.scala:140)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.execute(QueryPipeline.scala:139)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactoryTest$PipelineRunner.run(DefaultQueryPipelineFactoryTest.scala:47)
09:13:17.979 WARN  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator$ - Another query generator registered for OracleEngine : null
09:13:17.999 WARN  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.p.PostgresQueryGenerator$ - Another query generator registered for PostgresEngine : null
09:13:18.075 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.QueryChain - No data from driving query, running fall back query
09:13:18.084 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.p.PostgresQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:13:18.086 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.QueryChain - No data from driving query, running fall back query
09:13:18.095 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to f530012d-8252-4949-8ae9-d02cd8e8f3bd
09:13:18.104 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.p.PostgresQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:13:18.106 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.p.PostgresQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:13:18.109 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.QueryChain - No data from driving query, running fall back query
- test default powerset storage
09:13:18.125 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:18.125 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:18.517 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:18.519 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:18.519 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:18.519 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:18.518 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:18.521 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:18.521 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:18.536 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:18.539 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:18.539 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:18.586 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:18.587 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:18.596 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:18.598 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
- Test long list getDayBetweenFilters
09:13:18.598 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:18.616 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:18.616 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:18.616 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:18.617 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:18.617 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:18.699 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:18.703 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:18.703 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:18.771 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:18.771 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:18.771 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:18.773 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to c855a3e9-0e4d-453d-8075-0017afdff016
09:13:18.773 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:18.773 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:18.777 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to deb5d3c9-4013-42cc-ac5d-89df856fc27d
09:13:18.777 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 5d489040-cc63-40c5-9c6e-bbb9713475ac
- Test long list getHourBetweenFilters
09:13:18.784 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:13:18.784 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.p.PostgresQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:13:18.792 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 81b8762f-8b66-4dd7-9a8a-7f1a0f3662a5
09:13:18.809 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 7afe6a4f-26d4-4f4f-aed9-d41f72913f28
09:13:18.812 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to aa7abd7a-4fef-4f89-81a7-348d2e821e0e
09:13:18.818 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:18.818 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:18.821 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 92fd2ddf-12da-426d-8401-cf348134588f
09:13:18.822 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:18.822 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:18.825 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Class ID
09:13:18.826 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Class ID
09:13:18.826 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 86e35bb9-0548-427c-91a8-5936d9196b01
09:13:18.828 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Class ID
09:13:18.829 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Class ID
09:13:18.830 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to c56e9c5d-e829-4e50-b2ba-b9778dd8953d
09:13:18.836 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 43c21f08-26a9-4ed2-9bb5-e68c792d2b79
09:13:18.837 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:18.838 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:18.838 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:18.838 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:18.840 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.p.PostgresQueryGenerator - publicDim contains injectFilter.field: Class ID
09:13:18.841 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.p.PostgresQueryGenerator - publicDim contains injectFilter.field: Class ID
- Test long list getDayBetweenFilters In Hive
09:13:18.843 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.p.PostgresQueryGenerator - publicDim contains injectFilter.field: Class ID
09:13:18.843 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.p.PostgresQueryGenerator - publicDim contains injectFilter.field: Class ID
09:13:18.844 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 099bde3d-f436-41fe-8205-65a7bc1cbace
09:13:18.844 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:18.845 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:18.845 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:18.847 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:18.847 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:18.848 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Campaign Name",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Advertiser Currency",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Ad Group ID",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Spend",
                               "alias": null,
                               "value": null
                             }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
- Test long list getDayBetweenFilters In Presto
09:13:18.848 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:18.854 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 510fa7f7-5ee8-438a-8d21-7be67d26f4f5
09:13:18.869 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:18.869 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:18.869 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:18.869 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-keyword filters:Map(Source -> TreeSet(EqualityFilter(Source,2,true,true)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,12345,false,false))) : None
09:13:18.869 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:13:18.869 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:13:18.869 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:13:18.870 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:13:18.871 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Druid, Hive, Presto)
09:13:18.871 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact2 engine=Oracle cost=800 level=9998 cardinalityPreference=2147483647
09:13:18.871 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact1 engine=Oracle cost=800 level=9999 cardinalityPreference=2147483647
09:13:18.872 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats
       requestCols=Vector(DimColumnInfo(Keyword ID), DimColumnInfo(Campaign ID), FactColumnInfo(Impressions), DimColumnInfo(Ad Group Status), DimColumnInfo(Campaign Status), FactColumnInfo(Count))
       requestSortByCols=Vector(DimSortByColumnInfo(Campaign Status,ASC))
       dimColumnAliases=Set(Ad Group Status, Campaign ID, Campaign Status, Keyword ID)
       dimCardinalityEstimate=None
       factCost=Map((fact2,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true), (fact1,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true))
       factSortByMap=Map()
       dimSortByMap=Map(Campaign Status -> ASC)
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=true
       hasDimFilters=false
       hasNonFKDimFilters=false
       hasFactSortBy=false
       hasDimSortBy=true
       hasNonDrivingDimSortFilter=true
       hasDrivingDimNonFKNonPKSortBy=false
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=false
       hasLowCardinalityDimFilters=false
       isFactDriven=false
       forceDimDriven=true
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=DateTimeBetweenFilter(Day,2020-11-03T17:13:12.820Z,2020-11-10T17:13:12.820Z,yyyy-MM-dd'T'HH:mm:ss.SSSZZ)
       localTimeDayFilter=DateTimeBetweenFilter(Day,2020-11-03T17:13:12.820Z,2020-11-10T17:13:12.820Z,yyyy-MM-dd'T'HH:mm:ss.SSSZZ)
       requestType=SyncRequest
       startIndex=20
       maxRows=100
       includeRowCount=false
       hasDimAndFactOperations=true
       isTimeSeries=false
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true), TimeZone -> TimeZoneValue(America/Los_Angeles))
       factSchemaRequiredAliasesMap=Map(fact1 -> Set(Advertiser ID), fact2 -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(campaign -> InnerJoin, ad_group -> InnerJoin, keyword -> RightOuterJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Ad Group ID, Keyword ID)
       filters=TreeSet(Advertiser ID)
       upperCandidates=List()
       lowerCandidates=List(ad_group)
       isDrivingDimension=true
       hasNonFKOrForcedFilters=false
       hasNonFKNonForceFilters=false
       hasNonFKSortBy=false
       hasNonFKNonPKSortBy=false
       hasLowCardinalityFilter=false
       hasPKRequested=true
       hasNonPushDownFilters=false
     , 
       fields=Set(Campaign ID, Ad Group Status, Ad Group ID)
       filters=TreeSet(Advertiser ID)
       upperCandidates=List(keyword)
       lowerCandidates=List(campaign)
       isDrivingDimension=false
       hasNonFKOrForcedFilters=false
       hasNonFKNonForceFilters=false
       hasNonFKSortBy=false
       hasNonFKNonPKSortBy=false
       hasLowCardinalityFilter=false
       hasPKRequested=false
       hasNonPushDownFilters=false
     , 
       fields=Set(Campaign Status, Campaign ID)
       filters=TreeSet(Advertiser ID)
       upperCandidates=List(ad_group)
       lowerCandidates=List()
       isDrivingDimension=false
       hasNonFKOrForcedFilters=false
       hasNonFKNonForceFilters=false
       hasNonFKSortBy=true
       hasNonFKNonPKSortBy=true
       hasLowCardinalityFilter=false
       hasPKRequested=true
       hasNonPushDownFilters=false
     )
     
- test DefaultAuthValidator
09:13:18.872 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=campaign_oracle
       publicDim.name=campaign
       fields=Set(Campaign Status, Campaign ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,12345,false,false)))
       upperCandidates=List(ad_group_oracle)
       lowerCandidates=List()
       hasNonFKOrForcedFilters=false
       hasNonFKSortBy=true
       hasNonPushDownFilters=false
       hasPKRequested=true
     
09:13:18.872 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=ad_group_oracle
       publicDim.name=ad_group
       fields=Set(Campaign ID, Ad Group Status, Ad Group ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,12345,false,false)))
       upperCandidates=List(targetingattribute)
       lowerCandidates=List(campaign_oracle)
       hasNonFKOrForcedFilters=false
       hasNonFKSortBy=false
       hasNonPushDownFilters=false
       hasPKRequested=false
     
09:13:18.872 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=targetingattribute
       publicDim.name=keyword
       fields=Set(Ad Group ID, Keyword ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,12345,false,false)))
       upperCandidates=List()
       lowerCandidates=List(ad_group_oracle)
       hasNonFKOrForcedFilters=false
       hasNonFKSortBy=false
       hasNonPushDownFilters=false
       hasPKRequested=true
     
09:13:18.872 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=fact2
       publicFact.name=k_stats
       fkCols=TreeSet(ad_group_id, advertiser_id, campaign_id, keyword_id)
       nonFkCols=Set(Count, impressions, stats_source)
       requestCols=Set(impressions, ad_group_id, Count, campaign_id, keyword_id)
       filterCols=Set(stats_source, advertiser_id)
       factCost=800
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(ad_group_id -> Ad Group ID, stats_source -> Source, advertiser_id -> Advertiser ID, campaign_id -> Campaign ID, keyword_id -> Keyword ID)
       factColMapping=Map(impressions -> Impressions, Count -> Count)
       filters=TreeSet(EqualityFilter(Advertiser ID,12345,false,false), EqualityFilter(Source,2,true,true))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:13:18.872 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:13:18.872 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = false
09:13:18.872 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - runSingleEngineQuery
09:13:18.874 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set(IsGrainOptimized(false), IsIndexOptimized(true), ForceDimDriven(true))
09:13:18.874 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet(CONDITIONAL_HINT1, CONDITIONAL_HINT2, CONDITIONAL_HINT3)
09:13:18.876 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:18.876 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:18.876 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator - renderedDim: ad_group_oracle renderedDim._3.dim.isDerivedDimension: false hasNonPushDownFilters : false
09:13:18.877 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator - b: targetingattribute b._3.dim.isDerivedDimension: false hasNonPushDownFilters : false
09:13:18.877 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator - renderedDim: campaign_oracle renderedDim._3.dim.isDerivedDimension: false hasNonPushDownFilters : false
09:13:18.877 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator - b: targetingattribute b._3.dim.isDerivedDimension: false hasNonPushDownFilters : false
09:13:18.878 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:18.878 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query option defined!
09:13:18.878 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
09:13:18.884 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
09:13:18.889 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
09:13:18.893 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:18.893 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:18.897 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:18.897 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:18.902 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:18.902 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:18.905 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
09:13:18.907 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:18.907 INFO  [ScalaTest-10-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:18.932 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:18.932 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:18.932 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:18.934 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:18.934 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:18.938 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:18.938 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:18.938 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:18.940 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:18.940 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- test DefaultDruidAuthHeaderProvider
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Campaign Name",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Advertiser Currency",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Average CPC Cents",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Average CPC",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Spend",
                               "alias": null,
                               "value": null
                             }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:13:18.995 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
WithAvailableOnwardsDateTest:
09:13:18.996 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:18.996 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:19.015 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.016 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- Test long list getHourBetweenFilters In Hive
- withAlternativeEngine: dim column override success case
- Test long list getHourBetweenFilters In Presto
- Test Today UTC
- Test for Disjoint Set Tuples, IN to BetWeen Filters
- getCubeJsonForName should not contain hidden columns in json for given cube name
- withAlternativeEngine: invalid static mapped Fact
- getDisjointSetTuplesForDays 3 slots
- newRollup should fail if fact column context is not the same as source
- getDisjointSetTuplesForDays 3 slots with first and last repetition
- newRollup should fail if trying to discard fact columns
- withAlternativeEngine: invalid static mapped Dimension
- getDisjointSetTuplesForDays 4 slots
09:13:19.025 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.025 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:19.025 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
- Public Fact and Dimension with revision should work as expected
- getDisjointSetTuplesForDays 1 slots over different months
- getDisjointSetTuplesForDays 1 slots over different years
- createSubset should be able to create a subset fact with availableOnwardsDate
- getDisjointSetTuplesForDays 2 slots over different years
- getDisjointSetTuplesForDays 1 slots 1 entry
SELECT *
FROM (SELECT cp1.id "Campaign ID", coalesce(f0."impressions", 1) "Impressions", COALESCE(f0.ad_format_id, 'Other') "Ad Format Name", COALESCE(f0.ad_format_sub_type, 'N/A') "Ad Format Sub Type"
      FROM (SELECT /*+ PUSH_PRED PARALLEL_INDEX(cb_campaign_k_stats 4) CONDITIONAL_HINT1 CONDITIONAL_HINT2 CONDITIONAL_HINT3 */
                   CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (5)) THEN 'Single image' WHEN (ad_format_id IN (6)) THEN 'Single image' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (9)) THEN 'Carousel' WHEN (ad_format_id IN (2)) THEN 'Single image' WHEN (ad_format_id IN (7)) THEN 'Video' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (3)) THEN 'Single image' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (8)) THEN 'Video with HTML Endcard' WHEN (ad_format_id IN (4)) THEN 'Single image' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'Other' END ad_format_id, CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'N/A' END ad_format_sub_type, campaign_id, SUM(impressions) AS "impressions"
            FROM fact2 FactAlias
            WHERE (ad_format_id = 100) AND (advertiser_id = 12345) AND (stats_source = 2) AND (ad_format_id IN (4,5,6,2,3)) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (5)) THEN 'Single image' WHEN (ad_format_id IN (6)) THEN 'Single image' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (9)) THEN 'Carousel' WHEN (ad_format_id IN (2)) THEN 'Single image' WHEN (ad_format_id IN (7)) THEN 'Video' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (3)) THEN 'Single image' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (8)) THEN 'Video with HTML Endcard' WHEN (ad_format_id IN (4)) THEN 'Single image' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'Other' END, CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'N/A' END, campaign_id
            
           ) f0
           RIGHT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT /*+ CampaignHint */ id, advertiser_id
            FROM campaign_postgres
            WHERE (advertiser_id = 12345)
             ) sqalias1 LIMIT 120) D ) sqalias2 WHERE ROWNUM >= 21 AND ROWNUM <= 120) cp1 
            ON (f0.campaign_id = cp1.id)

) sqalias3 
   - Get number of days from today
- newRollup should successfully rollup discarding all derived columns associated the discarding columns
09:13:19.027 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.027 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- Public Fact with dimRevision of new Dimension revision should return new revision for dim
- newRollup should successfully rollup with column alias map
- withAlternativeEngine: Static Mapped dim/fact success cases
- Test invalid long list for days IN Filter
- Test invalid date string for conversion to long list
- getDisjointSetTuples for empty timestamps
BaseUTCTimeProviderTest:
- withAlternativeEngine: Static Mapped dim failure to overwrite case
- Public Fact and Dimension with multiple revision should take lowest revision as default revision
- should discard a subset fact with availableOnwardsDate > requested date
- withAlternativeEngine: Static Mapped fact failure to overwrite case
- withAvailableOnwardsDate: should pass with new engine (Oracle)
- should discard a subset fact with availableOnwardsDate > at least one of the date in requested dates list
- withAlternativeEngine should succeed after discarding the given columns
- withAlternativeEngine should fail for invalid columns in discard set
- withAlternativeEngine should fail for derived columns containing discarded columns
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Ad Status",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Campaign Name"
                             },
                             {
                               "field": "Campaign ID",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Spend",
                               "alias": null,
                               "value": null
                             }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:13:19.077 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.077 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:19.077 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:19.078 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.078 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:19.082 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.082 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:19.082 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:19.094 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.094 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Campaign Name"
                             },
                             {
                               "field": "Average CPC",
                               "alias": null,
                               "value": null
                             },
                             {
                              "field": "Spend",
                              "alias": null,
                              "value": null
                              }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:13:19.099 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.099 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:19.099 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
- newRollup should discard column in hive ddl column rendering
DerivedFunctionTest:
- withAvailableOnwardsDate: should pass with redefined FactCol and DimCol
- Create a DECODE_DIM failure cases
- Case: Timezone: UTC - datetime between should pass through
- Case: Timezone: not provided - datetime between filter - one day before and one day after
- Create value DECODE_DIM
09:13:19.101 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.101 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- should discard the new rollup if the availableOnwardsDate > requested date
- Attempt LOOKUP_WITH_DECODE fail
- newViewTableRollUp: Creating a rollup with invalid from table should fail.
- newViewTableRollUp: Can't duplicate an existing view.
- Failure to get interval date with blank format
- newViewTableRollUp: New rollup must have discardings and should fail otherwise.
- Public Fact and Dimension with multiple revision should take the revision passed in defaultRevisionMap as default revision
- newViewTableRollUp: Fail to discard required fact with foreign keys.
- Case: Timezone: not provided - datetime between with hour provided should give one day before and one day after
- newViewTableRollUp: Fail to discard required fact.
- should not discard a subset fact with availableOnwardsDate == requested date
- Case: Timezone: not provided - datetime between with hour and minute provided should give one day before and one day after
- newViewTableRollUp: Fail to discard fake dim.
- Case: Timezone: UTC - should pass through
- generate druid expression with ++
- Case: Timezone: not provided - between filter - one day before and one day after
- generate druid expression with -
- Case: Timezone: not provided - between with hour filter should not give one day before and one day after
- successfully derive dependent columns from DruidDerivedExpression
- generate druid expression with *
- Case: Timezone: not provided - between with hour and minute filter should not give one day before and one day after
- withAvailableOnwardsDate: Should succeed with 2 availableOnwardsDates on the same Engine
- generate druid expression with /
- generate druid expression with /-
- successfully derive dependent columns from OracleDerivedExpression with table alias
- Case: Timezone: not provided - in filter - one day before and one day after
- successfully derive dependent columns from PostgresDerivedExpression with table alias
- generate druid expression with * ++ - /-
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Campaign Name"
                             },
                             {
                               "field": "Average Position",
                               "alias": null,
                               "value": null
                             },
                             {
                              "field": "Spend",
                              "alias": null,
                              "value": null
                              }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:13:19.122 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.122 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:19.122 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:19.124 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.124 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Campaign Name"
                             },
                             {
                               "field": "Average Position",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Average CPC"
                             },
                             {
                              "field": "Spend",
                              "alias": null,
                              "value": null
                              }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
ViewTest:
- newRollUp should override schema if provided
- createSubsetTest: should fail if source fact is invalid
- successfully derive dependent columns from OracleDerivedExpressions when expandDerivedExpression is true and false
- ViewBaseTable: copyWith should fail if attempting to discard a fact.
- withAvailableOnwardsDate: Should fail with 1 availableOnwardsDate on the same Engine
- successfully derive dependent columns from PostgresDerivedExpressions when expandDerivedExpression is true and false
- ViewBaseTable: copyWith should fail if attempting to discard a nonexistent Dim.
09:13:19.146 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.146 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
- All Derived Functions should generate proper JSON Strings.
09:13:19.146 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:19.148 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.148 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:19.155 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.155 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:19.155 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:19.157 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.157 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Campaign Name"
                             },
                             {
                               "field": "Advertiser ID",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "N Average CPC"
                             },
                             {
                              "field": "Spend",
                              "alias": null,
                              "value": null
                              }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:13:19.168 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
09:13:19.171 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.171 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:19.171 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
JsonRowListTest:
- successfully derive dependent columns from HiveDerivedExpressions when expandDerivedExpression is true and false
- createSubsetTest: should fail if source table isn't there
09:13:19.173 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
- ViewBaseTable: copyWith should fail to overwrite existing fact cols with newConstNameToValueMap.
09:13:19.173 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- successfully derive dependent columns from OracleDerivedExpression IS_ALERT_ELIGIBLE
- newRollUp should inherit schema if not provided
- createSubset: should fail if destination fact name is already in use
09:13:19.174 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
09:13:19.180 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
09:13:19.184 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Campaign Name"
                             },
                             {
                               "field": "Impression Share",
                               "alias": null,
                               "value": null
                             },
                             {
                              "field": "Spend",
                              "alias": null,
                              "value": null
                              }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:13:19.188 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
09:13:19.191 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.191 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:19.191 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:19.193 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.193 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:19.200 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to d5115071-0e87-4b06-9ed9-222ea4269adc
NoopRowListTest:
- Case: Timezone: AU, Day - equal, Hour - non-zero
- successfully derive dependent columns from PostgresDerivedExpression IS_ALERT_ELIGIBLE
- Default Public Revision with a Fact which is not registered should fail
- GET_AVERAGE_VIDEO_SHOWN test
- ViewBaseTable: copyWith should fail to overwrite non-existent dim cols with newConstNameToValueMap.
- createSubset: should fail if no columns are discarded
- GET_SOV_SHARE test
- GET_SOV_LOST_SHARE_RANK test
- createSubset: should fail if source and destination schemas are the same
- Case: Timezone: AU, Day - In, Hour - non-zero
- GET_SOV_LOST_SHARE_BUDGET test
- ViewBaseTable: copyWith should fail to overwrite dim cols with non-constant values with newConstNameToValueMap.
- Case: Timezone: AU, Day - NotIn, Hour - non-zero (intentional exception)
09:13:19.207 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to f8b217b6-4c30-4112-908f-7e86f414df69
- GET_WEIGHTED_VIDEO_SHOWN test
- withAvailableOnwardsDate: Should succeed with identical availableOnwardsDates on the different Engines
- Case: Timezone: AU, Day - equal, Hour - non-zero, Minute - non-zero
- ViewBaseTable: copyWith should succeed in adding valid constant values with newConstNameToValueMap.
- GET_VIDEO_SHOWN_SUM test
- Case: Timezone: AU, Day - between, Hour - between, Minute - between
- withAvailableOnwardsDate: should fail if no tableMap to pull from
- Default Public Revision with a Dimension which is not registered should fail
- ViewBaseTable: instantiation should fail without a valid input schema.
- createSubset: should pass if source and destination schemas are different
- DAY_OF_WEEK test
- Case: Timezone: AU, datetime between with day, hour, minute with UTC input
- Case: Timezone: AU, datetime between with day, hour, minute with non-UTC input
- REGEX_EXTRACT test
09:13:19.211 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.211 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
- withAvailableOnwardsDate: should fail if source fact is wrong
09:13:19.211 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
- ViewBaseTable: Incorrect engine should throw an error.
- Case: Timezone: UTC, Day - between, Hour - between, Minute - between
- Case: Timezone: UTC, datetime between with day, hour, minute with UTC input
- Case: Timezone: UTC, datetime between with day, hour, minute with non-UTC input
- ViewBaseTable: Throw error if declared derived expression not derived.
- withAvailableOnwardsDate: should fail if destination fact name is already in use
- Oracle GET_INTERVAL_DATE NEGATIVE test
- ViewBaseTable: Throw error if declared derived expression uses false columns.
- ViewBaseTable: Throw error if declared derived expression references itself (infinite loop case).
- withAvailableOnwardsDate: availableOnwardsDate must be defined
09:13:19.213 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.213 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- getFact and getDimension with invalid revision should return Fact and Dimension associated with defaultRevision
- Postgres GET_INTERVAL_DATE NEGATIVE test
- ViewBaseTable: Incorrect engine in annotations should throw an error.
- createSubset: should pass if new subset has forceFilters
09:13:19.218 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 4ac1d08f-3499-43ce-89fd-bc9c3d29f6e0
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Ad Status",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Campaign Name"
                             },
                             {
                               "field": "Campaign ID",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Spend",
                               "alias": null,
                               "value": null
                             },
                             {
                                "field": "Engagement Rate",
                                "alias": null,
                                "value": null
                             }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:13:19.231 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.231 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:19.231 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:19.235 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.235 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:19.240 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 47f9806f-86b9-40cf-b864-601b178a8b0a
09:13:19.247 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 13b850a6-49a9-4461-8cd0-3f151435e252
WithNewSchemaAndGrainTest:
- Should fail to create UnionView with differing Fact Columns
- withAvailableOnwardsDate: should fail if override dim columns are self referential
- successfully derive dependent columns from PrestoDerivedExpression
- Should fail to create UnionView with discarded dims difference
- Public Fact with same name and revision should fail
- Case: Timezone: not provided, Day - between, Hour - between, Minute - between
- successfully derive dependent columns from PrestoShardingExpression
- Case: Timezone: PST, Day - between, Hour - not-specified
- Case: Timezone: PST, Day - between, Hour - not-specified # 2
- UnionView takes two or more facts
- Public Dimension with same name and revision should fail
09:13:19.259 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to bdcc0f0b-84cf-448c-a19f-115a0fc35d8d
- Case: Timezone: AU, Day - between, Hour - not-specified
- Case: Timezone: PST, Day - between, Hour - zero
- Case: Timezone: PST, Day - between, Hour - non-zero
- UnionView should fail with different dimCol names
- successfully derive dependent columns from PrestoDerivedExpressions when expandDerivedExpression is true and false
- Case: Timezone: India, Day - between, Hour - non-zero
- Case: Timezone: AU, Day - between, Hour - non-zero
- UnionView should fail with different factCol names
09:13:19.266 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to f0d9973b-b505-46ab-8693-d0db1c8cf1ec
09:13:19.271 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 73543174-b1db-459e-8836-c4c27014b818
SELECT *
FROM (SELECT cp1.id "Campaign ID", coalesce(f0."impressions", 1) "Impressions", COALESCE(f0.ad_format_id, 'Other') "Ad Format Name", COALESCE(f0.ad_format_sub_type, 'N/A') "Ad Format Sub Type"
      FROM (SELECT /*+ PUSH_PRED PARALLEL_INDEX(cb_campaign_k_stats 4) CONDITIONAL_HINT1 CONDITIONAL_HINT2 CONDITIONAL_HINT3 */
                   CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (5)) THEN 'Single image' WHEN (ad_format_id IN (6)) THEN 'Single image' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (9)) THEN 'Carousel' WHEN (ad_format_id IN (2)) THEN 'Single image' WHEN (ad_format_id IN (7)) THEN 'Video' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (3)) THEN 'Single image' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (8)) THEN 'Video with HTML Endcard' WHEN (ad_format_id IN (4)) THEN 'Single image' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'Other' END ad_format_id, CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'N/A' END ad_format_sub_type, campaign_id, SUM(impressions) AS "impressions"
            FROM fact2 FactAlias
            WHERE (ad_format_id <> 100) AND (advertiser_id = 12345) AND (stats_source = 2) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (5)) THEN 'Single image' WHEN (ad_format_id IN (6)) THEN 'Single image' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (9)) THEN 'Carousel' WHEN (ad_format_id IN (2)) THEN 'Single image' WHEN (ad_format_id IN (7)) THEN 'Video' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (3)) THEN 'Single image' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (8)) THEN 'Video with HTML Endcard' WHEN (ad_format_id IN (4)) THEN 'Single image' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'Other' END, CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'N/A' END, campaign_id
            
           ) f0
           RIGHT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT /*+ CampaignHint */ id, advertiser_id
            FROM campaign_postgres
            WHERE (advertiser_id = 12345)
             ) sqalias1 LIMIT 120) D ) sqalias2 WHERE ROWNUM >= 21 AND ROWNUM <= 120) cp1 
            ON (f0.campaign_id = cp1.id)

) sqalias3 
   09:13:19.276 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 626bd5d9-2e65-4d57-9d56-ab944b68aeef
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Ad Status",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Campaign Name"
                             },
                             {
                               "field": "Campaign ID",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Spend",
                               "alias": null,
                               "value": null
                             },
                             {
                                "field": "Engagement Rate",
                                "alias": null,
                                "value": null
                             },
                             {
                                "field": "Paid Engagement Rate",
                                "alias": null,
                                "value": null
                             }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:13:19.280 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.280 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:19.280 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:19.281 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.281 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 14aebe4c-7b2f-465e-b7b0-5ed9928b56f1
09:13:19.282 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:19.283 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.283 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:19.283 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:19.285 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.285 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:19.286 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 22e9ee31-6cba-4600-b8a8-49a63c293c30
09:13:19.293 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 09ec6eaf-c69c-4904-89e5-763e2964a26b
FactDrivenPartialRowListTest:
- Case: Timezone: AU, Day - equalTo, Hour - between, Result - prev-and-same day
- Case: Timezone: PST, Day - equalTo, Hour - between, Result - same-and-next day
- Case: Timezone: AU, Day - equalTo, Hour - between, Result - prev day
- Presto DAY_OF_WEEK test
- Case: Timezone: PST, Day - equalTo, Hour - between, Result - next day
- Case: Timezone: PST, Day - equalTo, Hour - between, Result - next day zero hour
- withAvailableOnwardsDate: can't reference a column that does not exist
- Case: Timezone: AU, Day - between, Hour - in
- Case: Timezone: PST, Day - in, Hour - between
- Case: Publisher Timezone: AU, Day - between, Hour - non-zero
- Hive Column MAX/MIN test
- withAvailableOnwardsDate: invalid static mapped Fact
- Oracle Column MAX/MIN test
- Postgres Column MAX/MIN test
- Create oracle NVL and parse parameters
- Create Postgres NVL and parse parameters
- Create hive NVL and parse parameters
- Create presto NVL and parse parameters
- Create oracle TRUNC and parse parameters
- Create Postgres TRUNC and parse parameters
- Create oracle COALESCE and parse parameters
- withNewSchemaAndGrain should succeed with new grain and new schema
- Create Postgres COALESCE and parse parameters
- Create hive COALESCE and parse parameters
- domainJsonAsString should include only default revision of the cube
- withNewSchemaAndGrain should succeed with new grain and new schema and copy force filters
- Create presto COALESCE and parse parameters
- withAvailableOnwardsDate: invalid static mapped Dimension
- Create oracle TO_CHAR and parse parameters
- Create Postgres TO_CHAR and parse parameters
09:13:19.303 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 8ae0f587-204c-4cae-a991-ca431d8ee071
- Case: Shift UtcDay forward by 1 day
- Create oracle ROUND and parse parameters
- withNewSchemaAndGrain should succeed with new grain and new schema and override force filters
- Create Postgres ROUND and parse parameters
- Create hive ROUND and parse parameters
- Case: Shift backward by invalid filter
- Create presto ROUND and parse parameters
- Case: Extend backwards with Equality filter
- Case: Shift forward with Equality filter
- Create presto TRIM and parse parameters
- withNewSchemaAndGrain should fail given the same schema
- withAvailableOnwardsDate: Static Mapped dim/fact success cases
- Create presto MAX and parse parameters
- flatten domainJsonAsString should return all possible fields in cube
- Case: Shift forward by invalid filter
- Presto REGEX_EXTRACT test
- Case: Extend forward with Equality filter
- wtihNewSchemaAndGrain should fail if grain is the same
09:13:19.330 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 746964ca-6a16-4205-83f9-ccdb057308de
09:13:19.335 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 8fe37120-6d46-4d27-bb42-24a8e90636b0
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Ad Status",
                               "alias": null,
                               "value": null
                             },
                             {
                                "field": "Ad Group ID"
                             },
                             {
                                "field": "Advertiser ID"
                             },
                             {
                               "field": "Campaign Name"
                             },
                             {
                               "field": "Campaign ID",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Spend",
                               "alias": null,
                               "value": null
                             },
                             {
                                "field": "Engagement Rate",
                                "alias": null,
                                "value": null
                             },
                             {
                                "field": "Paid Engagement Rate",
                                "alias": null,
                                "value": null
                             }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:13:19.345 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to ff8ef882-504f-4956-b852-cc5add59a47b
09:13:19.347 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.347 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:19.347 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:19.348 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.348 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:19.353 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.353 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:19.354 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:19.354 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 965e4ceb-b65e-4aaf-99d9-d22843660e07
09:13:19.356 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.356 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
BucketSelectorTest:
- Case: Extend forward by invalid filter
09:13:19.363 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 75020563-9fb4-49f6-9d90-d1ce6213f95f
- Case: getMinAndMaxHours invalid filter
- Case: updateHours invalid filter
- Case: applyOffset zero offset
- Case: validateFilters minuteFilter test
- withAvailableOnwardsDate: should discard the new table if the availableOnwardsDate > requested date
- Case: validateFilters different hour and minute types test
- Case: Invalid Filter Operation (InFilter)
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Spend",
                               "alias": null,
                               "value": null
                             }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Campaign Name", "operator": "=", "value": "cmpgn_1"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:13:19.369 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.369 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
09:13:19.369 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:19.370 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:19.371 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.371 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:19.374 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
09:13:19.396 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Source"
                             },
                             {
                               "field": "N Spend",
                               "alias": null,
                               "value": null
                             }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Campaign Name", "operator": "=", "value": "cmpgn_1"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:13:19.401 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
09:13:19.401 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.401 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:19.401 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:19.403 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.403 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:19.405 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
09:13:19.406 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.406 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:19.406 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:19.408 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.408 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:19.411 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.412 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:13:19.412 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:13:19.412 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
QueryBuilderTest:
- withAvailableOnwardsDate: should fail with missing override for fact column annotation with engine requirement
- withAvailableOnwardsDate: should fail with missing override for fact column rollup with engine requirement
09:13:19.413 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.413 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- flatten domainJsonAsString should return correct version of cube
- withAvailableOnwardsDate: should succeed with override for fact column rollup with engine requirement
- withAvailableOnwardsDate: should fail if ddl annotation is of a different engine other than the engine of the fact
- All column types with all expressions, dataTypes, & rollups should render JSON properly.
09:13:19.417 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.417 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(0), dryRunQueryGenVersion: None
09:13:19.417 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:19.418 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.419 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:19.420 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
09:13:19.423 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.423 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(0), dryRunQueryGenVersion: None
09:13:19.423 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:13:19.425 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.425 INFO  [ScalaTest-14-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
SELECT *
FROM (SELECT cp1.id "Campaign ID", coalesce(f0."impressions", 1) "Impressions", COALESCE(f0.ad_format_id, 'Other') "Ad Format Name", COALESCE(f0.ad_format_sub_type, 'N/A') "Ad Format Sub Type"
      FROM (SELECT /*+ PUSH_PRED PARALLEL_INDEX(cb_campaign_k_stats 4) CONDITIONAL_HINT1 CONDITIONAL_HINT2 CONDITIONAL_HINT3 */
                   CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (5)) THEN 'Single image' WHEN (ad_format_id IN (6)) THEN 'Single image' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (9)) THEN 'Carousel' WHEN (ad_format_id IN (2)) THEN 'Single image' WHEN (ad_format_id IN (7)) THEN 'Video' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (3)) THEN 'Single image' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (8)) THEN 'Video with HTML Endcard' WHEN (ad_format_id IN (4)) THEN 'Single image' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'Other' END ad_format_id, CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'N/A' END ad_format_sub_type, campaign_id, SUM(impressions) AS "impressions"
            FROM fact2 FactAlias
            WHERE (advertiser_id = 12345) AND (stats_source = 2) AND (ad_format_id IN (4,5,6,2,3)) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (5)) THEN 'Single image' WHEN (ad_format_id IN (6)) THEN 'Single image' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (9)) THEN 'Carousel' WHEN (ad_format_id IN (2)) THEN 'Single image' WHEN (ad_format_id IN (7)) THEN 'Video' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (3)) THEN 'Single image' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (8)) THEN 'Video with HTML Endcard' WHEN (ad_format_id IN (4)) THEN 'Single image' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'Other' END, CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'N/A' END, campaign_id
            
           ) f0
           RIGHT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT /*+ CampaignHint */ id, advertiser_id
            FROM campaign_postgres
            WHERE (advertiser_id = 12345)
             ) sqalias1 LIMIT 120) D ) sqalias2 WHERE ROWNUM >= 21 AND ROWNUM <= 120) cp1 
            ON (f0.campaign_id = cp1.id)

) sqalias3 
   09:13:19.430 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.430 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:19.430 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:19.432 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.432 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
QueryTest:
- withAvailableOnwardsDate: column annotation override success case
- withAvailableOnwardsDate: dim column override failure case
- domainJsonAsString and flattenDomainJsonAsString should not include NoopSchema
- withAvailableOnwardsDate: invalid discard
- withAvailableOnwardsDate: dim column override success case
- discarding column from old cube, adding in new one
- Should allow aliasing of a publicFact
- withAvailableOnwardsDate: verify overrideDDLAnnotation overrides on new table
09:13:19.456 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
SingleEngineQueryTest:
- Internal bucket test
- Should allow aliasing of a publicFact with column replacements
- Default Bucketing Config Test
- External bucket test
- Should fail with invalid secondary alias (duplicate)
- Should alias a fact with an overriden secondary Dimension, keeping default base.
09:13:19.476 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
09:13:19.487 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.487 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:19.487 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:19.489 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.489 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:19.500 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to e81b7d00-3384-4e80-be93-7a0efdac3569
MultiQueryTest:
- successfully dump ddl to file
- AndFilter should be able to successfully render with an alias.
- BetweenFilter should fail for Druid engine
ColumnAnnotationTest:
- successfully find HiveShardingExpression with instance
- OuterFilter should render combined filters with AND
- successfully find ForeignKey with instance
- successfully find DayColumn with instance
- InFilter should fail for Druid engine
- successfully find PrestoShardingExpression with instance
- NotInFilter should fail for Druid engine
- Instantiate  Hive/PrestoShardingExpression
- EqualityFilter should fail for Druid engine
- Instantiate ForeignKey and DayColumn
- LikeFilter should fail for Druid engine
- SqlLikeFilterRenderer edit strings
- Column annotations should convert to JSON properly.
09:13:19.536 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 95c19d04-144c-4de8-af3d-6a17674defcf
SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT "Device ID", "Advertiser ID", "Ad Format Name", "Ad Format Sub Type", impressions AS "Impressions", "Ad Group Status", "Campaign Name", count_col AS "Count"
FROM (SELECT f0.device_id "Device ID", agp2.advertiser_id "Advertiser ID", f0.ad_format_id "Ad Format Name", f0.ad_format_sub_type "Ad Format Sub Type", SUM(impressions) AS impressions, agp2."Ad Group Status" "Ad Group Status", cp1.campaign_name "Campaign Name", SUM(count_col) AS count_col
      FROM (SELECT /*+ PARALLEL_INDEX(cb_campaign_k_stats 4) CONDITIONAL_HINT1 CONDITIONAL_HINT2 CONDITIONAL_HINT4 */
                   CASE WHEN (device_id IN (1)) THEN 'Desktop' WHEN (device_id IN (2)) THEN 'Tablet' WHEN (device_id IN (3)) THEN 'SmartPhone' WHEN (device_id IN (-1)) THEN 'UNKNOWN' ELSE 'UNKNOWN' END device_id, ad_group_id, advertiser_id, CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (5)) THEN 'Single image' WHEN (ad_format_id IN (6)) THEN 'Single image' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (9)) THEN 'Carousel' WHEN (ad_format_id IN (2)) THEN 'Single image' WHEN (ad_format_id IN (7)) THEN 'Video' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (3)) THEN 'Single image' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (8)) THEN 'Video with HTML Endcard' WHEN (ad_format_id IN (4)) THEN 'Single image' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'Other' END ad_format_id, CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'N/A' END ad_format_sub_type, campaign_id, SUM(impressions) AS impressions, COUNT(*) AS count_col
            FROM fact2 FactAlias
            WHERE (ad_format_id <> 100) AND (ad_format_id = 35) AND (ad_format_id = 97) AND (advertiser_id = 12345) AND (stats_source = 2) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY CASE WHEN (device_id IN (1)) THEN 'Desktop' WHEN (device_id IN (2)) THEN 'Tablet' WHEN (device_id IN (3)) THEN 'SmartPhone' WHEN (device_id IN (-1)) THEN 'UNKNOWN' ELSE 'UNKNOWN' END, ad_group_id, advertiser_id, CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (5)) THEN 'Single image' WHEN (ad_format_id IN (6)) THEN 'Single image' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (9)) THEN 'Carousel' WHEN (ad_format_id IN (2)) THEN 'Single image' WHEN (ad_format_id IN (7)) THEN 'Video' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (3)) THEN 'Single image' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (8)) THEN 'Video with HTML Endcard' WHEN (ad_format_id IN (4)) THEN 'Single image' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'Other' END, CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'N/A' END, campaign_id
            
           ) f0
                     INNER JOIN
           (SELECT /*+ CampaignHint */ campaign_name, id, advertiser_id
            FROM campaign_postgres
            WHERE (advertiser_id = 12345) AND (campaign_name IS NOT NULL)
             )
           cp1 ON ( f0.advertiser_id = cp1.advertiser_id AND f0.campaign_id = cp1.id)
           INNER JOIN
           (SELECT  advertiser_id, campaign_id, CASE WHEN status = 'ON' THEN 'ON' ELSE 'OFF' END AS "Ad Group Status", id
            FROM ad_group_postgres
            WHERE (advertiser_id = 12345)
             )
           agp2 ON ( f0.advertiser_id = agp2.advertiser_id AND f0.ad_group_id = agp2.id)

          GROUP BY f0.device_id, agp2.advertiser_id, f0.ad_format_id, f0.ad_format_sub_type, agp2."Ad Group Status", cp1.campaign_name
) sqalias1 
   ORDER BY "Advertiser ID" ASC NULLS LAST, "Ad Format Name" ASC NULLS LAST) sqalias2 LIMIT 200) D ) sqalias3 WHERE ROWNUM >= 1 AND ROWNUM <= 20009:13:19.546 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.546 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:19.546 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:19.551 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.551 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
QueryContextTest:
- NotEqualToFilter should fail for Druid engine
- InFilter Test
- IsNullFilter should fail for Druid engine
- IsNotNullFilter should fail for Druid engine
- Filters with different forcefilter flags are same using the baseFilterOrdering
- Filters with different overridable flags are same using the baseFilterOrdering
- Filters with different operations are different using the baseFilterOrdering
- Attempt to compare incomparable types
Set(campaign_adjustments, ad_fact1, advertiser_postgres, pg_combined_class, ad_group_postgres, v_publisher_stats, campaign_stats, k_stats_fact1, ad_dim_postgres, k_stats_new_partitioning_two, fact_druid, restaurant_postgres, campaign_postgres, f_class_stats, v_publisher_stats2, fact1, k_stats_new_partitioning_one, v_publisher_stats_str, fact2, pg_non_hash_paritioned_with_singleton_dim, pg_targetingattribute, account_stats, account_adjustment)
- failing forced filter
- forced filter test
- test ddl for fact
- test ddl for fact
- test ddl for dimension
- test ddl for dimension
09:13:19.561 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 9103f7a3-ed8f-4eaa-b3dd-ece64813e703
09:13:19.567 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 463c2677-2ddf-436b-bd4e-be1ab62ee35b
09:13:19.573 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 58adfebf-d28b-46ed-a01b-ce6a18c79872
HiveQueryGeneratorV2Test:
- Druid Filter Dim should be valid
09:13:19.582 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to b809db62-b62d-4675-9c13-cd8bf1371719
09:13:19.590 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 20d5d8ca-d2c7-4303-b792-73b574812654
RowCSVWriterTest:
- registering Hive query generation multiple times should fail
- Should return the expected filter sets
- Should compare two filters & return t/f correctly.
- isNumeric
- isStringStartingWithSpecialChar
- Should map the correct field to operation.
- Should generate proper Spec for FilterDruid
- Should return the expected filter sets with Pk fields
- Test serialization/deserialization for Not like filter
09:13:19.598 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 765de85d-9180-46d8-8eeb-9e4c9aae7580
09:13:19.604 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to e7a7516a-ded9-4e9e-ac86-4fa1e855fde6
09:13:19.606 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.606 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:19.606 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:19.618 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.618 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:19.623 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 0bb9df5f-ea0a-4a9e-984d-398bdf188a93
DruidQueryGeneratorTest:
- create model should fail when non existing cube requested
- RowCSVWriterClass
- WriteRow
- shouldQuoteStringsCorrectly
09:13:19.640 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 483596b9-2f62-45b4-8e60-8557cc1db28e
PostResultFunctionTest:
- START_OF_THE_WEEK postresult column test
- START_OF_THE_WEEK postresult should not error out due to invalid format
09:13:19.651 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 257615f2-0852-47ac-b22d-513f1b6b387e
DimensionTest:
- DryRun bucket test
- DryRun bucket test with dryRunRevision and forceEngine but no cube config
- newDimension with no primary key should fail
- DryRun bucket test with dryRunRevision and no forceEngine but no cube config
- Test for invalid cube
- Create a QueryBuilder
09:13:19.669 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 51815407-1f40-4af5-be64-9f4683c051e1
09:13:19.674 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.674 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:19.675 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:19.676 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.676 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:19.679 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to d1c5a590-1221-4bcb-98b4-3be3f50cf97a
09:13:19.684 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to a75531e8-f193-42a1-ace8-fdee93d15b7a
QueryAttributesTest:
- QueryAttribute Creation
- QueryAttributes Listing failure/success cases
09:13:19.691 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to d02e446b-09b6-491a-afa0-cf36c45b4699
09:13:19.697 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 0b6a7490-8df6-4f04-a4ca-a33ef3ea51bd
09:13:19.703 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 07faa5c1-30d1-4800-83fb-e06c19a2e80f
09:13:19.712 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to b46bc8a6-5fb1-4a77-804c-5b9ea1b26bd0
DimDrivenFactOrderedPartialRowListTest:
- registering Druid query generation multiple times should fail
- Copy a Hive dimension without resetAliasIfNotPresent
- Copy a Druid dimension without resetAliasIfNotPresent
- Copy an Oracle dimension without resetAliasIfNotPresent
- Copy an Postgres dimension without resetAliasIfNotPresent
- create model should succeed when cube columns requested without derived expression column
- Copy a Presto dimension without resetAliasIfNotPresent
- Copy a Presto dimension with resetAliasIfNotPresent
- Copy a Hive dimension with resetAliasIfNotPresent
- Copy a Druid dimension with resetAliasIfNotPresent
- create model should succeed when cube columns requested with derived expression column
- Test for no dryRun config
- Copy an Oracle dimension with resetAliasIfNotPresent
- Copy an Postgres dimension with resetAliasIfNotPresent
- newDimension should fail with derived expression with unknown referenced fields
- newDimension should fail with more than one primary key
- newDimension should fail with columns with different engines
- newDimension should fail with columns with different engine requirement
- newDimension should fail with dimension annotated with different engine requirement
- newDimension should fail with column annotated with different engine requirement
- newDimension should fail with duplicate columns
- newDimension should succeed with no duplicate columns
- newDimension with PrestoEngine should succeed with no duplicate columns
- newDimension should fail if ddl annotation is of a different engine other than the engine of the dim
- validates should fail if schema field maps to non-existing column
- validates engine should fail if column engine is different from dim engine
- withAlternativeEngine should fail with the same engine as base engine
- create model should succeed when dimension field with dimension key requested with facts
- withAlternativeEngine should fail with the same engine as previous alternative engine
- withAlternateEngine should fail if ddl annotation is of a different engine other than the engine of the dim
- createSubset should succeed for valid discarding set
- createSubset should not include dependent columns when discarding
- create model should succeed when dimension field without dimension key requested with facts
- construct public dim should fail if dim map is empty
- public dim must have one primary key
- toPublicDimension should fail if pub columns are not in the base dim
- toPublicDimension should fail if forced filter column is not in the base dim
- toPublicDimension should fail if forced filter columns ARE in the base dim, but resolve to the same base column (duplicate where clause)
- toPublicDimension should fail if high cardinality filter column not in definition
- successfully run dim only query
- dim only query should generate full SQL
- Generators calling generate with null context should throw IllegalArgumentExceptions
- create model should fail when non existing field requested
- Generators attempting to create dimension SQL should fail with null context
- create model should fail when filter on non existing field requested
- create model should fail when ordering on non existing field requested
- create model should fail if ordering field is not in requested fields
- successfully run multi engine query
09:13:19.722 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to a3e33987-981c-4db2-a27d-f53120dd4a88
09:13:19.728 WARN  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator$ - Another query generator registered for DruidEngine : null
09:13:19.730 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.730 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to a99ec379-a9c7-4b68-8a17-3c548edc8c81
09:13:19.730 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:19.730 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:19.732 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.732 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:13:19.738 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to f93b1cb6-e401-42cb-a384-44934c2e64fa
WithNewGrainFactTest:
- toPublicDimension should fail if a declared forced filter doesn't have isForcedFilter=true
- newDimension should fail if derived expression is not defined for derived columns
- withAlternateEngine should fail if derived expression is not defined for derived columns
- withAlternateEngine druid should, covering Druid dervied expressions
- withAlternateEngine presto should succeed, covering Presto dervied expressions
- Should create dims of level nine and eight and Seven
09:13:19.743 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 47740144-71cb-4601-990f-da605fd82300
09:13:19.757 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 41c4d764-fdfa-475f-b8ea-3b6df135a0b7
DefaultQueryPipelineFactoryTest:
- create model should fail when dimension field with dimension key requested with facts for dimension not in fact
- generating hive query
- create model should fail when dimension field without dimension key requested with facts for dimension not in fact
- successfully multi query
- create model should fail when dimension filter with dimension key requested with facts for dimension not in fact
- withNewGrain should be successful given a different grain
- create model should fail when dimension filter without dimension key requested with facts for dimension not in fact
09:13:19.763 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - Running Async View Multi Query for cube a_stats
09:13:19.763 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 4efd2d58-3ea8-431e-9a58-98d249930b84
- Create model should fail if no candidates is found !!! IGNORED !!!
- withNewGrain should be successful given a different grain on Oracle
- withNewGrain should be successful given a different grain on Druid
- create model should succeed when cube columns requested with dim filter
- withNewGrain should be successful given a different grain on Presto
- withNewGrain should be successful given a different grain and should copy force filters
- create model should succeed when cube columns requested for sync query with dim filter and dim sort
- generating hive query
- Test for dryRun single revision config
- Whitelisted user test
- QueryGenerator bucket selection should succeed
- Version forced in bucketParams should be selected 
- Invalid internal bucketing configs should throw Exception
- successfully construct json row list
- Invalid external bucketing configs should throw Exception
- create model should succeed when cube columns requested for sync query with dim filter and dim sort with forceFactDriven
- test max percentage sum exceed 100
09:13:19.766 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to cde007b7-4d76-44e4-b84d-62222fa8f8bb
\{"queryType":"groupBy","dataSource":\{"type":"table","name":"account_stats"\},"intervals":\{"type":"intervals","intervals":\[".*"\]\},"virtualColumns":\[\],"filter":\{"type":"and","fields":\[\{"type":"selector","dimension":"stats_date","value":".*"\},\{"type":"selector","dimension":"advertiser_id","value":"12345"\},\{"type":"selector","dimension":"\{test_flag\}","value":"0"\}\]\},"granularity":\{"type":"all"\},"dimensions":\[\{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"\},\{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"\}\],"aggregations":\[\{"type":"longSum","name":"Impressions","fieldName":"impressions"\},\{"type":"roundingDoubleSum","name":"Spend","fieldName":"spend","scale":10,"enableRoundingDoubleSumAggregatorFactory":true\},\{"type":"longSum","name":"clicks","fieldName":"clicks"\}\],"postAggregations":\[\{"type":"arithmetic","name":"Const Der Fact Col A","fn":"/","fields":\[\{"type":"fieldAccess","name":"clicks","fieldName":"clicks"\},\{"type":"fieldAccess","name":"impressions","fieldName":"Impressions"\}\]\}\],"limitSpec":\{"type":"default","columns":\[\{"dimension":"Impressions","direction":"ascending","dimensionOrder":\{"type":"numeric"\}\},\{"dimension":"Spend","direction":"descending","dimensionOrder":\{"type":"numeric"\}\},\{"dimension":"Const Der Fact Col A","direction":"descending","dimensionOrder":\{"type":"numeric"\}\}\],"limit":200\},"context":\{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":5000,"queryId":".*"\},"descending":false\}
ParameterTest:
- generating hive query with custom rollups
- create model should succeed when cube columns requested for async query with dim filter and dim sort
- withNewGrain should fail given the same grain
- withNewGrain should fail given non-existing from
- withNewGrain should fail given the same name
- withNewGrain should fail if to table already exists
- Test DailyGrain Operations
- DailyGrain: getDaysBetween Failure Cases
- MinuteGrain: success cases
09:13:19.784 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 6e94e0e2-4777-4fde-9ab8-0650b522c11a
09:13:19.786 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 9da98d86-64e9-4446-903d-ecce95b426e2
09:13:19.788 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.788 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:19.788 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:19.790 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 0e90be91-bcc9-4719-ae68-270a01765ffb
09:13:19.790 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.790 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
LongRangeLookupTest:
- user stats hourly
- successfully find element in range
- successfully not find element in not in range
- fail to create a lookup with overlapping ranges
HiveDDLGeneratorTest:
- generating hive query with custom rollups
- Date type columns should be rendered with getFormattedDate udf in outer select
- create model should succeed when cube columns requested for sync query with dim sort
- SerializeParameters should serialize a map of parameters into a List
- Should escape string if escaping is required
- successfully construct partial row list
- create model should succeed when cube columns requested for async query with dim sort
- user stats hourly
- create model should succeed when cube columns requested with fact filter
- test hive fact toDDL
- test hive dim toDDL
- test hive ddl with column ordering
- create model should succeed when cube columns requested with fact filter and fact sort
- DeserializeParameters should deserialize a JSON into a Map of parameter values
QueryGeneratorRegistryTest:
- Date type columns should be rendered with getFormattedDate udf in outer select
- successfully run fact only query
- generating presto query
- Should escape string if escaping is required
09:13:19.841 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.841 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:19.841 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:19.843 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.843 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
ColumnValueExtractorTest:
- create model should succeed when cube columns requested with fact sort
- create model should succeed when cube columns requested with dim filter and fact sort
- Hive query should contain UDF definitions 
- Successfully register query generator without version
- Hive query should contain UDF definitions 
- test addRow
- create model should succeed when cube columns requested with fact filter and dim sort
- dim only query with no dim should fail
- successfully construct Derived row list
ReportingRequestTest:
- should support execution parameters
ReportingRequest
- should support execution parameters
- Concatenated cols should be wrapped in CONCAT_WS()
- Successfully register query generator with version
- order of filter should not change request model for sync query with fact filter
- Concatenated cols should be wrapped in CONCAT_WS()
- Failed to register query generator repeatedly for the same engine and version
- Should mangle non-id column aliases
- dim fact sync fact driven query should produce all requested fields in same order as in request
- MultiQuery with a subsequentQuery to execute.
- Should support “NA” for NULL string
- Should mangle non-id column aliases
- Should support “NA” for NULL string
- Test get query generator with version
FieldExtendedTest:
- Verify same success returned for optional and non-optional FieldExtended
- Verify fieldExtended failure returns default value on Option.
09:13:19.903 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.903 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:19.903 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:19.906 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.906 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- successfully construct csv row list with header
- test getBigDecimalSafely
OracleQueryGeneratorTest:
- should should be extracted from a json object as async request
ReportingRequest
- dim fact sync fact driven query with multiple dim join should produce all requested fields in same order as in request
- Query with request DecType fields that contains max and min should return query with max and min range
- Query with request DecType fields that contains max and min should return query with max and min range
- order of filter should not change request model for async query with fact filter
- dim fact async fact driven query should produce all requested fields in same order as in request
- should should be extracted from a json object as sync request
ReportingRequest
- Query with constant requested fields should have constant columns
- Query with constant requested fields should have constant columns
- should fail when datetime between filter with Hour and Minute filters are provided
ReportingRequest without filters (except Day)
- successfully construct complete row list
- should should be extracted from a json object
ReportingRequest without ordering
- successfully run combined query
- should should be extracted from a json object
ReportingRequest without si
- registering Oracle query generation multiple times should fail
- should should be extracted from a json object
- Fact group by clause should only include dim columns
ReportingRequest without mr
- Fact group by clause should only include dim columns
- test getLongSafely
- Hive multi dimensional query
- dim fact sync dimension driven query should produce all requested fields in same order as in request with in Subquery Clause
- DateTime type columns should be rendered with getDateTimeFromEpoch udf in outer select
- Create and merge dim-fact rowList Fact Driven
- test NoopRollup expression for generated query
OffHeapRowListTest:
- should should be extracted from a json object
ReportingRequest with invalid fields json
- Hive multi dimensional query
- should fail
ReportingRequest with invalid filters json
- should fail
ReportingRequest with bad filter operator
- successfully generate Druid single engine query with Dim lookup
- should fail with operator error
ReportingRequest with bad order operator
- should fail with order error
- successfully construct json row list from another row list
ReportingRequest with different day and hour operator
- DateTime type columns should be rendered with getDateTimeFromEpoch udf in outer select
- should fail with operator mismatch
ReportingRequest with different day and minute operator
- should fail with operator mismatch
ReportingRequest with invalid day filter format
- test NoopRollup expression for generated query
- should fail
ReportingRequest with invalid hour filter format
- successfully construct partial row list
- test getColumnValue
HiveQueryGeneratorV1Test:
- force injectFilterSet to fk primary key
- registering Hive query generation multiple times should fail
- dim fact async fact driven query with dim filters should use INNER JOIN
- test register with query generator for a different engine
- should fail
ReportingRequest with invalid minute filter format
- Invalid query context
- order of filter should not change request model for sync query with dim filter
- generating presto query with greater than filter
- should fail
ReportingRequest with missing day filter
- test joinType for non fk dim filters for generated query
- test joinType for non fk dim filters for generated query
- generating hive query
- test joinType for fact driven queries generated query
- dim fact async fact driven query with dim filters should use INNER JOIN and use new partitioning scheme
- should fail
ReportingRequest with invalid parameter data type
- order of filter should not change request model for async query with dim filter
- MultiQuery with a valid FallbackQueryOption & empty result rowList - expect a fallBack query to execute in logger.
QueryExecutorTest:
- should fail
ReportingRequest with valid parameter data type
- successfully generate sync single engine query
- should succeed
ReportingRequest with curators
- dim query context should fail with UnsupportedOperationException
- test joinType for fact driven queries generated query
- test like filter with hive query gem
09:13:19.963 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 80d9093d-07d0-47c6-9623-22c1b872c5b6
- test like filter with hive query gem
- should succeed
ReportingRequest with out curators
- generating hive query with custom rollups
- should inject default curator
ReportingRequest with day and hour filter between operator
- should succeed
ReportingRequest with day filter in operator
- test like filter with hive query injection testing
- should succeed
ReportingRequest with day and hour filter equality operator
- order of sort by should not change request model for sync query with fact sort
- successfully construct complete row list with post result ephemeral columns
09:13:19.967 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:19.967 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:19.967 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:19.969 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:19.969 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
PrestoQueryGeneratorTest:
- registering Presto query generation multiple times should fail
- successfully construct json row list in compatibility mode
- should succeed
ReportingRequest with empty string for equality filter
- with forced failing query result and fallback not defined
- user stats hourly
- should fail
ReportingRequest with empty string for like filter
- should fail
ReportingRequest with empty string for IN filter values
- should fail
ReportingRequest with empty string for NOT IN filter values
- test rocksb powerset storage
- should fail
- test like filter with hive query injection testing
ReportingRequest with empty list for IN filter values
- should fail
- test roaring bitmap powerset storage
ReportingRequest with empty list for NOT IN filter values
- order of sort by should not change request model for async query with fact sort
- should fail
ReportingRequest with empty string for between from value
- should fail
ReportingRequest with empty string for between to value
- should fail
ReportingRequest
- Missing group by fact cols
- should successfully deserialize sync request with forceDimensionDriven
ReportingRequest
- should successfully deserialize sync request with forceFactDriven
ReportingRequest
- should successfully deserialize sync request with both forceFactDriven and forceDimensionDriven
- order of sort by should not change request model for sync query with dim sort
- Missing group by fact cols
ReportingRequest
- HiveQueryGeneratorTest: should fail to generate Hive query for Outer Filters
- HiveQueryGeneratorTest: should fail to generate Hive query for Outer Filters
- should fail to deserialize sync request with both forceFactDriven and forceDimensionDriven set to true
ReportingRequest
- should successfully deserialize sync request with schema
ReportingRequest
- should successfully deserialize sync request with includeRowCount
ReportingRequest
- should successfully deserialize sync request with displayName
ReportingRequest
- verify dim query can generate inner select and group by with static mapping
- should successfully deserialize sync request with displayName as null
ReportingRequest
- Duplicate registration of the generator
- Date type columns should be rendered with getFormattedDate udf in outer select
- should successfully deserialize sync request with quotes in alias name escaped with single quotes
ReportingRequest
- order of sort by should not change request model for async query with dim sort
- verify dim query can generate inner select and group by with static mapping
- verify regex_extract query
- Should escape string if escaping is required
- generating hive query with sort on dimension
- Verify metric FieldEquality generates a valid query.
- Duplicate registration of the generator
- create model should succeed when cube columns requested for sync query with constant fields
- Hive query should contain UDF definitions 
- should successfully deserialize sync request with multiple data types in filters
ReportingRequest
- successfully construct Fact Driven partial row list and test One to Many Merge
- should successfully deserialize sync request and force oracle engine
ReportingRequest
- should support execution parameters
- should successfully deserialize sync request and force hive engine
ReportingRequest
- should successfully deserialize sync request and force druid engine
ReportingRequest
- should successfully deserialize sync request and set request context
ReportingRequest
- Concatenated cols should be wrapped in CONCAT_WS()
- should successfully deserialize request and add timezone
ReportingRequest
- should successfully deserialize request and add hostname
ReportingRequest
- create model should fail when from date is in future
- successfully construct json row list from another row list in compatibility mode
- dim fact async fact driven query without dim filters should use LEFT OUTER JOIN
- test isEmpty
- generating hive query with greater than filter
- should successfully deserialize async request and with timezone and schema
ReportingRequest
- create model should fail when from date is in future with datetime between filter
- create model should fail when all dates are in future
- generating presto query with less than filter
- dim fact sync dimension driven query should use RIGHT OUTER JOIN
- create model should pass when any date is in past and other dates are in future
- create model should succeed when cube columns requested for async query with constant fields and forceDimensionDriven
- create model should succeed when cube columns requested for sync query with constant fields and forceFactDriven
- dim fact sync dimension driven query without total rows should use RIGHT OUTER JOIN
- limit should be set to defaultMaxRows when maxRows is less than 1
09:13:20.028 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:20.029 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
- should return correct EntityID and DateRange
09:13:20.029 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
ReportingRequest
- should return correct EntityID and DateRange with different filter operation
ReportingRequest
- Should mangle non-id column aliases
- dim fact async fact driven query without dim filters should use LEFT OUTER JOIN and has no pagination
- Should support “NA” for NULL string
- create model should succeed when cube columns requested for async query with constant fields
- create model should fail when missing schema required field
- fact only query should generate full SQL
- should successfully serialize and deserialize async request and with report format
ReportingRequest
- dim fact sync fact driven query should produce all requested fields in same order as in request
- Query with request DecType fields that contains max and min should return query with max and min range
- generating presto query
- Discard engines in disqualify set for fallback query
09:13:20.030 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:20.031 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- should should be extracted from a scheduled request json with no day filter validation
ReportingRequest
- should should fail to validate when empty request is passed
ReportingRequest
- should should be extracted from a json object as outer filter request
ReportingRequest with groupby query type
- generate valid model for sync query with fields having dimension attribute,
       filter on fact dim col which is a foreign key and it is in the list of fields,
       order by fact dim col which is a foreign key
- dim fact async fact driven query with dim filters should use INNER JOIN and has no pagination
- successfully construct csv row list without header
- Query with constant requested fields should have constant columns
- successfully generate Druid + Oracle multi engine query with Dim lookup for dimDriven sync request
- should succeed
ReportingRequest with select query type
- should succeed
- Fact group by clause should only include dim columns
- dim fact async fact driven query without dim sort should use LEFT OUTER JOIN and has no pagination
- dim fact sync fact driven query with multiple dim join should produce all requested fields in same order as in request
- Hive multi dimensional query
- dim fact async fact driven query with dim sort should use JOIN and has no pagination
- generate valid model for async query with forceDimensionDriven and fields having dimension attribute,
filter on fact dim col which is a foreign key and it is in the list of fields,
order by fact dim col which is a foreign key
- dim fact async fact driven query should produce all requested fields in same order as in request
- no si or mr in request
- generate valid model for async query with fields having dimension attribute,
filter on fact dim col which is a foreign key and it is in the list of fields,
order by fact dim col which is a foreign key
- generate valid model for sync query with fields having no dimension attribute,
      filter on fact dim col which is a foreign key and it is in the list of fields,
      order by fact dim col which is a foreign key
- dim fact sync dimension driven query should produce all requested fields in same order as in request with in Subquery Clause
- dim fact sync fact driven with fact column sort with total rows should use LEFT OUTER JOIN with pagination and total row column
- successfully construct DimDrivenFactOrderedPartialRowListTest partial row list
- generate valid model for async query with forceDimensionDriven and fields having no dimension attribute,
       filter on fact dim col which is a foreign key and it is in the list of fields,
       order by fact dim col which is a foreign key
- DateTime type columns should be rendered with getDateTimeFromEpoch udf in outer select
- generate valid model for async query with fields having no dimension attribute,
filter on fact dim col which is a foreign key and it is in the list of fields,
order by fact dim col which is a foreign key
- successfully generate Oracle + Druid multi engine query with Dim lookup for dimDriven sync request
- generating hive query with greater than filter
- dim fact sync fact driven with fact column sort without total rows should use LEFT OUTER JOIN with pagination
- test NoopRollup expression for generated query
- generate valid model for sync query with fields having multiple dimension keys,
      filter on fact dim col which is a foreign key and it is in the list of fields,
      order by fact dim col which is a foreign key
- fact only query with no fact should fail
- dim fact sync fact driven with fact column filter with total rows should use LEFT OUTER JOIN with pagination and total row column
- generating hive query with less than filter
- generate valid model for async query with forceDimensionDriven and fields having multiple dimension keys,filter on fact dim col which is a foreign key and it is in the list of fields,order by fact dim col which is a foreign key
- generate valid model for async query with fields having multiple dimension keys,
       filter on fact dim col which is a foreign key and it is in the list of fields,
       order by fact dim col which is a foreign key
- test joinType for non fk dim filters for generated query
- successfully generate fact driven query for day grain with datetime between filter
- successfully generate Druid single engine query with Dim lookup for factDriven sync request
- dim fact sync fact driven with fact column filter without total rows should use LEFT OUTER JOIN with pagination
- generate valid model for sync dim driven query with non id fields having multiple dimension ,and should include the foreign keys of the other dimension to favor multiple dimensions joins
- test joinType for fact driven queries generated query
- dim fact async fact driven query with dim filters should use INNER JOIN
- successfully generate fact driven query for minute grain with datetime between filter
- dim fact async fact driven query with dim filters should use INNER JOIN and use new partitioning scheme
- Test upper and lower join candidates in the multiple dimension joins
- Off Heap RowList test, cold start
- successfully execute dummy query on query executor
- successfully generate sync multi engine query for oracle + druid
- test like filter with hive query gem
- dim fact sync fact driven query with int static mapped fields and filters should succeed
- successfully construct file json row list
- test like filter with hive query injection testing
- generating presto query with greater than filter
- dim fact sync fact driven query with default value fields should be in applied in inner select columns
- generate valid model for sync query with fields having dimension attribute,
       filter on fact col and it is in the list of fields, force dimension driven,
       order by fact
- dim fact sync fact driven with constant requested fields should contain constant fields
- Missing group by fact cols
- successfully generate sync multi engine query for oracle + druid with no PK in request
- HiveQueryGeneratorv2Test: should fail to generate Hive query for Outer Filters
- generate valid model for sync query with fields having dimension attribute,
       filter on fact dim col which is a foreign key and it is in the list of fields,
       order by dim attribute
- verify dim query can generate inner select and group by with static mapping
- dim fact sync fact driven query with filter on fact col should be applied in having clause
- generate valid model for async query with forceDimensionDriven and fields having dimension attribute,
filter on fact dim col which is a foreign key and it is in the list of fields,
order by dim attribute
- dim fact async fact driven query without dim filters should use LEFT OUTER JOIN
- fact only query with dim should fail
- dim fact sync dimension driven query should use RIGHT OUTER JOIN
- generating hive query with less than filter
- generate valid model for async query with fields having dimension attribute,
filter on fact dim col which is a foreign key and it is in the list of fields,
order by dim attribute
- successfully generate sync multi engine query for druid + oracle
- dim fact sync dimension driven query with requested fields in multiple dimensions should not fail
- test foreach
- dim fact sync dimension driven query without total rows should use RIGHT OUTER JOIN
- generate valid model for sync query with fields having dimension attribute,
       filter on fact dim col which is a foreign key and it not in the list of fields,
       order by dim attribute
- fail to construct file json row list with no write perm
09:13:20.085 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:20.085 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:20.085 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:20.088 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:20.088 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- dim fact sync dimension driven query with dim filters in multiple dimensions should not fail
- dim fact async fact driven query without dim filters should use LEFT OUTER JOIN and has no pagination
- generate valid model for async query with forceDimensionDriven and fields having dimension attribute,
filter on fact dim col which is a foreign key and it not in the list of fields,
order by dim attribute
- dim fact async fact driven query with dim filters should use INNER JOIN and has no pagination
- successfully generate sync multi engine query for druid + oracle with no PK in request
- generating hive query with sort by
- generate valid model for async query with fields having dimension attribute,
filter on fact dim col which is a foreign key and it not in the list of fields,
order by dim attribute
- dim fact async fact driven query without dim sort should use LEFT OUTER JOIN and has no pagination
- verify dim query can generate inner select and group by with static mapping
- generate valid model for sync query with fields having 
one dim attribute with ordering and one without ordering, 
filter on fact dim col
- successfully construct csv row list with header with aliases
- dim fact sync dimension driven query with non hash partitioned dimension with singleton snapshot column should generate full SQL with max snapshot column
- generate valid model for async query with forceDimensionDriven and fields having
one dim attribute with ordering and one without ordering, 
filter on fact dim col
- dim fact sync dimension driven query with non hash partitioned dimension without singleton snapshot column should fail
- dim fact async dimension driven query with non hash partitioned dimension with singleton snapshot column should generate full SQL with max snapshot column
- generate valid model for async query with fields having
one dim attribute with ordering and one without ordering,
filter on fact dim col
- dim fact async dimension driven query with non hash partitioned dimension without singleton snapshot column should fail
- generating presto query with less than filter
- successfully generate sync query for oracle and not druid + oracle when fact driven with low cardinality filter
- generate valid model for sync query with fields having dimension attribute,
       filter on dim attribute and it not in the list of fields,
       order by dim attribute
- generating hive query with dim col aggregate function
- dim fact sync dimension driven query with hint annotation should have hint comment in the final sql string
- generate valid model for async query with forceDimensionDriven and fields having dimension attribute and filter on dim attribute and it not in the list of fields and order by dim attribute
- dim fact async fact driven query with dim sort should use JOIN and has no pagination
- dim fact dim driven query should generate full SQL
- generate valid model for async query with fields having dimension attribute,
filter on dim attribute and it not in the list of fields,
order by dim attribute
- dim fact async fact driven query with hint annotation should have static hint comment in the final sql string
- successfully generate sync query for oracle and not druid + oracle when fact driven with no dimension ids
- dim fact sync fact driven with fact column sort with total rows should use LEFT OUTER JOIN with pagination and total row column
- dim fact sync fact driven with fact column sort without total rows should use LEFT OUTER JOIN with pagination
- successfully generate sync multi engine query for druid + oracle with fact query with no sort
- dim fact sync dimension driven query with dimension id filters should generate full SQL with in subquery clause
- Create DimDrivenFactOrderedPartialRowList for Druid + Oracle Case.
- dim fact sync fact driven with fact column filter with total rows should use LEFT OUTER JOIN with pagination and total row column
- dim fact sync dimension driven query with between day filter exceeding the max days window should fail
- dim fact sync dimension driven query with between day filter exceeding the max days look back should fail
- successfully generate fact driven sync multi engine query for druid + oracle with noop when no data from druid
- dim fact sync dimension driven query with in day filter exceeding the max days window should fail
- dim fact sync dimension driven query with in day filter exceeding the max days look back should fail
- dim fact sync fact driven with fact column filter without total rows should use LEFT OUTER JOIN with pagination
- dim fact sync fact driven query with int static mapped fields and filters should succeed
- dim fact sync dimension driven query with equality day filter exceeding the max days look back should fail
- dim fact sync fact driven query with default value fields should be in applied in inner select columns
- successfully generate sync multi engine query for druid + oracle with rerun on oracle when no data from druid
- Druid query should be generated with greater than filter
- generate valid model for sync query with fields having two dimension attributes,
filter on dim attribute and it not in the list of fields,
order by dim attribute
- dim fact sync dimension driven query should have dim driven hint
- dim fact sync fact driven with constant requested fields should contain constant fields
- generating hive query with dim and fact sort by
- dim fact sync fact driven query with filter on fact col should be applied in having clause
- successfully execute query on query executor with csvrowlist
- dim fact sync fact driven query should have static hint
- successfully generate sync multi engine query for druid + oracle with rerun on oracle when partial page data from druid on page 2
- generate valid model for async query with forceDimensionDriven and fields having two dimension attributes,
filter on dim attribute and it not in the list of fields,
order by dim attribute
- dim fact sync fact driven query with request DecType fields that contains max and min should return query with max and min range
- dim fact sync dimension driven query with requested fields in multiple dimensions should not fail
- dim fact sync fact driven query with request IntType fields that contains max and min should return query with max and min range
- Verify metric Presto column comparison
- dim fact sync fact driven query with request fields that contains divide operation should round the division result
- successfully generate sync multi engine query for druid + oracle with rerun on oracle when no data from oracle
- dim fact fact driven query should generate full SQL
- generate valid model for async query with fields having two dimension attributes,
       filter on dim attribute and it not in the list of fields,
       order by dim attribute
- dim fact sync fact driven query with request fields that contains safe divide operation should round the division result
- dim fact sync dimension driven query with dim filters in multiple dimensions should not fail
- Multiple filters on same ID column
- dim fact sync dim driven query with filter fields that contain case insensitive field should use lower function
- successfully generate sync query for dim sort + fact filter
- verify dim query can generate inner select and group by with static mapping
- test map
- generate valid model for sync query with fields having two dimension attributes,
       filter on dim attribute and it not in the list of fields,
       order by fact
- successfully generate sync query for dim sort + dim filter
- generate valid model with filter on field with static mapping and not in fields list
- dim fact sync dimension driven query with non hash partitioned dimension with singleton snapshot column should generate full SQL with max snapshot column
- successfully generate sync query for dim sort + fact & dim filters
- generate valid model with filter on field with static mapping and in fields list
- create model should fail when filtering with unsupported operation on fact col
- dim fact sync dimension driven query with non hash partitioned dimension without singleton snapshot column should fail
- dim fact sync dim driven query with fields that map to same column should generate query
- dim fact async dimension driven query with non hash partitioned dimension with singleton snapshot column should generate full SQL with max snapshot column
- dim fact async dimension driven query with non hash partitioned dimension without singleton snapshot column should fail
- create model should fail when filtering with unsupported operation on fact dim col
- dim fact sync dimension driven query with hint annotation should have hint comment in the final sql string
- create model should fail when filtering with unsupported operation on dimension dim col
- create model should fail when missing required field
- successfully generate sync query for fact sort + fact filter
- create model should succeed when required field present
- create model should fail when request dates out of window
- create model should fail when request dates out of window with datetime between filter
- create model should fail when request dates out of lookback window with datetime between filter
- create model should fail when missing required filter
- fail to construct file csv row list with no write perm
- Error case, no alias
- dim fact async fact driven query with hint annotation should have static hint comment in the final sql string
- create model should succeed when required filter present
- Fact Driven Multidimensional query with dim sortBy
- create model should fail when missing dependent field
- Json Generator
- successfully generate sync query for fact sort + dim filter
- dim fact sync dimension driven query with dimension id filters should generate full SQL with in subquery clause
- dim fact query with no fact should fail
- print pretty and other minor verifications
09:13:20.143 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:20.143 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:20.143 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:20.145 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:20.145 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- generating hive query with outer group containing derived columns of level 2
- create model should succeed when all dependent columns present
- dim fact sync dimension driven query with between day filter exceeding the max days window should fail
- dim fact sync dimension driven query with between day filter exceeding the max days look back should fail
- successfully generate OGB query for fact driven multidimensional query with missing indirect relation
- dim fact sync dimension driven query with in day filter exceeding the max days window should fail
- dim fact sync dimension driven query with in day filter exceeding the max days look back should fail
- successfully generate sync query for fact sort + fact & dim filters
- dim fact sync dimension driven query with equality day filter exceeding the max days look back should fail
- generating presto query with custom rollups
- dim fact sync dimension driven query should have dim driven hint
- successfully generate non-OGB query for fact driven multidimensional query with indirect relation in request
- successfully construct partial row list
- Multiple filters on same column
09:13:20.151 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to ed7512a7-7f68-4ff1-9ddb-2b31f4146ebe
- successfully generate async single engine query
- dim fact sync fact driven query should have static hint
- Not Like filter Hive
- generate valid model with forced filter in filter list and not in fields list
- Dim Driven Multidimensional query with Keywords and Ad should fail as we do not have parent info of AD in keywords table
- Test Hive Query with both aliases
- dim fact sync fact driven query with request DecType fields that contains max and min should return query with max and min range
- Query with both aliases with filter and sort by
09:13:20.199 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:20.199 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:20.199 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:20.202 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:20.202 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- dim fact sync fact driven query with request IntType fields that contains max and min should return query with max and min range
- Off Heap RowList test, warm start, init rocksdb
- successfully run async dim only query
- MultiDims Sync Query keyword level with 2 parent dimensions
- generate valid model for dim driven query with dim filters
- dim fact sync fact driven query with request fields that contains divide operation should round the division result
- Sorting on the on driving dimension should set the correct flag
- Filtering on the on driving dimension should set the correct flag
- MultiDims Sync Query keyword level with 3 parent dimensions, pg_targetingattribute as primary dim
- successfully generate multiple query pipelines
- dim fact sync fact driven query with request fields that contains safe divide operation should round the division result
- Dim Only Query Context test
- generate valid model for dim driven query with dim filters and no fact cols or filters
- generate valid model for fact driven query with only fact fields, and filters
- MultiDims Sync Query keyword level with 1 grand parent dimensions should succeed, keywords as primary dim
- generate valid model with request join cols correctly populated
- successfully generate sync query for fact sort + dim filter where Druid is engine for both fact and dim
- dim fact sync dim driven query with filter fields that contain case insensitive field should use lower function
- generating hive query with outer group by, 2 dim joins and sorting
- successfully generate sync query for fact sort + dim filter where Oracle is engine since max lookback is out of Druid dim range
- MultiDims Sync Query keyword level with 3 parent dimensions: Should Generate sortBy correctly
- dim fact sync dim driven query with fields that map to same column should generate query
- Group by over derived expression should append index instead of entire dervied expression
- successfully generate async query for fact sort + dim filter where Oracle is engine since max lookback is out of Druid dim range
- generating presto query with underlying table name
- successfully generate query with debug enabled
- query with dim IN filter with more than allowed limit should fail if engine is oracle
- Duplicate registration of the generator
- query with fact IN filter with more than allowed limit should fail if engine is oracle
- Given a request with parameters in filter and not in requested fields, then the output query should not those parameters in select list
- generate valid model with injected dimension when no direct relationship when dim driven
- Fact Driven Multidimensional query with dim sortBy
- RowList LifeCycle Tests
- query with fact IN filter with 1000 values should succeed if engine is druid
- successfully generate OGB query for fact driven multidimensional query with missing indirect relation
- should succeed even if the number of 'in' items exceeds 999
- dim IN filter with more than allowed limit should not be considered in bestDimCandidates if dim engine is oracle
- Dim query with invalid parameter adds
- successfully generate dim driven dim only query with filters
- successfully generate non-OGB query for fact driven multidimensional query with indirect relation in request
- QueryTest
- Multiple requestModels are returned from factory for DryRun
- query with OR filter should fail if engine is oracle
- should compare two strings with first one insensitive
- query with OR filter should fail if engine is Hive
- NOOP QueryTest
- Multiple requestModels are returned from factory for DryRun with OracleEngine
- Dim Driven Multidimensional query with Keywords and Ad should fail as we do not have parent info of AD in keywords table
- should compare two strings with second one insensitive
- Multiple requestModels are returned from factory for DryRun with HiveEngine
- should fail to compare two dimensions of different dataTypes.
- should fail to compare metric to non-metric.
- Validate subsequent Oracle + Druid query generation to dim.
- Multiple requestModels are returned from factory for DryRun with PrestoEngine should succeed
- MultiDims Sync Query keyword level with 2 parent dimensions
- should fail to compare anything to an invalid field.
- fail to generate sync query for presto
- Druid query should be generated with less than filter
- Only one requestModel is returned from factory for NO DryRun
- should fail comparing different data types in dimension table comparison.
- should fail comparing fact to Invalid Column.
- MultiDims Sync Query keyword level with 3 parent dimensions, targetingattribute as primary dim
- successfully generate fallback query on sync request and execute it
- should fail comparing dimension to fact table.
- Test for BucketParams
- Base Request Col Test
- generating hive query with outer group by,  Noop rollup cols
- Filtering on the dimension with the like operator should generate valid model
- MultiDims Sync Query keyword level with 1 grand parent dimensions should succeed, keywords as primary dim
- create model should fail when incompatible fields are requested
- create model should pass when no incompatible field is requested
- create model should fail when duplicate field is requested
- should succeed to compare two metrics of same dataTypes.
- successfully generate fallback query on sync request with force engine and execute it
- create model should fail when duplicate alias is requested
- create model should fail when public col with forbidden schema is requested
- generating presto query with greater than filter and sort by
- successfully generate distinct dim only query
- create model should succeed when public col with non forbidden schema is requested
- MultiDims Sync Query keyword level with 3 parent dimensions: Should Generate sortBy correctly
- FactualQuery Context test
- create model should succeed when using outer filters on requested columns
- Group by over derived expression should append index instead of entire dervied expression
- create model should fail when using outer filters on non-requested columns
- successfully generate sync force dim driven dim only query with filters and order by and row count
- successfully generate fallback query on sync request and fail to execute it due to missing executor
- successfully generate query with debug enabled
- Given a request with parameters in filter and not in requested fields, then the output query should not those parameters in select list
- successfully generate fact driven query with right outer join when schema required fields are not present in the fact
- successfully generate fallback query on async request and execute it
- successfully generate dim join conditions on partition col if partition col is not requested for reseller case
- successfully generate dim join conditions on partition col if partition col is not requested
- successfully generate dim driven dim only query with filters
- successfully generate fallback query on async request with force engine and execute it
- should compare two strings with first one insensitive
- should compare two strings with second one insensitive
- should fail to compare two dimensions of different dataTypes.
- successfully execute pipeline while failing to create fallback query
- should fail to compare metric to non-metric.
- should fail to compare anything to an invalid field.
- AD Page default: Supporting dim test
- successfully generate fallback query on async request with force engine and execute it when no joins required
- should fail comparing different data types in dimension table comparison.
- should fail comparing fact to Invalid Column.
- generating hive query with outer group by, derived cols
- should fail comparing dimension to fact table.
- dim fact fact driven query with no valid facts should fail
- successfully generate query for forced fact driven query specialized to use subquery instead of join
- successfully generate query with queryGeneratorBucket defined
- generating presto query with greater than filter and multiple sort bys
- should succeed to compare two metrics of same dataTypes.
- create model should fail when using or with empty filters
- create model should succeed when using or filters with fact filters combination
- successfully generate distinct dim only query
- successfully generate query with new partitioning Scheme
- create model should succeed when using or filters with dim filters combination
- successfully generate query with force queryGen version
- successfully generate sync force dim driven dim only query with filters and order by and row count
- Test for Customer Bug fix in old :Fact metric filters in select
- successfully generate async  dim only query with filters and order by and row count
- AD Page default: Multiple Sort On Dim Cols
- test NoopRollup expression for generated query !!! IGNORED !!!
- create model errors with incorrect filters
- successfully generate fact driven query with right outer join when schema required fields are not present in the fact
- successfully generate query with queryGeneratorBucket defined and no dryRun requestModel
- verify local equality filter on pricing type
- Off Heap RowList test, warm start, init rocksdb, store all in rocksdb
- create model should succeed when sync query is scan optimized
09:13:20.256 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:20.256 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:20.256 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:20.260 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:20.260 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- successfully generate dim join conditions on partition col if partition col is not requested for reseller case
- Fact View Model Query Test
- create model should succeed when sync query is not scan optimized
- successfully generate dim join conditions on partition col if partition col is not requested
- create model should succeed when query is grain optimized
- test fact and dim revisioning logic
- create model should succeed when query is not grain optimized
- Drop into V0 if selected revision is fake.
- Test forceDisQualifySet in findBestCandidates
- create model should succeed when query is index optimized
- AD Page default: Supporting dim test
- successfully generate query for forced fact driven query specialized to use subquery instead of join !!! IGNORED !!!
- create model should succeed when query is not index optimized
- Best Candidates test for campaign adjustment in a_stats Fact View
- create model should succeed when query is not low cardinality with exclusive filter
- create model should succeed when query is not low cardinality with inclusive filter
- generating hive query with outer group by, having and partitioning scheme, test part col renderer
- create model should succeed when query is low cardinality with mix of inclusive and exclusive
- Best Candidates test for account adjustment in a_stats Fact View
- create model should fail if a filter is not in existing set of allowable filters for a column
- successfully generate query with new partitioning Scheme
- create model should succeed for allowable filter for a column with set InNotInEqualsNotEquals
- Query with constant requested fields should have constant columns
- Test for Customer Bug fix in old :Fact metric filters in select
- create model should succeed when Not In filter is used for statically mapped fields
- AD Page default: Multiple Sort On Dim Cols
- test NoopRollup expression for generated query !!! IGNORED !!!
- test validateLengthForFilterValue for publicDim
- test validateLengthForFilterValue for publicFact
- succesfully generate query with DayColumn annotation on Day column which is of IntType
- Fact View Model Query Test
- Best Candidates test for campaign adjustment in a_stats Fact View
- succesfully generate query with DayColumn annotation on Day column which is of StrType
- Best Candidates test for account adjustment in a_stats Fact View
- succesfully generate query with DayColumn annotation on Day column which is of IntType
- test validateLengthForFilterValue for string of length greater than max allowed
- Test forceDisQualifySet all in findBestCandidates
- succesfully generate query with DayColumn annotation on Day column which is of StrType
- successfully generate fact driven query with outer filter
- successfully generate fact driven query with outer filter
- successfully generate dim driven dim only query with outer filters and order by
- successfully generate dim driven dim only query with outer filters and order by
- create model should succeed when Greater than used
- Fact Driven Multidimensional query with outer filters and dim sortBy 
- Fact Driven Multidimensional query with outer filters and dim sortBy 
09:13:20.306 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 7124a2dd-3e3c-4bb6-b5b5-ed01501908e6
- generating hive query with outer group by, count dims
- Group by over derived expression with outer filters
- Group by over derived expression with outer filters
- PowerEditor: Use case1
- generating presto query with sort on dimension
- PowerEditor: Use case1
- PowerEditor : Use case Dim Only Query Ad Level
09:13:20.307 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- test using alias to join dimension table
09:13:20.307 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
- test using alias to join dimension table
- create model should succeed when Less than used
- Successfully generated Outer Group By Query with dim non id field and fact field
09:13:20.307 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
- Successfully generated Outer Group By Query with dim non id field and fact field
- Successfully generated Outer Group By Query with dim non id field and derived fact field having dim source col
- Successfully generated Outer Group By Query with dim non id field and derived fact field having dim source col
- Successfully generated timeseries Outer Group By Query with dim non id field and fact field
- Successfully generated timeseries Outer Group By Query with dim non id field and fact field
- Assert Not Equals on Statically mapped filter.
- Successfully generated Outer Group By Query with 2 dimension non id fields
- Successfully generated Outer Group By Query with 2 dimension non id fields
- Should not generate Outer Group By Query context with 2 dimension non id fields and one fact higher level ID field than best dims
- Should not generate Outer Group By Query context with 2 dimension non id fields and one fact higher level ID field than best dims
- Test constant requested fields with Outer Group By
- Successfully generated Outer Group By Query with 2 dimension non id fields and and two fact transitively dependent cols
- Assert failure for Not Equals on Statically mapped invalid-valued filter.
- Successfully generated Outer Group By Query with dim non id field and fact field
- Assert dual static mapping on NotEqualToFilter
- Successfully generated Outer Group By Query with 2 dimension non id fields and and two fact transitively dependent cols
- Successfully generated Outer Group By Query with mutlifield fact and dim filters
- Restricted schema columns from linked dimensions should not be allowed for other schemas
- Successfully generated Outer Group By Query with Lowest level FK col is requested
- Successfully generated Outer Group By Query with mutlifield fact and dim filters
- Successfully generated Outer Group By Query if fk col one level less than Highest dim candidate level is requested
- Successfully generated Outer Group By Query with Lowest level FK col is requested
- Test rendering of columns to JSON
- Successfully generated Outer Group By Query if OracleCustomRollup col is requested
- Should create a valid request model in an aliased fact
- Should fail at creating a dim
- Successfully generated Outer Group By Query if OracleCustomRollup col with Derived Expression having rollups is requested
- Successfully generated Outer Group By Query if fk col one level less than Highest dim candidate level is requested
- Successfully generated Outer Group By Query if OracleCustomRollup col with Derived Expression having CustomRollup and DerCol are requested
- Successfully generated Outer Group By Query if PostgresCustomRollup col is requested
- Successfully generated Outer Group By Query if column is derived from dim column
- Successfully generated Outer Group By Query if PostgresCustomRollup col with Derived Expression having rollups is requested
- Successfully generated Outer Group By Query if NoopRollupp column requeted
- NoopRollup columns in Outer Group By should be rendered correctly
- Successfully generated Outer Group By Query if PostgresCustomRollup col with Derived Expression having CustomRollup and DerCol are requested
- successfully generate fact driven query with filter on FK and dimension attribute without including attribute in output
- Multiple filters on same column
- Successfully generated Outer Group By Query if column is derived from dim column
- successfully generate fact driven query with filter on FK and dimension attribute without including attribute in output with attribute col as schema required field
- Duplicate registration of the generator
- succesfully generate uncommon filter types
- Successfully generated Outer Group By Query if NoopRollupp column requeted
09:13:20.310 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:20.310 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- successfully generate fact driven query with filter on FK and dimension attribute without including attribute in output
- successfully generate fact driven query with filter on FK and dimension attribute without including attribute in output with attribute col as schema required field
- Duplicate registration of the generator
- successfully generate dim only oracle query with union all for sync multi engine query for druid + oracle
- succesfully generate uncommon filter types
- Do not include the NOT IN clause if requested max rows < in filter size
- generating hive query with dim non id field as filter
- successfully generate dim only postgres query with union all for sync multi engine query for druid + postgres
- Multiple filters on same ID column
- Multiple filters on same ID column
- Generate dim only query without union all for any middle page(not last)
- Do not include the NOT IN clause if requested max rows < in filter size
- Restricted schema should fail on only bad filter.
- Druid query should be generated with IsNull filter
- Query containing fields with MAX rollup should generate successfully
- Verify metric Presto column comparison
- Dim Only query Schema required filter validation
- Generate dim only query wit union all for last page)
- Generate dim only query wit union all for last page, verify rowCount false works !!! IGNORED !!!
- Dim Only query Schema required filter validation with invalid injection filter
- Dim Only query Schema required filter: Success
- Dim Only query Schema required filter: Self Dim check
- Dim Only query Schema required filter: Self Dim check: Success
- Should fail without any part of required filtering list
- Should succeed with any part of required filtering list
- Generate dim only query without union all for any middle page(not last)
- Generate dim only query wit union all for last page)
- Not Like filter Presto
- Multiple filters on same column OGB
- generating presto query with custom rollups
- Not Like filter Hive
- Query with both aliases
- Query with both aliases with filter and sort by
09:13:20.362 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:20.362 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:20.363 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:20.367 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:20.367 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- fact only query context should be switched to CombinedQueryContext
- Duplicate registration of the generator
- generating presto query incompatible columns
- generating presto query with underlying table name
- Duplicate registration of the generator
- generating presto query alias foreign key columns
- generating presto query with greater than filter and sort by
- generating presto query with greater than filter and multiple sort bys
- generating presto query with both aliases for static mapping columns
- generating presto query with both aliases for static mapping columns
- generating presto query with both aliases for static mapping columns in reverse order
- generating presto query alias foreign key columns
- generating presto query with both aliases for static mapping columns with filter
- generating presto query with both aliases for static mapping columns in reverse order
- Druid query should be generated with IsNotNull filter
- Greater than filter should work for Oracle Sync
- Successfully generated Outer Group By Query with dim non id field and fact field
- Greater than filter should work for Postgres Sync
- generating presto query with both aliases for static mapping columns with filter for second column
- generating presto query with both aliases for static mapping columns with filter
- generating presto query with both aliases for static mapping columns with both filters and not like filter
- generating presto query with both aliases for static mapping columns with filter for second column
- Successfully generated Outer Group By Query with dim non id field and derived fact field having dim source col
- generating presto query with both aliases for static mapping columns with both filters and not like filter
- generating presto query with incompatible columns
- generating presto query with incompatible columns
- Successfully generated timeseries Outer Group By Query with dim non id field and fact field
- Less than filter should work for Oracle Sync
- Less than filter should work for Postgres Sync
- Druid query should be generated with Between filter
- successfully generate dim only oracle query without union all for sync multi engine query for druid + oracle with metric filter
- successfully generate dim only postgres query without union all for sync multi engine query for druid + postgres with metric filter
- successfully generate dim only oracle query with Correct RowNum and pagination
- successfully generate dim only postgres query with Correct RowNum and pagination
- Skip inSubquery clause for high cardinality dimension filtering
- Skip inSubquery clause for high cardinality dimension filtering
- DruidQueryGenerator: getAggregatorFactory should succeed on DruidFilteredListRollup with filter list size of 2
- DruidQueryGenerator: getAggregatorFactory should fail on DruidFilteredListRollup with only 1 list element
- Verify Combined queries lose data in Multivalue Dim contexts (Class Name Collapses)
- Test dimension join when dim primary key has alias
- limit should be set to defaultMaxRowsAsync when request is Async and rowsPerPage is <= 0
- Successfully generated Outer Group By Query with 2 dimension non id fields
- Verify Combined queries lose data in Multivalue Dim contexts (Class Name Collapses)
- successfully generate fact driven query for minute grain with datetime between filter
- group by strategy should be set to v2 and no chunk period
- successfully generate dimension driven query for minute grain with datetime between filter
- successfully generate fact driven query for minute grain with datetime between filter
- successfully generate fact driven query for day grain with datetime between filter
- successfully generate dimension driven query for minute grain with datetime between filter
- Query with constant requested fields should have constant columns
- successfully generate dimension driven query for day grain with datetime between filter
- metric should be set to inverted when order is Desc and queryType is topN
- successfully generate fact driven query for day grain with datetime between filter
- validate non-outer aliased cols
- for topN queryType aggregations, postAggregations, dimension and filter should be set
- Multiple filters on same column
- successfully generate dimension driven query for day grain with datetime between filter
- Not Like filter Oracle
- validate non-outer aliased cols in postgres
- Not Like filter (special character) Oracle
- Successfully generate a query with Javascript extractionFn
- Query with both aliases
- Not Like filter Postgres
- Query with both aliases with filter and sort by
09:13:20.422 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:20.423 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:20.423 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:20.424 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:20.424 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- Not Like filter (special character) Postgres
- Should not generate Outer Group By Query context with 2 dimension non id fields and one fact higher level ID field than best dims
- generating presto query with sort on dimension
- Successfully generated Outer Group By Query with dim non id field and fact field
- Successfully generated Outer Group By Query with 2 dimension non id fields and and two fact transitively dependent cols
- Query with both aliases and both filters
- Successfully generated Outer Group By Query if fk col one level less than Highest dim candidate level is requested
- Successfully generated Outer Group By Query with dim non id field and derived fact field having dim source col
- Successfully generated Outer Group By Query if CustomRollup col is requested
- Successfully generated Outer Group By Query if CustomRollup col with Derived Expression having rollups is requested
- Successfully generated Outer Group By Query if OracleCustomRollup col with Derived Expression having CustomRollup and DerCol are requested
- Query with both incompatible columns
- Successfully generated timeseries Outer Group By Query with dim non id field and fact field
- Successfully generate a query with Javascript Filter
- Successfully generated Outer Group By Query if column is derived from dim column
- Successfully generate a query with RegEx extractionFn
- Successfully generate a query with RegEx Filter
- Should fail to generate a metric query with Field Comparison Filter
- DruidQueryGenerator: arbitrary static mapping should succeed
- Successfully generated Outer Group By Query if NoopRollupp column requested
- for timeseries queryType aggregations, postAggregations and filter should be set but not dimension
- direction in limitSpec should be set to DESCENDING when order is Desc and queryType is groupBy
- Successfully generated Outer Group By Query with 2 dimension non id fields
- dimension based aggregate via filtered aggregate for fact col
- Successfully generated Outer Group By Query if NoopRollupp derived column is requested for non-derived source fields
- dimension extraction function for start of the week dimension
- dimension extraction function for start of the month dimension
- dimension time extraction function for druid time
- successfully render filter on column using dimension time extraction function for druid time
- no dimension cols and no sorts should produce timeseries query
- no dimension cols and no sorts on a cube with renderLocalTimeFilter=true should not produce timeseries but groupBy query
- Successfully generated Outer Group By Query if aggregate derived column (eg UDAF) is requested
- fact sort with single dim col should produce topN query
- Query with both aliases with single filters
- Should not generate Outer Group By Query context with 2 dimension non id fields and one fact higher level ID field than best dims
- fact sort with no dim col on a cube with renderLocalTimeFilter=true should produce groupBy query not topN
- fact sort with multiple dim col should produce group by query
- dim fact sync fact driven query should produce all requested fields in same order as in request
- startIndex greater than maximumMaxRows should throw error
- limit should be set to 2*maxRows if there is a NonFKDimfilter
- queryPipeline should fail when request has NonFKDimfilter and (startIndex + 2*maxRows) > 5000
- successfully set group by single threaded to true when cardinality is below max allowed value
- successfully set group by single threaded to false when cardinality is above max allowed value
- Successfully generated Outer Group By Query with id cols requested from dims
- successfully set chunk period when dim cardinality is defined and above max cost
- Successfully generated Outer Group By Query with 2 dimension non id fields and and two fact transitively dependent cols
- successfully ignore chunk period when dim cardinality is defined and below max cost
- successfully ignore chunk period when dim cardinality is not defined
- Successfully generated Outer Group By Query with dim non id field as filter
- successfully set minTopNThreshold when dim cardinality is defined
- successfully set minTopNThreshold when dim cardinality is not defined
- namespace lookup extraction functionality
- Successfully generated Outer Group By Query with dim non id field as filter and derived fact field having dim source col
- Fail filtering on PassthroughType
- Multiple filters on same ID column
- Multiple filters on same column
- namespace lookup extraction functionality for dim
- Not Like filter Hive
- should generate nested groupby query if dim filter is present
- Query with both aliases
- Query with both aliases with filter and sort by
- Query with both aliases with second filter
- Successfully generated Outer Group By Query if fk col one level less than Highest dim candidate level is requested
- should generate nested groupby query if lookup with decode column is present
- should not generate nested groupby query if dim filter column present is not of type druid lookup
- Successfully generated Outer Group By Query if CustomRollup col is requested
- should include dim column related to dim filter in nested groupby query if dim filter is present even though dim column is not present in the request
- namespace lookup extraction functionality for a public fact with new dimRevision
- Query with both aliases with filter and sort by
- Successfully generated Outer Group By Query if CustomRollup col with Derived Expression having rollups is requested
09:13:20.469 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 7b61f54f-7397-4286-baea-33ff1f68f8ff
09:13:20.472 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 15f8d419-e438-4783-a6ff-d87e22f10be5
09:13:20.475 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 5fc549ce-8798-48d5-9ce0-742d2e2d3bfb
09:13:20.478 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:20.478 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:20.478 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:20.479 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 77d97a3a-3654-43fe-9f61-8e4a324f1151
09:13:20.480 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:20.480 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- should include dimension columns from DruidPostResultDerivedFactCol in DimensionSpec
- dimension extraction function for day of the week dimension
- dimension extraction function for datetime formatter
- dimension filter extraction function for datetime formatter
- dimension filter extraction function for decode dim
- dimension filter extraction function for decode dim with mapped null string
- dimension filter extraction function for decode dim that has staticMapping for source col
- Successfully generated Outer Group By Query if OracleCustomRollup col with Derived Expression having CustomRollup and DerCol are requested
- dimension filter extraction function for decode dim with values mapped to multiple source values
- Or filter expression with dimension AND fact filters should render properly
- Or filter expression with fact filters
- Generate a valid query at minute grain
- Successfully generated Outer Group By Query if column is derived from dim column
- Generate a valid query at minute grain with datetime between filter with timestamp type for Day
- Generate a valid query at hourly grain with datetime between filter with timestamp type for Day
- Generate a valid query at daily grain with datetime between filter with timestamp type for Day
- successfully generate query with sync group by single threaded optimization for non grain or index optimized request
- Duplicate registration of the generator
- Successfully generated Outer Group By Query if NoopRollupp column requested
- Join key should not be included in dimension bundle if it is not in the original request when using druid lookups
- Join key should be included in dimension bundle if it is not in the original request when druid+oracle
- test theta sketch intersect set operation with filters on theta sketch aggregators
09:13:20.488 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
- const fact column and derived const fact column should not be included in aggregators and post aggregators
- Support for Async View Multi Query, API Side Join
- Fact View Query Tests Adjustment Stats with constant column filter and sorting on const fact columns
- Successfully generated Outer Group By Query if NoopRollupp derived column is requested for non-derived source fields
- dimension filter extraction function for decode dim should work for more than 2 mappings
- Successfully generated Outer Group By Query if aggregate derived column (eg UDAF) is requested
- Successfully generated Outer Group By Query with id cols requested from dims
- generating presto outer group by query with greater than filter
- Druid query should be generated successfully with scan query type
- generating presto query with outer group containing derived columns of level 2
- generating presto query with outer group by, 2 dim joins and sorting
- generating presto query with outer group by,  Noop rollup cols
- Druid query should fail to generate with scan query type when sort by requested
- generating presto query with outer group by, derived cols
- generating presto query with outer group by, having and partitioning scheme, test part col renderer
- Druid query should fail to generate with scan query type when derived fact requested
- Test constant requested fields with Outer Group By
- NoopRollup columns in Outer Group By should be rendered correctly
- Successfully generated Outer Group By Query with dim non id field as filter
- Druid query should fail to generate with scan query type when filter on derived fact requested
- Druid query should fail to generate with scan query type when using druid for dimension joins
- dimension time extraction function for druid time when no timezone is specified in additional parameters
- Successfully generated Outer Group By Query with dim non id field as filter and derived fact field having dim source col
- dimension time extraction function for druid time when timezone is specified in the request
- Filter on time dimension extracted using request context should render correctly
- Inner should query should not have limitSpec if 'shouldLimitInnerQueries' is set to false
09:13:20.493 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
- should generate nested groupby query if expensive date time filter is present
09:13:20.498 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
- should generate nested groupby query if expensive date time filter is present and inner groupby should include Day even though it's not in the original request
09:13:20.505 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 615dcf4c-94d7-4fc4-9d66-562a6339654f
- populate context with hostname
09:13:20.510 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 66885af2-d379-4593-9812-e0dbe438314e
- namespace lookup extraction functionality for timestamp
09:13:20.517 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
- Successfully generate a query with HyperUniques Filter
09:13:20.523 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
- Successfully generate a query with HyperUniqueCardinalityWrapper
09:13:20.531 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 1d351491-6b0a-4ce1-8705-ec7f4593b774
09:13:20.532 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:20.532 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- Successfully set query priority for async request
09:13:20.534 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:20.534 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:20.535 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:20.536 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:20.536 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- successfully generate fact driven query for day grain with datetime between filter
09:13:20.586 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:20.586 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:20.586 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:20.588 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:20.588 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- successfully generate fact driven query for minute grain with datetime between filter
09:13:20.646 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:20.646 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:20.646 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:20.648 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:20.648 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- Multiple filters on same column
09:13:20.699 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 89b1599f-1fe0-42dc-ba91-0f05b28c1c38
09:13:20.712 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:13:20.712 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:13:20.713 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:13:20.714 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:20.714 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- Not Like filter Presto
09:13:20.859 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 183bf277-9d98-401e-9e20-b26dccc42070
- test row count groupby query
09:13:20.864 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 257dd6ac-b174-4bdf-a513-1eeb325c8774
- Test generating a query for a request with derived fact column using JavaScript Aggregator
09:13:20.873 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to e9e2c587-6c75-41ad-9fd1-00d73345ae78
09:13:20.874 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:13:20.874 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- limit should be set when rowsPerPage is specified for Async
09:13:20.877 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 23f7f590-6050-4401-a8ca-7681a496bf0a
- Test generating a query for a request with derived fact column using ThetaSketchEstimateWrapper
09:13:20.889 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 88a08ec3-9b95-4628-880c-a7992b792093
{"queryType":"groupBy","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"statsDate","value":"20201107"},{"type":"selector","dimension":"statsDate","value":"20201104"},{"type":"selector","dimension":"statsDate","value":"20201108"},{"type":"selector","dimension":"statsDate","value":"20201105"},{"type":"selector","dimension":"statsDate","value":"20201109"},{"type":"selector","dimension":"statsDate","value":"20201110"},{"type":"selector","dimension":"statsDate","value":"20201106"},{"type":"selector","dimension":"statsDate","value":"20201103"}]},{"type":"selector","dimension":"advertiser_id","value":"12345"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"},{"type":"default","dimension":"statsDate","outputName":"Day","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impressions"},{"type":"filtered","aggregator":{"type":"thetaSketch","name":"Conversion User Count","fieldName":"uniqueUserCount","size":16384,"shouldFinalize":true,"isInputThetaSketch":false},"filter":{"type":"javascript","dimension":"segments","function":"function(x) { return x > 0; }"},"name":"Conversion User Count"},{"type":"longSum","name":"Clicks","fieldName":"clicks"},{"type":"filtered","aggregator":{"type":"thetaSketch","name":"segments_unique_users","fieldName":"uniqueUserCount","size":16384,"shouldFinalize":true,"isInputThetaSketch":false},"filter":{"type":"or","fields":[{"type":"selector","dimension":"segments","value":"1234"}]},"name":"segments_unique_users"}],"postAggregations":[{"type":"arithmetic","name":"Conv Segments Unique User Count","fn":"+","fields":[{"type":"thetaSketchEstimate","name":"conv_unique_users","field":{"type":"fieldAccess","name":"conv_unique_users","fieldName":"Conversion User Count"}},{"type":"thetaSketchEstimate","name":"segments_unique_users","field":{"type":"fieldAccess","name":"segments_unique_users","fieldName":"segments_unique_users"}}]},{"type":"javascript","name":"variance","fieldNames":["Clicks","Impressions"],"function":"function(clicks,impressions){return clicks * Math.sqrt(impressions);}"},{"type":"arithmetic","name":"Derived User Count Plus Variance","fn":"+","fields":[{"type":"fieldAccess","name":"Conv Segments Unique User Count","fieldName":"Conv Segments Unique User Count"},{"type":"fieldAccess","name":"variance","fieldName":"variance"}]},{"type":"arithmetic","name":"Segment Count By Variance","fn":"/","fields":[{"type":"fieldAccess","name":"Derived User Count Plus Variance","fieldName":"Derived User Count Plus Variance"},{"type":"fieldAccess","name":"variance","fieldName":"variance"}]}],"limitSpec":{"type":"default","columns":[],"limit":120},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":5000,"queryId":"88a08ec3-9b95-4628-880c-a7992b792093"},"descending":false}- Test generating a query with a derived column which is used in both its derived column and its derived derived column
09:13:20.901 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
- Successfully generate a time extraction function when period granularity is specified
09:13:20.906 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
- Successfully generate a filter on an aggregated fact col even when the fact is not in the selected fields
09:13:20.912 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 81d9950a-3a41-4180-89e7-54b89b35aa1c
{"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"statsDate","value":"20201107"},{"type":"selector","dimension":"statsDate","value":"20201104"},{"type":"selector","dimension":"statsDate","value":"20201108"},{"type":"selector","dimension":"statsDate","value":"20201105"},{"type":"selector","dimension":"statsDate","value":"20201109"},{"type":"selector","dimension":"statsDate","value":"20201110"},{"type":"selector","dimension":"statsDate","value":"20201106"},{"type":"selector","dimension":"statsDate","value":"20201103"}]},{"type":"selector","dimension":"advertiser_id","value":"12345"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"},{"type":"default","dimension":"statsDate","outputName":"Day","outputType":"STRING"},{"type":"extraction","dimension":"campaign_id_alias","outputName":"Campaign Name","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"campaign_lookup","retainMissingValue":false,"replaceMissingValueWith":"MAHA_LOOKUP_EMPTY","injective":false,"optimize":true,"valueColumn":"name","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impressions"}],"postAggregations":[],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":5000,"queryId":"81d9950a-3a41-4180-89e7-54b89b35aa1c"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"not","field":{"type":"search","dimension":"Campaign Name","query":{"type":"insensitive_contains","value":"test","caseSensitive":false}}}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"Advertiser ID","outputName":"Advertiser ID","outputType":"STRING"},{"type":"default","dimension":"Day","outputName":"Day","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"Impressions"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[],"limit":220},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":5000,"queryId":"81d9950a-3a41-4180-89e7-54b89b35aa1c"},"descending":false}
- Druid query should be generated with NotLike filter
09:13:20.919 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 0d2559f2-5299-47f1-a548-ecbf6346ea16
{"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"statsDate","value":"20201107"},{"type":"selector","dimension":"statsDate","value":"20201104"},{"type":"selector","dimension":"statsDate","value":"20201108"},{"type":"selector","dimension":"statsDate","value":"20201105"},{"type":"selector","dimension":"statsDate","value":"20201109"},{"type":"selector","dimension":"statsDate","value":"20201110"},{"type":"selector","dimension":"statsDate","value":"20201106"},{"type":"selector","dimension":"statsDate","value":"20201103"}]},{"type":"selector","dimension":"advertiser_id","value":"12345"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"},{"type":"default","dimension":"statsDate","outputName":"Day","outputType":"STRING"},{"type":"extraction","dimension":"campaign_id_alias","outputName":"Campaign Name","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"campaign_lookup","retainMissingValue":false,"replaceMissingValueWith":"MAHA_LOOKUP_EMPTY","injective":false,"optimize":true,"valueColumn":"name","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[],"postAggregations":[],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":5000,"queryId":"0d2559f2-5299-47f1-a548-ecbf6346ea16"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"not","field":{"type":"search","dimension":"Campaign Name","query":{"type":"insensitive_contains","value":"test","caseSensitive":false}}}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"Advertiser ID","outputName":"Advertiser ID","outputType":"STRING"},{"type":"default","dimension":"Day","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"Campaign Name","outputName":"Campaign Name","outputType":"STRING"}],"aggregations":[],"postAggregations":[],"limitSpec":{"type":"default","columns":[],"limit":220},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":5000,"queryId":"0d2559f2-5299-47f1-a548-ecbf6346ea16"},"descending":false}
- Druid query with Lookups should contain column alias if available
09:13:20.924 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 8c9cb5d2-92ba-4bd1-9565-8853eb8eccd4
- Druid query should retain missing value if LOOKUP_WITH_EMPTY_VALUE_OVERRIDE is used
09:13:21.112 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 5ccd1d23-8ed1-45e6-a8cc-8d2b8687e7de
{"queryType":"groupBy","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"statsDate","value":"20201103"},{"type":"selector","dimension":"statsDate","value":"20201110"}]},{"type":"selector","dimension":"advertiser_id","value":"12345"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"campaign_id_alias","outputName":"Campaign ID","outputType":"STRING"},{"type":"extraction","dimension":"campaign_id_alias","outputName":"Campaign Name","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"campaign_lookup","retainMissingValue":false,"replaceMissingValueWith":"MAHA_LOOKUP_EMPTY","injective":false,"optimize":true,"valueColumn":"name","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impressions"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[{"dimension":"Campaign Name","direction":"ascending","dimensionOrder":{"type":"lexicographic"}}],"limit":1020},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":5000,"queryId":"5ccd1d23-8ed1-45e6-a8cc-8d2b8687e7de"},"descending":false}
- Druid query should be generated with sort on lookup dimensions
09:13:21.261 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to c5e4eab9-e826-43e7-b883-60f2081ba9b8
{"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"statsDate","value":"20201103"},{"type":"selector","dimension":"statsDate","value":"20201110"}]},{"type":"selector","dimension":"advertiser_id","value":"12345"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"campaign_id_alias","outputName":"Campaign ID","outputType":"STRING"},{"type":"extraction","dimension":"campaign_id_alias","outputName":"Campaign Name","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"campaign_lookup","retainMissingValue":false,"replaceMissingValueWith":"MAHA_LOOKUP_EMPTY","injective":false,"optimize":true,"valueColumn":"name","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impressions"}],"postAggregations":[],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":5000,"queryId":"c5e4eab9-e826-43e7-b883-60f2081ba9b8"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"not","field":{"type":"selector","dimension":"Campaign Name","value":"-3"}},{"type":"not","field":{"type":"selector","dimension":"Campaign Name"}}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"Campaign ID","outputName":"Campaign ID","outputType":"STRING"},{"type":"default","dimension":"Campaign Name","outputName":"Campaign Name","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"Impressions"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[{"dimension":"Campaign Name","direction":"ascending","dimensionOrder":{"type":"lexicographic"}}],"limit":2020},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":5000,"queryId":"c5e4eab9-e826-43e7-b883-60f2081ba9b8"},"descending":false}
- Multiple filters on same column
09:13:21.371 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 5bf4aaad-24f1-4c98-b2d8-a4b9afa577f5
- Query with both aliases
09:13:21.474 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to cd100427-6c96-4e1d-a53b-89e39467012b
- Query with both aliases with filter and sort by
Run completed in 25 seconds, 397 milliseconds.
Total number of tests run: 1472
Suites: completed 81, aborted 0
Tests: succeeded 1472, failed 0, canceled 0, ignored 5, pending 0
All tests passed.
09:13:21.526 INFO  [log:pid(87229)] pg-909ffb35-979c-42ee-a2c0-f1046fb47933 - 2020-11-10 09:13:21.526 PST [87231] LOG:  received fast shutdown request
09:13:21.530 INFO  [log:pid(87206)] pg-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc - 2020-11-10 09:13:21.529 PST [87208] LOG:  received fast shutdown request
09:13:21.629 INFO  [log:pid(87258)] init-909ffb35-979c-42ee-a2c0-f1046fb47933:pg_ctl - waiting for server to shut down.... done
09:13:21.629 INFO  [log:pid(87258)] init-909ffb35-979c-42ee-a2c0-f1046fb47933:pg_ctl - server stopped
09:13:21.629 INFO  [postgres-909ffb35-979c-42ee-a2c0-f1046fb47933-closer] c.o.d.p.e.EmbeddedPostgres - 909ffb35-979c-42ee-a2c0-f1046fb47933 shut down postmaster in 00:00:00.116
09:13:21.633 INFO  [log:pid(87259)] init-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc:pg_ctl - waiting for server to shut down.... done
09:13:21.633 INFO  [log:pid(87259)] init-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc:pg_ctl - server stopped
09:13:21.634 INFO  [postgres-0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc-closer] c.o.d.p.e.EmbeddedPostgres - 0211f7a7-a3d0-4541-aa57-fdfe3ecfb8bc shut down postmaster in 00:00:00.120
[INFO] 
[INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ maha-core ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/core/target/maha-core-6.24-SNAPSHOT.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:jar (default) > generate-sources @ maha-core >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-core ---
[INFO] 
[INFO] <<< maven-source-plugin:2.4:jar (default) < generate-sources @ maha-core <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:jar (default) @ maha-core ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/core/target/maha-core-6.24-SNAPSHOT-sources.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:test-jar (default) > generate-sources @ maha-core >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-core ---
[INFO] 
[INFO] <<< maven-source-plugin:2.4:test-jar (default) < generate-sources @ maha-core <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:test-jar (default) @ maha-core ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/core/target/maha-core-6.24-SNAPSHOT-test-sources.jar
[INFO] 
[INFO] --- maven-jar-plugin:2.6:test-jar (default) @ maha-core ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/core/target/maha-core-6.24-SNAPSHOT-tests.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ maha-core ---
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/core/target/maha-core-6.24-SNAPSHOT.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-core/6.24-SNAPSHOT/maha-core-6.24-SNAPSHOT.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/core/pom.xml to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-core/6.24-SNAPSHOT/maha-core-6.24-SNAPSHOT.pom
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/core/target/maha-core-6.24-SNAPSHOT-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-core/6.24-SNAPSHOT/maha-core-6.24-SNAPSHOT-sources.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/core/target/maha-core-6.24-SNAPSHOT-test-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-core/6.24-SNAPSHOT/maha-core-6.24-SNAPSHOT-test-sources.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/core/target/maha-core-6.24-SNAPSHOT-tests.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-core/6.24-SNAPSHOT/maha-core-6.24-SNAPSHOT-tests.jar
[INFO] 
[INFO] >>> scoverage-maven-plugin:1.4.1:report (coverage) > [scoverage]test @ maha-core >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-core ---
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:pre-compile (coverage) @ maha-core ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ maha-core ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-core ---
[INFO] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala:-1: info: compiling
[INFO] Compiling 81 source files to /Users/lgadde/git/Native-Ads/maha/core/target/scoverage-classes at 1605028405364
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/BaseUTCTimeProvider.scala:259: warning: local val sortedHours in method updateHours is never used
[WARNING]         val sortedHours = hours.sortWith((x, y) => HourlyGrain.getAsInt(x) < HourlyGrain.getAsInt(y))
[WARNING]             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/Column.scala:6: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JObject, JValue}
[WARNING]                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/Column.scala:6: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JObject, JValue}
[WARNING]                                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/ColumnAnnotation.scala:5: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JNull, JObject, JValue}
[WARNING]                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/ColumnAnnotation.scala:5: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JNull, JObject, JValue}
[WARNING]                                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/DataType.scala:7: warning: Unused import
[WARNING] import com.github.benmanes.caffeine.cache.{Cache, CacheLoader, Caffeine, LoadingCache}
[WARNING]                                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/DataType.scala:10: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JNull, JObject, JValue}
[WARNING]                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/DataType.scala:10: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JNull, JObject, JValue}
[WARNING]                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/DerivedExpression.scala:22: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JNull, JObject, JValue}
[WARNING]                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/DerivedExpression.scala:22: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JNull, JObject, JValue}
[WARNING]                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/DerivedExpression.scala:22: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JNull, JObject, JValue}
[WARNING]                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/DerivedExpression.scala:636: warning: local val expression in method / is never used
[WARNING]       val expression = if(that.hasNumericOperation) {
[WARNING]           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/FilterOperation.scala:1588: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: filter.field, outerColName
[WARNING]  after adaptation: ArrowAssoc.->((filter.field, outerColName): (String, String))
[WARNING]     renderFilterWithAlias(filter, Map(filter.field -> (filter.field, outerColName)), column, engine, literalMapper, grainOption = grainOption)
[WARNING]                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/FilterOperation.scala:1945: warning: Unused import
[WARNING]       import _root_.scalaz.Success
[WARNING]                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/FilterOperation.scala:1131: warning: local val exFn in value selectorList is never used
[WARNING]             val exFn = new TimeFormatExtractionFn(fmt, timezone, null, null, false)
[WARNING]                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/FilterOperation.scala:1176: warning: local val exFn in value selectorList is never used
[WARNING]             val exFn = new TimeFormatExtractionFn(fmt, timezone, null, null, false)
[WARNING]                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/FilterOperation.scala:1318: warning: local val grain in method renderFilterDim is never used
[WARNING]     val grain = grainOption.getOrElse(DailyGrain)
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/PostResultFunction.scala:81: warning: non-variable type argument com.yahoo.maha.core.Column in type Some[com.yahoo.maha.core.Column] is unchecked since it is eliminated by erasure
[WARNING]         if(mapValue.isInstanceOf[Some[Column]]) {
[WARNING]                                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/PostResultFunction.scala:5: warning: Unused import
[WARNING] import com.yahoo.maha.core.fact.DruidDerFactCol
[WARNING]                                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/PostResultFunction.scala:12: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JNull, JObject, JValue}
[WARNING]                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/PostResultFunction.scala:12: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JNull, JObject, JValue}
[WARNING]                                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/RequestModel.scala:367: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: MapLike.get(key: K): Option[V]
[WARNING]   given arguments: request.requestType, queryGrain.getOrElse(DailyGrain)
[WARNING]  after adaptation: MapLike.get((request.requestType, queryGrain.getOrElse(DailyGrain)): (com.yahoo.maha.core.request.RequestType, com.yahoo.maha.core.Grain))
[WARNING]           val maxDaysWindowOption = publicFact.maxDaysWindow.get(request.requestType, queryGrain.getOrElse(DailyGrain))
[WARNING]                                                                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/RequestModel.scala:368: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: MapLike.get(key: K): Option[V]
[WARNING]   given arguments: request.requestType, queryGrain.getOrElse(DailyGrain)
[WARNING]  after adaptation: MapLike.get((request.requestType, queryGrain.getOrElse(DailyGrain)): (com.yahoo.maha.core.request.RequestType, com.yahoo.maha.core.Grain))
[WARNING]           val maxDaysLookBackOption = publicFact.maxDaysLookBack.get(request.requestType, queryGrain.getOrElse(DailyGrain))
[WARNING]                                                                     ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/RequestModel.scala:461: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: MapLike.contains(key: K): Boolean
[WARNING]   given arguments: registry.getDimColIdentity(reqCol).get.publcDimName, publicFact.dimRevision
[WARNING]  after adaptation: MapLike.contains((registry.getDimColIdentity(reqCol).get.publcDimName, publicFact.dimRevision): (String, Int))
[WARNING]                 .filter(reqCol => registry.getDimColIdentity(reqCol).isDefined && registry.dimMap.contains(registry.getDimColIdentity(reqCol).get.publcDimName, publicFact.dimRevision))
[WARNING]                                                                                                           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/RequestModel.scala:462: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: MapLike.apply(key: K): V
[WARNING]   given arguments: registry.getDimColIdentity(reqCol).get.publcDimName, publicFact.dimRevision
[WARNING]  after adaptation: MapLike((registry.getDimColIdentity(reqCol).get.publcDimName, publicFact.dimRevision): (String, Int))
[WARNING]                 .map(reqCol => reqCol -> registry.dimMap(registry.getDimColIdentity(reqCol).get.publcDimName, publicFact.dimRevision))
[WARNING]                                                         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/RequestModel.scala:471: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: MapLike.contains(key: K): Boolean
[WARNING]   given arguments: pdName, publicFact.dimToRevisionMap(pdName)
[WARNING]  after adaptation: MapLike.contains((pdName, publicFact.dimToRevisionMap(pdName)): (String, Int))
[WARNING]                       publicFact.dimToRevisionMap.contains(pdName) && registry.dimMap.contains(pdName, publicFact.dimToRevisionMap(pdName))
[WARNING]                                                                                               ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/RequestModel.scala:477: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: MapLike.apply(key: K): V
[WARNING]   given arguments: pdName, publicFact.dimToRevisionMap(pdName)
[WARNING]  after adaptation: MapLike((pdName, publicFact.dimToRevisionMap(pdName)): (String, Int))
[WARNING]                     reqCol -> registry.dimMap(pdName, publicFact.dimToRevisionMap(pdName))
[WARNING]                                              ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/RequestModel.scala:5: warning: Unused import
[WARNING] import com.yahoo.maha.core
[WARNING]                       ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/RequestModel.scala:6: warning: Unused import
[WARNING] import com.yahoo.maha.core.MetaType.MetaType
[WARNING]                                     ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/RequestModel.scala:8: warning: Unused import
[WARNING] import com.yahoo.maha.core.dimension.{PublicDim, PublicDimension, RequiredAlias}
[WARNING]                                       ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/RequestModel.scala:17: warning: Unused import
[WARNING] import org.joda.time.DateTimeZone
[WARNING]                      ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/dimension/Dimension.scala:13: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JObject, JValue}
[WARNING]                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/dimension/Dimension.scala:13: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JObject, JValue}
[WARNING]                                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/dimension/Dimension.scala:1018: warning: private val aliasColumnMap in class PublicDim is never used
[WARNING]   private[this] val aliasColumnMap = columns.map(col => (col.alias, col.name)).toMap
[WARNING]                     ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/fact/Fact.scala:16: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JNull, JObject, JValue}
[WARNING]                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/fact/Fact.scala:16: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JNull, JObject, JValue}
[WARNING]                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/fact/Fact.scala:16: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JNull, JObject, JValue}
[WARNING]                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/fact/RollupExpression.scala:6: warning: Unused import
[WARNING] import org.json4s.JsonAST.{JArray, JObject}
[WARNING]                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/HivePrestoQueryCommon.scala:232: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: LinkedHashSet.add(elem: A): Boolean
[WARNING]   given arguments: parentCol.get._2, parentCol.get._1
[WARNING]  after adaptation: LinkedHashSet.add((parentCol.get._2, parentCol.get._1): (String, com.yahoo.maha.core.Column))
[WARNING]         noopRollupColSet.add(parentCol.get._2, parentCol.get._1)
[WARNING]                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/HivePrestoQueryCommon.scala:234: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: LinkedHashSet.add(elem: A): Boolean
[WARNING]   given arguments: alias, col
[WARNING]  after adaptation: LinkedHashSet.add((alias, col): (String, com.yahoo.maha.core.Column))
[WARNING]         noopRollupColSet.add(alias, col)
[WARNING]                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/QueryGenerator.scala:296: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: nameOrAlias, colFn(column)
[WARNING]  after adaptation: ArrowAssoc.->((nameOrAlias, colFn(column)): (String, String))
[WARNING]       Map(name -> (nameOrAlias, colFn(column)))
[WARNING]                ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/QueryGenerator.scala:7: warning: Unused import
[WARNING] import com.yahoo.maha.core.fact.{Fact, FactBestCandidate, FactCol, PublicFact}
[WARNING]                                                           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/QueryGenerator.scala:8: warning: Unused import
[WARNING] import com.yahoo.maha.core.query.Version.{v0, v1, v2}
[WARNING]                                           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/QueryGenerator.scala:8: warning: Unused import
[WARNING] import com.yahoo.maha.core.query.Version.{v0, v1, v2}
[WARNING]                                               ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/QueryGenerator.scala:8: warning: Unused import
[WARNING] import com.yahoo.maha.core.query.Version.{v0, v1, v2}
[WARNING]                                                   ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/QueryGenerator.scala:37: warning: private val columnToAliasNames in class QueryBuilderContext is never used
[WARNING]   private[this] val columnToAliasNames =  new mutable.HashMap[String, mutable.TreeSet[String]]
[WARNING]                     ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/QueryGenerator.scala:202: warning: private val logger in trait BaseQueryGenerator is never used
[WARNING]   private val logger = LoggerFactory.getLogger(classOf[BaseQueryGenerator[T]])
[WARNING]               ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/QueryGenerator.scala:318: warning: local var fMap in method handleFilterSqlRender is never updated: consider using immutable val
[WARNING]     var fMap = new mutable.HashMap[String, (String, String)]()
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/QueryPipeline.scala:670: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: HashMap.contains(key: A): Boolean
[WARNING]   given arguments: dc.dim.name, engine
[WARNING]  after adaptation: HashMap.contains((dc.dim.name, engine): (String, com.yahoo.maha.core.Engine))
[WARNING]             if (publicDimToConcreteDimMapWhichCanSupportAllDim.contains(dc.dim.name, engine)) {
[WARNING]                                                                        ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/QueryPipeline.scala:742: warning: private default argument in class DefaultQueryPipelineFactory is never used
[WARNING]   private[this] def getFactQuery(bestFactCandidate: FactBestCandidate, requestModel: => RequestModel, indexAlias: String, factGroupByKeys: List[String], queryGenVersion: Version, bestDimCandidates: Option[SortedSet[DimensionBundle]] = None): Query = {
[WARNING]                                                                                                                                                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/QueryPipeline.scala:589: warning: local var dc in method findBestDimCandidates is never updated: consider using immutable val
[WARNING]         var dc = bundles.filter(_.dim.engine == factEngine)
[WARNING]             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/RowList.scala:5: warning: Unused import
[WARNING] import com.twitter.chill.ScalaKryoInstantiator
[WARNING]                          ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/RowList.scala:9: warning: Unused import
[WARNING] import com.yahoo.maha.serde.SerDe
[WARNING]                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/RowList.scala:10: warning: Unused import
[WARNING] import org.json4s.JValue
[WARNING]                   ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/RowList.scala:711: warning: private var rowsWritten in class CSVRowList is never used
[WARNING]   private[this] var rowsWritten: Int = 0
[WARNING]                     ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/druid/DruidQueryGenerator.scala:48: warning: Unused import
[WARNING] import org.apache.druid.query.lookup.LookupReferencesManager;
[WARNING]                                      ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/druid/DruidQueryGenerator.scala:549: warning: local val maximumMaxRowsForReq in method generateFactQuery is never used
[WARNING]         val maximumMaxRowsForReq = if (queryContext.requestModel.isAsyncRequest) maximumMaxRowsAsync else maximumMaxRows
[WARNING]             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/druid/DruidQueryGenerator.scala:1328: warning: local val name in method renderColumnWithAliasUsingDimensionBundle is never used
[WARNING]       val name = column.alias.getOrElse(column.name)
[WARNING]           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/hive/HiveOuterGroupByQueryGenerator.scala:315: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: HivePrestoQueryCommon.concat(tuple: (String, String)): String
[WARNING]   given arguments: renderedCol, renderedAlias
[WARNING]  after adaptation: HivePrestoQueryCommon.concat((renderedCol, renderedAlias): (String, String))
[WARNING]             queryBuilder.addPreOuterColumn(concat(renderedCol, renderedAlias))
[WARNING]                                                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/hive/HiveOuterGroupByQueryGenerator.scala:324: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: HivePrestoQueryCommon.concat(tuple: (String, String)): String
[WARNING]   given arguments: renderedCol, renderedAlias
[WARNING]  after adaptation: HivePrestoQueryCommon.concat((renderedCol, renderedAlias): (String, String))
[WARNING]         queryBuilder.addPreOuterColumn(concat(renderedCol, renderedAlias))
[WARNING]                                              ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/hive/HiveOuterGroupByQueryGenerator.scala:339: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: HivePrestoQueryCommon.concat(tuple: (String, String)): String
[WARNING]   given arguments: StringContext("", " ", "").s(renderedCol, renderedAlias), ""
[WARNING]  after adaptation: HivePrestoQueryCommon.concat((StringContext("", " ", "").s(renderedCol, renderedAlias), ""): (String, String))
[WARNING]             queryBuilder.addPreOuterColumn(concat(s"$renderedCol $renderedAlias",""))
[WARNING]                                                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/hive/HiveOuterGroupByQueryGenerator.scala:25: warning: local val publicFact in method generateOuterGroupByQuery is never used
[WARNING]     val publicFact = queryContext.factBestCandidate.publicFact
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/hive/HiveOuterGroupByQueryGenerator.scala:31: warning: local val requestedCols in method generateOuterGroupByQuery is never used
[WARNING]     val requestedCols = queryContext.requestModel.requestCols
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/hive/HiveOuterGroupByQueryGenerator.scala:282: warning: local val isFactOnlyQuery in method ogbGeneratePreOuterColumns is never used
[WARNING]     val isFactOnlyQuery = queryContext.dims.isEmpty
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/hive/HiveQueryGenerator.scala:49: warning: local val publicFact in method generateQuery is never used
[WARNING]     val publicFact = queryContext.factBestCandidate.publicFact
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/hive/HiveQueryGenerator.scala:58: warning: local default argument in method generateQuery is never used
[WARNING]     def renderOuterColumn(columnInfo: ColumnInfo, queryBuilderContext: QueryBuilderContext, duplicateAliasMapping: Map[String, Set[String]], factCandidate: FactBestCandidate, isOuterGroupBy: Boolean = false): (String,String) = {
[WARNING]                                                                                                                                                                                ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/hive/HiveQueryGenerator.scala:106: warning: local default argument in method generateQuery is never used
[WARNING]     def renderRollupExpression(expression: String, rollupExpression: RollupExpression, renderedColExp: Option[String] = None) : String = {
[WARNING]                                                                                        ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/hive/HiveQueryGeneratorCommon.scala:92: warning: local val renderedAlias in value $anonfun is never used
[WARNING]           val renderedAlias = s""""$alias""""
[WARNING]               ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/hive/HiveQueryGeneratorV2.scala:48: warning: local val publicFact in method generateQuery is never used
[WARNING]     val publicFact = queryContext.factBestCandidate.publicFact
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleOuterGroupByQueryGenerator.scala:127: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: name1, exp
[WARNING]  after adaptation: ArrowAssoc.->((name1, exp): (String, String))
[WARNING]                   Map(alias -> (name1, exp)),
[WARNING]                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleOuterGroupByQueryGenerator.scala:150: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: name2, exp
[WARNING]  after adaptation: ArrowAssoc.->((name2, exp): (String, String))
[WARNING]                   Map(alias -> (name2, exp), alias2 -> (name2, exp2)),
[WARNING]                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleOuterGroupByQueryGenerator.scala:150: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: name2, exp2
[WARNING]  after adaptation: ArrowAssoc.->((name2, exp2): (String, String))
[WARNING]                   Map(alias -> (name2, exp), alias2 -> (name2, exp2)),
[WARNING]                                                     ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleOuterGroupByQueryGenerator.scala:387: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: LinkedHashSet.add(elem: A): Boolean
[WARNING]   given arguments: parentCol.get._2, parentCol.get._1
[WARNING]  after adaptation: LinkedHashSet.add((parentCol.get._2, parentCol.get._1): (String, com.yahoo.maha.core.Column))
[WARNING]             noopRollupColSet.add(parentCol.get._2, parentCol.get._1)
[WARNING]                                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleOuterGroupByQueryGenerator.scala:389: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: LinkedHashSet.add(elem: A): Boolean
[WARNING]   given arguments: alias, col
[WARNING]  after adaptation: LinkedHashSet.add((alias, col): (String, com.yahoo.maha.core.Column))
[WARNING]             noopRollupColSet.add(alias, col)
[WARNING]                                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleOuterGroupByQueryGenerator.scala:564: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: OracleQueryCommon.concat(tuple: (String, String)): String
[WARNING]   given arguments: renderedCol, renderedAlias
[WARNING]  after adaptation: OracleQueryCommon.concat((renderedCol, renderedAlias): (String, String))
[WARNING]               queryBuilder.addPreOuterColumn(concat(renderedCol, renderedAlias))
[WARNING]                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleOuterGroupByQueryGenerator.scala:574: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: OracleQueryCommon.concat(tuple: (String, String)): String
[WARNING]   given arguments: renderedCol, renderedAlias
[WARNING]  after adaptation: OracleQueryCommon.concat((renderedCol, renderedAlias): (String, String))
[WARNING]           queryBuilder.addPreOuterColumn(concat(renderedCol, renderedAlias))
[WARNING]                                                ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleOuterGroupByQueryGenerator.scala:588: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: OracleQueryCommon.concat(tuple: (String, String)): String
[WARNING]   given arguments: StringContext("", " ", "").s(renderedCol, renderedAlias), ""
[WARNING]  after adaptation: OracleQueryCommon.concat((StringContext("", " ", "").s(renderedCol, renderedAlias), ""): (String, String))
[WARNING]               queryBuilder.addPreOuterColumn(concat(s"$renderedCol $renderedAlias",""))
[WARNING]                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleOuterGroupByQueryGenerator.scala:210: warning: local val factTableAlias in method ogbGenerateFactViewColumns is never used
[WARNING]       val factTableAlias = queryBuilderContext.getAliasForTable(queryContext.factBestCandidate.fact.name)
[WARNING]           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleQueryGenerator.scala:858: warning: local method toChar in method applyDataTypeCleanup is never used
[WARNING]     def toChar(alias: String): String = s"""to_char($alias)"""
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleQueryGenerator.scala:1152: warning: local val factTableAlias in method generateFactViewColumns is never used
[WARNING]       val factTableAlias = queryBuilderContext.getAliasForTable(queryContext.factBestCandidate.fact.name)
[WARNING]           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleQueryGenerator.scala:1196: warning: local val renderedAlias in value $anonfun is never used
[WARNING]             val renderedAlias = s""""$alias""""
[WARNING]                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/oracle/OracleQueryGenerator.scala:1207: warning: local val renderedAlias in value $anonfun is never used
[WARNING]             val renderedAlias = s""""$alias""""
[WARNING]                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresOuterGroupByQueryGenerator.scala:127: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: name1, exp
[WARNING]  after adaptation: ArrowAssoc.->((name1, exp): (String, String))
[WARNING]                   Map(alias -> (name1, exp)),
[WARNING]                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresOuterGroupByQueryGenerator.scala:150: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: name2, exp
[WARNING]  after adaptation: ArrowAssoc.->((name2, exp): (String, String))
[WARNING]                   Map(alias -> (name2, exp), alias2 -> (name2, exp2)),
[WARNING]                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresOuterGroupByQueryGenerator.scala:150: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: ArrowAssoc.->[B](y: B): (A, B)
[WARNING]   given arguments: name2, exp2
[WARNING]  after adaptation: ArrowAssoc.->((name2, exp2): (String, String))
[WARNING]                   Map(alias -> (name2, exp), alias2 -> (name2, exp2)),
[WARNING]                                                     ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresOuterGroupByQueryGenerator.scala:387: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: LinkedHashSet.add(elem: A): Boolean
[WARNING]   given arguments: parentCol.get._2, parentCol.get._1
[WARNING]  after adaptation: LinkedHashSet.add((parentCol.get._2, parentCol.get._1): (String, com.yahoo.maha.core.Column))
[WARNING]             noopRollupColSet.add(parentCol.get._2, parentCol.get._1)
[WARNING]                                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresOuterGroupByQueryGenerator.scala:389: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: LinkedHashSet.add(elem: A): Boolean
[WARNING]   given arguments: alias, col
[WARNING]  after adaptation: LinkedHashSet.add((alias, col): (String, com.yahoo.maha.core.Column))
[WARNING]             noopRollupColSet.add(alias, col)
[WARNING]                                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresOuterGroupByQueryGenerator.scala:560: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: PostgresQueryCommon.concat(tuple: (String, String)): String
[WARNING]   given arguments: renderedCol, renderedAlias
[WARNING]  after adaptation: PostgresQueryCommon.concat((renderedCol, renderedAlias): (String, String))
[WARNING]               queryBuilder.addPreOuterColumn(concat(renderedCol, renderedAlias))
[WARNING]                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresOuterGroupByQueryGenerator.scala:570: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: PostgresQueryCommon.concat(tuple: (String, String)): String
[WARNING]   given arguments: renderedCol, renderedAlias
[WARNING]  after adaptation: PostgresQueryCommon.concat((renderedCol, renderedAlias): (String, String))
[WARNING]           queryBuilder.addPreOuterColumn(concat(renderedCol, renderedAlias))
[WARNING]                                                ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresOuterGroupByQueryGenerator.scala:584: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: PostgresQueryCommon.concat(tuple: (String, String)): String
[WARNING]   given arguments: StringContext("", " ", "").s(renderedCol, renderedAlias), ""
[WARNING]  after adaptation: PostgresQueryCommon.concat((StringContext("", " ", "").s(renderedCol, renderedAlias), ""): (String, String))
[WARNING]               queryBuilder.addPreOuterColumn(concat(s"$renderedCol $renderedAlias",""))
[WARNING]                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresOuterGroupByQueryGenerator.scala:210: warning: local val factTableAlias in method ogbGenerateFactViewColumns is never used
[WARNING]       val factTableAlias = queryBuilderContext.getAliasForTable(queryContext.factBestCandidate.fact.name)
[WARNING]           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresQueryGenerator.scala:856: warning: local method toChar in method applyDataTypeCleanup is never used
[WARNING]     def toChar(alias: String): String = s"""to_char($alias)"""
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresQueryGenerator.scala:1150: warning: local val factTableAlias in method generateFactViewColumns is never used
[WARNING]       val factTableAlias = queryBuilderContext.getAliasForTable(queryContext.factBestCandidate.fact.name)
[WARNING]           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresQueryGenerator.scala:1194: warning: local val renderedAlias in value $anonfun is never used
[WARNING]             val renderedAlias = s""""$alias""""
[WARNING]                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/postgres/PostgresQueryGenerator.scala:1205: warning: local val renderedAlias in value $anonfun is never used
[WARNING]             val renderedAlias = s""""$alias""""
[WARNING]                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/presto/PrestoOuterGroupByQueryGenerator.scala:358: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: HivePrestoQueryCommon.concat(tuple: (String, String)): String
[WARNING]   given arguments: renderedCol, renderedAlias
[WARNING]  after adaptation: HivePrestoQueryCommon.concat((renderedCol, renderedAlias): (String, String))
[WARNING]             queryBuilder.addPreOuterColumn(concat(renderedCol, renderedAlias))
[WARNING]                                                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/presto/PrestoOuterGroupByQueryGenerator.scala:367: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: HivePrestoQueryCommon.concat(tuple: (String, String)): String
[WARNING]   given arguments: renderedCol, renderedAlias
[WARNING]  after adaptation: HivePrestoQueryCommon.concat((renderedCol, renderedAlias): (String, String))
[WARNING]         queryBuilder.addPreOuterColumn(concat(renderedCol, renderedAlias))
[WARNING]                                              ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/presto/PrestoOuterGroupByQueryGenerator.scala:382: warning: Adapting argument list by creating a 2-tuple: this may not be what you want.
[WARNING]         signature: HivePrestoQueryCommon.concat(tuple: (String, String)): String
[WARNING]   given arguments: StringContext("", " ", "").s(renderedCol, renderedAlias), ""
[WARNING]  after adaptation: HivePrestoQueryCommon.concat((StringContext("", " ", "").s(renderedCol, renderedAlias), ""): (String, String))
[WARNING]             queryBuilder.addPreOuterColumn(concat(s"$renderedCol $renderedAlias",""))
[WARNING]                                                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/presto/PrestoOuterGroupByQueryGenerator.scala:25: warning: local val publicFact in method generateOuterGroupByQuery is never used
[WARNING]     val publicFact = queryContext.factBestCandidate.publicFact
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/core/src/main/scala/com/yahoo/maha/core/query/presto/PrestoOuterGroupByQueryGenerator.scala:32: warning: local val requestedCols in method generateOuterGroupByQuery is never used
[WARNING]     val requestedCols = queryContext.requestModel.requestCols
[WARNING]         ^
[INFO] Cleaning datadir [/Users/lgadde/git/Native-Ads/maha/core/target/scoverage-data]
[INFO] Beginning coverage instrumentation
[INFO] Instrumentation completed [27524 statements]
[INFO] Wrote instrumentation file [/Users/lgadde/git/Native-Ads/maha/core/target/scoverage-data/scoverage.coverage]
[INFO] Will write measurement data to [/Users/lgadde/git/Native-Ads/maha/core/target/scoverage-data]
[WARNING] 131 warnings found
[INFO] prepare-compile in 0 s
[INFO] compile in 47 s
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:post-compile (coverage) @ maha-core ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 49 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ maha-core ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-core ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-core ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- scalatest-maven-plugin:2.0.0:test (test) @ maha-core ---
Discovery starting.
09:14:19.092 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - Detected a Darwin x86_64 system
09:14:19.220 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - Postgres binaries at /Users/lgadde/git/Native-Ads/maha/core/target/embedded-pg/PG-3d7ce5d05cd575a649dd635576931b19
09:14:19.288 INFO  [log:pid(87375)] init-097f66ba-826d-4eb9-99dc-d9878c365276:initdb - The files belonging to this database system will be owned by user "lgadde".
09:14:19.288 INFO  [log:pid(87375)] init-097f66ba-826d-4eb9-99dc-d9878c365276:initdb - This user must also own the server process.
09:14:19.288 INFO  [log:pid(87375)] init-097f66ba-826d-4eb9-99dc-d9878c365276:initdb - 
09:14:19.288 INFO  [log:pid(87375)] init-097f66ba-826d-4eb9-99dc-d9878c365276:initdb - The database cluster will be initialized with locale "en_US.UTF-8".
09:14:19.288 INFO  [log:pid(87375)] init-097f66ba-826d-4eb9-99dc-d9878c365276:initdb - The default text search configuration will be set to "english".
09:14:19.289 INFO  [log:pid(87375)] init-097f66ba-826d-4eb9-99dc-d9878c365276:initdb - 
09:14:19.289 INFO  [log:pid(87375)] init-097f66ba-826d-4eb9-99dc-d9878c365276:initdb - Data page checksums are disabled.
09:14:19.289 INFO  [log:pid(87375)] init-097f66ba-826d-4eb9-99dc-d9878c365276:initdb - 
09:14:19.289 INFO  [log:pid(87375)] init-097f66ba-826d-4eb9-99dc-d9878c365276:initdb - fixing permissions on existing directory /Users/lgadde/git/Native-Ads/maha/core/target/epg2363848918896743315 ... ok
09:14:19.289 INFO  [log:pid(87375)] init-097f66ba-826d-4eb9-99dc-d9878c365276:initdb - creating subdirectories ... ok
09:14:19.327 INFO  [log:pid(87375)] init-097f66ba-826d-4eb9-99dc-d9878c365276:initdb - selecting default max_connections ... 100
09:14:19.371 INFO  [log:pid(87375)] init-097f66ba-826d-4eb9-99dc-d9878c365276:initdb - selecting default shared_buffers ... 128MB
09:14:19.371 INFO  [log:pid(87375)] init-097f66ba-826d-4eb9-99dc-d9878c365276:initdb - selecting dynamic shared memory implementation ... posix
09:14:19.553 INFO  [log:pid(87375)] init-097f66ba-826d-4eb9-99dc-d9878c365276:initdb - creating configuration files ... ok
09:14:19.934 INFO  [log:pid(87375)] init-097f66ba-826d-4eb9-99dc-d9878c365276:initdb - running bootstrap script ... ok
09:14:21.102 INFO  [log:pid(87375)] init-097f66ba-826d-4eb9-99dc-d9878c365276:initdb - performing post-bootstrap initialization ... ok
09:14:21.167 INFO  [log:pid(87375)] init-097f66ba-826d-4eb9-99dc-d9878c365276:initdb - syncing data to disk ... ok
09:14:21.167 INFO  [log:pid(87375)] init-097f66ba-826d-4eb9-99dc-d9878c365276:initdb - 
09:14:21.167 INFO  [log:pid(87375)] init-097f66ba-826d-4eb9-99dc-d9878c365276:initdb - Success. You can now start the database server using:
09:14:21.167 INFO  [log:pid(87375)] init-097f66ba-826d-4eb9-99dc-d9878c365276:initdb - 
09:14:21.167 INFO  [log:pid(87375)] init-097f66ba-826d-4eb9-99dc-d9878c365276:initdb -     /Users/lgadde/git/Native-Ads/maha/core/target/embedded-pg/PG-3d7ce5d05cd575a649dd635576931b19/bin/pg_ctl -D /Users/lgadde/git/Native-Ads/maha/core/target/epg2363848918896743315 -l logfile start
09:14:21.167 INFO  [log:pid(87375)] init-097f66ba-826d-4eb9-99dc-d9878c365276:initdb - 
09:14:21.168 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - 097f66ba-826d-4eb9-99dc-d9878c365276 initdb completed in 00:00:01.945
09:14:21.190 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - 097f66ba-826d-4eb9-99dc-d9878c365276 postmaster started as java.lang.UNIXProcess@3336e6b6 on port 51376.  Waiting up to PT10S for server startup to finish.
09:14:21.279 INFO  [log:pid(87389)] pg-097f66ba-826d-4eb9-99dc-d9878c365276 - waiting for server to start....2020-11-10 09:14:21.279 PST [87391] LOG:  listening on IPv4 address "127.0.0.1", port 51376
09:14:21.280 INFO  [log:pid(87389)] pg-097f66ba-826d-4eb9-99dc-d9878c365276 - 2020-11-10 09:14:21.279 PST [87391] LOG:  listening on IPv6 address "::1", port 51376
09:14:21.281 INFO  [log:pid(87389)] pg-097f66ba-826d-4eb9-99dc-d9878c365276 - 2020-11-10 09:14:21.281 PST [87391] LOG:  listening on Unix socket "/tmp/.s.PGSQL.51376"
09:14:21.299 INFO  [log:pid(87389)] pg-097f66ba-826d-4eb9-99dc-d9878c365276 - 2020-11-10 09:14:21.298 PST [87392] LOG:  database system was shut down at 2020-11-10 09:14:21 PST
09:14:21.303 INFO  [log:pid(87389)] pg-097f66ba-826d-4eb9-99dc-d9878c365276 - 2020-11-10 09:14:21.303 PST [87391] LOG:  database system is ready to accept connections
09:14:21.327 INFO  [log:pid(87389)] pg-097f66ba-826d-4eb9-99dc-d9878c365276 - 2020-11-10 09:14:21.327 PST [87399] LOG:  incomplete startup packet
09:14:21.335 INFO  [log:pid(87389)] pg-097f66ba-826d-4eb9-99dc-d9878c365276 -  done
09:14:21.335 INFO  [log:pid(87389)] pg-097f66ba-826d-4eb9-99dc-d9878c365276 - server started
09:14:21.458 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - 097f66ba-826d-4eb9-99dc-d9878c365276 postmaster startup finished in 00:00:00.280
09:14:21.612 INFO  [log:pid(87401)] init-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31:initdb - The files belonging to this database system will be owned by user "lgadde".
09:14:21.612 INFO  [log:pid(87401)] init-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31:initdb - This user must also own the server process.
09:14:21.612 INFO  [log:pid(87401)] init-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31:initdb - 
09:14:21.612 INFO  [log:pid(87401)] init-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31:initdb - The database cluster will be initialized with locale "en_US.UTF-8".
09:14:21.613 INFO  [log:pid(87401)] init-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31:initdb - The default text search configuration will be set to "english".
09:14:21.613 INFO  [log:pid(87401)] init-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31:initdb - 
09:14:21.613 INFO  [log:pid(87401)] init-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31:initdb - Data page checksums are disabled.
09:14:21.613 INFO  [log:pid(87401)] init-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31:initdb - 
09:14:21.613 INFO  [log:pid(87401)] init-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31:initdb - fixing permissions on existing directory /Users/lgadde/git/Native-Ads/maha/core/target/epg1259899184174647391 ... ok
09:14:21.616 INFO  [log:pid(87401)] init-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31:initdb - creating subdirectories ... ok
09:14:21.648 INFO  [log:pid(87401)] init-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31:initdb - selecting default max_connections ... 100
09:14:21.685 INFO  [log:pid(87401)] init-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31:initdb - selecting default shared_buffers ... 128MB
09:14:21.685 INFO  [log:pid(87401)] init-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31:initdb - selecting dynamic shared memory implementation ... posix
09:14:21.759 INFO  [log:pid(87401)] init-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31:initdb - creating configuration files ... ok
09:14:22.119 INFO  [log:pid(87401)] init-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31:initdb - running bootstrap script ... ok
09:14:23.247 INFO  [log:pid(87401)] init-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31:initdb - performing post-bootstrap initialization ... ok
09:14:23.325 INFO  [log:pid(87401)] init-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31:initdb - syncing data to disk ... ok
09:14:23.325 INFO  [log:pid(87401)] init-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31:initdb - 
09:14:23.325 INFO  [log:pid(87401)] init-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31:initdb - Success. You can now start the database server using:
09:14:23.325 INFO  [log:pid(87401)] init-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31:initdb - 
09:14:23.326 INFO  [log:pid(87401)] init-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31:initdb -     /Users/lgadde/git/Native-Ads/maha/core/target/embedded-pg/PG-3d7ce5d05cd575a649dd635576931b19/bin/pg_ctl -D /Users/lgadde/git/Native-Ads/maha/core/target/epg1259899184174647391 -l logfile start
09:14:23.326 INFO  [log:pid(87401)] init-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31:initdb - 
09:14:23.327 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - deb1cdd2-6de5-4e43-b865-fa9ae64f1e31 initdb completed in 00:00:01.763
09:14:23.338 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - deb1cdd2-6de5-4e43-b865-fa9ae64f1e31 postmaster started as java.lang.UNIXProcess@6cce16f4 on port 5433.  Waiting up to PT10S for server startup to finish.
09:14:23.412 INFO  [log:pid(87415)] pg-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31 - waiting for server to start....2020-11-10 09:14:23.411 PST [87417] LOG:  listening on IPv4 address "127.0.0.1", port 5433
09:14:23.412 INFO  [log:pid(87415)] pg-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31 - 2020-11-10 09:14:23.412 PST [87417] LOG:  listening on IPv6 address "::1", port 5433
09:14:23.413 INFO  [log:pid(87415)] pg-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31 - 2020-11-10 09:14:23.413 PST [87417] LOG:  listening on Unix socket "/tmp/.s.PGSQL.5433"
09:14:23.433 INFO  [log:pid(87415)] pg-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31 - 2020-11-10 09:14:23.433 PST [87418] LOG:  database system was shut down at 2020-11-10 09:14:23 PST
09:14:23.438 INFO  [log:pid(87415)] pg-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31 - 2020-11-10 09:14:23.438 PST [87417] LOG:  database system is ready to accept connections
09:14:23.443 INFO  [log:pid(87415)] pg-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31 - 2020-11-10 09:14:23.443 PST [87425] LOG:  incomplete startup packet
09:14:23.455 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - deb1cdd2-6de5-4e43-b865-fa9ae64f1e31 postmaster startup finished in 00:00:00.127
09:14:23.474 INFO  [log:pid(87415)] pg-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31 -  done
Discovery completed in 8 seconds, 556 milliseconds.
Run starting. Expected test count is: 1472
OracleQueryCommonTest:
QueryPipelineWithFallbackTest:
UnionViewRowListTest:
OracleLiteralMapperTest:
PartialRowListTest:
CompleteRowListTest:
PostgresDDLDumperTest:
EngineTest:
ColumnTest:
LiteralMapperTest:
WithNewSchemaFactTest:
BaseDruidQueryGeneratorTest:
SqlHelperTest:
RegistryTest:
HiveLiteralMapperTest:
NewRollupFactTest:
ErrorTest:
DruidDerFunctionTest:
WithAlternativeEngineFactTest:
PrestoQueryGeneratorV1Test:
DerivedExpressionTest:
FilterTest:
PostgresQueryGeneratorTest:
BaseDDLGeneratorTest:
ESAPI: WARNING: System property [org.owasp.esapi.opsteam] is not set
ESAPI: WARNING: System property [org.owasp.esapi.devteam] is not set
ESAPI: Attempting to load ESAPI.properties via file I/O.
ESAPI: Attempting to load ESAPI.properties as resource file via file I/O.
ESAPI: Not found in 'org.owasp.esapi.resources' directory or file not readable: /Users/lgadde/git/Native-Ads/maha/core/ESAPI.properties
ESAPI: Not found in SystemResource Directory/resourceDirectory: .esapi/ESAPI.properties
ESAPI: Not found in 'user.home' (/Users/lgadde) directory: /Users/lgadde/esapi/ESAPI.properties
ESAPI: Loading ESAPI.properties via file I/O failed. Exception was: java.io.FileNotFoundException
ESAPI: Attempting to load ESAPI.properties via the classpath.
ESAPI: SUCCESSFULLY LOADED ESAPI.properties via the CLASSPATH from '/ (root)' using current thread context class loader!
ESAPI: SecurityConfiguration for Validator.ConfigurationFile.MultiValued not found in ESAPI.properties. Using default: false
ESAPI: Attempting to load validation.properties via file I/O.
ESAPI: Attempting to load validation.properties as resource file via file I/O.
ESAPI: Not found in 'org.owasp.esapi.resources' directory or file not readable: /Users/lgadde/git/Native-Ads/maha/core/validation.properties
ESAPI: Not found in SystemResource Directory/resourceDirectory: .esapi/validation.properties
ESAPI: Not found in 'user.home' (/Users/lgadde) directory: /Users/lgadde/esapi/validation.properties
ESAPI: Loading validation.properties via file I/O failed.
ESAPI: Attempting to load validation.properties via the classpath.
ESAPI: SUCCESSFULLY LOADED validation.properties via the CLASSPATH from '/ (root)' using current thread context class loader!
09:14:26.013 ERROR [ScalaTest-14-running-SafeCloseableTest] safeOperation - Failed on safeOperation doWork
java.lang.IllegalArgumentException: requirement failed: fail
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.report.SafeCloseableTest.failWork(SafeCloseableTest.scala:28)
	at com.yahoo.maha.report.SafeCloseableTest.$anonfun$new$4(SafeCloseableTest.scala:35)
	at com.yahoo.maha.report.SafeCloseableTest.$anonfun$new$4$adapted(SafeCloseableTest.scala:35)
	at com.yahoo.maha.report.package$.safeOperation(package.scala:18)
	at com.yahoo.maha.report.package$.safeCloseable(package.scala:35)
	at com.yahoo.maha.report.SafeCloseableTest.$anonfun$new$3(SafeCloseableTest.scala:35)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
09:14:26.102 ERROR [ScalaTest-6-running-DaysUtilsTest] c.y.m.u.DaysUtils$ - Unchecked input to function 20171101
java.lang.IllegalArgumentException: Invalid format: "20171101" is too short
	at org.joda.time.format.DateTimeFormatter.parseDateTime(DateTimeFormatter.java:945)
	at com.yahoo.maha.utils.DaysUtils$.truncateHourFromGivenHourString(DaysUtils.scala:133)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$2(DaysUtilsTest.scala:16)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at org.scalatest.Assertions.intercept(Assertions.scala:749)
	at org.scalatest.Assertions.intercept$(Assertions.scala:746)
	at org.scalatest.funsuite.AnyFunSuite.intercept(AnyFunSuite.scala:1562)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$1(DaysUtilsTest.scala:15)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
09:14:26.122 ERROR [ScalaTest-6-running-DaysUtilsTest] c.y.m.u.DaysUtils$ - Unchecked input to function from=2017-12-01a, to=2017-12-02
java.lang.IllegalArgumentException: Invalid format: "2017-12-01a" is malformed at "a"
	at org.joda.time.format.DateTimeFormatter.parseDateTime(DateTimeFormatter.java:945)
	at com.yahoo.maha.utils.DaysUtils$.refactorFilter(DaysUtils.scala:205)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$5(DaysUtilsTest.scala:38)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at org.scalatest.Assertions.intercept(Assertions.scala:749)
	at org.scalatest.Assertions.intercept$(Assertions.scala:746)
	at org.scalatest.funsuite.AnyFunSuite.intercept(AnyFunSuite.scala:1562)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$4(DaysUtilsTest.scala:36)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
09:14:26.123 ERROR [ScalaTest-6-running-DaysUtilsTest] c.y.m.u.DaysUtils$ - Unchecked input to function List(2017-12-01a, 2017-12-02)
java.lang.IllegalArgumentException: Invalid format: "2017-12-01a" is malformed at "a"
	at org.joda.time.format.DateTimeFormatter.parseDateTime(DateTimeFormatter.java:945)
	at com.yahoo.maha.utils.DaysUtils$.$anonfun$refactorFilter$3(DaysUtils.scala:217)
	at com.yahoo.maha.utils.DaysUtils$.$anonfun$refactorFilter$3$adapted(DaysUtils.scala:217)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.utils.DaysUtils$.refactorFilter(DaysUtils.scala:217)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$6(DaysUtilsTest.scala:44)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at org.scalatest.Assertions.intercept(Assertions.scala:749)
	at org.scalatest.Assertions.intercept$(Assertions.scala:746)
	at org.scalatest.funsuite.AnyFunSuite.intercept(AnyFunSuite.scala:1562)
09:14:26.128 ERROR [ScalaTest-6-running-DaysUtilsTest] c.y.m.u.DaysUtils$ - Unchecked input to function 2017-12-01a
java.lang.IllegalArgumentException: Invalid format: "2017-12-01a" is malformed at "a"
	at org.joda.time.format.DateTimeFormatter.parseDateTime(DateTimeFormatter.java:945)
	at com.yahoo.maha.utils.DaysUtils$.refactorFilter(DaysUtils.scala:227)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$7(DaysUtilsTest.scala:50)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at org.scalatest.Assertions.intercept(Assertions.scala:749)
	at org.scalatest.Assertions.intercept$(Assertions.scala:746)
	at org.scalatest.funsuite.AnyFunSuite.intercept(AnyFunSuite.scala:1562)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$4(DaysUtilsTest.scala:48)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
09:14:26.132 WARN  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator$ - Another query generator registered for HiveEngine : null
09:14:26.132 ERROR [ScalaTest-14-running-SafeCloseableTest] safeOperation - Failed on safeOperation doWork
java.lang.IllegalArgumentException: requirement failed: fail
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.report.SafeCloseableTest.failWork(SafeCloseableTest.scala:28)
	at com.yahoo.maha.report.SafeCloseableTest.$anonfun$new$6(SafeCloseableTest.scala:40)
	at com.yahoo.maha.report.SafeCloseableTest.$anonfun$new$6$adapted(SafeCloseableTest.scala:40)
	at com.yahoo.maha.report.package$.safeOperation(package.scala:18)
	at com.yahoo.maha.report.package$.safeCloseable(package.scala:35)
	at com.yahoo.maha.report.SafeCloseableTest.$anonfun$new$5(SafeCloseableTest.scala:40)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
09:14:26.133 ERROR [ScalaTest-6-running-DaysUtilsTest] c.y.m.u.DaysUtils$ - Unchecked input to function from=2017-12-02, to=2017-12-01
java.lang.IllegalArgumentException: From date (2017-12-02) cannot be after To date (2017-12-01)
	at com.yahoo.maha.utils.DaysUtils$.getDaysBetweenIntoLongList(DaysUtils.scala:26)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$10(DaysUtilsTest.scala:64)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at org.scalatest.Assertions.intercept(Assertions.scala:749)
	at org.scalatest.Assertions.intercept$(Assertions.scala:746)
	at org.scalatest.funsuite.AnyFunSuite.intercept(AnyFunSuite.scala:1562)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$9(DaysUtilsTest.scala:62)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
09:14:26.149 ERROR [ScalaTest-14-running-SafeCloseableTest] safeOperation - Failed on safeOperation cleanup
java.io.IOException: fail
	at com.yahoo.maha.report.FailCloseable.close(SafeCloseableTest.scala:20)
	at com.yahoo.maha.report.package$.$anonfun$safeCloseable$1(package.scala:35)
	at com.yahoo.maha.report.package$.$anonfun$safeCloseable$1$adapted(package.scala:35)
	at com.yahoo.maha.report.package$.safeOperation(package.scala:24)
	at com.yahoo.maha.report.package$.safeCloseable(package.scala:35)
	at com.yahoo.maha.report.SafeCloseableTest.$anonfun$new$5(SafeCloseableTest.scala:40)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
09:14:26.234 INFO  [ScalaTest-11-running-FkFactMapStorageTest] c.y.m.r.RocksDBAccessor$ - Cleaning up rocksdb base dir path : /Users/lgadde/git/Native-Ads/maha/core/target/test/rocksdb_1-1605028393980-PowerSetStorage_
09:14:26.283 ERROR [ScalaTest-6-running-DaysUtilsTest] c.y.m.u.DaysUtils$ - Unchecked input to function getDaysIntoLongList
java.lang.IllegalArgumentException: Invalid format: "20160104abc" is malformed at "abc"
	at org.joda.time.format.DateTimeFormatter.parseDateTime(DateTimeFormatter.java:945)
	at com.yahoo.maha.utils.DaysUtils$.$anonfun$getDaysIntoLongList$1(DaysUtils.scala:49)
	at com.yahoo.maha.utils.DaysUtils$.$anonfun$getDaysIntoLongList$1$adapted(DaysUtils.scala:48)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.utils.DaysUtils$.getDaysIntoLongList(DaysUtils.scala:48)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$34(DaysUtilsTest.scala:206)
	at org.scalatest.Assertions.intercept(Assertions.scala:749)
	at org.scalatest.Assertions.intercept$(Assertions.scala:746)
	at org.scalatest.funsuite.AnyFunSuite.intercept(AnyFunSuite.scala:1562)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$33(DaysUtilsTest.scala:204)
09:14:26.290 INFO  [ScalaTest-11-running-FkFactMapStorageTest] c.y.m.r.RocksDBAccessor - Creating rocksDB : /Users/lgadde/git/Native-Ads/maha/core/target/test/rocksdb_1-1605028466288-PowerSetStorage_
09:14:26.294 ERROR [ScalaTest-6-running-DaysUtilsTest] c.y.m.u.DaysUtils$ - Unchecked input to function from=, to=
java.lang.IllegalArgumentException: Invalid format: ""
	at org.joda.time.format.DateTimeFormatter.parseDateTime(DateTimeFormatter.java:945)
	at com.yahoo.maha.utils.DaysUtils$.getDaysBetweenIntoLongList(DaysUtils.scala:23)
	at com.yahoo.maha.utils.DaysUtils$.getDayIntoLongList(DaysUtils.scala:241)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$36(DaysUtilsTest.scala:212)
	at org.scalatest.Assertions.intercept(Assertions.scala:749)
	at org.scalatest.Assertions.intercept$(Assertions.scala:746)
	at org.scalatest.funsuite.AnyFunSuite.intercept(AnyFunSuite.scala:1562)
	at com.yahoo.maha.utils.DaysUtilsTest.$anonfun$new$35(DaysUtilsTest.scala:211)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
09:14:26.334 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(UTC)
09:14:26.336 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: None
09:14:26.336 WARN  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Failed to validate day/hour filters, or timezone cannot be fetched. Extending day filter by one day
09:14:26.338 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: None
09:14:26.344 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: None
09:14:26.369 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: None
09:14:26.369 WARN  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Failed to validate day/hour filters, or timezone cannot be fetched. Extending day filter by one day
09:14:26.373 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(Australia/Melbourne)
09:14:26.379 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetMinutes: -660
09:14:26.380 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetHours: -11
09:14:26.381 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - minUtcHour: -6 maxUtcHour: -6
09:14:26.384 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(Australia/Melbourne)
09:14:26.384 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetMinutes: -660
09:14:26.384 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetHours: -11
09:14:26.392 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - minUtcHour: -6 maxUtcHour: -6
09:14:26.397 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(Australia/Melbourne)
09:14:26.397 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetMinutes: -660
09:14:26.397 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetHours: -11
09:14:26.397 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - minUtcHour: -11 maxUtcHour: 12
09:14:26.399 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(Australia/Melbourne)
09:14:26.399 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetMinutes: -660
09:14:26.399 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetHours: -11
09:14:26.399 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - minUtcHour: -6 maxUtcHour: -6
09:14:26.403 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(Australia/Melbourne)
09:14:26.403 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetMinutes: -660
09:14:26.403 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetHours: -11
09:14:26.403 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - minUtcHour: -10 maxUtcHour: -6
09:14:26.413 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(UTC)
09:14:26.428 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(UTC)
09:14:26.429 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(America/Los_Angeles)
09:14:26.432 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetMinutes: 480
09:14:26.432 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetHours: 8
09:14:26.433 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - minUtcHour: 8 maxUtcHour: 31
09:14:26.439 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(America/Los_Angeles)
09:14:26.439 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetMinutes: 480
09:14:26.439 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetHours: 8
09:14:26.439 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - minUtcHour: 8 maxUtcHour: 31
09:14:26.440 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(Australia/Melbourne)
09:14:26.440 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetMinutes: -660
09:14:26.440 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetHours: -11
09:14:26.440 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - minUtcHour: -11 maxUtcHour: 12
09:14:26.441 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(America/Los_Angeles)
09:14:26.442 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(America/Los_Angeles)
09:14:26.443 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(Asia/Calcutta)
09:14:26.444 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(Australia/Melbourne)
09:14:26.456 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(Australia/Melbourne)
09:14:26.457 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(America/Los_Angeles)
09:14:26.458 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(Australia/Melbourne)
09:14:26.459 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(America/Los_Angeles)
09:14:26.460 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(America/Los_Angeles)
09:14:26.461 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(Australia/Melbourne)
09:14:26.462 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(America/Los_Angeles)
09:14:26.464 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(Australia/Melbourne)
09:14:26.465 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(America/Los_Angeles)
09:14:26.465 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetMinutes: 480
09:14:26.465 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetHours: 8
09:14:26.465 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - minUtcHour: 24 maxUtcHour: 24
09:14:26.499 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - Processing tables in order : List(advertiser, campaign_stats, campaign, ad_group, targetingattribute, ad)
09:14:26.505 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - Timezone: Some(America/Los_Angeles)
09:14:26.505 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetMinutes: 480
09:14:26.505 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - OffsetHours: 8
09:14:26.506 INFO  [ScalaTest-6-running-BaseUTCTimeProviderTest] c.y.m.c.BaseUTCTimeProviderTest$$anon$1 - minUtcHour: 24 maxUtcHour: 24
09:14:26.516 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - Map(generate_create_table_statement -> ColumnMetadata(generate_create_table_statement,false,columnNullableUnknown,2147483647,0,VARCHAR,text,java.lang.String,2147483647))
09:14:26.527 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - CREATE TABLE public.advertiser (
    device_id numeric(3,0)  NOT NULL,
    name character varying  NOT NULL,
    booking_country character varying  NOT NULL,
    id numeric  NOT NULL,
    last_updated character varying  NOT NULL,
    status character varying  NOT NULL,
    currency character varying  NOT NULL,
    managed_by numeric  NOT NULL,
CONSTRAINT advertiser_pkey
    PRIMARY KEY (id));

09:14:26.530 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.532 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - Map(generate_create_table_statement -> ColumnMetadata(generate_create_table_statement,false,columnNullableUnknown,2147483647,0,VARCHAR,text,java.lang.String,2147483647))
09:14:26.532 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - CREATE TABLE public.campaign_stats (
    impressions numeric(3,0) DEFAULT 1 NOT NULL,
    spend numeric DEFAULT 0.0 NOT NULL,
    stats_date date  NOT NULL,
    advertiser_id numeric  NOT NULL,
    clicks numeric(3,0) DEFAULT 0 NOT NULL,
    campaign_id numeric  NOT NULL);

09:14:26.537 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - Map(generate_create_table_statement -> ColumnMetadata(generate_create_table_statement,false,columnNullableUnknown,2147483647,0,VARCHAR,text,java.lang.String,2147483647))
09:14:26.537 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - CREATE TABLE public.campaign (
    device_id numeric(3,0)  NOT NULL,
    campaign_name character varying  NOT NULL,
    id numeric  NOT NULL,
    advertiser_id numeric  NULL,
    status character varying  NOT NULL,
    campaign_total character varying  NOT NULL,
    campaign_start_date character varying  NOT NULL,
    campaign_end_date character varying  NOT NULL,
CONSTRAINT campaign_pkey
    PRIMARY KEY (id),
CONSTRAINT campaign_advertiser_id_fkey
    FOREIGN KEY (advertiser_id) REFERENCES advertiser(id));

09:14:26.543 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - Map(generate_create_table_statement -> ColumnMetadata(generate_create_table_statement,false,columnNullableUnknown,2147483647,0,VARCHAR,text,java.lang.String,2147483647))
09:14:26.543 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - CREATE TABLE public.ad_group (
    device_id numeric(3,0)  NOT NULL,
    name character varying  NOT NULL,
    column2_id numeric  NOT NULL,
    id numeric  NOT NULL,
    advertiser_id numeric  NULL,
    status character varying  NOT NULL,
    campaign_id numeric  NOT NULL,
CONSTRAINT ad_group_pkey
    PRIMARY KEY (id),
CONSTRAINT ad_group_advertiser_id_fkey
    FOREIGN KEY (advertiser_id) REFERENCES advertiser(id),
CONSTRAINT ad_group_campaign_id_fkey
    FOREIGN KEY (campaign_id) REFERENCES campaign(id));

09:14:26.549 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - Map(generate_create_table_statement -> ColumnMetadata(generate_create_table_statement,false,columnNullableUnknown,2147483647,0,VARCHAR,text,java.lang.String,2147483647))
09:14:26.549 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - CREATE TABLE public.targetingattribute (
    device_id numeric(3,0)  NOT NULL,
    created_date date  NOT NULL,
    parent_id numeric  NOT NULL,
    landing_url character varying(2048)  NOT NULL,
    created_by_user character varying(255)  NOT NULL,
    ad_param_value_2 character varying(200)  NOT NULL,
    hidden numeric  NOT NULL,
    ad_param_value_3 character varying(200)  NOT NULL,
    cpc numeric  NOT NULL,
    editorial_results character varying(256)  NOT NULL,
    ad_param_value_1 character varying(2048)  NOT NULL,
    id numeric  NOT NULL,
    parent_type character varying(64)  NOT NULL,
    last_updated date  NOT NULL,
    advertiser_id numeric  NULL,
    status character varying(255)  NOT NULL,
    modifier numeric  NOT NULL,
    deleted_date date  NOT NULL,
    last_updated_by_user character varying(255)  NOT NULL,
    match_type character varying(64)  NOT NULL,
    value character varying(255)  NOT NULL,
CONSTRAINT targetingattribute_pkey
    PRIMARY KEY (id),
CONSTRAINT targetingattribute_advertiser_id_fkey
    FOREIGN KEY (advertiser_id) REFERENCES advertiser(id),
CONSTRAINT targetingattribute_ad_group_id_fkey
    FOREIGN KEY (parent_id) REFERENCES ad_group(id));

09:14:26.555 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - Map(generate_create_table_statement -> ColumnMetadata(generate_create_table_statement,false,columnNullableUnknown,2147483647,0,VARCHAR,text,java.lang.String,2147483647))
09:14:26.555 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - CREATE TABLE public.ad (
    impressions numeric  NOT NULL,
    device_id numeric(3,0)  NOT NULL,
    ad_group_id numeric  NOT NULL,
    id numeric  NOT NULL,
    user_count numeric  NOT NULL,
    advertiser_id numeric  NULL,
    status character varying  NOT NULL,
    title character varying  NOT NULL,
    campaign_id numeric  NOT NULL,
CONSTRAINT ad_pkey
    PRIMARY KEY (id),
CONSTRAINT ad_advertiser_id_fkey
    FOREIGN KEY (advertiser_id) REFERENCES advertiser(id),
CONSTRAINT ad_campaign_id_fkey
    FOREIGN KEY (campaign_id) REFERENCES campaign(id),
CONSTRAINT ad_ad_group_id_fkey
    FOREIGN KEY (ad_group_id) REFERENCES ad_group(id));

09:14:26.573 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - Map(routine_definition -> ColumnMetadata(routine_definition,false,columnNullable,2147483647,0,VARCHAR,varchar,java.lang.String,2147483647), routine_name -> ColumnMetadata(routine_name,false,columnNullable,2147483647,0,VARCHAR,varchar,java.lang.String,2147483647))
09:14:26.574 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - 
CREATE OR REPLACE FUNCTION update_last_updated_column() RETURNS TRIGGER AS $BODY$ BEGIN   NEW.last_updated = now();   RETURN NEW;END;  $BODY$ LANGUAGE plpgsql;
09:14:26.582 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - Map(view_definition -> ColumnMetadata(view_definition,false,columnNullable,2147483647,0,VARCHAR,varchar,java.lang.String,2147483647), table_name -> ColumnMetadata(table_name,false,columnNullable,2147483647,0,VARCHAR,varchar,java.lang.String,2147483647))
09:14:26.583 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - 
DROP VIEW IF EXISTS account_stats;
CREATE VIEW account_stats AS
 SELECT campaign_stats.stats_date,
    campaign_stats.advertiser_id,
    sum(campaign_stats.impressions) AS impressions,
    sum(campaign_stats.clicks) AS clicks,
    sum(campaign_stats.spend) AS spend
   FROM campaign_stats
  GROUP BY campaign_stats.stats_date, campaign_stats.advertiser_id;

09:14:26.595 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - Map(table_name -> ColumnMetadata(table_name,false,columnNullable,2147483647,0,VARCHAR,varchar,java.lang.String,2147483647), trigger_name -> ColumnMetadata(trigger_name,false,columnNullable,2147483647,0,VARCHAR,varchar,java.lang.String,2147483647), action_statement -> ColumnMetadata(action_statement,false,columnNullable,2147483647,0,VARCHAR,varchar,java.lang.String,2147483647), action_timing -> ColumnMetadata(action_timing,false,columnNullable,2147483647,0,VARCHAR,varchar,java.lang.String,2147483647), action_orientation -> ColumnMetadata(action_orientation,false,columnNullable,2147483647,0,VARCHAR,varchar,java.lang.String,2147483647))
09:14:26.601 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
NewFactTest:
DerivedRowListTest:
09:14:26.635 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - Map(tgnargs -> ColumnMetadata(tgnargs,false,columnNoNulls,5,0,SMALLINT,int2,java.lang.Integer,6), function_name -> ColumnMetadata(function_name,false,columnNoNulls,2147483647,0,VARCHAR,name,java.lang.String,2147483647), tginitdeferred -> ColumnMetadata(tginitdeferred,false,columnNoNulls,1,0,BIT,bool,java.lang.Boolean,1), tgname -> ColumnMetadata(tgname,false,columnNoNulls,2147483647,0,VARCHAR,name,java.lang.String,2147483647), table_name -> ColumnMetadata(table_name,false,columnNoNulls,2147483647,0,VARCHAR,name,java.lang.String,2147483647), tgconstraint -> ColumnMetadata(tgconstraint,false,columnNoNulls,10,0,BIGINT,oid,java.lang.Long,10), tgdeferrable -> ColumnMetadata(tgdeferrable,false,columnNoNulls,1,0,BIT,bool,java.lang.Boolean,1), tgtype -> ColumnMetadata(tgtype,false,columnNoNulls,5,0,SMALLINT,int2,java.lang.Integer,6), trigger_name -> ColumnMetadata(trigger_name,false,columnNoNulls,2147483647,0,VARCHAR,name,java.lang.String,2147483647), tgoldtable -> ColumnMetadata(tgoldtable,false,columnNullable,2147483647,0,VARCHAR,name,java.lang.String,2147483647), trigger_event -> ColumnMetadata(trigger_event,false,columnNullableUnknown,2147483647,0,VARCHAR,text,java.lang.String,2147483647), tgisinternal -> ColumnMetadata(tgisinternal,false,columnNoNulls,1,0,BIT,bool,java.lang.Boolean,1), tgconstrindid -> ColumnMetadata(tgconstrindid,false,columnNoNulls,10,0,BIGINT,oid,java.lang.Long,10), tgfoid -> ColumnMetadata(tgfoid,false,columnNoNulls,10,0,BIGINT,oid,java.lang.Long,10), tgenabled -> ColumnMetadata(tgenabled,false,columnNoNulls,1,0,CHAR,char,java.lang.String,1), tgconstrrelid -> ColumnMetadata(tgconstrrelid,false,columnNoNulls,10,0,BIGINT,oid,java.lang.Long,10), tgrelid -> ColumnMetadata(tgrelid,false,columnNoNulls,10,0,BIGINT,oid,java.lang.Long,10), tgattr -> ColumnMetadata(tgattr,false,columnNoNulls,2147483647,0,OTHER,int2vector,java.lang.String,2147483647), tgnewtable -> ColumnMetadata(tgnewtable,false,columnNullable,2147483647,0,VARCHAR,name,java.lang.String,2147483647), tgargs -> ColumnMetadata(tgargs,false,columnNoNulls,2147483647,0,BINARY,bytea,[B,2147483647), action_timing -> ColumnMetadata(action_timing,false,columnNullableUnknown,2147483647,0,VARCHAR,text,java.lang.String,2147483647), action_orientation -> ColumnMetadata(action_orientation,false,columnNullableUnknown,2147483647,0,VARCHAR,text,java.lang.String,2147483647), tgqual -> ColumnMetadata(tgqual,false,columnNullable,2147483647,0,OTHER,pg_node_tree,java.lang.String,2147483647))
09:14:26.637 INFO  [ScalaTest-9-running-PostgresDDLDumperTest] c.y.m.c.h.j.PostgresDDLDumper$ - 
DROP TRIGGER IF EXISTS update_targetingattribute_last_updated ON targetingattribute;
CREATE TRIGGER update_targetingattribute_last_updated BEFORE UPDATE ON targetingattribute
    FOR EACH ROW EXECUTE PROCEDURE update_last_updated_column();

09:14:26.708 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.711 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 2, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
- newFact should fail with duplicate columns
- registering Presto query generation multiple times should fail
- decode function
- get_interval_date
09:14:26.861 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.862 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.863 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.864 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.864 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.866 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.866 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.867 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.867 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.869 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.869 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.872 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.872 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.873 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.873 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.875 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:14:26.875 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.879 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.879 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.881 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.882 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.884 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:14:26.884 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.885 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.885 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.891 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:14:26.891 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.892 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.892 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.894 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.894 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.896 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:14:26.896 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.898 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.898 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.899 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.900 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.901 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.901 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.902 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.902 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.905 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.905 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.915 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.915 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.917 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:14:26.917 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.920 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:14:26.920 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.922 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.923 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.924 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:14:26.924 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.925 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:14:26.925 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.926 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.926 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.968 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.968 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.970 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.970 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.971 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.971 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.972 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.972 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.974 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.974 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:26.995 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:26.995 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.006 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.006 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.007 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.007 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.009 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:14:27.009 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.010 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.010 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.011 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.011 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.020 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.026 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.028 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.028 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.029 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.029 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.030 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.031 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.032 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.032 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.033 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:14:27.033 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.035 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:14:27.035 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.036 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.036 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.042 WARN  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator$ - Another query generator registered for HiveEngine : null
CREATE TABLE pg_ad_k_stats
(impressions	NUMERIC(10)	DEFAULT 0	NOT NULL, 
term_id	NUMERIC		NOT NULL, 
avg_pos	NUMERIC		NULL, 
spend	NUMERIC	DEFAULT 0.0	NOT NULL, 
landing_page_url	VARCHAR		NOT NULL, 
price_type	NUMERIC(3)		NOT NULL, 
stats_date_test	DATE		NOT NULL, 
device_type_id	NUMERIC(10)		NOT NULL, 
post_imp_conversions	NUMERIC	DEFAULT 0	NOT NULL, 
ad_group_id	NUMERIC		NOT NULL, 
account_id	NUMERIC		NOT NULL, 
stats_dates	DATE		NOT NULL, 
stats_source	NUMERIC(3)		NOT NULL, 
conversions	NUMERIC	DEFAULT 0	NOT NULL, 
max_bid	NUMERIC	DEFAULT 0.0	NOT NULL, 
stats_date	DATE		NOT NULL, 
clicks	NUMERIC(10)	DEFAULT 0	NOT NULL, 
ad_id	NUMERIC		NOT NULL, 
campaign_id	NUMERIC		NOT NULL)
;
         
ALTER TABLE pg_ad_k_stats
ADD CONSTRAINT pg_ad_k_stats_pk
PRIMARY KEY
(stats_date,stats_source,account_id,price_type)
;
       
     
CREATE TABLE postgres_advertiser
(channel	VARCHAR(1024)		NOT NULL, 
tier	VARCHAR		NOT NULL, 
created_date	VARCHAR		NOT NULL, 
is_test	NUMERIC		NOT NULL, 
created_by_user	VARCHAR		NOT NULL, 
timezone	VARCHAR		NOT NULL, 
adv_type	VARCHAR		NOT NULL, 
mdm_company_name	VARCHAR(255)		NOT NULL, 
account_type	VARCHAR		NOT NULL, 
shard_id	NUMERIC(3)		NOT NULL, 
booking_country	VARCHAR		NOT NULL, 
id	NUMERIC		NOT NULL, 
mdm_id	NUMERIC		NOT NULL, 
am_contact	VARCHAR(1000)		NOT NULL, 
billing_country	VARCHAR		NOT NULL, 
snapshot_ts	NUMERIC(10)		NOT NULL, 
last_updated	VARCHAR		NOT NULL, 
status	VARCHAR(255)		NOT NULL, 
currency	VARCHAR		NOT NULL, 
managed_by	NUMERIC		NOT NULL, 
crm_id	VARCHAR		NOT NULL, 
website_url	VARCHAR(1000)		NOT NULL, 
vat_id	VARCHAR		NOT NULL, 
last_updated_by_user	VARCHAR		NOT NULL)
;
ALTER TABLE postgres_advertiser
ADD CONSTRAINT postgres_advertiser_pk
PRIMARY KEY
(id)
;
       
     
PublicFactTest:
- Test QueryCommon
09:14:27.064 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.064 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.065 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.065 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.073 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.074 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.075 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.075 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.076 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.076 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.077 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.077 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.079 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.079 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.080 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.080 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.081 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.081 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.082 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:14:27.082 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.105 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.106 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.109 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.109 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.111 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:14:27.111 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.112 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.113 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.114 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:14:27.115 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.116 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.116 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.118 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.118 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.127 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.128 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.129 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.139 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.140 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.140 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.141 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.141 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.142 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:14:27.143 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.144 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:14:27.144 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.145 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.145 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.146 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.146 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.176 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.176 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.177 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.178 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.179 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.179 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.180 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.180 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.181 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.182 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.183 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.183 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.185 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.185 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.200 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.200 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.202 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.202 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.203 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.204 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.205 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.205 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.206 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.206 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.208 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.208 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.209 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.209 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.210 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:14:27.210 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.237 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:14:27.237 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.239 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.239 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.240 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.240 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.241 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:14:27.241 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.242 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.243 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.244 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.245 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.245 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:14:27.245 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.246 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.247 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
CSVRowListTest:
09:14:27.248 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.248 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- Throw GranularityNotSupportedError
- Attempt to use each join-able engine
09:14:27.249 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.249 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- Ensure a valid return in Engine.from(String)
09:14:27.250 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.250 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.251 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.252 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.253 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:14:27.253 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.254 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.268 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube-2 with params: UserId: test-user, isInternal: true, dryRunRevision: Some(1), forceRevision: None, forceEngine: Some(Oracle)forceQueryGenVersion: None
09:14:27.269 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Bucketing config is not defined for cube: test-cube-2
09:14:27.269 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube-2, revision: 1, dryRunRevision: Some(1) dryrunEngine: Some(Oracle)
09:14:27.270 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube-2 with params: UserId: test-user, isInternal: true, dryRunRevision: Some(1), forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.270 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Bucketing config is not defined for cube: test-cube-2
09:14:27.271 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube-2, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:27.271 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: invalid-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.273 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: true, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.363 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: None dryrunEngine: None
09:14:27.366 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.367 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.368 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.369 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.369 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.370 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.371 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.372 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.372 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.373 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.373 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.374 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.374 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.375 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.375 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.376 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: None dryrunEngine: None
09:14:27.377 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.378 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.378 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.402 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.402 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.404 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.404 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.406 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.408 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.409 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.409 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.411 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.411 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.414 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.414 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.423 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.423 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.426 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.462 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.462 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-campaign filters:Map(Campaign Name -> TreeSet(EqualityFilter(Campaign Name,MegaCampaign,false,false)), Source -> TreeSet(EqualityFilter(Source,2,true,false)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:14:27.463 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:27.463 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: None dryrunEngine: None
09:14:27.463 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.466 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.466 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.467 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:27.467 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.468 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.468 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:27.469 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:27.470 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.470 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.471 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.471 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.472 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.472 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.473 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.474 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.475 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.475 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.477 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.478 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.479 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.479 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.480 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.480 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.482 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.482 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.674 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.674 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.676 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.676 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.677 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.677 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.678 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.679 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.680 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.680 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.681 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.681 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.682 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.682 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.683 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.683 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.691 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.692 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.705 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - hasLowCardinalityDimFilters=true forceDimDriven=false hasDimAndFactOperations=true
09:14:27.707 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - isFactDriven=false hasIndexInOutput=true dimEngines=Set(Oracle, Postgres, Presto, Hive) dimCandidates=TreeSet(campaign)
09:14:27.707 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Druid, Hive, Presto)
09:14:27.710 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact_table_keywords engine=Oracle cost=800 level=9998 cardinalityPreference=2147483647
09:14:27.710 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact0_table_keywords engine=Oracle cost=800 level=9999 cardinalityPreference=2147483647
09:14:27.712 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.712 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.713 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.713 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.714 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.714 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.716 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.716 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.718 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.718 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.719 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.719 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.720 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.720 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.721 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.721 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.724 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats
       requestCols=Vector(DimColumnInfo(Campaign ID), FactColumnInfo(Impressions), DimColumnInfo(Campaign Name), DimColumnInfo(Campaign Status), FactColumnInfo(CTR))
       requestSortByCols=Vector(DimSortByColumnInfo(Campaign Name,ASC))
       dimColumnAliases=Set(Campaign ID, Campaign Name, Campaign Status)
       dimCardinalityEstimate=None
       factCost=Map((fact_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true), (fact0_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true))
       factSortByMap=Map()
       dimSortByMap=Map(Campaign Name -> ASC)
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=true
       hasDimFilters=true
       hasNonFKDimFilters=true
       hasFactSortBy=false
       hasDimSortBy=true
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=true
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=true
       hasLowCardinalityDimFilters=true
       isFactDriven=false
       forceDimDriven=false
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=SyncRequest
       startIndex=-1
       maxRows=100
       includeRowCount=true
       hasDimAndFactOperations=true
       isTimeSeries=false
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true))
       factSchemaRequiredAliasesMap=Map(fact0_table_keywords -> Set(Advertiser ID), fact_table_keywords -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(campaign -> InnerJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(Advertiser ID, Campaign Name)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=true
       hasNonFKNonForceFilters=true
       hasNonFKSortBy=true
       hasNonFKNonPKSortBy=true
       hasLowCardinalityFilter=true
       hasPKRequested=true
       hasNonPushDownFilters=true
     )
     
09:14:27.725 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:27.726 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=campaign_oracle
       publicDim.name=campaign
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,213,false,false)), EqualityFilter(Campaign Name,MegaCampaign,false,false))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=true
       hasNonFKSortBy=true
       hasNonPushDownFilters=true
       hasPKRequested=true
     
09:14:27.728 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=fact_table_keywords
       publicFact.name=k_stats
       fkCols=TreeSet(advertiser_id, campaign_id)
       nonFkCols=Set(CTR, impressions, stats_source)
       requestCols=Set(CTR, campaign_id, impressions)
       filterCols=Set(stats_source, advertiser_id)
       factCost=800
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(advertiser_id -> Advertiser ID, campaign_id -> Campaign ID, stats_source -> Source)
       factColMapping=Map(impressions -> Impressions, CTR -> CTR)
       filters=TreeSet(EqualityFilter(Advertiser ID,213,false,false), EqualityFilter(Source,2,true,false))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:14:27.729 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:14:27.729 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = false
09:14:27.730 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - runSingleEngineQuery
09:14:27.734 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.734 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.735 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.735 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.736 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.736 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.737 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.738 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.739 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.739 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.740 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.740 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.741 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.741 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.741 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set()
09:14:27.741 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet()
09:14:27.742 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.742 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.750 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.752 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:27.755 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:27.756 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.756 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.757 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.757 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.758 INFO  [ScalaTest-12-running-QueryContextTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:27.758 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.758 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.759 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: None dryrunEngine: None
09:14:27.759 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.760 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.760 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.761 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.761 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.763 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.763 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.764 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.764 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.765 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.765 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.768 ERROR [ScalaTest-10-running-WithNewGrainFactTest] c.y.m.c.DailyGrain$ - Unchecked input to function from=2018-02-01, to=2018-01-01
java.lang.IllegalArgumentException: requirement failed: From date must be before or equal to To date : from=2018-02-01, to=2018-01-01
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.core.DailyGrain$.getDaysBetween(Grain.scala:79)
	at com.yahoo.maha.core.fact.WithNewGrainFactTest.$anonfun$new$40(WithNewGrainFactTest.scala:130)
	at scala.runtime.java8.JFunction0$mcI$sp.apply(JFunction0$mcI$sp.java:23)
	at org.scalatest.Assertions.intercept(Assertions.scala:749)
	at org.scalatest.Assertions.intercept$(Assertions.scala:746)
	at org.scalatest.funsuite.AnyFunSuite.intercept(AnyFunSuite.scala:1562)
	at com.yahoo.maha.core.fact.WithNewGrainFactTest.$anonfun$new$39(WithNewGrainFactTest.scala:129)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
09:14:27.768 ERROR [ScalaTest-10-running-WithNewGrainFactTest] c.y.m.c.DailyGrain$ - Unchecked input to function from=2018-01-01, to=not a date
java.lang.IllegalArgumentException: Invalid format: "not a date"
	at org.joda.time.format.DateTimeFormatter.parseDateTime(DateTimeFormatter.java:945)
	at com.yahoo.maha.core.DailyGrain$.getDaysBetween(Grain.scala:78)
	at com.yahoo.maha.core.fact.WithNewGrainFactTest.$anonfun$new$41(WithNewGrainFactTest.scala:134)
	at scala.runtime.java8.JFunction0$mcI$sp.apply(JFunction0$mcI$sp.java:23)
	at org.scalatest.Assertions.intercept(Assertions.scala:749)
	at org.scalatest.Assertions.intercept$(Assertions.scala:746)
	at org.scalatest.funsuite.AnyFunSuite.intercept(AnyFunSuite.scala:1562)
	at com.yahoo.maha.core.fact.WithNewGrainFactTest.$anonfun$new$39(WithNewGrainFactTest.scala:133)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
09:14:27.773 INFO  [ScalaTest-3-running-QueryPipelineWithFallbackTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 095c8d26-4552-42b4-a558-7a548240ac22
09:14:27.782 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
QueryExecutorContextTest:
FkFactMapStorageTest:
- Should fail with DruidEngine
- newFact should succeed with no duplicate columns
- Should fail with invalid JoinType
09:14:27.796 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.797 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.798 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.798 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.800 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.800 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.802 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.802 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.803 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.804 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.805 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.805 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.806 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.806 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.807 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.807 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.819 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.819 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.820 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.821 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.822 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.822 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.823 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.823 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.824 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.824 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.825 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.825 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.827 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.827 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.830 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.830 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.831 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.831 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.833 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:27.834 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:27.856 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.856 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.857 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.857 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.858 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.859 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.860 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.860 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.861 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.861 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.862 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.862 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.863 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:27.863 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:27.863 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.863 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.864 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.864 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.868 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.869 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:27.870 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query option defined!
09:14:27.870 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
09:14:27.888 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:27.888 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:27.899 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.900 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.900 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.901 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.901 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.902 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.902 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.903 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.903 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.905 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.905 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.906 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.906 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.907 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.907 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.909 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.910 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.912 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.912 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.913 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.914 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.915 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 0, dryRunRevision: Some(1) dryrunEngine: Some(Druid)
09:14:27.916 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: test-cube with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.917 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: test-cube, revision: 1, dryRunRevision: None dryrunEngine: None
09:14:27.918 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:27.950 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(1), dryRunQueryGenVersion: Some(Version(1))
09:14:27.951 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: Some(Version(2))
09:14:27.953 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Bucketing config for query generator is not defined for engine: Hive: None
09:14:27.953 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:27.954 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: Some(Version(2))
09:14:27.955 INFO  [ScalaTest-16-running-BucketSelectorTest] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: Some(Version(2))
ExpressionTest:
- toPublicFact should fail with no underlying facts will fail
- Test DruidLiteralMapper 
09:14:27.974 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:27.974 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:27.974 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:27.974 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:27.983 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:27.983 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:27.987 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:27.987 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.012 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.012 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.054 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.056 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.060 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.060 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.061 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.061 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.070 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.073 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.073 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.075 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.076 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.076 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.077 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.077 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.083 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.087 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.090 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.090 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.145 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.145 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.151 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.171 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
ResultSetTransformerTest:
- toPublicFact should fail with two dim columns with same alias
- successfully register a query executor
09:14:28.175 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.186 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.186 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.191 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-campaign filters:Map(Campaign Name -> TreeSet(EqualityFilter(Campaign Name,MegaCampaign,false,false)), Source -> TreeSet(EqualityFilter(Source,2,true,false)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:14:28.191 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:28.191 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:28.191 WARN  [ScalaTest-2-running-CSVRowListTest] c.y.m.c.q.CSVRowList - foreach not supported on CSVRowList
09:14:28.192 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:28.192 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:28.192 WARN  [ScalaTest-2-running-CSVRowListTest] c.y.m.c.q.CSVRowList - map not supported on CSVRowList
09:14:28.193 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - hasLowCardinalityDimFilters=true forceDimDriven=false hasDimAndFactOperations=true
09:14:28.193 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - isFactDriven=false hasIndexInOutput=true dimEngines=Set(Oracle, Postgres, Presto, Hive) dimCandidates=TreeSet(campaign)
09:14:28.193 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Druid, Hive, Presto)
09:14:28.193 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact_table_keywords engine=Oracle cost=800 level=9998 cardinalityPreference=2147483647
09:14:28.194 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact0_table_keywords engine=Oracle cost=800 level=9999 cardinalityPreference=2147483647
09:14:28.194 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.194 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats
       requestCols=Vector(DimColumnInfo(Campaign ID), FactColumnInfo(Impressions), DimColumnInfo(Campaign Name), DimColumnInfo(Campaign Status), FactColumnInfo(CTR))
       requestSortByCols=Vector(DimSortByColumnInfo(Campaign Name,ASC))
       dimColumnAliases=Set(Campaign ID, Campaign Name, Campaign Status)
       dimCardinalityEstimate=None
       factCost=Map((fact_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true), (fact0_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true))
       factSortByMap=Map()
       dimSortByMap=Map(Campaign Name -> ASC)
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=true
       hasDimFilters=true
       hasNonFKDimFilters=true
       hasFactSortBy=false
       hasDimSortBy=true
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=true
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=true
       hasLowCardinalityDimFilters=true
       isFactDriven=false
       forceDimDriven=false
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=SyncRequest
       startIndex=-1
       maxRows=100
       includeRowCount=true
       hasDimAndFactOperations=true
       isTimeSeries=false
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true))
       factSchemaRequiredAliasesMap=Map(fact0_table_keywords -> Set(Advertiser ID), fact_table_keywords -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(campaign -> InnerJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(Advertiser ID, Campaign Name)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=true
       hasNonFKNonForceFilters=true
       hasNonFKSortBy=true
       hasNonFKNonPKSortBy=true
       hasLowCardinalityFilter=true
       hasPKRequested=true
       hasNonPushDownFilters=true
     )
     
09:14:28.195 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=campaign_oracle
       publicDim.name=campaign
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,213,false,false)), EqualityFilter(Campaign Name,MegaCampaign,false,false))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=true
       hasNonFKSortBy=true
       hasNonPushDownFilters=true
       hasPKRequested=true
     
09:14:28.195 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=fact_table_keywords
       publicFact.name=k_stats
       fkCols=TreeSet(advertiser_id, campaign_id)
       nonFkCols=Set(CTR, impressions, stats_source)
       requestCols=Set(CTR, campaign_id, impressions)
       filterCols=Set(stats_source, advertiser_id)
       factCost=800
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(advertiser_id -> Advertiser ID, campaign_id -> Campaign ID, stats_source -> Source)
       factColMapping=Map(impressions -> Impressions, CTR -> CTR)
       filters=TreeSet(EqualityFilter(Advertiser ID,213,false,false), EqualityFilter(Source,2,true,false))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:14:28.195 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:14:28.195 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = false
09:14:28.195 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - runSingleEngineQuery
09:14:28.195 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set()
09:14:28.196 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet()
09:14:28.200 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.212 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.212 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query option defined!
09:14:28.212 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
09:14:28.217 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.223 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.223 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.227 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.227 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.235 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 15165aeb-5e18-4b5a-bc1e-e6cf2283b28b
09:14:28.254 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.258 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.258 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.260 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.271 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.272 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.279 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.292 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.296 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.296 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.302 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.302 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.315 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.319 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.319 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.325 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.329 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.329 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
AuthValidatorTest:
- Create a ResultSetTransformer
- toPublicFact should fail with two dim columns with same name
- newFact should fail with columns with different engine requirement
- generate hive expression with +
- register duplicate column in one column context should fail
- generate hive expression with -
- successfully derive dependent columns from HiveDerivedExpression
- generate hive expression with *
- generate hive expression with /
- render column that does not exist in column context should fail
- generate hive expression with /-
- successfully derive dependent columns from HiveDerivedExpression TRIM
09:14:28.351 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.355 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.355 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.357 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.360 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.360 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- registering Postgres query generation multiple times should fail
- newFact should fail with fact annotated with different engine requirement
- generate hive expression with SUM
- generate hive expression with nested derivation
- successfully derive dependent columns from HiveShardingExpression
- generate hive expression with MAX
09:14:28.364 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.365 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.369 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.369 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- newFact should fail with column annotated with different engine requirement
09:14:28.373 INFO  [ScalaTest-8-running-CompleteRowListTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 196221cf-a233-4572-86e8-4faf24c09194
- generate hive expression with TIMESTAMP_TO_FORMATTED_DATE
- generate hive expression with GET_INTERVAL_DATE
- successfully derive dependent columns from OracleDerivedExpression
- toPublicFact should fail with two fact columns with same alias
- generate hive expression with DECODE
- generate hive expression with COALESCE
- generate hive expression with GET_A_BY_B
- newFact should fail if there's no reference column fo derived fact column
- generate hive expression with GET_A_BY_B_PLUS_C
- toPublicFact should fail with one dim and one fact columns with same alias
- successfully derive dependent columns from PostgresDerivedExpression
- newFact should fail if there's no reference column fo derived dim column
- generate hive expression with GET_CONDITIONAL_A_BY_B
- generate oracle expression with +
- newFact should fail if ddl annotation is of a different engine other than the engine of the fact
- generate oracle expression with -
09:14:28.389 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.389 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.405 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
- successfully derive dependent columns from OracleDerivedExpression NVL
- generate oracle expression with *
- newFact should fail if derived expression is not defined for derived columns
09:14:28.413 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.413 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.416 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
- toPublicFact should fail with dim column name referencing non-existing column in fact
- generate oracle expression with /
- successfully derive dependent columns from PostgresDerivedExpression NVL
- generate oracle expression with /-
- generate oracle expression with sum
- isCubeDefined should return true on valid registered cube
- successfully derive dependent columns from OracleDerivedExpression TRUNC
- generate oracle expression with nested derivation
09:14:28.422 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.422 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- generate oracle expression with max
- generate oracle expression with TIMESTAMP_TO_FORMATTED_DATE
- generate oracle expression with GET_INTERVAL_DATE
- toPublicFact should fail with fact column name referencing non-existing column in fact
- successfully derive dependent columns from PostgresDerivedExpression TRUNC
- Successful ResultSet conversion
- generate oracle expression with DECODE
09:14:28.454 INFO  [ScalaTest-3-running-QueryPipelineWithFallbackTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain defined
09:14:28.457 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:28.462 ERROR [ScalaTest-3-running-QueryPipelineWithFallbackTest] c.y.m.c.q.QueryPipelineWithFallback - Primary query chain failed, recovering with fall back
java.lang.IllegalArgumentException: Executor not found for engine=Druid, query=GroupByDruidQuery
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$7(QueryPipeline.scala:264)
	at scala.Option.fold(Option.scala:251)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:265)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.$anonfun$execute$1(QueryPipeline.scala:127)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.execute(QueryPipeline.scala:126)
09:14:28.462 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.463 ERROR [ScalaTest-3-running-QueryPipelineWithFallbackTest] c.y.m.c.q.QueryPipelineWithFallback - Primary query chain failed, recovering with fall back
java.lang.IllegalArgumentException: Executor not found for engine=Druid, query=GroupByDruidQuery
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$7(QueryPipeline.scala:264)
	at scala.Option.fold(Option.scala:251)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:265)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.$anonfun$execute$3(QueryPipeline.scala:140)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.execute(QueryPipeline.scala:139)
09:14:28.465 WARN  [ScalaTest-8-running-CompleteRowListTest] c.y.m.c.q.InMemRowList - Failed to get total row count.
Failure(java.lang.IllegalArgumentException: requirement failed: TOTALROWS not defined in alias map)
09:14:28.469 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:28.469 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:28.469 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:28.479 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.479 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.483 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.483 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.486 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.486 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.490 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.498 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.498 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.500 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:14:28.505 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:28.505 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:28.505 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:28.518 INFO  [ScalaTest-9-running-MultiQueryTest] c.y.m.c.q.QueryChain - No data from driving query, running fall back query for MultiQuery
09:14:28.520 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.520 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.531 INFO  [ScalaTest-12-running-QueryContextTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.536 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:28.536 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:28.536 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
SafeCloseableTest:
- generate oracle expression with COALESCE
- Const Cols Tests
- generate oracle expression with TO_CHAR
- successfully doWork
09:14:28.541 INFO  [ScalaTest-12-running-QueryContextTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 8693e149-2d09-4460-8de3-a2e8cc34d9b3
- generate Postgres expression with +
- generate Postgres expression with -
- generate Postgres expression with *
- generate Postgres expression with /
09:14:28.542 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.542 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- generate Postgres expression with /-
- toPublicFact should fail with forced filter referencing non-existing column in fact
- generate Postgres expression with sum
- Attempt to validate columns in the CC
09:14:28.547 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.547 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:14:28.552 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.553 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.553 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.557 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.557 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- generate Postgres expression with nested derivation
- generate Postgres expression with max
- generate Postgres expression with TIMESTAMP_TO_FORMATTED_DATE
- generate Postgres expression with GET_INTERVAL_DATE
- toPublicFact should fail with empty max days window
- isCubeDefined with revision should return true on valid registered cube
- DruidConstDerFactCol test
09:14:28.593 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.594 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.599 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.599 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.607 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.608 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:28.608 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:28.608 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:28.611 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to d8044a7e-7fc2-4c86-a81e-9a74a6c03531
09:14:28.611 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.611 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.623 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:28.623 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:28.623 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:28.626 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.626 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.627 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.628 WARN  [ScalaTest-18-running-ReportingRequestTest] c.y.m.c.r.Parameter$ - Found unrecognized param Content-Type
09:14:28.642 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-campaign filters:Map(Campaign Name -> TreeSet(EqualityFilter(Campaign Name,MegaCampaign,false,false)), Source -> TreeSet(EqualityFilter(Source,2,true,false)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:14:28.642 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:28.642 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:28.642 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:28.642 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:28.652 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - hasLowCardinalityDimFilters=true forceDimDriven=false hasDimAndFactOperations=true
09:14:28.653 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - isFactDriven=false hasIndexInOutput=true dimEngines=Set(Oracle, Postgres, Presto, Hive) dimCandidates=TreeSet(campaign)
09:14:28.653 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Druid, Hive, Presto)
09:14:28.653 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact_table_keywords engine=Oracle cost=800 level=9998 cardinalityPreference=2147483647
09:14:28.653 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact0_table_keywords engine=Oracle cost=800 level=9999 cardinalityPreference=2147483647
09:14:28.654 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats
       requestCols=Vector(DimColumnInfo(Campaign ID), FactColumnInfo(Impressions), DimColumnInfo(Campaign Name), DimColumnInfo(Campaign Status), FactColumnInfo(CTR))
       requestSortByCols=Vector(DimSortByColumnInfo(Campaign Name,ASC))
       dimColumnAliases=Set(Campaign ID, Campaign Name, Campaign Status)
       dimCardinalityEstimate=None
       factCost=Map((fact_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true), (fact0_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true))
       factSortByMap=Map()
       dimSortByMap=Map(Campaign Name -> ASC)
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=true
       hasDimFilters=true
       hasNonFKDimFilters=true
       hasFactSortBy=false
       hasDimSortBy=true
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=true
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=true
       hasLowCardinalityDimFilters=true
       isFactDriven=false
       forceDimDriven=false
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=SyncRequest
       startIndex=-1
       maxRows=100
       includeRowCount=true
       hasDimAndFactOperations=true
       isTimeSeries=false
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true))
       factSchemaRequiredAliasesMap=Map(fact0_table_keywords -> Set(Advertiser ID), fact_table_keywords -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(campaign -> InnerJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(Advertiser ID, Campaign Name)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=true
       hasNonFKNonForceFilters=true
       hasNonFKSortBy=true
       hasNonFKNonPKSortBy=true
       hasLowCardinalityFilter=true
       hasPKRequested=true
       hasNonPushDownFilters=true
     )
     
09:14:28.654 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=campaign_oracle
       publicDim.name=campaign
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,213,false,false)), EqualityFilter(Campaign Name,MegaCampaign,false,false))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=true
       hasNonFKSortBy=true
       hasNonPushDownFilters=true
       hasPKRequested=true
     
09:14:28.654 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=fact_table_keywords
       publicFact.name=k_stats
       fkCols=TreeSet(advertiser_id, campaign_id)
       nonFkCols=Set(CTR, impressions, stats_source)
       requestCols=Set(CTR, campaign_id, impressions)
       filterCols=Set(stats_source, advertiser_id)
       factCost=800
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(advertiser_id -> Advertiser ID, campaign_id -> Campaign ID, stats_source -> Source)
       factColMapping=Map(impressions -> Impressions, CTR -> CTR)
       filters=TreeSet(EqualityFilter(Advertiser ID,213,false,false), EqualityFilter(Source,2,true,false))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:14:28.654 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:14:28.654 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = false
09:14:28.654 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - runSingleEngineQuery
09:14:28.655 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set()
09:14:28.655 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet()
09:14:28.658 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.658 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.659 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.659 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query option defined!
09:14:28.659 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
09:14:28.679 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.683 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.684 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.686 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.686 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.688 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.688 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.690 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:28.690 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:28.690 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:28.695 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.695 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.702 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to f05eeb7c-efe8-4f98-98c7-9dea39fdefb7
09:14:28.706 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.720 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.720 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.741 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.741 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.750 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:28.750 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
PostgresDDLGeneratorTest:
- generate Postgres expression with DECODE
- generate Postgres expression with DECODE_DIM
- toPublicFact should fail with empty max days look back window
- generate Postgres expression with COALESCE
09:14:28.754 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
- generate Postgres expression with TO_CHAR
- Should correctly display source columns when the source is also derived
09:14:28.755 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
- newFact should fail if columns have difference column context
09:14:28.755 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.755 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- toPublicFact should succeed with forced filter at fact level which exists
- Validation on FactCol with DruidFilteredRollup should fail if filter refers to invalid dimension column
- Validation on FactCol with DruidFilteredListRollup should fail if filter refers to invalid dimension column
- Should create a column from a tree of derivation
- withNewSchema should success given different schemas
- isCubeDefined should return false on invalid cube
- withAlternativeEngine should success with new name and new engine
- Validation on FactCol with DruidFilteredRollup should fail if it refers to non-existent fact column
- String with quotes
09:14:28.760 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.760 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.761 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.767 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.767 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.780 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.781 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- Arbitrary String Patterns
- toPublicFact should fail with forced filter at fact level which does not exist
- Wildcard Escaping
- Semicolon statement
09:14:28.785 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 9662f396-8b27-462e-9f3d-81fbc80dd4a8
- String with quotes
- newRollup should succeed with discarding foreign key
- Arbitrary String Patterns
- Invalid IntType
- Reject the facts which are running out of lookback days and days window
- Wildcard Escaping
- Validation on DimCol with DruidFuncDimCol should fail if it refers to non-existent Dim column
09:14:28.788 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
- Semicolon statement
- toPublicFact should fail with forced filter at fact level which does not support filter operation
- build should fail on missing dimension table on foreign keys for fact
- Invalid IntType
09:14:28.789 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
- valid IntType
- withNewSchema should success given different schemas and copy force filters
- BetweenFilter with a defined grain should modify the output result to include it.
- build should fail on missing dimension table on foreign keys for dimension
- Invalid DecType
- valid DecType
09:14:28.794 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.795 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.798 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.799 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- valid DateType
- toPublicFact should succeed with forced filter at fact level which does support filter operation
- Validation on PostResultDerivedFactCol should fail if it refers to non-existent column
- invalid DateType
- withNewSchema should fail given the same schemas
- valid IntType
- invalid TimeStampType
09:14:28.816 INFO  [ScalaTest-3-running-QueryPipelineWithFallbackTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to fb77fa98-1a2b-4f9c-9a33-f4464ef69fd0
09:14:28.817 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:28.817 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:28.817 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:28.817 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.817 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.821 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.821 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.850 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.852 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.853 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.853 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.857 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.857 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.863 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:28.863 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:28.863 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:28.867 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.868 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.875 INFO  [ScalaTest-3-running-QueryPipelineWithFallbackTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to dec19a11-478e-45d7-b15a-7f6b8b20d643
09:14:28.892 INFO  [ScalaTest-3-running-QueryPipelineWithFallbackTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.892 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.894 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.894 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.896 INFO  [ScalaTest-3-running-QueryPipelineWithFallbackTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to b98ce8d4-3afe-43f9-8673-9d1d73ffad06
09:14:28.899 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:28.900 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:28.900 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:28.907 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:28.907 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:28.907 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.907 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.907 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:28.913 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.913 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.922 INFO  [ScalaTest-3-running-QueryPipelineWithFallbackTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Failure(java.lang.IllegalArgumentException: requirement failed: Failed to find best candidate, forceEngine=None, engine disqualifyingSet=Set(Druid, Oracle, Hive), candidates=Set((fact_druid,Druid), (fact_hive,Hive), (fact_oracle,Oracle)))
09:14:28.931 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:28.931 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-campaign filters:Map(Campaign Name -> TreeSet(EqualityFilter(Campaign Name,MegaCampaign,false,false)), Source -> TreeSet(EqualityFilter(Source,2,true,false)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:14:28.932 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:28.932 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:28.932 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:28.932 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:28.933 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - hasLowCardinalityDimFilters=true forceDimDriven=false hasDimAndFactOperations=true
09:14:28.933 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - isFactDriven=false hasIndexInOutput=true dimEngines=Set(Oracle, Postgres, Presto, Hive) dimCandidates=TreeSet(campaign)
09:14:28.933 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:28.933 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Druid, Hive, Presto)
09:14:28.933 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:28.934 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:28.934 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact_table_keywords engine=Oracle cost=800 level=9998 cardinalityPreference=2147483647
09:14:28.934 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact0_table_keywords engine=Oracle cost=800 level=9999 cardinalityPreference=2147483647
09:14:28.934 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.934 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.935 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats
       requestCols=Vector(DimColumnInfo(Campaign ID), FactColumnInfo(Impressions), DimColumnInfo(Campaign Name), DimColumnInfo(Campaign Status), FactColumnInfo(CTR))
       requestSortByCols=Vector(DimSortByColumnInfo(Campaign Name,ASC))
       dimColumnAliases=Set(Campaign ID, Campaign Name, Campaign Status)
       dimCardinalityEstimate=None
       factCost=Map((fact_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true), (fact0_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true))
       factSortByMap=Map()
       dimSortByMap=Map(Campaign Name -> ASC)
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=true
       hasDimFilters=true
       hasNonFKDimFilters=true
       hasFactSortBy=false
       hasDimSortBy=true
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=true
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=true
       hasLowCardinalityDimFilters=true
       isFactDriven=false
       forceDimDriven=false
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=SyncRequest
       startIndex=-1
       maxRows=100
       includeRowCount=true
       hasDimAndFactOperations=true
       isTimeSeries=false
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true))
       factSchemaRequiredAliasesMap=Map(fact0_table_keywords -> Set(Advertiser ID), fact_table_keywords -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(campaign -> InnerJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(Advertiser ID, Campaign Name)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=true
       hasNonFKNonForceFilters=true
       hasNonFKSortBy=true
       hasNonFKNonPKSortBy=true
       hasLowCardinalityFilter=true
       hasPKRequested=true
       hasNonPushDownFilters=true
     )
     
09:14:28.935 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=campaign_oracle
       publicDim.name=campaign
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,213,false,false)), EqualityFilter(Campaign Name,MegaCampaign,false,false))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=true
       hasNonFKSortBy=true
       hasNonPushDownFilters=true
       hasPKRequested=true
     
09:14:28.935 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=fact_table_keywords
       publicFact.name=k_stats
       fkCols=TreeSet(advertiser_id, campaign_id)
       nonFkCols=Set(CTR, impressions, stats_source)
       requestCols=Set(CTR, campaign_id, impressions)
       filterCols=Set(stats_source, advertiser_id)
       factCost=800
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(advertiser_id -> Advertiser ID, campaign_id -> Campaign ID, stats_source -> Source)
       factColMapping=Map(impressions -> Impressions, CTR -> CTR)
       filters=TreeSet(EqualityFilter(Advertiser ID,213,false,false), EqualityFilter(Source,2,true,false))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:14:28.935 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:14:28.935 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = false
09:14:28.935 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - runSingleEngineQuery
09:14:28.935 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set()
09:14:28.936 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet()
- set and check requestCol
LongRangeTest:
09:14:28.943 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:28.943 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:28.943 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:28.947 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.947 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:28.953 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:28.953 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query option defined!
09:14:28.953 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
- Invalid DecType
- successfully test an element in range
- successfully test an element out of range
- valid DecType
- successfully test an element is before range
- successfully test an element is not before range
- successfully render DateTimeBetweenFilter with daily and hourly grain and date type on oracle engine
- valid DateType
- fail to create an invalid range
09:14:29.003 INFO  [ScalaTest-7-running-PartialRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.003 INFO  [ScalaTest-7-running-PartialRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.032 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.032 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.038 INFO  [ScalaTest-6-running-OffHeapRowListTest] c.y.m.c.q.OffHeapRowList$ - Created tmp dir to store off heap row list /Users/lgadde/git/Native-Ads/maha/core/target/off_heap_row_list
09:14:29.039 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:29.040 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:29.040 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:29.043 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.043 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.050 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:29.050 ERROR [ScalaTest-7-running-PartialRowListTest] c.y.m.c.q.FactDrivenIndexedRowList - Index alias (Campaign ID) value is null on addRow, dropping row : Row(Map(Campaign ID -> 1, Campaign Status -> 4, Day -> 0, Impressions -> 2, Campaign Name -> 3, CTR -> 5),ArrayBuffer(2016-10-11, null, 100, null, null, 1.11))
09:14:29.050 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:29.050 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:29.054 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.054 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.057 ERROR [ScalaTest-7-running-PartialRowListTest] c.y.m.c.q.FactDrivenIndexedRowList - Index alias (Campaign ID) value is null on updateRow, dropping row : Row(Map(Campaign ID -> 1, Campaign Status -> 4, Day -> 0, Impressions -> 2, Campaign Name -> 3, CTR -> 5),ArrayBuffer(null, null, null, null, null, null))
09:14:29.062 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:29.062 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:29.062 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:29.065 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.065 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
DaysUtilsTest:
- Fact with FK flag should fail
- successfully render DateTimeBetweenFilter with daily and hourly grain and timestamp type on oracle engine
- invalid DateType
- successfully render DateTimeBetweenFilter with daily and hourly grain and date type on postgres engine
- invalid TimeStampType
09:14:29.082 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:29.082 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:29.082 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:29.084 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.084 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.091 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.092 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.091 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.099 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.104 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:29.105 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:29.106 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:29.113 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.114 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.137 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:29.137 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:29.137 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:29.162 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.162 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.180 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:29.180 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:29.180 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:29.183 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.183 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.184 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.185 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.187 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-campaign filters:Map(Campaign Name -> TreeSet(EqualityFilter(Campaign Name,MegaCampaign,false,false)), Source -> TreeSet(EqualityFilter(Source,2,true,false)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:14:29.188 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:29.188 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:29.189 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:29.189 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:29.190 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Druid)
09:14:29.190 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact_table_keywords engine=Oracle cost=800 level=9998 cardinalityPreference=2147483647
09:14:29.190 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact0_table_keywords engine=Oracle cost=800 level=9999 cardinalityPreference=2147483647
09:14:29.191 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats
       requestCols=Vector(FactColumnInfo(Campaign ID), FactColumnInfo(Impressions), DimColumnInfo(Campaign Name), DimColumnInfo(Campaign Status), FactColumnInfo(CTR))
       requestSortByCols=Vector(DimSortByColumnInfo(Campaign Name,ASC))
       dimColumnAliases=Set(Campaign Name, Campaign Status)
       dimCardinalityEstimate=None
       factCost=Map((fact_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true), (fact0_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true))
       factSortByMap=Map()
       dimSortByMap=Map(Campaign Name -> ASC)
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=true
       hasDimFilters=true
       hasNonFKDimFilters=true
       hasFactSortBy=false
       hasDimSortBy=true
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=true
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=true
       hasLowCardinalityDimFilters=true
       isFactDriven=true
       forceDimDriven=false
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=AsyncRequest
       startIndex=0
       maxRows=200
       includeRowCount=false
       hasDimAndFactOperations=true
       isTimeSeries=false
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true))
       factSchemaRequiredAliasesMap=Map(fact0_table_keywords -> Set(Advertiser ID), fact_table_keywords -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(campaign -> InnerJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(Advertiser ID, Campaign Name)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=true
       hasNonFKNonForceFilters=true
       hasNonFKSortBy=true
       hasNonFKNonPKSortBy=true
       hasLowCardinalityFilter=true
       hasPKRequested=true
       hasNonPushDownFilters=true
     )
     
09:14:29.191 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=campaign_oracle
       publicDim.name=campaign
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,213,false,false)), EqualityFilter(Campaign Name,MegaCampaign,false,false))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=true
       hasNonFKSortBy=true
       hasNonPushDownFilters=true
       hasPKRequested=true
     
09:14:29.191 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=fact_table_keywords
       publicFact.name=k_stats
       fkCols=TreeSet(advertiser_id, campaign_id)
       nonFkCols=Set(CTR, impressions, stats_source)
       requestCols=Set(CTR, campaign_id, impressions)
       filterCols=Set(stats_source, advertiser_id)
       factCost=800
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(advertiser_id -> Advertiser ID, campaign_id -> Campaign ID, stats_source -> Source)
       factColMapping=Map(impressions -> Impressions, CTR -> CTR)
       filters=TreeSet(EqualityFilter(Advertiser ID,213,false,false), EqualityFilter(Source,2,true,false))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:14:29.191 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:14:29.191 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = false
09:14:29.192 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set()
09:14:29.192 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet()
09:14:29.195 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.196 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.196 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
09:14:29.201 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Advertiser ID
09:14:29.202 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Advertiser ID
09:14:29.206 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:29.206 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:29.206 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:29.217 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.217 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.231 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to fd883efd-163f-43e1-947e-84c22cfb632d
09:14:29.238 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-campaign filters:Map(Campaign Name -> TreeSet(EqualityFilter(Campaign Name,MegaCampaign,false,false)), Source -> TreeSet(EqualityFilter(Source,2,true,true)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:14:29.238 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:29.238 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:29.238 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:29.239 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:29.240 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - hasLowCardinalityDimFilters=true forceDimDriven=false hasDimAndFactOperations=true
09:14:29.240 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - isFactDriven=false hasIndexInOutput=true dimEngines=Set(Oracle, Postgres, Presto, Hive) dimCandidates=TreeSet(campaign)
09:14:29.240 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Druid, Hive, Presto)
09:14:29.240 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact2 engine=Oracle cost=800 level=9998 cardinalityPreference=2147483647
09:14:29.240 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact1 engine=Oracle cost=800 level=9999 cardinalityPreference=2147483647
09:14:29.241 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats
       requestCols=Vector(DimColumnInfo(Campaign ID), FactColumnInfo(Impressions), DimColumnInfo(Campaign Name), DimColumnInfo(Campaign Status), FactColumnInfo(CTR))
       requestSortByCols=Vector(DimSortByColumnInfo(Campaign Name,ASC))
       dimColumnAliases=Set(Campaign ID, Campaign Name, Campaign Status)
       dimCardinalityEstimate=None
       factCost=Map((fact2,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true), (fact1,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true))
       factSortByMap=Map()
       dimSortByMap=Map(Campaign Name -> ASC)
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=true
       hasDimFilters=true
       hasNonFKDimFilters=true
       hasFactSortBy=false
       hasDimSortBy=true
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=true
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=true
       hasLowCardinalityDimFilters=true
       isFactDriven=false
       forceDimDriven=false
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=SyncRequest
       startIndex=-1
       maxRows=100
       includeRowCount=true
       hasDimAndFactOperations=true
       isTimeSeries=false
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true))
       factSchemaRequiredAliasesMap=Map(fact1 -> Set(Advertiser ID), fact2 -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(campaign -> InnerJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(Advertiser ID, Campaign Name)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=true
       hasNonFKNonForceFilters=true
       hasNonFKSortBy=true
       hasNonFKNonPKSortBy=true
       hasLowCardinalityFilter=true
       hasPKRequested=true
       hasNonPushDownFilters=true
     )
     
09:14:29.241 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=campaign_oracle
       publicDim.name=campaign
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,213,false,false)), EqualityFilter(Campaign Name,MegaCampaign,false,false))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=true
       hasNonFKSortBy=true
       hasNonPushDownFilters=true
       hasPKRequested=true
     
09:14:29.241 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=fact2
       publicFact.name=k_stats
       fkCols=TreeSet(advertiser_id, campaign_id)
       nonFkCols=Set(CTR, impressions, stats_source)
       requestCols=Set(CTR, campaign_id, impressions)
       filterCols=Set(stats_source, advertiser_id)
       factCost=800
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(advertiser_id -> Advertiser ID, campaign_id -> Campaign ID, stats_source -> Source)
       factColMapping=Map(impressions -> Impressions, CTR -> CTR)
       filters=TreeSet(EqualityFilter(Advertiser ID,213,false,false), EqualityFilter(Source,2,true,true))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:14:29.241 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:14:29.241 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = false
09:14:29.241 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - runSingleEngineQuery
09:14:29.242 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set(IsGrainOptimized(false), ForceDimDriven(false), IsIndexOptimized(true))
09:14:29.242 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet(CONDITIONAL_HINT1, CONDITIONAL_HINT2)
09:14:29.245 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.245 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.254 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.254 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.258 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.258 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query option defined!
09:14:29.258 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
09:14:29.260 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.NoopExecutionLifecycleListener - acquired : SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT co1.id "Campaign ID", coalesce(f0."impressions", 1) "Impressions", co1.campaign_name "Campaign Name", co1."Campaign Status" "Campaign Status", ROUND(f0."CTR", 10) "CTR", Count(*) OVER() TOTALROWS
      FROM (SELECT /*+ PUSH_PRED PARALLEL_INDEX(cb_campaign_k_stats 4) CONDITIONAL_HINT1 CONDITIONAL_HINT2 */
                   campaign_id, SUM(impressions) AS "impressions", (SUM(CASE WHEN impressions = 0 THEN 0.0 ELSE clicks / impressions END)) AS "CTR"
            FROM fact2 FactAlias
            WHERE (advertiser_id = 213) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY campaign_id
            
           ) f0
           INNER JOIN
                (SELECT /*+ CampaignHint */ campaign_name, DECODE(status, 'ON', 'ON', 'OFF') AS "Campaign Status", id, advertiser_id
            FROM campaign_oracle
            WHERE (advertiser_id = 213) AND (lower(campaign_name) = lower('MegaCampaign'))
            ORDER BY 1 ASC NULLS LAST ) co1 
            ON (f0.campaign_id = co1.id)

) 
   ) WHERE ROWNUM <= 100) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 100
09:14:29.262 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:29.262 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.NoopExecutionLifecycleListener - started : SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT co1.id "Campaign ID", coalesce(f0."impressions", 1) "Impressions", co1.campaign_name "Campaign Name", co1."Campaign Status" "Campaign Status", ROUND(f0."CTR", 10) "CTR", Count(*) OVER() TOTALROWS
      FROM (SELECT /*+ PUSH_PRED PARALLEL_INDEX(cb_campaign_k_stats 4) CONDITIONAL_HINT1 CONDITIONAL_HINT2 */
                   campaign_id, SUM(impressions) AS "impressions", (SUM(CASE WHEN impressions = 0 THEN 0.0 ELSE clicks / impressions END)) AS "CTR"
            FROM fact2 FactAlias
            WHERE (advertiser_id = 213) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY campaign_id
            
           ) f0
           INNER JOIN
                (SELECT /*+ CampaignHint */ campaign_name, DECODE(status, 'ON', 'ON', 'OFF') AS "Campaign Status", id, advertiser_id
            FROM campaign_oracle
            WHERE (advertiser_id = 213) AND (lower(campaign_name) = lower('MegaCampaign'))
            ORDER BY 1 ASC NULLS LAST ) co1 
            ON (f0.campaign_id = co1.id)

) 
   ) WHERE ROWNUM <= 100) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 100
09:14:29.262 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:29.262 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:29.263 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.NoopExecutionLifecycleListener - completed : SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT co1.id "Campaign ID", coalesce(f0."impressions", 1) "Impressions", co1.campaign_name "Campaign Name", co1."Campaign Status" "Campaign Status", ROUND(f0."CTR", 10) "CTR", Count(*) OVER() TOTALROWS
      FROM (SELECT /*+ PUSH_PRED PARALLEL_INDEX(cb_campaign_k_stats 4) CONDITIONAL_HINT1 CONDITIONAL_HINT2 */
                   campaign_id, SUM(impressions) AS "impressions", (SUM(CASE WHEN impressions = 0 THEN 0.0 ELSE clicks / impressions END)) AS "CTR"
            FROM fact2 FactAlias
            WHERE (advertiser_id = 213) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY campaign_id
            
           ) f0
           INNER JOIN
                (SELECT /*+ CampaignHint */ campaign_name, DECODE(status, 'ON', 'ON', 'OFF') AS "Campaign Status", id, advertiser_id
            FROM campaign_oracle
            WHERE (advertiser_id = 213) AND (lower(campaign_name) = lower('MegaCampaign'))
            ORDER BY 1 ASC NULLS LAST ) co1 
            ON (f0.campaign_id = co1.id)

) 
   ) WHERE ROWNUM <= 100) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 100
MultiEngineQueryTest:
HiveQueryGeneratorTest:
- fake truncated hour, followed by real hour
- toPublicFact should fail if forced filter columns ARE in the base dim, but resolve to the same base column (duplicate where clause)
09:14:29.267 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.267 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- withNewSchema should fail given a non-existing from
- successfully close on failed doWork
- successfully render DateTimeBetweenFilter with daily and hourly grain and timestamp type on postgres engine
- successfully render DateTimeBetweenFilter with daily and hourly grain and date type on hive engine
- successfully render DateTimeBetweenFilter with daily and hourly grain and timestamp type on hive engine
- successfully render DateTimeBetweenFilter with daily and hourly grain and date type on presto engine
- newRollup should succeed with NoopSchema and no availableOnwardsDate
- successfully render DateTimeBetweenFilter with daily and hourly grain and timestamp type on presto engine
- withAlternativeEngine should success with new name and new engine without copying force filters
- toPublicFact should fail if a declared forced filter doesn't have isForcedFilter=true
- Attempt to refactor a filter success cases
- successfully render DateTimeBetweenFilter with input zone offset, daily and hourly grain and date type on oracle engine
- successfully render DateTimeBetweenFilter with input zone offset, daily and hourly grain and timestamp type on oracle engine
- newRollup should fail is trying to make a rollup without available onwards
- Filter Types in Druid should return valid MaxDate
- withNewSchema should fail given the same names
- Attempt to refactor a filter failure cases
09:14:29.288 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:29.289 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:29.290 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:29.290 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:29.291 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.291 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.296 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.296 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.304 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.304 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.311 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:29.311 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:29.311 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:29.312 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to c1aef41e-fec9-4bbf-942f-d5ef90060a26
09:14:29.313 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:29.315 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.315 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.323 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.323 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.328 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:29.328 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:29.328 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:29.331 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.331 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.342 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:29.342 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:29.342 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:29.345 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.345 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.359 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.359 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.360 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.360 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
DataTypeTest:
- toPublicFact should succeed with forced filter at public fact level which is overridden at fact level
- Invalid from, to
09:14:29.369 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.369 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.378 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:29.378 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:29.378 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:29.381 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:29.381 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:29.381 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:29.385 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.385 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.405 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.405 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.418 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.419 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.426 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 76339940-2030-41bd-ae52-e0c9bc01dcfd
09:14:29.429 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:29.429 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:29.429 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:29.433 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.433 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
SELECT CAST(advertiser_id as VARCHAR) AS advertiser_id, CAST(mang_impressions as VARCHAR) AS mang_impressions, CAST(network_id as VARCHAR) AS network_id
FROM(
SELECT COALESCE(CAST(account_id as bigint), 0) advertiser_id, COALESCE(CAST(impressions as bigint), 1) mang_impressions, COALESCE(CAST(network_type as VARCHAR), 'NA') network_id
FROM(SELECT CASE WHEN (network_type IN ('TEST_PUBLISHER')) THEN 'Test Publisher' WHEN (network_type IN ('CONTENT_S')) THEN 'Content Secured' WHEN (network_type IN ('EXTERNAL')) THEN 'External Partners' WHEN (network_type IN ('INTERNAL')) THEN 'Internal Properties' ELSE 'NONE' END network_type, account_id, SUM(impressions) impressions
FROM s_stats_fact_underlying
WHERE (account_id = 12345) AND (stats_date >= '2020-11-03' AND stats_date <= '2020-11-10')
GROUP BY CASE WHEN (network_type IN ('TEST_PUBLISHER')) THEN 'Test Publisher' WHEN (network_type IN ('CONTENT_S')) THEN 'Content Secured' WHEN (network_type IN ('EXTERNAL')) THEN 'External Partners' WHEN (network_type IN ('INTERNAL')) THEN 'Internal Properties' ELSE 'NONE' END, account_id
HAVING (SUM(impressions) < 1608) AND (MAX(max_bid) = SUM(spend))
       )
ssfu0


          )
        queryAlias LIMIT 20009:14:29.437 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-campaign filters:Map(Campaign Name -> TreeSet(EqualityFilter(Campaign Name,MegaCampaign,false,false)), Source -> TreeSet(EqualityFilter(Source,2,true,false)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:14:29.437 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:29.437 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:29.437 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:29.437 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:29.439 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - hasLowCardinalityDimFilters=true forceDimDriven=false hasDimAndFactOperations=true
09:14:29.439 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - isFactDriven=false hasIndexInOutput=true dimEngines=Set(Oracle, Postgres, Presto, Hive) dimCandidates=TreeSet(campaign)
09:14:29.439 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Druid, Hive, Presto)
09:14:29.439 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact_table_keywords engine=Oracle cost=800 level=9998 cardinalityPreference=2147483647
09:14:29.439 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact0_table_keywords engine=Oracle cost=800 level=9999 cardinalityPreference=2147483647
09:14:29.440 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats
       requestCols=Vector(DimColumnInfo(Campaign ID), FactColumnInfo(Impressions), DimColumnInfo(Campaign Name), DimColumnInfo(Campaign Status), FactColumnInfo(CTR))
       requestSortByCols=Vector(DimSortByColumnInfo(Campaign Name,ASC))
       dimColumnAliases=Set(Campaign ID, Campaign Name, Campaign Status)
       dimCardinalityEstimate=None
       factCost=Map((fact_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true), (fact0_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true))
       factSortByMap=Map()
       dimSortByMap=Map(Campaign Name -> ASC)
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=true
       hasDimFilters=true
       hasNonFKDimFilters=true
       hasFactSortBy=false
       hasDimSortBy=true
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=true
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=true
       hasLowCardinalityDimFilters=true
       isFactDriven=false
       forceDimDriven=false
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=SyncRequest
       startIndex=-1
       maxRows=100
       includeRowCount=true
       hasDimAndFactOperations=true
       isTimeSeries=false
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true))
       factSchemaRequiredAliasesMap=Map(fact0_table_keywords -> Set(Advertiser ID), fact_table_keywords -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(campaign -> InnerJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(Advertiser ID, Campaign Name)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=true
       hasNonFKNonForceFilters=true
       hasNonFKSortBy=true
       hasNonFKNonPKSortBy=true
       hasLowCardinalityFilter=true
       hasPKRequested=true
       hasNonPushDownFilters=true
     )
     
09:14:29.440 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=campaign_oracle
       publicDim.name=campaign
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,213,false,false)), EqualityFilter(Campaign Name,MegaCampaign,false,false))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=true
       hasNonFKSortBy=true
       hasNonPushDownFilters=true
       hasPKRequested=true
     
09:14:29.441 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=fact_table_keywords
       publicFact.name=k_stats
       fkCols=TreeSet(advertiser_id, campaign_id)
       nonFkCols=Set(CTR, impressions, stats_source)
       requestCols=Set(CTR, campaign_id, impressions)
       filterCols=Set(stats_source, advertiser_id)
       factCost=800
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(advertiser_id -> Advertiser ID, campaign_id -> Campaign ID, stats_source -> Source)
       factColMapping=Map(impressions -> Impressions, CTR -> CTR)
       filters=TreeSet(EqualityFilter(Advertiser ID,213,false,false), EqualityFilter(Source,2,true,false))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:14:29.441 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:14:29.441 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = false
09:14:29.441 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:29.441 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - runSingleEngineQuery
09:14:29.441 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:29.441 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:29.442 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set()
09:14:29.442 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet()
09:14:29.445 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.445 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query option defined!
09:14:29.445 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
- withAlternativeEngine should fail with non existing from
OracleDDLGeneratorTest:
- InFilter should render correct string for Oracle
- registering Hive query generation multiple times should fail
- IntType should not have negative length
- NotInFilter should render correct string for Oracle
- IntType should successfully being constructed with length and default value
- BetweenFilter should render correct string for Oracle
- test default powerset storage
- Test long list for days
- EqualityFilter should render correct string for Oracle
- newRollup should success with discarding foreign key and change of max days and max lookback
- withAlternativeEngine should fail with same engine
- LikeFilter should render correct string for Oracle
- getPrimaryKeyAlias should be able to return the primaryKey alias for specified attribute alias for dimensions
09:14:29.506 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to d5342639-1e38-43dd-bbc1-36688a64d7e3
- StrType should not have negative length
- LikeFilter should render correct string for Presto
- StrType should successfully being constructed with length and default value
- NotEqualToFilter should render correct string for Presto
- NotEqualToFilter should render correct string for Oracle
- IsNullFilter should render correct string for Oracle
- newRollUp should always discard some columns
- IsNotNullFilter should render correct string for Oracle
- fail to close on failed closeable after failed doWork
09:14:29.509 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.509 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
SELECT CONCAT_WS(',', CAST(NVL(device_id,'') AS STRING),CAST(NVL(mang_campaign_name,'') AS STRING),CAST(NVL(mang_impressions,'') AS STRING),CAST(NVL(mang_pricing_type,'') AS STRING),CAST(NVL(mang_max_price_type,'') AS STRING))
FROM(
SELECT device_id AS device_id, mang_campaign_name AS mang_campaign_name, impressions AS mang_impressions, mang_pricing_type AS mang_pricing_type, price_type AS mang_max_price_type
FROM(
SELECT CASE WHEN (device_id IN (11)) THEN 'Desktop' WHEN (device_id IN (22)) THEN 'Tablet' WHEN (device_id IN (33)) THEN 'SmartPhone' WHEN (device_id IN (-1)) THEN 'UNKNOWN' ELSE 'UNKNOWN' END device_id, getCsvEscapedString(CAST(NVL(c1.mang_campaign_name, '') AS STRING)) mang_campaign_name, SUM(impressions) AS impressions, CASE WHEN (price_type IN (1)) THEN 'CPC' WHEN (price_type IN (6)) THEN 'CPV' WHEN (price_type IN (2)) THEN 'CPA' WHEN (price_type IN (-10)) THEN 'CPE' WHEN (price_type IN (-20)) THEN 'CPF' WHEN (price_type IN (7)) THEN 'CPCV' WHEN (price_type IN (3)) THEN 'CPM' ELSE 'NONE' END mang_pricing_type, price_type AS price_type
FROM(SELECT price_type, campaign_id, device_id, SUM(impressions) impressions
FROM s_stats_fact
WHERE (account_id = 12345) AND (stats_date >= '2020-11-03' AND stats_date <= '2020-11-10')
GROUP BY price_type, campaign_id, device_id

       )
ssf0
LEFT OUTER JOIN (
SELECT campaign_name AS mang_campaign_name, id c1_id
FROM campaing_hive
WHERE ((load_time = '%DEFAULT_DIM_PARTITION_PREDICTATE%' ) AND (shard = 'all' )) AND (advertiser_id = 12345)
)
c1
ON
ssf0.campaign_id = c1.c1_id
       
GROUP BY CASE WHEN (device_id IN (11)) THEN 'Desktop' WHEN (device_id IN (22)) THEN 'Tablet' WHEN (device_id IN (33)) THEN 'SmartPhone' WHEN (device_id IN (-1)) THEN 'UNKNOWN' ELSE 'UNKNOWN' END, getCsvEscapedString(CAST(NVL(c1.mang_campaign_name, '') AS STRING)), CASE WHEN (price_type IN (1)) THEN 'CPC' WHEN (price_type IN (6)) THEN 'CPV' WHEN (price_type IN (2)) THEN 'CPA' WHEN (price_type IN (-10)) THEN 'CPE' WHEN (price_type IN (-20)) THEN 'CPF' WHEN (price_type IN (7)) THEN 'CPCV' WHEN (price_type IN (3)) THEN 'CPM' ELSE 'NONE' END, price_type
) OgbQueryAlias
) queryAlias LIMIT 200
       
09:14:29.548 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 7228e326-88fd-43e8-bf8f-9815b553673f
09:14:29.570 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.570 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.576 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
- withAlternativeEngine should fail with existing name
- IsNullFilter should render correct string for Presto
- IsNotNullFilter should render correct string for Presto
- InFilter should render correct string for Hive
- NotInFilter should render correct string for Hive
- BetweenFilter should render correct string for Hive
09:14:29.579 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
- EqualityFilter should render correct string for Hive
RequestModelTest:
- LikeFilter should render correct string for Hive
- NotEqualToFilter should render correct string for Hive
- IsNullFilter should render correct string for Hive
- IsNotNullFilter should render correct string for Hive
- AndFilter should render combined filters with AND
- withAlternativeEngine should fail with existing name after a rollup
- OrFilter should render combined filters with OR
- PreRenderedAndFilter should render combined filters with AND
- PreRenderedOrFilter should render combined filters with OR
- withAlternativeEngine should fail if tableMap is empty
- DecType should not have negative length
- withAlternativeEngine should fail with existing engine
- OrFilter should be able to successfully render with an alias.
- DecType should not have negative scale
- newRollup should succeed with 2 rollups
- DecType should not have scale that's larger than the length
- DecType should successfully being constructed with length and default
- Get all hours for a day
- DateType with invalid format should fail
- DecType success cases
- Joda should not skip one hour (2nd hour) as daylight saving starts
- newRollup should succeed when discarding column that is not a foreign key dim col
- TimestampType test for valid/invalid format
09:14:29.618 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to f72618e9-308d-41a0-9b07-0b3ab1389204
09:14:29.623 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.623 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.630 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:29.632 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.632 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.646 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.646 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.655 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Keyword ID
09:14:29.658 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-campaign filters:Map(Campaign Name -> TreeSet(EqualityFilter(Campaign Name,MegaCampaign,false,false)), Source -> TreeSet(EqualityFilter(Source,2,true,false)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:14:29.658 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:29.658 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:29.658 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:29.658 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:29.659 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Keyword ID
09:14:29.660 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - hasLowCardinalityDimFilters=true forceDimDriven=false hasDimAndFactOperations=true
09:14:29.660 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - isFactDriven=false hasIndexInOutput=true dimEngines=Set(Oracle, Postgres, Presto, Hive) dimCandidates=TreeSet(campaign)
09:14:29.660 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Druid, Hive, Presto)
09:14:29.660 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact_table_keywords engine=Oracle cost=800 level=9998 cardinalityPreference=2147483647
09:14:29.660 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact0_table_keywords engine=Oracle cost=800 level=9999 cardinalityPreference=2147483647
09:14:29.661 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats
       requestCols=Vector(DimColumnInfo(Campaign ID), FactColumnInfo(Impressions), DimColumnInfo(Campaign Name), DimColumnInfo(Campaign Status), FactColumnInfo(CTR))
       requestSortByCols=Vector(DimSortByColumnInfo(Campaign Name,ASC))
       dimColumnAliases=Set(Campaign ID, Campaign Name, Campaign Status)
       dimCardinalityEstimate=None
       factCost=Map((fact_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true), (fact0_table_keywords,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true))
       factSortByMap=Map()
       dimSortByMap=Map(Campaign Name -> ASC)
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=true
       hasDimFilters=true
       hasNonFKDimFilters=true
       hasFactSortBy=false
       hasDimSortBy=true
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=true
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=true
       hasLowCardinalityDimFilters=true
       isFactDriven=false
       forceDimDriven=false
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=SyncRequest
       startIndex=-1
       maxRows=100
       includeRowCount=true
       hasDimAndFactOperations=true
       isTimeSeries=false
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true))
       factSchemaRequiredAliasesMap=Map(fact0_table_keywords -> Set(Advertiser ID), fact_table_keywords -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(campaign -> InnerJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(Advertiser ID, Campaign Name)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=true
       hasNonFKNonForceFilters=true
       hasNonFKSortBy=true
       hasNonFKNonPKSortBy=true
       hasLowCardinalityFilter=true
       hasPKRequested=true
       hasNonPushDownFilters=true
     )
     
09:14:29.661 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=campaign_oracle
       publicDim.name=campaign
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,213,false,false)), EqualityFilter(Campaign Name,MegaCampaign,false,false))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=true
       hasNonFKSortBy=true
       hasNonPushDownFilters=true
       hasPKRequested=true
     
09:14:29.661 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=fact_table_keywords
       publicFact.name=k_stats
       fkCols=TreeSet(advertiser_id, campaign_id)
       nonFkCols=Set(CTR, impressions, stats_source)
       requestCols=Set(CTR, campaign_id, impressions)
       filterCols=Set(stats_source, advertiser_id)
       factCost=800
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(advertiser_id -> Advertiser ID, campaign_id -> Campaign ID, stats_source -> Source)
       factColMapping=Map(impressions -> Impressions, CTR -> CTR)
       filters=TreeSet(EqualityFilter(Advertiser ID,213,false,false), EqualityFilter(Source,2,true,false))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:14:29.661 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:14:29.661 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = false
09:14:29.661 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - runSingleEngineQuery
09:14:29.661 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set()
09:14:29.661 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet()
09:14:29.664 INFO  [ScalaTest-2-running-CSVRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.664 INFO  [ScalaTest-2-running-CSVRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.665 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.665 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query option defined!
09:14:29.665 INFO  [ScalaTest-22-running-JsonRowListTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
09:14:29.679 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.679 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
PostgresQueryCommonTest:
- Test long list for days IN Filter
- test DefaultAuthValidator
- Test QueryCommon
09:14:29.726 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:29.731 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.731 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.753 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.753 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.765 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:29.765 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:29.766 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:29.769 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2$$EnhancerByMockitoWithCGLIB$$28d6d924 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
- test DefaultDruidAuthHeaderProvider
createSubsetTest:
- newRollup should fail when discarding non-existing column
09:14:29.772 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-ad_group filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:14:29.772 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:29.772 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=9223372036854775807 isGrainOptimized=false isIndexOptimized=true
09:14:29.773 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:29.773 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=9223372036854775807 isGrainOptimized=false isIndexOptimized=true
09:14:29.773 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.773 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.773 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:29.773 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=9223372036854775807 isGrainOptimized=false isIndexOptimized=true
09:14:29.774 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Hive, Presto)
09:14:29.790 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact_druid engine=Druid cost=9223372036854775807 level=9999 cardinalityPreference=2147483647
09:14:29.790 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact_oracle engine=Oracle cost=9223372036854775807 level=9999 cardinalityPreference=2147483647
09:14:29.791 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats
       requestCols=Vector(DimColumnInfo(Advertiser ID), DimColumnInfo(Ad Group Status), DimColumnInfo(Ad Group ID), FactColumnInfo(Source), FactColumnInfo(Pricing Type), FactColumnInfo(Destination URL), FactColumnInfo(Spend), FactColumnInfo(Impressions), FactColumnInfo(Clicks))
       requestSortByCols=Vector()
       dimColumnAliases=Set(Ad Group ID, Ad Group Status, Advertiser ID)
       dimCardinalityEstimate=None
       factCost=Map((fact_druid,Druid) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),9223372036854775807,true), (fact_hive,Hive) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),9223372036854775807,true), (fact_oracle,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),9223372036854775807,true))
       factSortByMap=Map()
       dimSortByMap=Map()
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=false
       hasDimFilters=false
       hasNonFKDimFilters=false
       hasFactSortBy=false
       hasDimSortBy=false
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=false
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=false
       hasLowCardinalityDimFilters=false
       isFactDriven=false
       forceDimDriven=false
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=SyncRequest
       startIndex=0
       maxRows=100
       includeRowCount=false
       hasDimAndFactOperations=false
       isTimeSeries=false
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true))
       factSchemaRequiredAliasesMap=Map(fact_oracle -> Set(Advertiser ID), fact_druid -> Set(Advertiser ID), fact_hive -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(ad_group -> LeftOuterJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Ad Group Status, Advertiser ID, Ad Group ID)
       filters=TreeSet(Advertiser ID)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=false
       hasNonFKNonForceFilters=false
       hasNonFKSortBy=false
       hasNonFKNonPKSortBy=false
       hasLowCardinalityFilter=false
       hasPKRequested=true
       hasNonPushDownFilters=false
     )
     
09:14:29.791 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=ad_group_oracle
       publicDim.name=ad_group
       fields=Set(Ad Group Status, Advertiser ID, Ad Group ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,213,false,false)))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=false
       hasNonFKSortBy=false
       hasNonPushDownFilters=false
       hasPKRequested=true
     
09:14:29.792 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=fact_druid
       publicFact.name=k_stats
       fkCols=TreeSet(ad_group_id, advertiser_id)
       nonFkCols=Set(impressions, spend, landing_page_url, price_type, stats_source, clicks)
       requestCols=Set(impressions, spend, landing_page_url, price_type, ad_group_id, stats_source, advertiser_id, clicks)
       filterCols=Set(advertiser_id)
       factCost=9223372036854775807
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(landing_page_url -> Destination URL, price_type -> Pricing Type, ad_group_id -> Ad Group ID, stats_source -> Source, advertiser_id -> Advertiser ID)
       factColMapping=Map(clicks -> Clicks, impressions -> Impressions, spend -> Spend)
       filters=TreeSet(EqualityFilter(Advertiser ID,213,false,false))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:14:29.792 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:14:29.792 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = true
09:14:29.795 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:29.795 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:29.796 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:29.798 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.799 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.813 INFO  [ScalaTest-12-running-QueryContextTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to a7d61dcc-c138-4546-895e-63752b84e7a5
09:14:29.816 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - dimEngine=Oracle
09:14:29.817 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - factEngine=Druid
09:14:29.817 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - runMultiEngineQuery
09:14:29.817 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - factQueryThenDimQuery
09:14:29.817 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-campaign filters:Map(Campaign Name -> TreeSet(EqualityFilter(Campaign Name,MegaCampaign,false,false)), Source -> TreeSet(EqualityFilter(Source,2,true,true)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:14:29.818 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:29.818 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to c6987e3f-b686-4ad6-b750-0f6f081c7130
09:14:29.818 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:29.818 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:29.818 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:29.819 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - hasLowCardinalityDimFilters=true forceDimDriven=false hasDimAndFactOperations=true
09:14:29.819 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - isFactDriven=false hasIndexInOutput=true dimEngines=Set(Oracle, Postgres, Presto, Hive) dimCandidates=TreeSet(campaign)
09:14:29.819 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Druid, Hive, Presto)
09:14:29.819 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact2 engine=Oracle cost=800 level=9998 cardinalityPreference=2147483647
09:14:29.819 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact1 engine=Oracle cost=800 level=9999 cardinalityPreference=2147483647
09:14:29.820 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats
       requestCols=Vector(DimColumnInfo(Campaign ID), FactColumnInfo(Impressions), DimColumnInfo(Campaign Name), DimColumnInfo(Campaign Status), FactColumnInfo(CTR))
       requestSortByCols=Vector(DimSortByColumnInfo(Campaign Name,ASC))
       dimColumnAliases=Set(Campaign ID, Campaign Name, Campaign Status)
       dimCardinalityEstimate=None
       factCost=Map((fact2,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true), (fact1,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true))
       factSortByMap=Map()
       dimSortByMap=Map(Campaign Name -> ASC)
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=true
       hasDimFilters=true
       hasNonFKDimFilters=true
       hasFactSortBy=false
       hasDimSortBy=true
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=true
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=true
       hasLowCardinalityDimFilters=true
       isFactDriven=false
       forceDimDriven=false
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=SyncRequest
       startIndex=-1
       maxRows=100
       includeRowCount=true
       hasDimAndFactOperations=true
       isTimeSeries=false
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true))
       factSchemaRequiredAliasesMap=Map(fact1 -> Set(Advertiser ID), fact2 -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(campaign -> InnerJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(Advertiser ID, Campaign Name)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=true
       hasNonFKNonForceFilters=true
       hasNonFKSortBy=true
       hasNonFKNonPKSortBy=true
       hasLowCardinalityFilter=true
       hasPKRequested=true
       hasNonPushDownFilters=true
     )
     
09:14:29.820 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=campaign_oracle
       publicDim.name=campaign
       fields=Set(Campaign Name, Campaign Status, Campaign ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,213,false,false)), EqualityFilter(Campaign Name,MegaCampaign,false,false))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=true
       hasNonFKSortBy=true
       hasNonPushDownFilters=true
       hasPKRequested=true
     
09:14:29.820 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=fact2
       publicFact.name=k_stats
       fkCols=TreeSet(advertiser_id, campaign_id)
       nonFkCols=Set(CTR, impressions, stats_source)
       requestCols=Set(CTR, campaign_id, impressions)
       filterCols=Set(stats_source, advertiser_id)
       factCost=800
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(advertiser_id -> Advertiser ID, campaign_id -> Campaign ID, stats_source -> Source)
       factColMapping=Map(impressions -> Impressions, CTR -> CTR)
       filters=TreeSet(EqualityFilter(Advertiser ID,213,false,false), EqualityFilter(Source,2,true,true))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:14:29.820 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:14:29.820 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = false
09:14:29.820 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - runSingleEngineQuery
09:14:29.821 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - hasFallbackQueryAndRowList
09:14:29.822 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Hive, Presto, Druid)
09:14:29.822 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact_oracle engine=Oracle cost=9223372036854775807 level=9999 cardinalityPreference=2147483647
09:14:29.822 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set()
09:14:29.822 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet()
09:14:29.823 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set(IsGrainOptimized(false), ForceDimDriven(false), IsIndexOptimized(true))
09:14:29.823 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet(CONDITIONAL_HINT1, CONDITIONAL_HINT2)
09:14:29.825 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.826 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query option defined!
09:14:29.826 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
09:14:29.826 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - factDrivenPartialRowList
09:14:29.826 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
09:14:29.835 INFO  [ScalaTest-6-running-OffHeapRowListTest] c.y.m.r.RocksDBAccessor - Creating rocksDB : /Users/lgadde/git/Native-Ads/maha/core/target/off_heap_row_list/rocksdb_2-1605028469835-off-heap-rowlist-24122d5a-c362-4311-9e8b-c5a7255f02a5
09:14:29.840 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.NoopExecutionLifecycleListener - acquired : SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT co1.id "Campaign ID", coalesce(f0."impressions", 1) "Impressions", co1.campaign_name "Campaign Name", co1."Campaign Status" "Campaign Status", ROUND(f0."CTR", 10) "CTR", Count(*) OVER() TOTALROWS
      FROM (SELECT /*+ PUSH_PRED PARALLEL_INDEX(cb_campaign_k_stats 4) CONDITIONAL_HINT1 CONDITIONAL_HINT2 */
                   campaign_id, SUM(impressions) AS "impressions", (SUM(CASE WHEN impressions = 0 THEN 0.0 ELSE clicks / impressions END)) AS "CTR"
            FROM fact2 FactAlias
            WHERE (advertiser_id = 213) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY campaign_id
            
           ) f0
           INNER JOIN
                (SELECT /*+ CampaignHint */ campaign_name, DECODE(status, 'ON', 'ON', 'OFF') AS "Campaign Status", id, advertiser_id
            FROM campaign_oracle
            WHERE (advertiser_id = 213) AND (lower(campaign_name) = lower('MegaCampaign'))
            ORDER BY 1 ASC NULLS LAST ) co1 
            ON (f0.campaign_id = co1.id)

) 
   ) WHERE ROWNUM <= 100) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 100
09:14:29.840 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.NoopExecutionLifecycleListener - started : SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT co1.id "Campaign ID", coalesce(f0."impressions", 1) "Impressions", co1.campaign_name "Campaign Name", co1."Campaign Status" "Campaign Status", ROUND(f0."CTR", 10) "CTR", Count(*) OVER() TOTALROWS
      FROM (SELECT /*+ PUSH_PRED PARALLEL_INDEX(cb_campaign_k_stats 4) CONDITIONAL_HINT1 CONDITIONAL_HINT2 */
                   campaign_id, SUM(impressions) AS "impressions", (SUM(CASE WHEN impressions = 0 THEN 0.0 ELSE clicks / impressions END)) AS "CTR"
            FROM fact2 FactAlias
            WHERE (advertiser_id = 213) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY campaign_id
            
           ) f0
           INNER JOIN
                (SELECT /*+ CampaignHint */ campaign_name, DECODE(status, 'ON', 'ON', 'OFF') AS "Campaign Status", id, advertiser_id
            FROM campaign_oracle
            WHERE (advertiser_id = 213) AND (lower(campaign_name) = lower('MegaCampaign'))
            ORDER BY 1 ASC NULLS LAST ) co1 
            ON (f0.campaign_id = co1.id)

) 
   ) WHERE ROWNUM <= 100) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 100
09:14:29.843 INFO  [ScalaTest-16-running-QueryExecutorTest] c.y.m.c.q.NoopExecutionLifecycleListener - completed : SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT co1.id "Campaign ID", coalesce(f0."impressions", 1) "Impressions", co1.campaign_name "Campaign Name", co1."Campaign Status" "Campaign Status", ROUND(f0."CTR", 10) "CTR", Count(*) OVER() TOTALROWS
      FROM (SELECT /*+ PUSH_PRED PARALLEL_INDEX(cb_campaign_k_stats 4) CONDITIONAL_HINT1 CONDITIONAL_HINT2 */
                   campaign_id, SUM(impressions) AS "impressions", (SUM(CASE WHEN impressions = 0 THEN 0.0 ELSE clicks / impressions END)) AS "CTR"
            FROM fact2 FactAlias
            WHERE (advertiser_id = 213) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY campaign_id
            
           ) f0
           INNER JOIN
                (SELECT /*+ CampaignHint */ campaign_name, DECODE(status, 'ON', 'ON', 'OFF') AS "Campaign Status", id, advertiser_id
            FROM campaign_oracle
            WHERE (advertiser_id = 213) AND (lower(campaign_name) = lower('MegaCampaign'))
            ORDER BY 1 ASC NULLS LAST ) co1 
            ON (f0.campaign_id = co1.id)

) 
   ) WHERE ROWNUM <= 100) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 100
09:14:29.843 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:14:29.844 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:14:29.855 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 7072067e-ee09-4f42-8601-e087ade79fe6
WithAvailableOnwardsDateTest:
- Test long list getDayBetweenFilters
- getPrimaryKeyAlias should be able to return the primaryKey alias for attribute alias which is duplicate for dimensions
- withAlternativeEngine should fail with missing override for fact column annotation with engine requirement
- Test long list getHourBetweenFilters
- Test long list getDayBetweenFilters In Hive
- withAlternativeEngine should fail with missing override for fact column rollup with engine requirement
- Test long list getDayBetweenFilters In Presto
- Test long list getHourBetweenFilters In Hive
- Test long list getHourBetweenFilters In Presto
- domainJsonAsString should be able to return the correct json output
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Campaign Name",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Spend",
                               "alias": null,
                               "value": null
                             }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
- Test Today UTC
- Test for Disjoint Set Tuples, IN to BetWeen Filters
- withAlternativeEngine should fail if ddl annotation is of a different engine other than the engine of the fact
- newRollup should fail when discarding last remaining foreign key
09:14:29.867 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:29.867 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:29.867 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
- getDisjointSetTuplesForDays 3 slots
- newRollup should fail when from table is does not exist
- getDisjointSetTuplesForDays 3 slots with first and last repetition
09:14:29.872 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.872 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- getDisjointSetTuplesForDays 4 slots
- withAlternativeEngine should fail if derived expression is not defined for derived columns
- createSubSet should be successful with discarding fact columns
- newRollup should fail when rollup to an existing table
- newRollup should fail if tableMap is empty
- withAlternativeEngine should fail if override dim columns have static mapping
- withAvailableOnwardsDate: should pass with new engine (Oracle)
- withAlternativeEngine should fail if override fact columns have static mapping
- getDisjointSetTuplesForDays 1 slots over different months
- getDisjointSetTuplesForDays 1 slots over different years
- getCubeJsonForName should be able to return the correct json for given cube name
- withAlternativeEngine: dim column override failure case
- getDisjointSetTuplesForDays 2 slots over different years
- getDisjointSetTuplesForDays 1 slots 1 entry
- Get number of days from today
- Test invalid long list for days IN Filter
- newRollup should fail if dim column context is not the same as source
- withAlternativeEngine: dim column override success case
- Test invalid date string for conversion to long list
- getDisjointSetTuples for empty timestamps
- createSubSet should be successful with noopschema
09:14:29.879 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to e0200268-5cc6-4eca-8777-199c2a9d06c5
09:14:29.889 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.889 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.899 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.QueryChain - No data from driving query, running fall back query
09:14:29.900 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:29.914 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 822cb8b8-697f-4f8c-a634-eb3f5c2d1f38
09:14:29.924 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.924 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.935 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.QueryChain - No data returned from druid, should run fallback query if there is one
09:14:29.936 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.QueryChain - No data from driving query, running fall back query
09:14:29.959 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 995192f6-992a-4b96-9621-ba5a711561b1
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Campaign Name",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Source"
                             },
                             {
                               "field": "N Spend",
                               "alias": null,
                               "value": null
                             }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:14:29.975 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:29.975 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:29.975 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:29.976 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 3184ecc1-60bb-4fc1-b65f-deccb356fdcb
09:14:29.977 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.977 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.978 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:29.978 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:29.992 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.014 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.023 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
BaseUTCTimeProviderTest:
- createSubset should fail if trying to discard dim columns
- withAlternativeEngine: invalid static mapped Fact
- createSubset should fail if trying to form public rollup without available onwards
- withAvailableOnwardsDate: should pass with redefined FactCol and DimCol
- generate druid expression with ++
- createSubset should fail discarding non-exist columns
- generate druid expression with -
09:14:30.026 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.026 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- generate druid expression with *
- generate druid expression with /
- Case: Timezone: UTC - datetime between should pass through
- generate druid expression with /-
- generate druid expression with * ++ - /-
- successfully derive dependent columns from DruidDerivedExpression
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Day",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Campaign Name",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Spend",
                               "alias": null,
                               "value": null
                             }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:14:30.040 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:14:30.043 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:14:30.045 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.045 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.060 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.QueryChain - No data from driving query, running fall back query
09:14:30.072 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.072 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.074 INFO  [ScalaTest-12-running-QueryContextTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:30.083 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:30.084 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:30.084 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:30.088 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.088 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.089 INFO  [ScalaTest-12-running-QueryContextTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 4590ca0a-838a-49ea-b343-ff65178c0815
09:14:30.090 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:30.090 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:30.091 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:30.094 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.094 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
DerivedFunctionTest:
- withAlternativeEngine: invalid static mapped Dimension
- Create a DECODE_DIM failure cases
- successfully derive dependent columns from OracleDerivedExpression with table alias
- createSubset should discard column in hive ddl annotation
- successfully derive dependent columns from PostgresDerivedExpression with table alias
- Case: Timezone: not provided - datetime between filter - one day before and one day after
- Create value DECODE_DIM
- Attempt LOOKUP_WITH_DECODE fail
- Case: Timezone: not provided - datetime between with hour provided should give one day before and one day after
- Failure to get interval date with blank format
- Case: Timezone: not provided - datetime between with hour and minute provided should give one day before and one day after
09:14:30.139 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 0d2115aa-d67d-4473-a538-fbbf174d32e7
- successfully derive dependent columns from OracleDerivedExpressions when expandDerivedExpression is true and false
- Case: Timezone: UTC - should pass through
- successfully derive dependent columns from PostgresDerivedExpressions when expandDerivedExpression is true and false
- newRollup should fail if fact column context is not the same as source
- withAvailableOnwardsDate: Should succeed with 2 availableOnwardsDates on the same Engine
- Case: Timezone: not provided - between filter - one day before and one day after
- successfully derive dependent columns from HiveDerivedExpressions when expandDerivedExpression is true and false
- successfully derive dependent columns from OracleDerivedExpression IS_ALERT_ELIGIBLE
- Case: Timezone: not provided - between with hour filter should not give one day before and one day after
- successfully derive dependent columns from PostgresDerivedExpression IS_ALERT_ELIGIBLE
- GET_AVERAGE_VIDEO_SHOWN test
- GET_SOV_SHARE test
- GET_SOV_LOST_SHARE_RANK test
- GET_SOV_LOST_SHARE_BUDGET test
- withAvailableOnwardsDate: Should fail with 1 availableOnwardsDate on the same Engine
- GET_WEIGHTED_VIDEO_SHOWN test
- All Derived Functions should generate proper JSON Strings.
09:14:30.154 INFO  [ScalaTest-6-running-OffHeapRowListTest] c.y.m.c.q.OffHeapRowList - OffHeapRowList, Stats:-> inMemRowCountThreshold: 10, sizeOfInMemStore: 10, sizeOfRocksDB:90
09:14:30.164 INFO  [ScalaTest-6-running-OffHeapRowListTest] c.y.m.r.RocksDBAccessor - Destroying rocksDB: /Users/lgadde/git/Native-Ads/maha/core/target/off_heap_row_list/rocksdb_2-1605028469835-off-heap-rowlist-24122d5a-c362-4311-9e8b-c5a7255f02a5
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Campaign Name",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Advertiser Currency",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Spend",
                               "alias": null,
                               "value": null
                             }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:14:30.184 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 70145830-25f7-4414-8a74-653cc6c9beb9
09:14:30.196 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:30.196 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:30.197 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:30.200 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.200 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
ViewTest:
- getCubeJsonForName should not contain hidden columns in json for given cube name
- GET_VIDEO_SHOWN_SUM test
- ViewBaseTable: copyWith should fail if attempting to discard a fact.
09:14:30.210 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
- DAY_OF_WEEK test
- ViewBaseTable: copyWith should fail if attempting to discard a nonexistent Dim.
- REGEX_EXTRACT test
09:14:30.213 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.213 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.214 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 99a4da9d-4701-4c66-a33c-14664f8bfa39
- Case: Timezone: not provided - between with hour and minute filter should not give one day before and one day after
- createSubset should be able to create a subset fact with availableOnwardsDate
- ViewBaseTable: copyWith should fail to overwrite existing fact cols with newConstNameToValueMap.
- Case: Timezone: not provided - in filter - one day before and one day after
- ViewBaseTable: copyWith should fail to overwrite non-existent dim cols with newConstNameToValueMap.
- Oracle GET_INTERVAL_DATE NEGATIVE test
- withAlternativeEngine: Static Mapped dim/fact success cases
- ViewBaseTable: copyWith should fail to overwrite dim cols with non-constant values with newConstNameToValueMap.
- Postgres GET_INTERVAL_DATE NEGATIVE test
- withAlternativeEngine: Static Mapped dim failure to overwrite case
- successfully derive dependent columns from PrestoDerivedExpression
- should discard a subset fact with availableOnwardsDate > requested date
- successfully derive dependent columns from PrestoShardingExpression
- Case: Timezone: AU, Day - equal, Hour - non-zero
- ViewBaseTable: copyWith should succeed in adding valid constant values with newConstNameToValueMap.
- newRollup should fail if trying to discard fact columns
- Public Fact and Dimension with revision should work as expected
- ViewBaseTable: instantiation should fail without a valid input schema.
- should discard a subset fact with availableOnwardsDate > at least one of the date in requested dates list
- Case: Timezone: AU, Day - In, Hour - non-zero
- ViewBaseTable: Incorrect engine should throw an error.
- Case: Timezone: AU, Day - NotIn, Hour - non-zero (intentional exception)
- ViewBaseTable: Throw error if declared derived expression not derived.
- withAlternativeEngine: Static Mapped fact failure to overwrite case
- Case: Timezone: AU, Day - equal, Hour - non-zero, Minute - non-zero
- ViewBaseTable: Throw error if declared derived expression uses false columns.
- Case: Timezone: AU, Day - between, Hour - between, Minute - between
- ViewBaseTable: Throw error if declared derived expression references itself (infinite loop case).
- Case: Timezone: AU, datetime between with day, hour, minute with UTC input
- Case: Timezone: AU, datetime between with day, hour, minute with non-UTC input
- Case: Timezone: UTC, Day - between, Hour - between, Minute - between
09:14:30.249 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
- newRollup should successfully rollup discarding all derived columns associated the discarding columns
- Public Fact with dimRevision of new Dimension revision should return new revision for dim
- Case: Timezone: UTC, datetime between with day, hour, minute with UTC input
- Case: Timezone: UTC, datetime between with day, hour, minute with non-UTC input
- Case: Timezone: not provided, Day - between, Hour - between, Minute - between
- successfully derive dependent columns from PrestoDerivedExpressions when expandDerivedExpression is true and false
- withAlternativeEngine should succeed after discarding the given columns
- withAvailableOnwardsDate: Should succeed with identical availableOnwardsDates on the different Engines
- Presto DAY_OF_WEEK test
- Case: Timezone: PST, Day - between, Hour - not-specified
- should not discard a subset fact with availableOnwardsDate == requested date
- Case: Timezone: PST, Day - between, Hour - not-specified # 2
- Case: Timezone: AU, Day - between, Hour - not-specified
- Case: Timezone: PST, Day - between, Hour - zero
- Case: Timezone: PST, Day - between, Hour - non-zero
- Case: Timezone: India, Day - between, Hour - non-zero
- Case: Timezone: AU, Day - between, Hour - non-zero
- withAlternativeEngine should fail for invalid columns in discard set
- newRollup should successfully rollup with column alias map
- withAvailableOnwardsDate: should fail if no tableMap to pull from
- Public Fact and Dimension with multiple revision should take lowest revision as default revision
- withAvailableOnwardsDate: should fail if source fact is wrong
- createSubsetTest: should fail if source fact is invalid
- Hive Column MAX/MIN test
- withAlternativeEngine should fail for derived columns containing discarded columns
09:14:30.291 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:30.291 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:30.291 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Campaign Name",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Advertiser Currency",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Ad Group ID",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Spend",
                               "alias": null,
                               "value": null
                             }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:14:30.300 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:30.300 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:30.300 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:30.304 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.304 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.307 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.307 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.315 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.315 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
JsonRowListTest:
- Oracle Column MAX/MIN test
- Case: Timezone: AU, Day - equalTo, Hour - between, Result - prev-and-same day
- createSubsetTest: should fail if source table isn't there
- Case: Timezone: PST, Day - equalTo, Hour - between, Result - same-and-next day
- Case: Timezone: AU, Day - equalTo, Hour - between, Result - prev day
- Case: Timezone: PST, Day - equalTo, Hour - between, Result - next day
- Case: Timezone: PST, Day - equalTo, Hour - between, Result - next day zero hour
- Case: Timezone: AU, Day - between, Hour - in
- ViewBaseTable: Incorrect engine in annotations should throw an error.
- withAvailableOnwardsDate: should fail if destination fact name is already in use
- Case: Timezone: PST, Day - in, Hour - between
- Postgres Column MAX/MIN test
- Create oracle NVL and parse parameters
- Case: Publisher Timezone: AU, Day - between, Hour - non-zero
- Create Postgres NVL and parse parameters
- Should fail to create UnionView with differing Fact Columns
- Create hive NVL and parse parameters
- Case: Shift UtcDay forward by 1 day
- Create presto NVL and parse parameters
- Create oracle TRUNC and parse parameters
- Create Postgres TRUNC and parse parameters
- withAvailableOnwardsDate: availableOnwardsDate must be defined
- Should fail to create UnionView with discarded dims difference
- Create oracle COALESCE and parse parameters
- createSubset: should fail if destination fact name is already in use
- Create Postgres COALESCE and parse parameters
- Case: Shift backward by invalid filter
- Create hive COALESCE and parse parameters
- Case: Extend backwards with Equality filter
- Create presto COALESCE and parse parameters
09:14:30.322 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.322 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.323 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:30.323 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:30.323 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:30.326 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.326 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.331 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 1523deb4-d8df-451a-9f28-c3e98cb898bf
- Case: Shift forward with Equality filter
- UnionView takes two or more facts
- newRollup should discard column in hive ddl column rendering
- createSubset: should fail if no columns are discarded
- withAvailableOnwardsDate: should fail if override dim columns are self referential
- UnionView should fail with different dimCol names
- UnionView should fail with different factCol names
09:14:30.361 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to d1b9929f-32fd-4a06-b8f0-7eeb44c9ce11
09:14:30.363 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.363 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.366 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.366 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.374 WARN  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - No concrete dimension found for factEngine=Oracle, schema=advertiser, dim=advertiser
09:14:30.379 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.380 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.386 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.386 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Campaign Name",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Advertiser Currency",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Average CPC Cents",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Average CPC",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Spend",
                               "alias": null,
                               "value": null
                             }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:14:30.388 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to fc2eede4-08ec-4582-b4e6-a1c85c206872
09:14:30.429 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:30.429 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:30.429 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:30.447 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:30.449 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.450 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.458 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:30.461 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.461 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.463 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.463 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
NoopRowListTest:
- createSubset: should fail if source and destination schemas are the same
09:14:30.468 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
- Public Fact and Dimension with multiple revision should take the revision passed in defaultRevisionMap as default revision
- Create oracle TO_CHAR and parse parameters
- Create Postgres TO_CHAR and parse parameters
- should discard the new rollup if the availableOnwardsDate > requested date
- Create oracle ROUND and parse parameters
- newViewTableRollUp: Creating a rollup with invalid from table should fail.
- Create Postgres ROUND and parse parameters
- newViewTableRollUp: Can't duplicate an existing view.
- Create hive ROUND and parse parameters
- withAvailableOnwardsDate: can't reference a column that does not exist
- newViewTableRollUp: New rollup must have discardings and should fail otherwise.
- Create presto ROUND and parse parameters
- Create presto TRIM and parse parameters
- newViewTableRollUp: Fail to discard required fact with foreign keys.
- Create presto MAX and parse parameters
- newViewTableRollUp: Fail to discard required fact.
- withAvailableOnwardsDate: invalid static mapped Fact
- newViewTableRollUp: Fail to discard fake dim.
- Case: Shift forward by invalid filter
- Case: Extend forward with Equality filter
- createSubset: should pass if source and destination schemas are different
- Default Public Revision with a Fact which is not registered should fail
- Case: Extend forward by invalid filter
09:14:30.479 INFO  [ScalaTest-14-running-RequestModelTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: publicFact with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:30.481 INFO  [ScalaTest-14-running-RequestModelTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: publicFact, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
09:14:30.487 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.487 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- Case: getMinAndMaxHours invalid filter
- Case: updateHours invalid filter
- Case: applyOffset zero offset
- Case: validateFilters minuteFilter test
09:14:30.494 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:30.494 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to a17c8428-1359-4c44-a13d-ba13db302483
- Case: validateFilters different hour and minute types test
- Default Public Revision with a Dimension which is not registered should fail
- createSubset: should pass if new subset has forceFilters
09:14:30.503 INFO  [ScalaTest-14-running-RequestModelTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: publicFact with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:30.504 INFO  [ScalaTest-14-running-RequestModelTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: publicFact, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:30.508 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.508 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.520 INFO  [ScalaTest-14-running-RequestModelTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: publicFact with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:30.521 INFO  [ScalaTest-14-running-RequestModelTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: publicFact, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Hive)
09:14:30.524 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:30.528 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.528 INFO  [ScalaTest-20-running-HiveQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Ad Status",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Campaign Name"
                             },
                             {
                               "field": "Campaign ID",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Spend",
                               "alias": null,
                               "value": null
                             }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:14:30.539 INFO  [ScalaTest-14-running-RequestModelTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: publicFact with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:30.540 INFO  [ScalaTest-14-running-RequestModelTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: publicFact, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Presto)
09:14:30.543 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:30.543 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:30.543 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:30.553 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.554 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.555 INFO  [ScalaTest-14-running-RequestModelTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: publicFact with params: UserId: test-user, isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:30.556 INFO  [ScalaTest-14-running-RequestModelTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: publicFact, revision: 1, dryRunRevision: None dryrunEngine: None
09:14:30.561 INFO  [ScalaTest-14-running-RequestModelTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: publicFactRev2 with params: UserId: test-user, isInternal: false, dryRunRevision: Some(2), forceRevision: Some(1), forceEngine: Some(Druid)forceQueryGenVersion: None
09:14:30.561 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.561 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.561 INFO  [ScalaTest-14-running-RequestModelTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: publicFactRev2, revision: 1, dryRunRevision: Some(2) dryrunEngine: Some(Druid)
WithNewSchemaAndGrainTest:
- Case: Invalid Filter Operation (InFilter)
09:14:30.566 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:30.566 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:30.566 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:30.567 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:30.567 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:30.567 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:30.568 INFO  [ScalaTest-14-running-RequestModelTest] c.y.m.c.b.BucketSelector - Selecting buckets for cube: publicFactRev2 with params: UserId: test-user, isInternal: false, dryRunRevision: Some(1), forceRevision: Some(1), forceEngine: NoneforceQueryGenVersion: None
09:14:30.568 INFO  [ScalaTest-14-running-RequestModelTest] c.y.m.c.b.BucketSelector - Buckets Selected: cube: publicFactRev2, revision: 1, dryRunRevision: Some(1) dryrunEngine: None
09:14:30.569 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 33174b23-be4c-4e11-b935-f25dcba2bdec
09:14:30.570 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.570 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.571 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.571 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.574 WARN  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.p.PrestoQueryGenerator$ - Another query generator registered for PrestoEngine : null
09:14:30.578 INFO  [ScalaTest-6-running-OffHeapRowListTest] c.y.m.r.RocksDBAccessor - Creating rocksDB : /Users/lgadde/git/Native-Ads/maha/core/target/off_heap_row_list/rocksdb_3-1605028470578-off-heap-rowlist-ec145094-bd5f-43e8-b112-c48b39f44b70
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Campaign Name"
                             },
                             {
                               "field": "Average CPC",
                               "alias": null,
                               "value": null
                             },
                             {
                              "field": "Spend",
                              "alias": null,
                              "value": null
                              }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:14:30.588 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:14:30.589 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:14:30.593 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:30.594 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:30.594 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:30.597 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.597 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.605 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 83e85d1a-620d-48bd-bd58-d18311533d92
09:14:30.608 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-keyword filters:Map(Source -> TreeSet(EqualityFilter(Source,2,true,true)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,12345,false,false))) : None
09:14:30.608 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:30.608 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:30.608 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:30.608 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:30.609 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Hive, Presto)
09:14:30.609 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact2 engine=Postgres cost=800 level=9998 cardinalityPreference=2147483647
09:14:30.610 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact1 engine=Postgres cost=800 level=9999 cardinalityPreference=2147483647
09:14:30.610 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats
       requestCols=Vector(DimColumnInfo(Keyword ID), FactColumnInfo(Month), DimColumnInfo(Ad Group ID), FactColumnInfo(Week), FactColumnInfo(Day), FactColumnInfo(Impressions), FactColumnInfo(Clicks), FactColumnInfo(CTR))
       requestSortByCols=Vector()
       dimColumnAliases=Set(Ad Group ID, Keyword ID)
       dimCardinalityEstimate=None
       factCost=Map((fact2,Postgres) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true), (fact1,Postgres) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true))
       factSortByMap=Map()
       dimSortByMap=Map()
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=true
       hasDimFilters=false
       hasNonFKDimFilters=false
       hasFactSortBy=false
       hasDimSortBy=false
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=false
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=false
       hasLowCardinalityDimFilters=false
       isFactDriven=false
       forceDimDriven=true
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=SyncRequest
       startIndex=0
       maxRows=100
       includeRowCount=false
       hasDimAndFactOperations=false
       isTimeSeries=true
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true))
       factSchemaRequiredAliasesMap=Map(fact1 -> Set(Advertiser ID), fact2 -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(keyword -> RightOuterJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Ad Group ID, Keyword ID)
       filters=TreeSet(Advertiser ID)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=false
       hasNonFKNonForceFilters=false
       hasNonFKSortBy=false
       hasNonFKNonPKSortBy=false
       hasLowCardinalityFilter=false
       hasPKRequested=true
       hasNonPushDownFilters=false
     )
     
09:14:30.610 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=pg_targetingattribute
       publicDim.name=keyword
       fields=Set(Ad Group ID, Keyword ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,12345,false,false)))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=false
       hasNonFKSortBy=false
       hasNonPushDownFilters=false
       hasPKRequested=true
     
09:14:30.610 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=fact2
       publicFact.name=k_stats
       fkCols=TreeSet(ad_group_id, advertiser_id, keyword_id)
       nonFkCols=Set(impressions, Month, stats_date, stats_source, Week, clicks, CTR)
       requestCols=Set(impressions, Month, stats_date, ad_group_id, Week, clicks, CTR, keyword_id)
       filterCols=Set(stats_source, advertiser_id)
       factCost=800
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(Month -> Month, stats_date -> Day, ad_group_id -> Ad Group ID, stats_source -> Source, advertiser_id -> Advertiser ID, Week -> Week, keyword_id -> Keyword ID)
       factColMapping=Map(clicks -> Clicks, impressions -> Impressions, CTR -> CTR)
       filters=TreeSet(EqualityFilter(Advertiser ID,12345,false,false), EqualityFilter(Source,2,true,true))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:14:30.610 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:14:30.610 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = false
09:14:30.610 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - runSingleEngineQuery
09:14:30.611 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set(IsGrainOptimized(false), IsIndexOptimized(true), ForceDimDriven(true))
09:14:30.611 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet(CONDITIONAL_HINT1, CONDITIONAL_HINT2, CONDITIONAL_HINT3)
09:14:30.611 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-keyword filters:Map(Source -> TreeSet(EqualityFilter(Source,2,true,true)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,12345,false,false))) : None
09:14:30.611 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:30.611 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:30.611 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:30.612 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:30.613 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Hive, Presto)
09:14:30.613 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact2 engine=Oracle cost=800 level=9998 cardinalityPreference=2147483647
09:14:30.613 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact1 engine=Oracle cost=800 level=9999 cardinalityPreference=2147483647
09:14:30.613 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats
       requestCols=Vector(DimColumnInfo(Keyword ID), FactColumnInfo(Month), DimColumnInfo(Ad Group ID), FactColumnInfo(Week), FactColumnInfo(Day), FactColumnInfo(Impressions), FactColumnInfo(Clicks), FactColumnInfo(CTR))
       requestSortByCols=Vector()
       dimColumnAliases=Set(Ad Group ID, Keyword ID)
       dimCardinalityEstimate=None
       factCost=Map((fact2,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true), (fact1,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true))
       factSortByMap=Map()
       dimSortByMap=Map()
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=true
       hasDimFilters=false
       hasNonFKDimFilters=false
       hasFactSortBy=false
       hasDimSortBy=false
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=false
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=false
       hasLowCardinalityDimFilters=false
       isFactDriven=false
       forceDimDriven=true
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=SyncRequest
       startIndex=0
       maxRows=100
       includeRowCount=false
       hasDimAndFactOperations=false
       isTimeSeries=true
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true))
       factSchemaRequiredAliasesMap=Map(fact1 -> Set(Advertiser ID), fact2 -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(keyword -> RightOuterJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Ad Group ID, Keyword ID)
       filters=TreeSet(Advertiser ID)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=false
       hasNonFKNonForceFilters=false
       hasNonFKSortBy=false
       hasNonFKNonPKSortBy=false
       hasLowCardinalityFilter=false
       hasPKRequested=true
       hasNonPushDownFilters=false
     )
     
09:14:30.614 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=targetingattribute
       publicDim.name=keyword
       fields=Set(Ad Group ID, Keyword ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,12345,false,false)))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=false
       hasNonFKSortBy=false
       hasNonPushDownFilters=false
       hasPKRequested=true
     
09:14:30.614 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=fact2
       publicFact.name=k_stats
       fkCols=TreeSet(ad_group_id, advertiser_id, keyword_id)
       nonFkCols=Set(impressions, Month, stats_date, stats_source, Week, clicks, CTR)
       requestCols=Set(impressions, Month, stats_date, ad_group_id, Week, clicks, CTR, keyword_id)
       filterCols=Set(stats_source, advertiser_id)
       factCost=800
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(Month -> Month, stats_date -> Day, ad_group_id -> Ad Group ID, stats_source -> Source, advertiser_id -> Advertiser ID, Week -> Week, keyword_id -> Keyword ID)
       factColMapping=Map(clicks -> Clicks, impressions -> Impressions, CTR -> CTR)
       filters=TreeSet(EqualityFilter(Advertiser ID,12345,false,false), EqualityFilter(Source,2,true,true))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:14:30.614 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:14:30.614 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = false
09:14:30.614 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - runSingleEngineQuery
09:14:30.614 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set(IsGrainOptimized(false), IsIndexOptimized(true), ForceDimDriven(true))
09:14:30.614 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet(CONDITIONAL_HINT1, CONDITIONAL_HINT2, CONDITIONAL_HINT3)
09:14:30.618 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.618 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query option defined!
09:14:30.618 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
09:14:30.622 ERROR [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.QueryPipelineWithFallback - Primary query chain failed, recovering with fall back
java.lang.RuntimeException: query execution failed
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:22)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.$anonfun$execute$3(QueryPipeline.scala:140)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.execute(QueryPipeline.scala:139)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactoryTest$PipelineRunner.run(DefaultQueryPipelineFactoryTest.scala:47)
09:14:30.623 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.623 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query option defined!
09:14:30.623 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Campaign Name"
                             },
                             {
                               "field": "Average Position",
                               "alias": null,
                               "value": null
                             },
                             {
                              "field": "Spend",
                              "alias": null,
                              "value": null
                              }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:14:30.629 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 80e847e7-5050-467b-9bc6-fe0b770bb6b9
09:14:30.637 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:30.638 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:30.638 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
FactDrivenPartialRowListTest:
- newRollUp should override schema if provided
- withAvailableOnwardsDate: invalid static mapped Dimension
- Presto REGEX_EXTRACT test
- withAvailableOnwardsDate: Static Mapped dim/fact success cases
09:14:30.642 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.642 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- newRollUp should inherit schema if not provided
09:14:30.645 ERROR [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.QueryPipelineWithFallback - Primary query chain failed, recovering with fall back
java.lang.RuntimeException: query execution failed
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:22)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.$anonfun$execute$3(QueryPipeline.scala:140)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.execute(QueryPipeline.scala:139)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactoryTest$PipelineRunner.run(DefaultQueryPipelineFactoryTest.scala:47)
- withNewSchemaAndGrain should succeed with new grain and new schema
09:14:30.651 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to e0a2f678-3a05-42c3-9abd-9a70fa43a8a5
09:14:30.655 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 9b214228-76ce-42bc-94ff-019c88e1bc67
09:14:30.658 ERROR [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.QueryPipelineWithFallback - Primary query chain failed, recovering with fall back
java.lang.RuntimeException: query execution failed
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:22)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.$anonfun$execute$3(QueryPipeline.scala:140)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.execute(QueryPipeline.scala:139)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactoryTest$PipelineRunner.run(DefaultQueryPipelineFactoryTest.scala:47)
09:14:30.665 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 009bfa77-1868-419d-b902-41c763e93746
09:14:30.672 ERROR [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.QueryPipelineWithFallback - Primary query chain failed, recovering with fall back
java.lang.RuntimeException: query execution failed
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:22)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.$anonfun$execute$3(QueryPipeline.scala:140)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.execute(QueryPipeline.scala:139)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactoryTest$PipelineRunner.run(DefaultQueryPipelineFactoryTest.scala:47)
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Campaign Name"
                             },
                             {
                               "field": "Average Position",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Average CPC"
                             },
                             {
                              "field": "Spend",
                              "alias": null,
                              "value": null
                              }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:14:30.679 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 86c1b2a7-0552-4524-a5ae-da81646ee39c
09:14:30.687 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:30.687 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:30.687 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:30.690 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.690 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.702 ERROR [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.QueryPipelineWithFallback - Primary query chain failed, recovering with fall back
java.lang.RuntimeException: query execution failed
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:22)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.$anonfun$execute$3(QueryPipeline.scala:140)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.execute(QueryPipeline.scala:139)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactoryTest$PipelineRunner.run(DefaultQueryPipelineFactoryTest.scala:47)
09:14:30.708 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 8e19beb4-9b45-47b0-97af-8f9614d8062d
BucketSelectorTest:
- getFact and getDimension with invalid revision should return Fact and Dimension associated with defaultRevision
- withAvailableOnwardsDate: should discard the new table if the availableOnwardsDate > requested date
- withNewSchemaAndGrain should succeed with new grain and new schema and copy force filters
- withAvailableOnwardsDate: should fail with missing override for fact column annotation with engine requirement
- withAvailableOnwardsDate: should fail with missing override for fact column rollup with engine requirement
- All column types with all expressions, dataTypes, & rollups should render JSON properly.
09:14:30.725 WARN  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - No concrete dimension found for factEngine=Oracle, schema=advertiser, dim=woeid
09:14:30.727 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Failure(java.lang.IllegalArgumentException: Could not find inner alias for outer column : Country Name)
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Campaign Name"
                             },
                             {
                               "field": "Advertiser ID",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "N Average CPC"
                             },
                             {
                              "field": "Spend",
                              "alias": null,
                              "value": null
                              }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:14:30.734 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to d4567710-8ef4-4588-b8f1-646b26fc298f
09:14:30.738 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:30.738 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:30.738 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:30.741 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:30.741 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:30.742 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:30.743 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.743 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.743 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:30.745 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.745 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.746 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.746 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.748 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.748 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.753 INFO  [ScalaTest-6-running-OffHeapRowListTest] c.y.m.c.q.OffHeapRowList - OffHeapRowList, Stats:-> inMemRowCountThreshold: 0, sizeOfInMemStore: 0, sizeOfRocksDB:100
09:14:30.757 INFO  [ScalaTest-6-running-OffHeapRowListTest] c.y.m.r.RocksDBAccessor - Destroying rocksDB: /Users/lgadde/git/Native-Ads/maha/core/target/off_heap_row_list/rocksdb_3-1605028470578-off-heap-rowlist-ec145094-bd5f-43e8-b112-c48b39f44b70
09:14:30.762 ERROR [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.QueryPipelineWithFallback - Primary query chain failed, recovering with fall back
java.lang.RuntimeException: query execution failed
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:22)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.$anonfun$execute$3(QueryPipeline.scala:140)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.execute(QueryPipeline.scala:139)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactoryTest$PipelineRunner.run(DefaultQueryPipelineFactoryTest.scala:47)
09:14:30.764 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,12345,false,false))) : None
09:14:30.766 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=performance_stats
       requestCols=Vector(DimColumnInfo(Advertiser Status))
       requestSortByCols=Vector()
       dimColumnAliases=Set(Advertiser Status)
       dimCardinalityEstimate=None
       factCost=Map()
       factSortByMap=Map()
       dimSortByMap=Map()
       hasFactFilters=false
       hasMetricFilters=false
       hasNonFKFactFilters=false
       hasDimFilters=false
       hasNonFKDimFilters=false
       hasFactSortBy=false
       hasDimSortBy=false
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=false
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=false
       hasLowCardinalityDimFilters=false
       isFactDriven=false
       forceDimDriven=true
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=SyncRequest
       startIndex=0
       maxRows=100
       includeRowCount=false
       hasDimAndFactOperations=false
       isTimeSeries=false
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true), Distinct -> DistinctValue(true))
       factSchemaRequiredAliasesMap=Map()
       queryGrain=Some(DailyGrain)
       isRequestingDistict=true
       publicDimToJoinTypeMap=Map(advertiser -> RightOuterJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Advertiser Status, Advertiser ID)
       filters=TreeSet(Advertiser ID)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=false
       hasNonFKNonForceFilters=false
       hasNonFKSortBy=false
       hasNonFKNonPKSortBy=false
       hasLowCardinalityFilter=false
       hasPKRequested=false
       hasNonPushDownFilters=false
     )
     
09:14:30.766 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=advertiser_oracle
       publicDim.name=advertiser
       fields=Set(Advertiser Status, Advertiser ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,12345,false,false)))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=false
       hasNonFKSortBy=false
       hasNonPushDownFilters=false
       hasPKRequested=false
     
09:14:30.766 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = None
09:14:30.766 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:14:30.766 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = false
09:14:30.766 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - runSingleEngineQuery
09:14:30.768 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
09:14:30.769 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:30.770 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(0), dryRunQueryGenVersion: Some(Version(2))
09:14:30.770 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:30.772 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,12345,false,false))) : None
09:14:30.773 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=performance_stats
       requestCols=Vector(DimColumnInfo(Advertiser Status))
       requestSortByCols=Vector()
       dimColumnAliases=Set(Advertiser Status)
       dimCardinalityEstimate=None
       factCost=Map()
       factSortByMap=Map()
       dimSortByMap=Map()
       hasFactFilters=false
       hasMetricFilters=false
       hasNonFKFactFilters=false
       hasDimFilters=false
       hasNonFKDimFilters=false
       hasFactSortBy=false
       hasDimSortBy=false
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=false
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=false
       hasLowCardinalityDimFilters=false
       isFactDriven=false
       forceDimDriven=true
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=SyncRequest
       startIndex=0
       maxRows=100
       includeRowCount=false
       hasDimAndFactOperations=false
       isTimeSeries=false
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true), Distinct -> DistinctValue(true))
       factSchemaRequiredAliasesMap=Map()
       queryGrain=Some(DailyGrain)
       isRequestingDistict=true
       publicDimToJoinTypeMap=Map(advertiser -> RightOuterJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Advertiser Status, Advertiser ID)
       filters=TreeSet(Advertiser ID)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=false
       hasNonFKNonForceFilters=false
       hasNonFKSortBy=false
       hasNonFKNonPKSortBy=false
       hasLowCardinalityFilter=false
       hasPKRequested=false
       hasNonPushDownFilters=false
     )
     
09:14:30.774 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=advertiser_postgres
       publicDim.name=advertiser
       fields=Set(Advertiser Status, Advertiser ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,12345,false,false)))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=false
       hasNonFKSortBy=false
       hasNonPushDownFilters=false
       hasPKRequested=false
     
09:14:30.774 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = None
09:14:30.774 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:14:30.774 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = false
09:14:30.774 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - runSingleEngineQuery
09:14:30.775 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Campaign Name"
                             },
                             {
                               "field": "Impression Share",
                               "alias": null,
                               "value": null
                             },
                             {
                              "field": "Spend",
                              "alias": null,
                              "value": null
                              }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:14:30.778 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:30.782 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Failure(java.lang.IllegalArgumentException: requirement failed: No query generator registered for engine Oracle for fact fact_oracle)
09:14:30.783 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:30.783 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:30.784 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:30.789 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.789 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.791 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:30.806 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Failure(java.lang.IllegalArgumentException: requirement failed: No query generator registered for engine Oracle for fact fact_oracle)
09:14:30.807 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:30.812 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Failure(java.lang.IllegalArgumentException: requirement failed: No query generator registered for engine Oracle for fact fact_oracle)
QueryBuilderTest:
- withAvailableOnwardsDate: should succeed with override for fact column rollup with engine requirement
- Public Fact with same name and revision should fail
- withAvailableOnwardsDate: should fail if ddl annotation is of a different engine other than the engine of the fact
- Public Dimension with same name and revision should fail
- withNewSchemaAndGrain should succeed with new grain and new schema and override force filters
- withNewSchemaAndGrain should fail given the same schema
- wtihNewSchemaAndGrain should fail if grain is the same
09:14:30.819 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:30.819 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(0), dryRunQueryGenVersion: Some(Version(2))
09:14:30.820 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:30.823 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.823 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.828 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.828 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.829 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:30.834 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Failure(java.lang.IllegalArgumentException: requirement failed: No query generator registered for engine Oracle for fact fact_oracle)
09:14:30.834 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.834 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.841 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-ad_group filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:14:30.841 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:30.841 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=9223372036854775807 isGrainOptimized=false isIndexOptimized=true
09:14:30.841 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:30.841 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=9223372036854775807 isGrainOptimized=false isIndexOptimized=true
09:14:30.842 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:30.842 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=9223372036854775807 isGrainOptimized=false isIndexOptimized=true
09:14:30.842 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Hive, Presto)
09:14:30.842 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact_druid engine=Druid cost=9223372036854775807 level=9999 cardinalityPreference=2147483647
09:14:30.842 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact_oracle engine=Oracle cost=9223372036854775807 level=9999 cardinalityPreference=2147483647
09:14:30.843 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats
       requestCols=Vector(DimColumnInfo(Advertiser ID), DimColumnInfo(Ad Group Status), DimColumnInfo(Ad Group ID), FactColumnInfo(Source), FactColumnInfo(Pricing Type), FactColumnInfo(Destination URL), FactColumnInfo(Spend), FactColumnInfo(Impressions), FactColumnInfo(Clicks))
       requestSortByCols=Vector()
       dimColumnAliases=Set(Ad Group ID, Ad Group Status, Advertiser ID)
       dimCardinalityEstimate=None
       factCost=Map((fact_druid,Druid) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),9223372036854775807,true), (fact_hive,Hive) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),9223372036854775807,true), (fact_oracle,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),9223372036854775807,true))
       factSortByMap=Map()
       dimSortByMap=Map()
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=false
       hasDimFilters=false
       hasNonFKDimFilters=false
       hasFactSortBy=false
       hasDimSortBy=false
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=false
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=false
       hasLowCardinalityDimFilters=false
       isFactDriven=false
       forceDimDriven=false
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=SyncRequest
       startIndex=0
       maxRows=100
       includeRowCount=false
       hasDimAndFactOperations=false
       isTimeSeries=false
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true))
       factSchemaRequiredAliasesMap=Map(fact_oracle -> Set(Advertiser ID), fact_druid -> Set(Advertiser ID), fact_hive -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(ad_group -> LeftOuterJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Ad Group Status, Advertiser ID, Ad Group ID)
       filters=TreeSet(Advertiser ID)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=false
       hasNonFKNonForceFilters=false
       hasNonFKSortBy=false
       hasNonFKNonPKSortBy=false
       hasLowCardinalityFilter=false
       hasPKRequested=true
       hasNonPushDownFilters=false
     )
     
09:14:30.843 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=ad_group_oracle
       publicDim.name=ad_group
       fields=Set(Ad Group Status, Advertiser ID, Ad Group ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,213,false,false)))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=false
       hasNonFKSortBy=false
       hasNonPushDownFilters=false
       hasPKRequested=true
     
09:14:30.843 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=fact_druid
       publicFact.name=k_stats
       fkCols=TreeSet(ad_group_id, advertiser_id)
       nonFkCols=Set(impressions, spend, landing_page_url, price_type, stats_source2, clicks)
       requestCols=Set(impressions, spend, landing_page_url, price_type, stats_source2, ad_group_id, advertiser_id, clicks)
       filterCols=Set(advertiser_id)
       factCost=9223372036854775807
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(landing_page_url -> Destination URL, price_type -> Pricing Type, stats_source2 -> Source, ad_group_id -> Ad Group ID, advertiser_id -> Advertiser ID)
       factColMapping=Map(clicks -> Clicks, impressions -> Impressions, spend -> Spend)
       filters=TreeSet(EqualityFilter(Advertiser ID,213,false,false))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:14:30.843 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:14:30.843 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = true
09:14:30.843 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - dimEngine=Oracle
09:14:30.843 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - factEngine=Druid
09:14:30.843 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - runMultiEngineQuery
09:14:30.843 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - factQueryThenDimQuery
09:14:30.844 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to af19e20e-2d0c-4f87-a34d-53c493a216eb
09:14:30.846 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - hasFallbackQueryAndRowList
09:14:30.846 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Hive, Presto, Druid)
09:14:30.846 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact_oracle engine=Oracle cost=9223372036854775807 level=9999 cardinalityPreference=2147483647
09:14:30.847 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.847 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.847 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set()
09:14:30.847 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet()
09:14:30.851 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.DefaultQueryPipelineFactory - factDrivenPartialRowList
09:14:30.851 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
09:14:30.862 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-ad_group filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:14:30.862 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:30.862 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=9223372036854775807 isGrainOptimized=false isIndexOptimized=true
09:14:30.862 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:30.862 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=9223372036854775807 isGrainOptimized=false isIndexOptimized=true
09:14:30.863 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:30.863 INFO  [ScalaTest-10-running-DefaultQueryPipelineFactoryTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=9223372036854775807 isGrainOptimized=false isIndexOptimized=true
09:14:30.867 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-keyword filters:Map(Source -> TreeSet(EqualityFilter(Source,1,false,false)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,12345,false,false))) : None
09:14:30.867 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:30.868 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:30.868 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:30.868 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:30.869 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Hive, Presto)
09:14:30.869 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=k_stats_fact1 engine=Oracle cost=800 level=9998 cardinalityPreference=2147483647
09:14:30.869 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=k_stats_new_partitioning engine=Oracle cost=800 level=9999 cardinalityPreference=2147483647
09:14:30.870 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats_new
       requestCols=Vector(DimColumnInfo(Keyword ID), FactColumnInfo(Month), DimColumnInfo(Ad Group ID), FactColumnInfo(Week), FactColumnInfo(Day), FactColumnInfo(Impressions), FactColumnInfo(Clicks), FactColumnInfo(CTR))
       requestSortByCols=Vector()
       dimColumnAliases=Set(Ad Group ID, Keyword ID)
       dimCardinalityEstimate=None
       factCost=Map((k_stats_fact1,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true), (k_stats_new_partitioning,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true))
       factSortByMap=Map()
       dimSortByMap=Map()
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=true
       hasDimFilters=false
       hasNonFKDimFilters=false
       hasFactSortBy=false
       hasDimSortBy=false
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=false
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=false
       hasLowCardinalityDimFilters=false
       isFactDriven=false
       forceDimDriven=true
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=SyncRequest
       startIndex=0
       maxRows=100
       includeRowCount=false
       hasDimAndFactOperations=false
       isTimeSeries=true
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true), TimeZone -> TimeZoneValue(PST))
       factSchemaRequiredAliasesMap=Map(k_stats_fact1 -> Set(Advertiser ID), k_stats_new_partitioning -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(keyword -> RightOuterJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Ad Group ID, Keyword ID)
       filters=TreeSet(Advertiser ID)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=false
       hasNonFKNonForceFilters=false
       hasNonFKSortBy=false
       hasNonFKNonPKSortBy=false
       hasLowCardinalityFilter=false
       hasPKRequested=true
       hasNonPushDownFilters=false
     )
     
requirement failed: ERROR_CODE:10007 (Ad Format Name) can't be used with advertiser schema in publicFact cube
result: {"queryType":"groupBy","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"statsDate","value":"20201103"},{"type":"selector","dimension":"statsDate","value":"20201110"}]},{"type":"selector","dimension":"advertiser_id","value":"12345"},{"type":"selector","dimension":"landing_page_url"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impressions"}],"postAggregations":[],"having":{"type":"and","havingSpecs":[{"type":"lessThan","aggregation":"Impressions","value":1000}]},"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":1020},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":5000,"queryId":"8bf62392-2c23-48c1-bd7d-fdeff953d6af"},"descending":false}got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Ad Status",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Campaign Name"
                             },
                             {
                               "field": "Campaign ID",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Spend",
                               "alias": null,
                               "value": null
                             },
                             {
                                "field": "Engagement Rate",
                                "alias": null,
                                "value": null
                             }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:14:30.870 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=targetingattribute
       publicDim.name=keyword
       fields=Set(Ad Group ID, Keyword ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,12345,false,false)))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=false
       hasNonFKSortBy=false
       hasNonPushDownFilters=false
       hasPKRequested=true
     
09:14:30.870 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=k_stats_fact1
       publicFact.name=k_stats_new
       fkCols=TreeSet(ad_group_id, advertiser_id, keyword_id)
       nonFkCols=Set(impressions, Month, stats_date, stats_source, Week, clicks, CTR)
       requestCols=Set(impressions, Month, stats_date, ad_group_id, Week, clicks, CTR, keyword_id)
       filterCols=Set(stats_source, advertiser_id)
       factCost=800
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(Month -> Month, stats_date -> Day, ad_group_id -> Ad Group ID, stats_source -> Source, advertiser_id -> Advertiser ID, Week -> Week, keyword_id -> Keyword ID)
       factColMapping=Map(clicks -> Clicks, impressions -> Impressions, CTR -> CTR)
       filters=TreeSet(EqualityFilter(Advertiser ID,12345,false,false), EqualityFilter(Source,1,false,false))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:14:30.870 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:14:30.870 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = false
09:14:30.870 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - runSingleEngineQuery
09:14:30.870 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set()
09:14:30.870 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet()
09:14:30.875 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.875 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query option defined!
09:14:30.875 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
09:14:30.908 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:30.908 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:30.908 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
QueryTest:
09:14:30.908 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.909 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.916 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.916 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.938 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-keyword filters:Map(Source -> TreeSet(EqualityFilter(Source,1,false,false)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,12345,false,false))) : None
09:14:30.938 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:30.939 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:30.939 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:30.939 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:30.940 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Hive, Presto)
09:14:30.940 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=k_stats_fact1 engine=Postgres cost=800 level=9998 cardinalityPreference=2147483647
09:14:30.940 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:30.940 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=k_stats_new_partitioning engine=Postgres cost=800 level=9999 cardinalityPreference=2147483647
09:14:30.941 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats_new
       requestCols=Vector(DimColumnInfo(Keyword ID), FactColumnInfo(Month), DimColumnInfo(Ad Group ID), FactColumnInfo(Week), FactColumnInfo(Day), FactColumnInfo(Impressions), FactColumnInfo(Clicks), FactColumnInfo(CTR))
       requestSortByCols=Vector()
       dimColumnAliases=Set(Ad Group ID, Keyword ID)
       dimCardinalityEstimate=None
       factCost=Map((k_stats_fact1,Postgres) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true), (k_stats_new_partitioning,Postgres) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true))
       factSortByMap=Map()
       dimSortByMap=Map()
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=true
       hasDimFilters=false
       hasNonFKDimFilters=false
       hasFactSortBy=false
       hasDimSortBy=false
       hasNonDrivingDimSortFilter=false
       hasDrivingDimNonFKNonPKSortBy=false
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=false
       hasLowCardinalityDimFilters=false
       isFactDriven=false
       forceDimDriven=true
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       localTimeDayFilter=BetweenFilter(Day,2020-11-03,2020-11-10)
       requestType=SyncRequest
       startIndex=0
       maxRows=100
       includeRowCount=false
       hasDimAndFactOperations=false
       isTimeSeries=true
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true), TimeZone -> TimeZoneValue(PST))
       factSchemaRequiredAliasesMap=Map(k_stats_fact1 -> Set(Advertiser ID), k_stats_new_partitioning -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(keyword -> RightOuterJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Ad Group ID, Keyword ID)
       filters=TreeSet(Advertiser ID)
       upperCandidates=List()
       lowerCandidates=List()
       isDrivingDimension=true
       hasNonFKOrForcedFilters=false
       hasNonFKNonForceFilters=false
       hasNonFKSortBy=false
       hasNonFKNonPKSortBy=false
       hasLowCardinalityFilter=false
       hasPKRequested=true
       hasNonPushDownFilters=false
     )
     
09:14:30.941 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=pg_targetingattribute
       publicDim.name=keyword
       fields=Set(Ad Group ID, Keyword ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,12345,false,false)))
       upperCandidates=List()
       lowerCandidates=List()
       hasNonFKOrForcedFilters=false
       hasNonFKSortBy=false
       hasNonPushDownFilters=false
       hasPKRequested=true
     
09:14:30.941 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=k_stats_fact1
       publicFact.name=k_stats_new
       fkCols=TreeSet(ad_group_id, advertiser_id, keyword_id)
       nonFkCols=Set(impressions, Month, stats_date, stats_source, Week, clicks, CTR)
       requestCols=Set(impressions, Month, stats_date, ad_group_id, Week, clicks, CTR, keyword_id)
       filterCols=Set(stats_source, advertiser_id)
       factCost=800
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(Month -> Month, stats_date -> Day, ad_group_id -> Ad Group ID, stats_source -> Source, advertiser_id -> Advertiser ID, Week -> Week, keyword_id -> Keyword ID)
       factColMapping=Map(clicks -> Clicks, impressions -> Impressions, CTR -> CTR)
       filters=TreeSet(EqualityFilter(Advertiser ID,12345,false,false), EqualityFilter(Source,1,false,false))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:14:30.941 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:14:30.941 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = false
09:14:30.941 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - runSingleEngineQuery
09:14:30.941 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set()
09:14:30.941 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet()
09:14:30.941 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.941 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:30.945 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:30.945 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query option defined!
09:14:30.945 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
09:14:31.031 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.031 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.066 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.066 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.087 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:31.087 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:31.087 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:31.088 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:31.089 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.089 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.094 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.094 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- withAvailableOnwardsDate: column annotation override success case
09:14:31.125 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 8bf62392-2c23-48c1-bd7d-fdeff953d6af
09:14:31.125 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.126 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.191 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:31.192 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.192 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.193 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.193 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.195 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:31.195 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:31.195 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:31.197 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.197 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.255 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.255 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.266 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.266 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.270 WARN  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator$ - Another query generator registered for OracleEngine : null
- domainJsonAsString should include only default revision of the cube
09:14:31.284 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 3d3acf10-55c2-441f-a912-452b68919cb3
09:14:31.296 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.296 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.296 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:14:31.298 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:31.298 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:31.299 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:31.299 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:14:31.299 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:31.301 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.301 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.302 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.302 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.312 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 1518b1fe-0587-4703-a592-2e47aa654ead
09:14:31.326 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
- withAvailableOnwardsDate: dim column override failure case
09:14:31.330 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.QueryChain - No data from driving query, running fall back query
09:14:31.337 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to c68cf2d1-6481-49ec-8d7a-36adbf0feeeb
09:14:31.353 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:14:31.356 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.QueryChain - No data from driving query, running fall back query
09:14:31.361 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.361 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.366 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to cba06f4c-2283-4327-9826-45bccae0ec9b
09:14:31.372 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.372 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.378 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:14:31.378 WARN  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.p.PostgresQueryGenerator$ - Another query generator registered for PostgresEngine : null
09:14:31.380 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
- withAvailableOnwardsDate: invalid discard
09:14:31.383 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.QueryChain - No data from driving query, running fall back query
09:14:31.395 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to aad86e79-1e75-4f68-97eb-61a60ab5e1f0
09:14:31.396 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:31.397 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:31.397 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.397 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:31.397 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:31.397 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.399 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.399 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.403 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.403 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.416 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:31.416 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:31.416 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:31.417 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.p.PostgresQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:14:31.420 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.420 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.428 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.p.PostgresQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:14:31.454 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 0b01ab92-e3f9-41a7-a057-41b0ea827fd6
- withAvailableOnwardsDate: dim column override success case
- Internal bucket test
- Default Bucketing Config Test
- AndFilter should be able to successfully render with an alias.
- BetweenFilter should fail for Druid engine
- OuterFilter should render combined filters with AND
- InFilter should fail for Druid engine
- NotInFilter should fail for Druid engine
- EqualityFilter should fail for Druid engine
- LikeFilter should fail for Druid engine
- SqlLikeFilterRenderer edit strings
- NotEqualToFilter should fail for Druid engine
- InFilter Test
- IsNullFilter should fail for Druid engine
- IsNotNullFilter should fail for Druid engine
- successfully dump ddl to file
- Filters with different forcefilter flags are same using the baseFilterOrdering
- Filters with different overridable flags are same using the baseFilterOrdering
- flatten domainJsonAsString should return all possible fields in cube
- discarding column from old cube, adding in new one
- External bucket test
- withAvailableOnwardsDate: verify overrideDDLAnnotation overrides on new table
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Ad Status",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Campaign Name"
                             },
                             {
                               "field": "Campaign ID",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Spend",
                               "alias": null,
                               "value": null
                             },
                             {
                                "field": "Engagement Rate",
                                "alias": null,
                                "value": null
                             },
                             {
                                "field": "Paid Engagement Rate",
                                "alias": null,
                                "value": null
                             }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:14:31.466 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.p.PostgresQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:14:31.469 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:31.469 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:31.470 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:31.471 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.QueryChain - No data from driving query, running fall back query
09:14:31.473 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.473 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.482 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 503c3195-1b21-4de4-b7f0-f7a7c86714fd
SingleEngineQueryTest:
- flatten domainJsonAsString should return correct version of cube
- domainJsonAsString and flattenDomainJsonAsString should not include NoopSchema
- Filters with different operations are different using the baseFilterOrdering
- Attempt to compare incomparable types
- failing forced filter
09:14:31.507 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.p.PostgresQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:14:31.518 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.QueryChain - No data from driving query, running fall back query
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Ad Status",
                               "alias": null,
                               "value": null
                             },
                             {
                                "field": "Ad Group ID"
                             },
                             {
                                "field": "Advertiser ID"
                             },
                             {
                               "field": "Campaign Name"
                             },
                             {
                               "field": "Campaign ID",
                               "alias": null,
                               "value": null
                             },
                             {
                               "field": "Spend",
                               "alias": null,
                               "value": null
                             },
                             {
                                "field": "Engagement Rate",
                                "alias": null,
                                "value": null
                             },
                             {
                                "field": "Paid Engagement Rate",
                                "alias": null,
                                "value": null
                             }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:14:31.528 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:31.528 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:31.528 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:31.530 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.530 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.531 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 11595f29-5509-4dce-91e0-55228c9755aa
MultiQueryTest:
- forced filter test
- Druid Filter Dim should be valid
- Should return the expected filter sets
- Should compare two filters & return t/f correctly.
- Should map the correct field to operation.
- create model should fail when non existing cube requested
- Should generate proper Spec for FilterDruid
- Should return the expected filter sets with Pk fields
- Test serialization/deserialization for Not like filter
09:14:31.545 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.p.PostgresQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Spend",
                               "alias": null,
                               "value": null
                             }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Campaign Name", "operator": "=", "value": "cmpgn_1"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:14:31.547 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.p.PostgresQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:14:31.551 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.QueryChain - No data from driving query, running fall back query
09:14:31.552 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:31.552 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:31.552 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:31.553 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.553 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.553 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:31.553 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:31.554 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:31.554 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.554 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.560 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.560 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.565 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:31.565 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:31.565 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:31.570 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.570 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
got json {
                           "cube": "performance_stats",
                           "selectFields": [
                             {
                               "field": "Source"
                             },
                             {
                               "field": "N Spend",
                               "alias": null,
                               "value": null
                             }
                           ],
                           "filterExpressions": [
                              {"field": "Advertiser ID", "operator": "=", "value": "12345"},
                              {"field": "Campaign Name", "operator": "=", "value": "cmpgn_1"},
                              {"field": "Day", "operator": "between", "from": "2020-11-03", "to": "2020-11-10"}
                           ]
                           }
09:14:31.576 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:31.576 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:31.577 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:31.579 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.579 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.586 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:31.587 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:31.587 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:31.590 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.590 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- Should allow aliasing of a publicFact
ColumnAnnotationTest:
- successfully find HiveShardingExpression with instance
- successfully find ForeignKey with instance
- successfully find DayColumn with instance
- successfully find PrestoShardingExpression with instance
- Instantiate  Hive/PrestoShardingExpression
- Instantiate ForeignKey and DayColumn
- Create a QueryBuilder
09:14:31.596 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:31.596 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:31.596 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:31.599 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.599 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.604 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:31.604 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(0), dryRunQueryGenVersion: None
09:14:31.604 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:31.607 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.607 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.614 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:31.614 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(0), dryRunQueryGenVersion: None
09:14:31.614 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.h.HiveQueryGenerator - Generating Hive query using HiveQueryGenerator V0:, version Version(0)
09:14:31.617 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.617 INFO  [ScalaTest-11-running-HiveQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
QueryContextTest:
- test ddl for fact
- test ddl for dimension
SELECT *
FROM (SELECT co1.id "Campaign ID", coalesce(f0."impressions", 1) "Impressions"
      FROM (SELECT /*+ PUSH_PRED PARALLEL_INDEX(cb_campaign_k_stats 4) CONDITIONAL_HINT1 CONDITIONAL_HINT2 CONDITIONAL_HINT3 */
                   campaign_id, SUM(impressions) AS "impressions"
            FROM fact2 FactAlias
            WHERE (advertiser_id = 12345) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY campaign_id
            HAVING (SUM(impressions) > 1608)
           ) f0
           INNER JOIN
                (SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT /*+ CampaignHint */ id, advertiser_id
            FROM campaign_oracle
            WHERE (advertiser_id = 12345)
             ) WHERE ROWNUM <= 120) D ) WHERE ROW_NUMBER >= 21 AND ROW_NUMBER <= 120) co1 
            ON (f0.campaign_id = co1.id)

) 
   HiveQueryGeneratorV2Test:
- Column annotations should convert to JSON properly.
09:14:31.669 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:31.669 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:31.669 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:31.675 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.675 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.676 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.676 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.680 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:31.680 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:31.680 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:31.684 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.684 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.689 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:31.689 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:31.689 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:31.691 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.691 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.699 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:31.700 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:31.700 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:31.702 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 058c2efa-4609-4957-bc02-d50b368b37dc
- Should allow aliasing of a publicFact with column replacements
- registering Hive query generation multiple times should fail
- test ddl for fact
RowCSVWriterTest:
- isNumeric
- isStringStartingWithSpecialChar
- test ddl for dimension
09:14:31.706 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.706 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- RowCSVWriterClass
- WriteRow
- Should fail with invalid secondary alias (duplicate)
- shouldQuoteStringsCorrectly
{"queryType":"groupBy","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"statsDate","value":"20201103"},{"type":"selector","dimension":"statsDate","value":"20201110"}]},{"type":"selector","dimension":"advertiser_id","value":"12345"},{"type":"not","field":{"type":"selector","dimension":"landing_page_url"}}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impressions"}],"postAggregations":[],"having":{"type":"and","havingSpecs":[{"type":"lessThan","aggregation":"Impressions","value":1000}]},"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":1020},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":5000,"queryId":"058c2efa-4609-4957-bc02-d50b368b37dc"},"descending":false}09:14:31.714 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Hive with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:31.714 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Hive, queryGenVersion: Version(2), dryRunQueryGenVersion: None
09:14:31.714 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.h.HiveQueryGeneratorV2 - Generating Hive query using HiveQueryGenerator V2 Outer Group By:, version Version(2)
09:14:31.718 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.718 INFO  [ScalaTest-24-running-HiveQueryGeneratorV2Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
DruidQueryGeneratorTest:
- registering Druid query generation multiple times should fail
PostResultFunctionTest:
- START_OF_THE_WEEK postresult column test
- START_OF_THE_WEEK postresult should not error out due to invalid format
SELECT *
FROM (SELECT cp1.id "Campaign ID", coalesce(f0."impressions", 1) "Impressions"
      FROM (SELECT /*+ PUSH_PRED PARALLEL_INDEX(cb_campaign_k_stats 4) CONDITIONAL_HINT1 CONDITIONAL_HINT2 CONDITIONAL_HINT3 */
                   campaign_id, SUM(impressions) AS "impressions"
            FROM fact2 FactAlias
            WHERE (advertiser_id = 12345) AND (stats_source = 2) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY campaign_id
            HAVING (SUM(impressions) > 1608)
           ) f0
           INNER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT /*+ CampaignHint */ id, advertiser_id
            FROM campaign_postgres
            WHERE (advertiser_id = 12345)
             ) sqalias1 LIMIT 120) D ) sqalias2 WHERE ROWNUM >= 21 AND ROWNUM <= 120) cp1 
            ON (f0.campaign_id = cp1.id)

) sqalias3 
   09:14:31.797 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.797 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
DimensionTest:
- newDimension with no primary key should fail
- Should alias a fact with an overriden secondary Dimension, keeping default base.
09:14:31.804 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:31.804 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:31.804 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:31.806 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.806 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
QueryAttributesTest:
- QueryAttribute Creation
- QueryAttributes Listing failure/success cases
SELECT *
FROM (SELECT co1.id "Campaign ID", coalesce(f0."impressions", 1) "Impressions"
      FROM (SELECT /*+ PUSH_PRED PARALLEL_INDEX(cb_campaign_k_stats 4) CONDITIONAL_HINT1 CONDITIONAL_HINT2 CONDITIONAL_HINT3 */
                   campaign_id, SUM(impressions) AS "impressions"
            FROM fact2 FactAlias
            WHERE (advertiser_id = 12345) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY campaign_id
            HAVING (SUM(impressions) < 1608)
           ) f0
           INNER JOIN
                (SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT /*+ CampaignHint */ id, advertiser_id
            FROM campaign_oracle
            WHERE (advertiser_id = 12345)
             ) WHERE ROWNUM <= 120) D ) WHERE ROW_NUMBER >= 21 AND ROW_NUMBER <= 120) co1 
            ON (f0.campaign_id = co1.id)

) 
   - Copy a Hive dimension without resetAliasIfNotPresent
DimDrivenFactOrderedPartialRowListTest:
- Copy a Druid dimension without resetAliasIfNotPresent
- Copy an Oracle dimension without resetAliasIfNotPresent
- Copy an Postgres dimension without resetAliasIfNotPresent
- Copy a Presto dimension without resetAliasIfNotPresent
- Copy a Presto dimension with resetAliasIfNotPresent
- Copy a Hive dimension with resetAliasIfNotPresent
- Copy a Druid dimension with resetAliasIfNotPresent
- Copy an Oracle dimension with resetAliasIfNotPresent
- Copy an Postgres dimension with resetAliasIfNotPresent
- newDimension should fail with derived expression with unknown referenced fields
- newDimension should fail with more than one primary key
- newDimension should fail with columns with different engines
- newDimension should fail with columns with different engine requirement
- newDimension should fail with dimension annotated with different engine requirement
- newDimension should fail with column annotated with different engine requirement
- DryRun bucket test
- DryRun bucket test with dryRunRevision and forceEngine but no cube config
- newDimension should fail with duplicate columns
- DryRun bucket test with dryRunRevision and no forceEngine but no cube config
- newDimension should succeed with no duplicate columns
- newDimension with PrestoEngine should succeed with no duplicate columns
- Test for invalid cube
- newDimension should fail if ddl annotation is of a different engine other than the engine of the dim
- validates should fail if schema field maps to non-existing column
- validates engine should fail if column engine is different from dim engine
- withAlternativeEngine should fail with the same engine as base engine
- withAlternativeEngine should fail with the same engine as previous alternative engine
- withAlternateEngine should fail if ddl annotation is of a different engine other than the engine of the dim
- createSubset should succeed for valid discarding set
- createSubset should not include dependent columns when discarding
09:14:31.861 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 9e65e751-431e-40b7-bfbf-872c6a71835b
- construct public dim should fail if dim map is empty
- public dim must have one primary key
- toPublicDimension should fail if pub columns are not in the base dim
- toPublicDimension should fail if forced filter column is not in the base dim
- toPublicDimension should fail if forced filter columns ARE in the base dim, but resolve to the same base column (duplicate where clause)
- toPublicDimension should fail if high cardinality filter column not in definition
- toPublicDimension should fail if a declared forced filter doesn't have isForcedFilter=true
- Test for no dryRun config
- newDimension should fail if derived expression is not defined for derived columns
- withAlternateEngine should fail if derived expression is not defined for derived columns
- withAlternateEngine druid should, covering Druid dervied expressions
- withAlternateEngine presto should succeed, covering Presto dervied expressions
- Should create dims of level nine and eight and Seven
09:14:31.874 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:14:31.888 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 4f993941-ac39-48a3-bf27-8d9e4f349576
WithNewGrainFactTest:
- withNewGrain should be successful given a different grain
- create model should succeed when cube columns requested without derived expression column
- create model should succeed when cube columns requested with derived expression column
09:14:31.894 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.894 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- withNewGrain should be successful given a different grain on Oracle
- create model should succeed when dimension field with dimension key requested with facts
- create model should succeed when dimension field without dimension key requested with facts
- withNewGrain should be successful given a different grain on Druid
- withNewGrain should be successful given a different grain on Presto
- create model should fail when non existing field requested
- withNewGrain should be successful given a different grain and should copy force filters
- create model should fail when filter on non existing field requested
- withNewGrain should fail given the same grain
- withNewGrain should fail given non-existing from
- withNewGrain should fail given the same name
- withNewGrain should fail if to table already exists
- create model should fail when ordering on non existing field requested
- create model should fail if ordering field is not in requested fields
- dim only query should generate full SQL
- Generators calling generate with null context should throw IllegalArgumentExceptions
- create model should fail when dimension field with dimension key requested with facts for dimension not in fact
- Test DailyGrain Operations
- DailyGrain: getDaysBetween Failure Cases
- MinuteGrain: success cases
09:14:31.901 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.901 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:31.903 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:31.903 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:31.903 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:31.906 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 3c62c218-94b6-4a8d-a757-a0c32a1600fd
DefaultQueryPipelineFactoryTest:
- create model should fail when dimension field without dimension key requested with facts for dimension not in fact
- create model should fail when dimension filter with dimension key requested with facts for dimension not in fact
- Generators attempting to create dimension SQL should fail with null context
- successfully multi query
- successfully run multi engine query
09:14:31.932 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Class ID
09:14:31.933 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Class ID
09:14:31.937 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Class ID
09:14:31.938 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator - publicDim contains injectFilter.field: Class ID
09:14:31.950 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.950 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
ParameterTest:
- create model should fail when dimension filter without dimension key requested with facts for dimension not in fact
- successfully run dim only query
09:14:31.953 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:31.953 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- Create model should fail if no candidates is found !!! IGNORED !!!
- SerializeParameters should serialize a map of parameters into a List
- create model should succeed when cube columns requested with dim filter
- generating hive query
- generating hive query
- create model should succeed when cube columns requested for sync query with dim filter and dim sort
- DeserializeParameters should deserialize a JSON into a Map of parameter values
LongRangeLookupTest:
- successfully find element in range
- successfully not find element in not in range
- fail to create a lookup with overlapping ranges
09:14:31.992 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-keyword filters:Map(Source -> TreeSet(EqualityFilter(Source,2,true,true)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,12345,false,false))) : None
09:14:31.992 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:31.992 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:31.992 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:14:31.993 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:14:31.995 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - disqualifySet = Set(Druid, Hive, Presto)
09:14:31.995 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact2 engine=Oracle cost=800 level=9998 cardinalityPreference=2147483647
09:14:31.995 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory$ - fn=fact1 engine=Oracle cost=800 level=9999 cardinalityPreference=2147483647
09:14:31.996 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       cube=k_stats
       requestCols=Vector(DimColumnInfo(Keyword ID), DimColumnInfo(Campaign ID), FactColumnInfo(Impressions), DimColumnInfo(Ad Group Status), DimColumnInfo(Campaign Status), FactColumnInfo(Count))
       requestSortByCols=Vector(DimSortByColumnInfo(Campaign Status,ASC))
       dimColumnAliases=Set(Ad Group Status, Campaign ID, Campaign Status, Keyword ID)
       dimCardinalityEstimate=None
       factCost=Map((fact2,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true), (fact1,Oracle) -> FactRowsCostEstimate(RowsEstimate(800,false,9223372036854775807,false),800,true))
       factSortByMap=Map()
       dimSortByMap=Map(Campaign Status -> ASC)
       hasFactFilters=true
       hasMetricFilters=false
       hasNonFKFactFilters=true
       hasDimFilters=false
       hasNonFKDimFilters=false
       hasFactSortBy=false
       hasDimSortBy=true
       hasNonDrivingDimSortFilter=true
       hasDrivingDimNonFKNonPKSortBy=false
       hasNonDrivingDimNonFKNonPKFilter=false
       anyDimHasNonFKNonForceFilter=false
       hasLowCardinalityDimFilters=false
       isFactDriven=false
       forceDimDriven=true
       forceFactDriven=false
       schema=advertiser
       utcTimeDayFilter=DateTimeBetweenFilter(Day,2020-11-03T17:14:25.096Z,2020-11-10T17:14:25.096Z,yyyy-MM-dd'T'HH:mm:ss.SSSZZ)
       localTimeDayFilter=DateTimeBetweenFilter(Day,2020-11-03T17:14:25.096Z,2020-11-10T17:14:25.096Z,yyyy-MM-dd'T'HH:mm:ss.SSSZZ)
       requestType=SyncRequest
       startIndex=20
       maxRows=100
       includeRowCount=false
       hasDimAndFactOperations=true
       isTimeSeries=false
       isDebugEnabled=true
       additionalParameters=Map(Debug -> DebugValue(true), TimeZone -> TimeZoneValue(America/Los_Angeles))
       factSchemaRequiredAliasesMap=Map(fact1 -> Set(Advertiser ID), fact2 -> Set(Advertiser ID))
       queryGrain=Some(DailyGrain)
       isRequestingDistict=false
       publicDimToJoinTypeMap=Map(campaign -> InnerJoin, ad_group -> InnerJoin, keyword -> RightOuterJoin)
       dimensionsCandidates=TreeSet(
       fields=Set(Ad Group ID, Keyword ID)
       filters=TreeSet(Advertiser ID)
       upperCandidates=List()
       lowerCandidates=List(ad_group)
       isDrivingDimension=true
       hasNonFKOrForcedFilters=false
       hasNonFKNonForceFilters=false
       hasNonFKSortBy=false
       hasNonFKNonPKSortBy=false
       hasLowCardinalityFilter=false
       hasPKRequested=true
       hasNonPushDownFilters=false
     , 
       fields=Set(Campaign ID, Ad Group Status, Ad Group ID)
       filters=TreeSet(Advertiser ID)
       upperCandidates=List(keyword)
       lowerCandidates=List(campaign)
       isDrivingDimension=false
       hasNonFKOrForcedFilters=false
       hasNonFKNonForceFilters=false
       hasNonFKSortBy=false
       hasNonFKNonPKSortBy=false
       hasLowCardinalityFilter=false
       hasPKRequested=false
       hasNonPushDownFilters=false
     , 
       fields=Set(Campaign Status, Campaign ID)
       filters=TreeSet(Advertiser ID)
       upperCandidates=List(ad_group)
       lowerCandidates=List()
       isDrivingDimension=false
       hasNonFKOrForcedFilters=false
       hasNonFKNonForceFilters=false
       hasNonFKSortBy=true
       hasNonFKNonPKSortBy=true
       hasLowCardinalityFilter=false
       hasPKRequested=true
       hasNonPushDownFilters=false
     )
     
09:14:31.996 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=campaign_oracle
       publicDim.name=campaign
       fields=Set(Campaign Status, Campaign ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,12345,false,false)))
       upperCandidates=List(ad_group_oracle)
       lowerCandidates=List()
       hasNonFKOrForcedFilters=false
       hasNonFKSortBy=true
       hasNonPushDownFilters=false
       hasPKRequested=true
     
09:14:31.997 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=ad_group_oracle
       publicDim.name=ad_group
       fields=Set(Campaign ID, Ad Group Status, Ad Group ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,12345,false,false)))
       upperCandidates=List(targetingattribute)
       lowerCandidates=List(campaign_oracle)
       hasNonFKOrForcedFilters=false
       hasNonFKSortBy=false
       hasNonPushDownFilters=false
       hasPKRequested=false
     
09:14:31.997 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - 
       dim.name=targetingattribute
       publicDim.name=keyword
       fields=Set(Ad Group ID, Keyword ID)
       filters=TreeSet(PushDownFilter(EqualityFilter(Advertiser ID,12345,false,false)))
       upperCandidates=List()
       lowerCandidates=List(ad_group_oracle)
       hasNonFKOrForcedFilters=false
       hasNonFKSortBy=false
       hasNonPushDownFilters=false
       hasPKRequested=true
     
09:14:31.997 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - factBestCandidateOption = Some(
       fact.name=fact2
       publicFact.name=k_stats
       fkCols=TreeSet(ad_group_id, advertiser_id, campaign_id, keyword_id)
       nonFkCols=Set(Count, impressions, stats_source)
       requestCols=Set(impressions, ad_group_id, Count, campaign_id, keyword_id)
       filterCols=Set(stats_source, advertiser_id)
       factCost=800
       factRows=RowsEstimate(800,false,9223372036854775807,false)
       dimColMapping=Map(ad_group_id -> Ad Group ID, stats_source -> Source, advertiser_id -> Advertiser ID, campaign_id -> Campaign ID, keyword_id -> Keyword ID)
       factColMapping=Map(impressions -> Impressions, Count -> Count)
       filters=TreeSet(EqualityFilter(Advertiser ID,12345,false,false), EqualityFilter(Source,2,true,true))
       duplicateAliasMapping=Map()
       schemaRequiredAliases=Set(Advertiser ID)
       isGrainOptimized=false
       isIndexOptimized=true
     )
09:14:31.997 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMetricsOnlyViewQuery = false
09:14:31.997 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - isMultiEngineQuery = false
09:14:31.997 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - runSingleEngineQuery
09:14:31.998 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.FactualQueryContext - queryConditions = Set(IsGrainOptimized(false), IsIndexOptimized(true), ForceDimDriven(true))
09:14:31.998 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.FactualQueryContext - factConditionalHints = TreeSet(CONDITIONAL_HINT1, CONDITIONAL_HINT2, CONDITIONAL_HINT3)
09:14:32.001 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator - renderedDim: ad_group_oracle renderedDim._3.dim.isDerivedDimension: false hasNonPushDownFilters : false
09:14:32.001 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator - b: targetingattribute b._3.dim.isDerivedDimension: false hasNonPushDownFilters : false
09:14:32.001 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator - renderedDim: campaign_oracle renderedDim._3.dim.isDerivedDimension: false hasNonPushDownFilters : false
09:14:32.002 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.o.OracleQueryGenerator - b: targetingattribute b._3.dim.isDerivedDimension: false hasNonPushDownFilters : false
09:14:32.002 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:32.002 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query option defined!
09:14:32.002 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.QueryPipelineBuilder - fallbackQueryChain not defined
09:14:32.004 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 67e62715-8760-4289-ab22-16b6b7b73527
HiveDDLGeneratorTest:
- successfully construct json row list
- Test for dryRun single revision config
- Whitelisted user test
- create model should succeed when cube columns requested for sync query with dim filter and dim sort with forceFactDriven
- test hive fact toDDL
- test hive dim toDDL
SELECT *
FROM (SELECT cp1.id "Campaign ID", coalesce(f0."impressions", 1) "Impressions"
      FROM (SELECT /*+ PUSH_PRED PARALLEL_INDEX(cb_campaign_k_stats 4) CONDITIONAL_HINT1 CONDITIONAL_HINT2 CONDITIONAL_HINT3 */
                   campaign_id, SUM(impressions) AS "impressions"
            FROM fact2 FactAlias
            WHERE (advertiser_id = 12345) AND (stats_source = 2) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY campaign_id
            HAVING (SUM(impressions) < 1608)
           ) f0
           INNER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT /*+ CampaignHint */ id, advertiser_id
            FROM campaign_postgres
            WHERE (advertiser_id = 12345)
             ) sqalias1 LIMIT 120) D ) sqalias2 WHERE ROWNUM >= 21 AND ROWNUM <= 120) cp1 
            ON (f0.campaign_id = cp1.id)

) sqalias3 
   - test hive ddl with column ordering
09:14:32.015 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to c39f7644-3e3b-43bc-807b-44bf53353ab8
09:14:32.019 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 1e30ebb4-0ea4-4d8f-a847-613c62813476
09:14:32.025 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.p.PostgresQueryGenerator - publicDim contains injectFilter.field: Ad Group ID
09:14:32.027 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:32.027 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- create model should succeed when cube columns requested for async query with dim filter and dim sort
QueryGeneratorRegistryTest:
- QueryGenerator bucket selection should succeed
- Version forced in bucketParams should be selected 
- Invalid internal bucketing configs should throw Exception
- Invalid external bucketing configs should throw Exception
- test max percentage sum exceed 100
09:14:32.036 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:32.036 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:32.040 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to adf0a0f1-6482-4dc6-a881-b239259fbda3
09:14:32.044 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:32.044 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:32.045 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 555232d6-426b-4bed-b52e-0857c0bc1411
09:14:32.048 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:32.048 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:32.050 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to ec81825d-84c9-4b21-8e73-744317d31273
09:14:32.050 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:32.051 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:32.051 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:32.051 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:32.051 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:32.053 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:32.053 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:32.053 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:32.053 INFO  [ScalaTest-1-running-OracleQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:32.056 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to bd4b277d-80e7-43a7-b89e-fad84e8f2d7d
ColumnValueExtractorTest:
- create model should succeed when cube columns requested for sync query with dim sort
- generating hive query with custom rollups
- generating hive query with custom rollups
- user stats hourly
- create model should succeed when cube columns requested for async query with dim sort
- user stats hourly
- create model should succeed when cube columns requested with fact filter
- successfully construct complete row list
- Successfully register query generator without version
- create model should succeed when cube columns requested with fact filter and fact sort
- Date type columns should be rendered with getFormattedDate udf in outer select
- Date type columns should be rendered with getFormattedDate udf in outer select
- create model should succeed when cube columns requested with fact sort
- create model should succeed when cube columns requested with dim filter and fact sort
- Should escape string if escaping is required
- Successfully register query generator with version
- Should escape string if escaping is required
- generating presto query
- Hive query should contain UDF definitions 
09:14:32.059 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:32.059 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- Hive query should contain UDF definitions 
- Failed to register query generator repeatedly for the same engine and version
- Test get query generator with version
09:14:32.061 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 38d02e34-878e-4031-bfb1-e7673b784a28
09:14:32.063 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 09ab3bdc-29b3-42fc-8d65-74d972f3b28d
09:14:32.066 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:32.066 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:32.075 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.p.PostgresQueryGenerator - publicDim contains injectFilter.field: Class ID
09:14:32.075 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.p.PostgresQueryGenerator - publicDim contains injectFilter.field: Class ID
09:14:32.077 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.p.PostgresQueryGenerator - publicDim contains injectFilter.field: Class ID
09:14:32.078 INFO  [ScalaTest-4-running-PostgresQueryGeneratorTest] c.y.m.c.q.p.PostgresQueryGenerator - publicDim contains injectFilter.field: Class ID
ReportingRequestTest:
- test addRow
- should support execution parameters
- successfully construct Derived row list
09:14:32.090 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
09:14:32.098 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
FieldExtendedTest:
- create model should succeed when cube columns requested with fact filter and dim sort
- dim only query with no dim should fail
- Verify same success returned for optional and non-optional FieldExtended
- Verify fieldExtended failure returns default value on Option.
09:14:32.123 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
- MultiQuery with a subsequentQuery to execute.
- successfully construct partial row list
- should support execution parameters
- successfully construct csv row list with header
- test getBigDecimalSafely
OracleQueryGeneratorTest:
ReportingRequest
- registering Oracle query generation multiple times should fail
- Concatenated cols should be wrapped in CONCAT_WS()
- Concatenated cols should be wrapped in CONCAT_WS()
- successfully run fact only query
- Create and merge dim-fact rowList Fact Driven
09:14:32.155 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:32.155 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
OffHeapRowListTest:
- Should mangle non-id column aliases
- order of filter should not change request model for sync query with fact filter
- Should mangle non-id column aliases
- Should support “NA” for NULL string
- test getLongSafely
- Should support “NA” for NULL string
- successfully construct partial row list
- test rocksb powerset storage
- test roaring bitmap powerset storage
09:14:32.171 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:32.171 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:32.172 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:32.175 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:32.175 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
HiveQueryGeneratorV1Test:
- Query with request DecType fields that contains max and min should return query with max and min range
- registering Hive query generation multiple times should fail
- test register with query generator for a different engine
- should should be extracted from a json object as async request
ReportingRequest
- Query with request DecType fields that contains max and min should return query with max and min range
- order of filter should not change request model for async query with fact filter
- should should be extracted from a json object as sync request
ReportingRequest
- successfully construct json row list from another row list
- Query with constant requested fields should have constant columns
- should fail when datetime between filter with Hour and Minute filters are provided
ReportingRequest without filters (except Day)
- Query with constant requested fields should have constant columns
- dim fact sync fact driven query should produce all requested fields in same order as in request
- Fact group by clause should only include dim columns
- should should be extracted from a json object
ReportingRequest without ordering
- Fact group by clause should only include dim columns
- should should be extracted from a json object
ReportingRequest without si
- should should be extracted from a json object
ReportingRequest without mr
- should should be extracted from a json object
ReportingRequest with invalid fields json
- Hive multi dimensional query
- Hive multi dimensional query
- order of filter should not change request model for sync query with dim filter
- dim fact sync fact driven query with multiple dim join should produce all requested fields in same order as in request
- should fail
ReportingRequest with invalid filters json
- should fail
ReportingRequest with bad filter operator
- Invalid query context
- test getColumnValue
QueryExecutorTest:
- successfully generate Druid single engine query with Dim lookup
- successfully construct complete row list with post result ephemeral columns
PrestoQueryGeneratorTest:
- registering Presto query generation multiple times should fail
- DateTime type columns should be rendered with getDateTimeFromEpoch udf in outer select
- generating hive query
- should fail with operator error
ReportingRequest with bad order operator
- should fail with order error
- dim fact async fact driven query should produce all requested fields in same order as in request
ReportingRequest with different day and hour operator
- should fail with operator mismatch
- DateTime type columns should be rendered with getDateTimeFromEpoch udf in outer select
ReportingRequest with different day and minute operator
- should fail with operator mismatch
ReportingRequest with invalid day filter format
- generating hive query with custom rollups
- MultiQuery with a valid FallbackQueryOption & empty result rowList - expect a fallBack query to execute in logger.
09:14:32.255 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:32.255 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- dim fact sync dimension driven query should produce all requested fields in same order as in request with in Subquery Clause
- user stats hourly
- should fail
ReportingRequest with invalid hour filter format
- order of filter should not change request model for async query with dim filter
- should fail
ReportingRequest with invalid minute filter format
- test NoopRollup expression for generated query
- should fail
ReportingRequest with missing day filter
- test NoopRollup expression for generated query
- force injectFilterSet to fk primary key
- should fail
ReportingRequest with invalid parameter data type
- test joinType for non fk dim filters for generated query
- order of sort by should not change request model for sync query with fact sort
- successfully run combined query
- test joinType for non fk dim filters for generated query
- generating presto query with greater than filter
- should fail
ReportingRequest with valid parameter data type
- should succeed
ReportingRequest with curators
- test joinType for fact driven queries generated query
- successfully construct json row list in compatibility mode
- Date type columns should be rendered with getFormattedDate udf in outer select
- test like filter with hive query gem
- dim fact async fact driven query with dim filters should use INNER JOIN
- should succeed
ReportingRequest with out curators
- successfully generate sync single engine query
- should inject default curator
ReportingRequest with day and hour filter between operator
- test joinType for fact driven queries generated query
- should succeed
ReportingRequest with day filter in operator
- should succeed
ReportingRequest with day and hour filter equality operator
- order of sort by should not change request model for async query with fact sort
- should succeed
ReportingRequest with empty string for equality filter
- should fail
ReportingRequest with empty string for like filter
- should fail
ReportingRequest with empty string for IN filter values
- should fail
ReportingRequest with empty string for NOT IN filter values
- should fail
ReportingRequest with empty list for IN filter values
- should fail
ReportingRequest with empty list for NOT IN filter values
- should fail
ReportingRequest with empty string for between from value
- Should escape string if escaping is required
- should fail
ReportingRequest with empty string for between to value
- should fail
ReportingRequest
- should successfully deserialize sync request with forceDimensionDriven
ReportingRequest
- test like filter with hive query gem
- should successfully deserialize sync request with forceFactDriven
ReportingRequest
- should successfully deserialize sync request with both forceFactDriven and forceDimensionDriven
ReportingRequest
- test like filter with hive query injection testing
- should fail to deserialize sync request with both forceFactDriven and forceDimensionDriven set to true
ReportingRequest
- dim fact async fact driven query with dim filters should use INNER JOIN and use new partitioning scheme
- should successfully deserialize sync request with schema
ReportingRequest
- test like filter with hive query injection testing
- order of sort by should not change request model for sync query with dim sort
- should successfully deserialize sync request with includeRowCount
ReportingRequest
- should successfully deserialize sync request with displayName
ReportingRequest
- should successfully deserialize sync request with displayName as null
ReportingRequest
- should successfully deserialize sync request with quotes in alias name escaped with single quotes
ReportingRequest
- dim query context should fail with UnsupportedOperationException
- Hive query should contain UDF definitions 
- Missing group by fact cols
- order of sort by should not change request model for async query with dim sort
- should successfully deserialize sync request with multiple data types in filters
ReportingRequest
- should successfully deserialize sync request and force oracle engine
ReportingRequest
- Missing group by fact cols
- create model should succeed when cube columns requested for sync query with constant fields
- should support execution parameters
- should successfully deserialize sync request and force hive engine
ReportingRequest
- HiveQueryGeneratorTest: should fail to generate Hive query for Outer Filters
- HiveQueryGeneratorTest: should fail to generate Hive query for Outer Filters
- should successfully deserialize sync request and force druid engine
09:14:32.279 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
ReportingRequest
09:14:32.279 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
- verify dim query can generate inner select and group by with static mapping
- Duplicate registration of the generator
09:14:32.279 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
- should successfully deserialize sync request and set request context
ReportingRequest
- should successfully deserialize request and add timezone
- Concatenated cols should be wrapped in CONCAT_WS()
- create model should fail when from date is in future
ReportingRequest
- verify dim query can generate inner select and group by with static mapping
- verify regex_extract query
- generating hive query with sort on dimension
- create model should fail when from date is in future with datetime between filter
- Should mangle non-id column aliases
- should successfully deserialize request and add hostname
ReportingRequest
- create model should fail when all dates are in future
- should successfully deserialize async request and with timezone and schema
ReportingRequest
- create model should pass when any date is in past and other dates are in future
- should return correct EntityID and DateRange
ReportingRequest
- Verify metric FieldEquality generates a valid query.
- Duplicate registration of the generator
- with forced failing query result and fallback not defined
09:14:32.283 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:32.283 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- generating hive query with greater than filter
- should return correct EntityID and DateRange with different filter operation
ReportingRequest
- create model should succeed when cube columns requested for async query with constant fields and forceDimensionDriven
- successfully construct json row list from another row list in compatibility mode
- create model should succeed when cube columns requested for sync query with constant fields and forceFactDriven
- should successfully serialize and deserialize async request and with report format
ReportingRequest
- should should be extracted from a scheduled request json with no day filter validation
ReportingRequest
- should should fail to validate when empty request is passed
ReportingRequest
- should should be extracted from a json object as outer filter request
ReportingRequest with groupby query type
- test isEmpty
- should succeed
ReportingRequest with select query type
- should succeed
- dim fact sync fact driven query should produce all requested fields in same order as in request
- Should support “NA” for NULL string
- create model should succeed when cube columns requested for async query with constant fields
- Query with request DecType fields that contains max and min should return query with max and min range
- create model should fail when missing schema required field
- Query with constant requested fields should have constant columns
- successfully construct Fact Driven partial row list and test One to Many Merge
09:14:32.354 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:32.354 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- generate valid model for sync query with fields having dimension attribute,
       filter on fact dim col which is a foreign key and it is in the list of fields,
       order by fact dim col which is a foreign key
- dim fact async fact driven query without dim filters should use LEFT OUTER JOIN
- Fact group by clause should only include dim columns
- dim fact sync fact driven query with multiple dim join should produce all requested fields in same order as in request
- generate valid model for async query with forceDimensionDriven and fields having dimension attribute,
filter on fact dim col which is a foreign key and it is in the list of fields,
order by fact dim col which is a foreign key
- generating presto query with less than filter
- generating presto query
- dim fact async fact driven query should produce all requested fields in same order as in request
- successfully construct csv row list without header
- Hive multi dimensional query
- dim fact sync dimension driven query should use RIGHT OUTER JOIN
- generate valid model for async query with fields having dimension attribute,
filter on fact dim col which is a foreign key and it is in the list of fields,
order by fact dim col which is a foreign key
- limit should be set to defaultMaxRows when maxRows is less than 1
- fact only query should generate full SQL
- dim fact sync dimension driven query should produce all requested fields in same order as in request with in Subquery Clause
- Discard engines in disqualify set for fallback query
SELECT *
FROM (SELECT cp1.id "Campaign ID", coalesce(f0."impressions", 1) "Impressions", COALESCE(f0.ad_format_id, 'Other') "Ad Format Name", COALESCE(f0.ad_format_sub_type, 'N/A') "Ad Format Sub Type"
      FROM (SELECT /*+ PUSH_PRED PARALLEL_INDEX(cb_campaign_k_stats 4) CONDITIONAL_HINT1 CONDITIONAL_HINT2 CONDITIONAL_HINT3 */
                   CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (5)) THEN 'Single image' WHEN (ad_format_id IN (6)) THEN 'Single image' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (9)) THEN 'Carousel' WHEN (ad_format_id IN (2)) THEN 'Single image' WHEN (ad_format_id IN (7)) THEN 'Video' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (3)) THEN 'Single image' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (8)) THEN 'Video with HTML Endcard' WHEN (ad_format_id IN (4)) THEN 'Single image' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'Other' END ad_format_id, CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'N/A' END ad_format_sub_type, campaign_id, SUM(impressions) AS "impressions"
            FROM fact2 FactAlias
            WHERE (ad_format_id = 100) AND (advertiser_id = 12345) AND (stats_source = 2) AND (ad_format_id IN (4,5,6,2,3)) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (5)) THEN 'Single image' WHEN (ad_format_id IN (6)) THEN 'Single image' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (9)) THEN 'Carousel' WHEN (ad_format_id IN (2)) THEN 'Single image' WHEN (ad_format_id IN (7)) THEN 'Video' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (3)) THEN 'Single image' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (8)) THEN 'Video with HTML Endcard' WHEN (ad_format_id IN (4)) THEN 'Single image' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'Other' END, CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'N/A' END, campaign_id
            
           ) f0
           RIGHT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT /*+ CampaignHint */ id, advertiser_id
            FROM campaign_postgres
            WHERE (advertiser_id = 12345)
             ) sqalias1 LIMIT 120) D ) sqalias2 WHERE ROWNUM >= 21 AND ROWNUM <= 120) cp1 
            ON (f0.campaign_id = cp1.id)

) sqalias3 
   09:14:32.381 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:32.381 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:32.382 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:32.384 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:32.385 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- DateTime type columns should be rendered with getDateTimeFromEpoch udf in outer select
- generate valid model for sync query with fields having no dimension attribute,
      filter on fact dim col which is a foreign key and it is in the list of fields,
      order by fact dim col which is a foreign key
- dim fact sync dimension driven query without total rows should use RIGHT OUTER JOIN
- successfully construct DimDrivenFactOrderedPartialRowListTest partial row list
- test NoopRollup expression for generated query
- generate valid model for async query with forceDimensionDriven and fields having no dimension attribute,
       filter on fact dim col which is a foreign key and it is in the list of fields,
       order by fact dim col which is a foreign key
- dim fact async fact driven query without dim filters should use LEFT OUTER JOIN and has no pagination
- generate valid model for async query with fields having no dimension attribute,
filter on fact dim col which is a foreign key and it is in the list of fields,
order by fact dim col which is a foreign key
- successfully generate Druid + Oracle multi engine query with Dim lookup for dimDriven sync request
- generate valid model for sync query with fields having multiple dimension keys,
      filter on fact dim col which is a foreign key and it is in the list of fields,
      order by fact dim col which is a foreign key
- dim fact async fact driven query with dim filters should use INNER JOIN and has no pagination
- no si or mr in request
- Off Heap RowList test, cold start
- test joinType for non fk dim filters for generated query
- successfully execute dummy query on query executor
- generate valid model for async query with forceDimensionDriven and fields having multiple dimension keys,filter on fact dim col which is a foreign key and it is in the list of fields,order by fact dim col which is a foreign key
- dim fact async fact driven query without dim sort should use LEFT OUTER JOIN and has no pagination
09:14:32.393 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
- test joinType for fact driven queries generated query
- generate valid model for async query with fields having multiple dimension keys,
       filter on fact dim col which is a foreign key and it is in the list of fields,
       order by fact dim col which is a foreign key
- generate valid model for sync dim driven query with non id fields having multiple dimension ,and should include the foreign keys of the other dimension to favor multiple dimensions joins
- test like filter with hive query gem
- dim fact async fact driven query with dim sort should use JOIN and has no pagination
- generating hive query with greater than filter
- successfully generate Oracle + Druid multi engine query with Dim lookup for dimDriven sync request
- generating hive query with less than filter
- test like filter with hive query injection testing
- Test upper and lower join candidates in the multiple dimension joins
- fact only query with no fact should fail
- successfully generate fact driven query for day grain with datetime between filter
- dim fact sync fact driven with fact column sort with total rows should use LEFT OUTER JOIN with pagination and total row column
- dim fact async fact driven query with dim filters should use INNER JOIN
- generate valid model for sync query with fields having dimension attribute,
       filter on fact col and it is in the list of fields, force dimension driven,
       order by fact
- dim fact async fact driven query with dim filters should use INNER JOIN and use new partitioning scheme
- Missing group by fact cols
- successfully generate Druid single engine query with Dim lookup for factDriven sync request
- HiveQueryGeneratorv2Test: should fail to generate Hive query for Outer Filters
- generate valid model for sync query with fields having dimension attribute,
       filter on fact dim col which is a foreign key and it is in the list of fields,
       order by dim attribute
- successfully generate fact driven query for minute grain with datetime between filter
- dim fact sync fact driven with fact column sort without total rows should use LEFT OUTER JOIN with pagination
- verify dim query can generate inner select and group by with static mapping
- generating presto query with greater than filter
- successfully generate sync multi engine query for oracle + druid
- generate valid model for async query with forceDimensionDriven and fields having dimension attribute,
filter on fact dim col which is a foreign key and it is in the list of fields,
order by dim attribute
- Verify metric Presto column comparison
- dim fact sync fact driven with fact column filter with total rows should use LEFT OUTER JOIN with pagination and total row column
- generate valid model for async query with fields having dimension attribute,
filter on fact dim col which is a foreign key and it is in the list of fields,
order by dim attribute
- dim fact async fact driven query without dim filters should use LEFT OUTER JOIN
- successfully construct file json row list
- dim fact sync fact driven with fact column filter without total rows should use LEFT OUTER JOIN with pagination
- Query containing fields with MAX rollup should generate successfully
- dim fact sync dimension driven query should use RIGHT OUTER JOIN
- successfully generate sync multi engine query for oracle + druid with no PK in request
- generate valid model for sync query with fields having dimension attribute,
       filter on fact dim col which is a foreign key and it not in the list of fields,
       order by dim attribute
- generate valid model for async query with forceDimensionDriven and fields having dimension attribute,
filter on fact dim col which is a foreign key and it not in the list of fields,
order by dim attribute
- dim fact sync dimension driven query without total rows should use RIGHT OUTER JOIN
- dim fact sync fact driven query with int static mapped fields and filters should succeed
- generate valid model for async query with fields having dimension attribute,
filter on fact dim col which is a foreign key and it not in the list of fields,
order by dim attribute
- dim fact async fact driven query without dim filters should use LEFT OUTER JOIN and has no pagination
- fact only query with dim should fail
- dim fact sync fact driven query with default value fields should be in applied in inner select columns
- successfully generate sync multi engine query for druid + oracle
- test foreach
- generate valid model for sync query with fields having 
one dim attribute with ordering and one without ordering, 
filter on fact dim col
- dim fact async fact driven query with dim filters should use INNER JOIN and has no pagination
- dim fact sync fact driven with constant requested fields should contain constant fields
- generating hive query with less than filter
- generate valid model for async query with forceDimensionDriven and fields having
one dim attribute with ordering and one without ordering, 
filter on fact dim col
- dim fact async fact driven query without dim sort should use LEFT OUTER JOIN and has no pagination
- dim fact sync fact driven query with filter on fact col should be applied in having clause
- generate valid model for async query with fields having
one dim attribute with ordering and one without ordering,
filter on fact dim col
- successfully generate sync multi engine query for druid + oracle with no PK in request
- successfully construct csv row list with header with aliases
- dim fact async fact driven query with dim sort should use JOIN and has no pagination
- fail to construct file json row list with no write perm
09:14:32.402 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
09:14:32.417 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
09:14:32.425 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
- generate valid model for sync query with fields having dimension attribute,
       filter on dim attribute and it not in the list of fields,
       order by dim attribute
- dim fact sync fact driven with fact column sort with total rows should use LEFT OUTER JOIN with pagination and total row column
- dim fact sync dimension driven query with requested fields in multiple dimensions should not fail
- successfully generate sync query for oracle and not druid + oracle when fact driven with low cardinality filter
- generating hive query with sort by
- generate valid model for async query with forceDimensionDriven and fields having dimension attribute and filter on dim attribute and it not in the list of fields and order by dim attribute
- dim fact sync fact driven with fact column sort without total rows should use LEFT OUTER JOIN with pagination
- generating presto query with less than filter
- Create DimDrivenFactOrderedPartialRowList for Druid + Oracle Case.
09:14:32.435 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
- successfully generate sync query for oracle and not druid + oracle when fact driven with no dimension ids
- dim fact sync dimension driven query with dim filters in multiple dimensions should not fail
- fact only query context should be switched to CombinedQueryContext
- Duplicate registration of the generator
- generating presto query with custom rollups
- generate valid model for async query with fields having dimension attribute,
filter on dim attribute and it not in the list of fields,
order by dim attribute
- dim fact sync fact driven with fact column filter with total rows should use LEFT OUTER JOIN with pagination and total row column
- dim fact sync fact driven with fact column filter without total rows should use LEFT OUTER JOIN with pagination
- verify dim query can generate inner select and group by with static mapping
- dim fact sync fact driven query with int static mapped fields and filters should succeed
- generate valid model for sync query with fields having two dimension attributes,
filter on dim attribute and it not in the list of fields,
order by dim attribute
- dim fact sync dimension driven query with non hash partitioned dimension with singleton snapshot column should generate full SQL with max snapshot column
- dim fact dim driven query should generate full SQL
- dim fact sync dimension driven query with non hash partitioned dimension without singleton snapshot column should fail
- dim fact sync fact driven query with default value fields should be in applied in inner select columns
- successfully execute query on query executor with csvrowlist
09:14:32.455 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to d3404379-96d1-4985-b65e-d018116559c4
09:14:32.464 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 43790933-3cc7-4b60-b90c-939d1562bf93
09:14:32.468 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:32.468 INFO  [ScalaTest-8-running-PrestoQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- successfully generate sync multi engine query for druid + oracle with fact query with no sort
- dim fact sync fact driven with constant requested fields should contain constant fields
- Successfully generated Outer Group By Query with dim non id field and fact field
- generate valid model for async query with forceDimensionDriven and fields having two dimension attributes,
filter on dim attribute and it not in the list of fields,
order by dim attribute
- successfully generate fact driven sync multi engine query for druid + oracle with noop when no data from druid
- dim fact sync fact driven query with filter on fact col should be applied in having clause
- dim fact async dimension driven query with non hash partitioned dimension with singleton snapshot column should generate full SQL with max snapshot column
- dim fact async dimension driven query with non hash partitioned dimension without singleton snapshot column should fail
- successfully generate sync multi engine query for druid + oracle with rerun on oracle when no data from druid
- generate valid model for async query with fields having two dimension attributes,
       filter on dim attribute and it not in the list of fields,
       order by dim attribute
- dim fact sync dimension driven query with requested fields in multiple dimensions should not fail
- dim fact sync dimension driven query with hint annotation should have hint comment in the final sql string
- generating hive query with dim col aggregate function
- successfully generate sync multi engine query for druid + oracle with rerun on oracle when partial page data from druid on page 2
- dim fact sync dimension driven query with dim filters in multiple dimensions should not fail
- verify dim query can generate inner select and group by with static mapping
- Successfully generated Outer Group By Query with dim non id field and derived fact field having dim source col
- Druid query should be generated with greater than filter
- dim fact sync dimension driven query with non hash partitioned dimension with singleton snapshot column should generate full SQL with max snapshot column
- dim fact sync dimension driven query with non hash partitioned dimension without singleton snapshot column should fail
- dim fact async fact driven query with hint annotation should have static hint comment in the final sql string
- generate valid model for sync query with fields having two dimension attributes,
       filter on dim attribute and it not in the list of fields,
       order by fact
- dim fact async dimension driven query with non hash partitioned dimension with singleton snapshot column should generate full SQL with max snapshot column
- generating hive query with dim and fact sort by
- dim fact async dimension driven query with non hash partitioned dimension without singleton snapshot column should fail
- dim fact sync dimension driven query with hint annotation should have hint comment in the final sql string
- Successfully generated timeseries Outer Group By Query with dim non id field and fact field
- generate valid model with filter on field with static mapping and not in fields list
- dim fact async fact driven query with hint annotation should have static hint comment in the final sql string
- dim fact sync dimension driven query with dimension id filters should generate full SQL with in subquery clause
- generate valid model with filter on field with static mapping and in fields list
- dim fact sync dimension driven query with between day filter exceeding the max days window should fail
- dim fact sync dimension driven query with between day filter exceeding the max days look back should fail
- create model should fail when filtering with unsupported operation on fact col
- dim fact sync dimension driven query with in day filter exceeding the max days window should fail
- create model should fail when filtering with unsupported operation on fact dim col
- dim fact sync dimension driven query with in day filter exceeding the max days look back should fail
- successfully generate sync multi engine query for druid + oracle with rerun on oracle when no data from oracle
- dim fact sync dimension driven query with equality day filter exceeding the max days look back should fail
- create model should fail when filtering with unsupported operation on dimension dim col
- create model should fail when missing required field
- create model should succeed when required field present
- create model should fail when request dates out of window
- Verify metric Presto column comparison
- create model should fail when request dates out of window with datetime between filter
- successfully generate sync query for dim sort + fact filter
- create model should fail when request dates out of lookback window with datetime between filter
- dim fact sync dimension driven query should have dim driven hint
- create model should fail when missing required filter
- create model should succeed when required filter present
- successfully generate sync query for dim sort + dim filter
- generating presto query with underlying table name
- create model should fail when missing dependent field
09:14:32.487 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 8371db1c-b3ab-4123-a060-fb6dc521552b
- dim fact fact driven query should generate full SQL
- create model should succeed when all dependent columns present
- Duplicate registration of the generator
- dim fact sync fact driven query should have static hint
- successfully generate sync query for dim sort + fact & dim filters
- dim fact sync dimension driven query with dimension id filters should generate full SQL with in subquery clause
- dim fact sync fact driven query with request DecType fields that contains max and min should return query with max and min range
- dim fact sync dimension driven query with between day filter exceeding the max days window should fail
- dim fact sync dimension driven query with between day filter exceeding the max days look back should fail
- dim fact sync dimension driven query with in day filter exceeding the max days window should fail
- test map
- successfully construct partial row list
09:14:32.506 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:32.506 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:32.506 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:32.509 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:32.509 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:32.523 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 48c369a9-8b14-49a0-b229-b1d4596fbdb8
- dim fact sync dimension driven query with in day filter exceeding the max days look back should fail
- dim fact sync dimension driven query with equality day filter exceeding the max days look back should fail
- successfully generate sync query for fact sort + fact filter
- Off Heap RowList test, warm start, init rocksdb
- dim fact sync fact driven query with request IntType fields that contains max and min should return query with max and min range
- Successfully generated Outer Group By Query with 2 dimension non id fields
- dim fact sync dimension driven query should have dim driven hint
- generate valid model with forced filter in filter list and not in fields list
- dim fact sync fact driven query with request fields that contains divide operation should round the division result
- dim fact sync fact driven query should have static hint
- successfully generate sync query for fact sort + dim filter
09:14:32.533 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 4f89d438-d6be-44ca-b183-c8fa2ca2dc8b
- fail to construct file csv row list with no write perm
- Error case, no alias
- Json Generator
- Multiple filters on same ID column
- generate valid model for dim driven query with dim filters
- dim fact sync fact driven query with request fields that contains safe divide operation should round the division result
- print pretty and other minor verifications
09:14:32.544 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 277de4dc-3730-42fe-aa66-c81c6bde5429
09:14:32.551 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to c660551a-d049-43a7-a857-08333b05b833
09:14:32.555 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 3ca95516-1d2f-476d-a66e-9d2bf9c020e5
- dim fact sync fact driven query with request DecType fields that contains max and min should return query with max and min range
- successfully generate sync query for fact sort + fact & dim filters
- dim fact sync dim driven query with filter fields that contain case insensitive field should use lower function
- dim fact sync fact driven query with request IntType fields that contains max and min should return query with max and min range
- successfully generate async single engine query
- Sorting on the on driving dimension should set the correct flag
- dim fact sync fact driven query with request fields that contains divide operation should round the division result
- successfully run async dim only query
- dim fact sync dim driven query with fields that map to same column should generate query
- dim fact query with no fact should fail
- Filtering on the on driving dimension should set the correct flag
- Should not generate Outer Group By Query context with 2 dimension non id fields and one fact higher level ID field than best dims
- dim fact sync fact driven query with request fields that contains safe divide operation should round the division result
- generating presto query with custom rollups
- dim fact sync dim driven query with filter fields that contain case insensitive field should use lower function
- generating hive query with outer group containing derived columns of level 2
- generate valid model for dim driven query with dim filters and no fact cols or filters
- generating presto query with greater than filter and sort by
- generate valid model for fact driven query with only fact fields, and filters
- dim fact sync dim driven query with fields that map to same column should generate query
- generate valid model with request join cols correctly populated
- Fact Driven Multidimensional query with dim sortBy
- successfully generate multiple query pipelines
- Fact Driven Multidimensional query with dim sortBy
- successfully generate OGB query for fact driven multidimensional query with missing indirect relation
- successfully generate sync query for fact sort + dim filter where Druid is engine for both fact and dim
- successfully generate OGB query for fact driven multidimensional query with missing indirect relation
- successfully generate sync query for fact sort + dim filter where Oracle is engine since max lookback is out of Druid dim range
- successfully generate non-OGB query for fact driven multidimensional query with indirect relation in request
- Successfully generated Outer Group By Query with 2 dimension non id fields and and two fact transitively dependent cols
- successfully generate async query for fact sort + dim filter where Oracle is engine since max lookback is out of Druid dim range
- Dim Driven Multidimensional query with Keywords and Ad should fail as we do not have parent info of AD in keywords table
- generate valid model with injected dimension when no direct relationship when dim driven
- Multiple filters on same column
- successfully generate non-OGB query for fact driven multidimensional query with indirect relation in request
09:14:32.562 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 8e95f299-ea68-46cb-9d20-f6b27d348d66
- query with dim IN filter with more than allowed limit should fail if engine is oracle
- query with fact IN filter with more than allowed limit should fail if engine is oracle
- should succeed even if the number of 'in' items exceeds 999
- Dim Only Query Context test
- MultiDims Sync Query keyword level with 2 parent dimensions
- Dim Driven Multidimensional query with Keywords and Ad should fail as we do not have parent info of AD in keywords table
- Not Like filter Hive
- query with fact IN filter with 1000 values should succeed if engine is druid
- Multiple requestModels are returned from factory for DryRun
- MultiDims Sync Query keyword level with 2 parent dimensions
- Test Hive Query with both aliases
- MultiDims Sync Query keyword level with 3 parent dimensions, pg_targetingattribute as primary dim
- Multiple requestModels are returned from factory for DryRun with OracleEngine
- dim IN filter with more than allowed limit should not be considered in bestDimCandidates if dim engine is oracle
- Query with both aliases with filter and sort by
09:14:32.574 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 7a92e699-42ed-4ad3-a3d0-78ae88bbf908
09:14:32.585 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 4c60a649-e014-4502-a8bb-73cb38351e34
09:14:32.610 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 00c764ad-4b37-43e7-816d-0d5763074acb
- Successfully generated Outer Group By Query if fk col one level less than Highest dim candidate level is requested
- Multiple requestModels are returned from factory for DryRun with HiveEngine
- MultiDims Sync Query keyword level with 3 parent dimensions, targetingattribute as primary dim
- Multiple requestModels are returned from factory for DryRun with PrestoEngine should succeed
- MultiDims Sync Query keyword level with 1 grand parent dimensions should succeed, keywords as primary dim
- query with OR filter should fail if engine is oracle
- Only one requestModel is returned from factory for NO DryRun
- MultiDims Sync Query keyword level with 1 grand parent dimensions should succeed, keywords as primary dim
- generating presto query with underlying table name
- query with OR filter should fail if engine is Hive
- generating presto query with greater than filter and multiple sort bys
- Duplicate registration of the generator
- RowList LifeCycle Tests
09:14:32.631 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to b8301b02-c76c-4ca6-bfa7-59d953e3f654
09:14:32.645 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:32.645 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:32.645 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:32.648 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:32.649 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- MultiDims Sync Query keyword level with 3 parent dimensions: Should Generate sortBy correctly
- Test for BucketParams
09:14:32.652 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 702492f1-d1ae-40a1-a2f3-a66dbf45ed76
- Base Request Col Test
- generating hive query with outer group by, 2 dim joins and sorting
- Filtering on the dimension with the like operator should generate valid model
- Successfully generated Outer Group By Query if CustomRollup col is requested
- MultiDims Sync Query keyword level with 3 parent dimensions: Should Generate sortBy correctly
- Validate subsequent Oracle + Druid query generation to dim.
- QueryTest
- NOOP QueryTest
09:14:32.660 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to b85af387-a85a-4f69-bb36-98446b6fbdb7
09:14:32.669 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 99370e73-812b-47be-8ec8-d1f01ab70d55
- fail to generate sync query for presto
- Group by over derived expression should append index instead of entire dervied expression
- Group by over derived expression should append index instead of entire dervied expression
- create model should fail when incompatible fields are requested
- create model should pass when no incompatible field is requested
- create model should fail when duplicate field is requested
- create model should fail when duplicate alias is requested
- Dim query with invalid parameter adds
- successfully generate query with debug enabled
- successfully generate fallback query on sync request and execute it
- successfully generate query with debug enabled
- Successfully generated Outer Group By Query if CustomRollup col with Derived Expression having rollups is requested
- create model should fail when public col with forbidden schema is requested
- create model should succeed when public col with non forbidden schema is requested
- Given a request with parameters in filter and not in requested fields, then the output query should not those parameters in select list
- create model should succeed when using outer filters on requested columns
- Given a request with parameters in filter and not in requested fields, then the output query should not those parameters in select list
- create model should fail when using outer filters on non-requested columns
- successfully generate fallback query on sync request with force engine and execute it
- successfully generate dim driven dim only query with filters
- successfully generate fallback query on sync request and fail to execute it due to missing executor
- successfully generate dim driven dim only query with filters
- Druid query should be generated with less than filter
- successfully generate fallback query on async request and execute it
- Successfully generated Outer Group By Query if OracleCustomRollup col with Derived Expression having CustomRollup and DerCol are requested
- should compare two strings with first one insensitive
- should compare two strings with first one insensitive
- should compare two strings with second one insensitive
- should compare two strings with second one insensitive
- should fail to compare two dimensions of different dataTypes.
- should fail to compare two dimensions of different dataTypes.
- should fail to compare metric to non-metric.
- successfully generate fallback query on async request with force engine and execute it
- should fail to compare metric to non-metric.
09:14:32.681 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 346823e3-fc3c-4250-b69c-75fe855dc1f6
- should fail to compare anything to an invalid field.
- should fail to compare anything to an invalid field.
- should fail comparing different data types in dimension table comparison.
- should fail comparing fact to Invalid Column.
- should fail comparing different data types in dimension table comparison.
- successfully execute pipeline while failing to create fallback query
- should fail comparing fact to Invalid Column.
- Successfully generated Outer Group By Query if column is derived from dim column
- should fail comparing dimension to fact table.
- generating presto query with greater than filter and sort by
- should fail comparing dimension to fact table.
- generating hive query with outer group by,  Noop rollup cols
- FactualQuery Context test
- Off Heap RowList test, warm start, init rocksdb, store all in rocksdb
09:14:32.689 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 5d1701a9-dd23-4cf0-87ac-7ea64119bb0c
09:14:32.696 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
09:14:32.704 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
- should succeed to compare two metrics of same dataTypes.
- generating presto query with both aliases for static mapping columns
- successfully generate fallback query on async request with force engine and execute it when no joins required
- successfully generate distinct dim only query
- should succeed to compare two metrics of same dataTypes.
- create model should fail when using or with empty filters
- Successfully generated Outer Group By Query if NoopRollupp column requested
- create model should succeed when using or filters with fact filters combination
- successfully generate distinct dim only query
- successfully generate query with queryGeneratorBucket defined
- successfully generate sync force dim driven dim only query with filters and order by and row count
- create model should succeed when using or filters with dim filters combination
- successfully generate sync force dim driven dim only query with filters and order by and row count
- create model errors with incorrect filters
- verify local equality filter on pricing type
- successfully generate async  dim only query with filters and order by and row count
- create model should succeed when sync query is scan optimized
- successfully generate fact driven query with right outer join when schema required fields are not present in the fact
- successfully generate query with force queryGen version
- create model should succeed when sync query is not scan optimized
- successfully generate fact driven query with right outer join when schema required fields are not present in the fact
- create model should succeed when query is grain optimized
- create model should succeed when query is not grain optimized
- successfully generate dim join conditions on partition col if partition col is not requested for reseller case
- create model should succeed when query is index optimized
- create model should succeed when query is not index optimized
- create model should succeed when query is not low cardinality with exclusive filter
- successfully generate dim join conditions on partition col if partition col is not requested
- successfully generate query with queryGeneratorBucket defined and no dryRun requestModel
- successfully generate dim join conditions on partition col if partition col is not requested for reseller case
- create model should succeed when query is not low cardinality with inclusive filter
- create model should succeed when query is low cardinality with mix of inclusive and exclusive
- create model should fail if a filter is not in existing set of allowable filters for a column
- create model should succeed for allowable filter for a column with set InNotInEqualsNotEquals
- test fact and dim revisioning logic
- create model should succeed when Not In filter is used for statically mapped fields
- AD Page default: Supporting dim test
- successfully generate query for forced fact driven query specialized to use subquery instead of join !!! IGNORED !!!
- test validateLengthForFilterValue for publicDim
09:14:32.710 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
- successfully generate dim join conditions on partition col if partition col is not requested
- test validateLengthForFilterValue for publicFact
- Drop into V0 if selected revision is fake.
09:14:32.716 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
09:14:32.723 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
09:14:32.735 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
- dim fact fact driven query with no valid facts should fail
- successfully generate query with new partitioning Scheme
- Test for Customer Bug fix in old :Fact metric filters in select
- test validateLengthForFilterValue for string of length greater than max allowed
- AD Page default: Multiple Sort On Dim Cols
- test NoopRollup expression for generated query !!! IGNORED !!!
- AD Page default: Supporting dim test
- generating presto query with greater than filter and multiple sort bys
- Fact View Model Query Test
- generating hive query with outer group by, derived cols
- successfully generate query for forced fact driven query specialized to use subquery instead of join
- Best Candidates test for campaign adjustment in a_stats Fact View
- generating presto query alias foreign key columns
- Best Candidates test for account adjustment in a_stats Fact View
- succesfully generate query with DayColumn annotation on Day column which is of IntType
- successfully generate query with new partitioning Scheme
- succesfully generate query with DayColumn annotation on Day column which is of StrType
- create model should succeed when Greater than used
- Test for Customer Bug fix in old :Fact metric filters in select
- successfully generate fact driven query with outer filter
- AD Page default: Multiple Sort On Dim Cols
- test NoopRollup expression for generated query !!! IGNORED !!!
- successfully generate dim driven dim only query with outer filters and order by
- Test forceDisQualifySet in findBestCandidates
- Fact View Model Query Test
- create model should succeed when Less than used
- Best Candidates test for campaign adjustment in a_stats Fact View
- Fact Driven Multidimensional query with outer filters and dim sortBy 
- Best Candidates test for account adjustment in a_stats Fact View
- Group by over derived expression with outer filters
- PowerEditor: Use case1
- Query with constant requested fields should have constant columns
- PowerEditor : Use case Dim Only Query Ad Level
- succesfully generate query with DayColumn annotation on Day column which is of IntType
- Assert Not Equals on Statically mapped filter.
- test using alias to join dimension table
- succesfully generate query with DayColumn annotation on Day column which is of StrType
- generating presto query with both aliases for static mapping columns in reverse order
09:14:32.744 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
- Successfully generated Outer Group By Query with dim non id field and fact field
09:14:32.744 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:32.744 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
- generating hive query with outer group by, having and partitioning scheme, test part col renderer
- successfully generate fact driven query with outer filter
09:14:32.744 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
- successfully generate dim driven dim only query with outer filters and order by
- Successfully generated Outer Group By Query with dim non id field and derived fact field having dim source col
- Test forceDisQualifySet all in findBestCandidates
09:14:32.746 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:32.746 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- Successfully generated timeseries Outer Group By Query with dim non id field and fact field
- Fact Driven Multidimensional query with outer filters and dim sortBy 
- Assert failure for Not Equals on Statically mapped invalid-valued filter.
- Successfully generated Outer Group By Query with 2 dimension non id fields
- Assert dual static mapping on NotEqualToFilter
- Group by over derived expression with outer filters
- Restricted schema columns from linked dimensions should not be allowed for other schemas
- Should not generate Outer Group By Query context with 2 dimension non id fields and one fact higher level ID field than best dims
- PowerEditor: Use case1
- Successfully generated Outer Group By Query with 2 dimension non id fields and and two fact transitively dependent cols
- test using alias to join dimension table
- Test rendering of columns to JSON
- Should create a valid request model in an aliased fact
- Successfully generated Outer Group By Query with mutlifield fact and dim filters
- Should fail at creating a dim
- Successfully generated Outer Group By Query with dim non id field and fact field
- Successfully generated Outer Group By Query with Lowest level FK col is requested
- Successfully generated Outer Group By Query with dim non id field and derived fact field having dim source col
- generating presto query with sort on dimension
- generating presto query with both aliases for static mapping columns with filter
- generating hive query with outer group by, count dims
- Successfully generated Outer Group By Query if fk col one level less than Highest dim candidate level is requested
- Successfully generated timeseries Outer Group By Query with dim non id field and fact field
- Successfully generated Outer Group By Query if OracleCustomRollup col is requested
- Successfully generated Outer Group By Query with 2 dimension non id fields
- Successfully generated Outer Group By Query if OracleCustomRollup col with Derived Expression having rollups is requested
- Successfully generated Outer Group By Query if OracleCustomRollup col with Derived Expression having CustomRollup and DerCol are requested
- Should not generate Outer Group By Query context with 2 dimension non id fields and one fact higher level ID field than best dims
- Successfully generated Outer Group By Query if column is derived from dim column
- Successfully generated Outer Group By Query with 2 dimension non id fields and and two fact transitively dependent cols
- Successfully generated Outer Group By Query if NoopRollupp column requeted
- successfully generate fact driven query with filter on FK and dimension attribute without including attribute in output
- Successfully generated Outer Group By Query with mutlifield fact and dim filters
- successfully generate fact driven query with filter on FK and dimension attribute without including attribute in output with attribute col as schema required field
- Duplicate registration of the generator
- succesfully generate uncommon filter types
- Successfully generated Outer Group By Query with Lowest level FK col is requested
- Successfully generated Outer Group By Query if fk col one level less than Highest dim candidate level is requested
- Successfully generated Outer Group By Query with dim non id field and fact field
- Test constant requested fields with Outer Group By
- generating presto query with both aliases for static mapping columns with filter for second column
- successfully generate dim only oracle query with union all for sync multi engine query for druid + oracle
09:14:32.773 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
- Successfully generated Outer Group By Query if PostgresCustomRollup col is requested
- Successfully generated Outer Group By Query if PostgresCustomRollup col with Derived Expression having rollups is requested
- Successfully generated Outer Group By Query if PostgresCustomRollup col with Derived Expression having CustomRollup and DerCol are requested
- Do not include the NOT IN clause if requested max rows < in filter size
- Successfully generated Outer Group By Query if column is derived from dim column
- Successfully generated Outer Group By Query if NoopRollupp column requeted
- Generate dim only query without union all for any middle page(not last)
- successfully generate fact driven query with filter on FK and dimension attribute without including attribute in output
- successfully generate fact driven query with filter on FK and dimension attribute without including attribute in output with attribute col as schema required field
- Duplicate registration of the generator
- Generate dim only query wit union all for last page)
- Generate dim only query wit union all for last page, verify rowCount false works !!! IGNORED !!!
- succesfully generate uncommon filter types
- Multiple filters on same column
- generating presto query with both aliases for static mapping columns with both filters and not like filter
- NoopRollup columns in Outer Group By should be rendered correctly
- Restricted schema should fail on only bad filter.
- Druid query should be generated with IsNull filter
- Successfully generated Outer Group By Query if NoopRollupp derived column is requested for non-derived source fields
- Dim Only query Schema required filter validation
- Dim Only query Schema required filter validation with invalid injection filter
- Dim Only query Schema required filter: Success
- Dim Only query Schema required filter: Self Dim check
- Dim Only query Schema required filter: Self Dim check: Success
- Should fail without any part of required filtering list
- Should succeed with any part of required filtering list
09:14:32.795 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
SELECT *
FROM (SELECT cp1.id "Campaign ID", coalesce(f0."impressions", 1) "Impressions", COALESCE(f0.ad_format_id, 'Other') "Ad Format Name", COALESCE(f0.ad_format_sub_type, 'N/A') "Ad Format Sub Type"
      FROM (SELECT /*+ PUSH_PRED PARALLEL_INDEX(cb_campaign_k_stats 4) CONDITIONAL_HINT1 CONDITIONAL_HINT2 CONDITIONAL_HINT3 */
                   CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (5)) THEN 'Single image' WHEN (ad_format_id IN (6)) THEN 'Single image' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (9)) THEN 'Carousel' WHEN (ad_format_id IN (2)) THEN 'Single image' WHEN (ad_format_id IN (7)) THEN 'Video' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (3)) THEN 'Single image' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (8)) THEN 'Video with HTML Endcard' WHEN (ad_format_id IN (4)) THEN 'Single image' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'Other' END ad_format_id, CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'N/A' END ad_format_sub_type, campaign_id, SUM(impressions) AS "impressions"
            FROM fact2 FactAlias
            WHERE (ad_format_id <> 100) AND (advertiser_id = 12345) AND (stats_source = 2) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (5)) THEN 'Single image' WHEN (ad_format_id IN (6)) THEN 'Single image' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (9)) THEN 'Carousel' WHEN (ad_format_id IN (2)) THEN 'Single image' WHEN (ad_format_id IN (7)) THEN 'Video' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (3)) THEN 'Single image' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (8)) THEN 'Video with HTML Endcard' WHEN (ad_format_id IN (4)) THEN 'Single image' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'Other' END, CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'N/A' END, campaign_id
            
           ) f0
           RIGHT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT /*+ CampaignHint */ id, advertiser_id
            FROM campaign_postgres
            WHERE (advertiser_id = 12345)
             ) sqalias1 LIMIT 120) D ) sqalias2 WHERE ROWNUM >= 21 AND ROWNUM <= 120) cp1 
            ON (f0.campaign_id = cp1.id)

) sqalias3 
   - successfully generate dim only postgres query with union all for sync multi engine query for druid + postgres
- Successfully generated Outer Group By Query if aggregate derived column (eg UDAF) is requested
- Do not include the NOT IN clause if requested max rows < in filter size
- Generate dim only query without union all for any middle page(not last)
- Successfully generated Outer Group By Query with id cols requested from dims
- generating presto query with incompatible columns
- Successfully generated Outer Group By Query with dim non id field as filter
- Multiple filters on same ID column
- Generate dim only query wit union all for last page)
- generating hive query with dim non id field as filter
- Multiple filters on same ID column
- Successfully generated Outer Group By Query with dim non id field as filter and derived fact field having dim source col
- Multiple filters on same ID column
- Multiple filters on same column
- Not Like filter Hive
- Query with both aliases
- Query with both aliases with filter and sort by
09:14:32.824 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 09fa37de-f547-4738-8f13-7b2065364f7d
- Greater than filter should work for Oracle Sync
- Query with constant requested fields should have constant columns
- Not Like filter Presto
- Multiple filters on same column OGB
- Not Like filter Hive
- Query with both aliases
- Druid query should be generated with IsNotNull filter
- Query with both aliases with filter and sort by
09:14:32.845 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:32.845 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:32.845 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:32.852 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:32.852 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:32.861 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 5dee6dc3-041a-4572-bc00-b593c9227004
- generating presto query incompatible columns
- Greater than filter should work for Postgres Sync
- generating presto query with sort on dimension
- Less than filter should work for Oracle Sync
- successfully generate dim only oracle query without union all for sync multi engine query for druid + oracle with metric filter
- successfully generate dim only oracle query with Correct RowNum and pagination
- generating presto query alias foreign key columns
- Skip inSubquery clause for high cardinality dimension filtering
- Verify Combined queries lose data in Multivalue Dim contexts (Class Name Collapses)
- Test dimension join when dim primary key has alias
- Successfully generated Outer Group By Query with dim non id field and fact field
- successfully generate fact driven query for minute grain with datetime between filter
- successfully generate dimension driven query for minute grain with datetime between filter
- successfully generate fact driven query for day grain with datetime between filter
- successfully generate dimension driven query for day grain with datetime between filter
- validate non-outer aliased cols
- Less than filter should work for Postgres Sync
- Druid query should be generated with Between filter
- Multiple filters on same column
- Not Like filter Oracle
- successfully generate dim only postgres query without union all for sync multi engine query for druid + postgres with metric filter
- Not Like filter (special character) Oracle
- DruidQueryGenerator: getAggregatorFactory should succeed on DruidFilteredListRollup with filter list size of 2
- successfully generate dim only postgres query with Correct RowNum and pagination
- Query with both aliases
- DruidQueryGenerator: getAggregatorFactory should fail on DruidFilteredListRollup with only 1 list element
- generating presto query with both aliases for static mapping columns
- limit should be set to defaultMaxRowsAsync when request is Async and rowsPerPage is <= 0
- Query with both aliases with filter and sort by
- Skip inSubquery clause for high cardinality dimension filtering
- group by strategy should be set to v2 and no chunk period
09:14:32.886 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to b1f188f8-be58-439b-ab26-df5332ab30f1
09:14:32.896 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 3428e5a5-811c-49a0-aaf4-4a21b739eb36
09:14:32.905 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 90825409-d136-4df5-baac-2efeb0bdc0b1
- Successfully generated Outer Group By Query with dim non id field and derived fact field having dim source col
- Verify Combined queries lose data in Multivalue Dim contexts (Class Name Collapses)
- metric should be set to inverted when order is Desc and queryType is topN
- for topN queryType aggregations, postAggregations, dimension and filter should be set
- successfully generate fact driven query for minute grain with datetime between filter
- successfully generate dimension driven query for minute grain with datetime between filter
- Successfully generate a query with Javascript extractionFn
- successfully generate fact driven query for day grain with datetime between filter
- successfully generate dimension driven query for day grain with datetime between filter
- validate non-outer aliased cols in postgres
- generating presto query with both aliases for static mapping columns in reverse order
- Not Like filter Postgres
- Successfully generated timeseries Outer Group By Query with dim non id field and fact field
- Not Like filter (special character) Postgres
- generating presto query with both aliases for static mapping columns with filter
- Successfully generated Outer Group By Query with 2 dimension non id fields
- generating presto query with both aliases for static mapping columns with filter for second column
- Query with both aliases and both filters
- Should not generate Outer Group By Query context with 2 dimension non id fields and one fact higher level ID field than best dims
- Successfully generate a query with Javascript Filter
- Successfully generate a query with RegEx extractionFn
- Successfully generate a query with RegEx Filter
- Should fail to generate a metric query with Field Comparison Filter
- DruidQueryGenerator: arbitrary static mapping should succeed
- for timeseries queryType aggregations, postAggregations and filter should be set but not dimension
- direction in limitSpec should be set to DESCENDING when order is Desc and queryType is groupBy
- generating presto query with both aliases for static mapping columns with both filters and not like filter
- dimension based aggregate via filtered aggregate for fact col
- Successfully generated Outer Group By Query with 2 dimension non id fields and and two fact transitively dependent cols
- dimension extraction function for start of the week dimension
- dimension extraction function for start of the month dimension
- dimension time extraction function for druid time
- successfully render filter on column using dimension time extraction function for druid time
- no dimension cols and no sorts should produce timeseries query
- no dimension cols and no sorts on a cube with renderLocalTimeFilter=true should not produce timeseries but groupBy query
- fact sort with single dim col should produce topN query
- fact sort with no dim col on a cube with renderLocalTimeFilter=true should produce groupBy query not topN
- fact sort with multiple dim col should produce group by query
- Query with both incompatible columns
- generating presto query with incompatible columns
09:14:32.923 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to b92e7cb6-5c41-4b02-907a-97c51f850125
- dim fact sync fact driven query should produce all requested fields in same order as in request
- startIndex greater than maximumMaxRows should throw error
- limit should be set to 2*maxRows if there is a NonFKDimfilter
- queryPipeline should fail when request has NonFKDimfilter and (startIndex + 2*maxRows) > 5000
- Successfully generated Outer Group By Query if fk col one level less than Highest dim candidate level is requested
- successfully set group by single threaded to true when cardinality is below max allowed value
- successfully set group by single threaded to false when cardinality is above max allowed value
- successfully set chunk period when dim cardinality is defined and above max cost
- successfully ignore chunk period when dim cardinality is defined and below max cost
09:14:32.935 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 70449c8e-7fa2-4794-be05-d91c36d41bae
- successfully ignore chunk period when dim cardinality is not defined
- successfully set minTopNThreshold when dim cardinality is defined
- successfully set minTopNThreshold when dim cardinality is not defined
- namespace lookup extraction functionality
- Fail filtering on PassthroughType
- namespace lookup extraction functionality for dim
- should generate nested groupby query if dim filter is present
- Successfully generated Outer Group By Query if CustomRollup col is requested
- should generate nested groupby query if lookup with decode column is present
- should not generate nested groupby query if dim filter column present is not of type druid lookup
- Query with both aliases with single filters
- should include dim column related to dim filter in nested groupby query if dim filter is present even though dim column is not present in the request
- Successfully generated Outer Group By Query if CustomRollup col with Derived Expression having rollups is requested
- namespace lookup extraction functionality for a public fact with new dimRevision
- should include dimension columns from DruidPostResultDerivedFactCol in DimensionSpec
- dimension extraction function for day of the week dimension
- dimension extraction function for datetime formatter
- dimension filter extraction function for datetime formatter
- dimension filter extraction function for decode dim
- dimension filter extraction function for decode dim with mapped null string
09:14:32.944 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to ff31a862-1ae8-4aa2-84a1-1b8bd16ffd23
- dimension filter extraction function for decode dim that has staticMapping for source col
09:14:32.951 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 8b2d4089-ce2f-4e3a-97a1-ff276c7fdcbc
09:14:32.951 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:32.951 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:32.951 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:32.954 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:32.954 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- Successfully generated Outer Group By Query if OracleCustomRollup col with Derived Expression having CustomRollup and DerCol are requested
- dimension filter extraction function for decode dim with values mapped to multiple source values
09:14:32.966 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to f6fb550f-ec39-4df3-8ca7-069dff40f379
- Or filter expression with dimension AND fact filters should render properly
09:14:32.987 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to e8360454-6e0c-4630-b6b9-8fc754b912a9
SELECT *
FROM (SELECT cp1.id "Campaign ID", coalesce(f0."impressions", 1) "Impressions", COALESCE(f0.ad_format_id, 'Other') "Ad Format Name", COALESCE(f0.ad_format_sub_type, 'N/A') "Ad Format Sub Type"
      FROM (SELECT /*+ PUSH_PRED PARALLEL_INDEX(cb_campaign_k_stats 4) CONDITIONAL_HINT1 CONDITIONAL_HINT2 CONDITIONAL_HINT3 */
                   CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (5)) THEN 'Single image' WHEN (ad_format_id IN (6)) THEN 'Single image' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (9)) THEN 'Carousel' WHEN (ad_format_id IN (2)) THEN 'Single image' WHEN (ad_format_id IN (7)) THEN 'Video' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (3)) THEN 'Single image' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (8)) THEN 'Video with HTML Endcard' WHEN (ad_format_id IN (4)) THEN 'Single image' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'Other' END ad_format_id, CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'N/A' END ad_format_sub_type, campaign_id, SUM(impressions) AS "impressions"
            FROM fact2 FactAlias
            WHERE (advertiser_id = 12345) AND (stats_source = 2) AND (ad_format_id IN (4,5,6,2,3)) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (5)) THEN 'Single image' WHEN (ad_format_id IN (6)) THEN 'Single image' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (9)) THEN 'Carousel' WHEN (ad_format_id IN (2)) THEN 'Single image' WHEN (ad_format_id IN (7)) THEN 'Video' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (3)) THEN 'Single image' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (8)) THEN 'Video with HTML Endcard' WHEN (ad_format_id IN (4)) THEN 'Single image' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'Other' END, CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'N/A' END, campaign_id
            
           ) f0
           RIGHT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT /*+ CampaignHint */ id, advertiser_id
            FROM campaign_postgres
            WHERE (advertiser_id = 12345)
             ) sqalias1 LIMIT 120) D ) sqalias2 WHERE ROWNUM >= 21 AND ROWNUM <= 120) cp1 
            ON (f0.campaign_id = cp1.id)

) sqalias3 
   - Query with both aliases with second filter
- Or filter expression with fact filters
09:14:33.000 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to c4a9121c-213a-422f-b5cb-8be7012a4c25
- Generate a valid query at minute grain
09:14:33.023 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 54ad4dd9-bef1-41cb-99bb-3c35ea118b70
09:14:33.033 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 44fea061-83a3-47ad-b67e-67f30489e229
09:14:33.042 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to f4cbc0bd-8ad0-4bfb-9510-0d8df5f68648
09:14:33.050 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:33.050 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:33.051 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:33.054 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to ef7f48b0-545a-48b5-9ef9-d3ed407ab1f2
09:14:33.054 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:33.054 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- Successfully generated Outer Group By Query if column is derived from dim column
09:14:33.064 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to e594577e-52ff-4237-bc54-645f2d871bd1
- Generate a valid query at minute grain with datetime between filter with timestamp type for Day
09:14:33.073 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 138d1f76-cc33-42bd-98a2-216e7eaa5c37
- Generate a valid query at hourly grain with datetime between filter with timestamp type for Day
09:14:33.083 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to b7695ec3-f9b9-4601-bced-2406ff3057c2
- Generate a valid query at daily grain with datetime between filter with timestamp type for Day
09:14:33.093 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to d598ed5a-d4b3-4537-906d-33cfb3574366
- successfully generate query with sync group by single threaded optimization for non grain or index optimized request
09:14:33.107 WARN  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator$ - Another query generator registered for DruidEngine : null
- Duplicate registration of the generator
09:14:33.111 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 09e091e4-d6f5-470f-8d60-2b1dc84c212d
- Join key should not be included in dimension bundle if it is not in the original request when using druid lookups
09:14:33.121 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 36158473-0964-43c0-b868-cd07e9230462
- Join key should be included in dimension bundle if it is not in the original request when druid+oracle
09:14:33.132 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to fb9ded22-6350-4303-83d3-888824c1239b
- test theta sketch intersect set operation with filters on theta sketch aggregators
09:14:33.149 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to ec1c1014-b43c-4f23-88f8-c7049491ee8d
- const fact column and derived const fact column should not be included in aggregators and post aggregators
09:14:33.155 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - Running Async View Multi Query for cube a_stats
09:14:33.155 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 64c28ff6-263e-440f-8de6-6bb8d0a56a77
09:14:33.159 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 68b07f56-213b-4bbb-ab33-80467a78e48e
\{"queryType":"groupBy","dataSource":\{"type":"table","name":"account_stats"\},"intervals":\{"type":"intervals","intervals":\[".*"\]\},"virtualColumns":\[\],"filter":\{"type":"and","fields":\[\{"type":"selector","dimension":"stats_date","value":".*"\},\{"type":"selector","dimension":"advertiser_id","value":"12345"\},\{"type":"selector","dimension":"\{test_flag\}","value":"0"\}\]\},"granularity":\{"type":"all"\},"dimensions":\[\{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"\},\{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"\}\],"aggregations":\[\{"type":"longSum","name":"Impressions","fieldName":"impressions"\},\{"type":"roundingDoubleSum","name":"Spend","fieldName":"spend","scale":10,"enableRoundingDoubleSumAggregatorFactory":true\},\{"type":"longSum","name":"clicks","fieldName":"clicks"\}\],"postAggregations":\[\{"type":"arithmetic","name":"Const Der Fact Col A","fn":"/","fields":\[\{"type":"fieldAccess","name":"clicks","fieldName":"clicks"\},\{"type":"fieldAccess","name":"impressions","fieldName":"Impressions"\}\]\}\],"limitSpec":\{"type":"default","columns":\[\{"dimension":"Impressions","direction":"ascending","dimensionOrder":\{"type":"numeric"\}\},\{"dimension":"Spend","direction":"descending","dimensionOrder":\{"type":"numeric"\}\},\{"dimension":"Const Der Fact Col A","direction":"descending","dimensionOrder":\{"type":"numeric"\}\}\],"limit":200\},"context":\{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":5000,"queryId":".*"\},"descending":false\}
- Support for Async View Multi Query, API Side Join
09:14:33.163 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:33.163 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:33.164 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:33.167 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to b6503668-62f3-4cbd-832b-83ecbf310fab
09:14:33.168 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:33.168 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- Successfully generated Outer Group By Query if NoopRollupp column requested
09:14:33.169 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 86d0559d-ecf8-4e54-ba12-134b2bf4d20e
- Fact View Query Tests Adjustment Stats with constant column filter and sorting on const fact columns
09:14:33.176 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to b1305bcd-6c7b-48b4-9806-bc0d16d008a6
- dimension filter extraction function for decode dim should work for more than 2 mappings
SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT "Device ID", "Advertiser ID", "Ad Format Name", "Ad Format Sub Type", impressions AS "Impressions", "Ad Group Status", "Campaign Name", count_col AS "Count"
FROM (SELECT f0.device_id "Device ID", agp2.advertiser_id "Advertiser ID", f0.ad_format_id "Ad Format Name", f0.ad_format_sub_type "Ad Format Sub Type", SUM(impressions) AS impressions, agp2."Ad Group Status" "Ad Group Status", cp1.campaign_name "Campaign Name", SUM(count_col) AS count_col
      FROM (SELECT /*+ PARALLEL_INDEX(cb_campaign_k_stats 4) CONDITIONAL_HINT1 CONDITIONAL_HINT2 CONDITIONAL_HINT4 */
                   CASE WHEN (device_id IN (1)) THEN 'Desktop' WHEN (device_id IN (2)) THEN 'Tablet' WHEN (device_id IN (3)) THEN 'SmartPhone' WHEN (device_id IN (-1)) THEN 'UNKNOWN' ELSE 'UNKNOWN' END device_id, ad_group_id, advertiser_id, CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (5)) THEN 'Single image' WHEN (ad_format_id IN (6)) THEN 'Single image' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (9)) THEN 'Carousel' WHEN (ad_format_id IN (2)) THEN 'Single image' WHEN (ad_format_id IN (7)) THEN 'Video' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (3)) THEN 'Single image' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (8)) THEN 'Video with HTML Endcard' WHEN (ad_format_id IN (4)) THEN 'Single image' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'Other' END ad_format_id, CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'N/A' END ad_format_sub_type, campaign_id, SUM(impressions) AS impressions, COUNT(*) AS count_col
            FROM fact2 FactAlias
            WHERE (ad_format_id <> 100) AND (ad_format_id = 35) AND (ad_format_id = 97) AND (advertiser_id = 12345) AND (stats_source = 2) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY CASE WHEN (device_id IN (1)) THEN 'Desktop' WHEN (device_id IN (2)) THEN 'Tablet' WHEN (device_id IN (3)) THEN 'SmartPhone' WHEN (device_id IN (-1)) THEN 'UNKNOWN' ELSE 'UNKNOWN' END, ad_group_id, advertiser_id, CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (5)) THEN 'Single image' WHEN (ad_format_id IN (6)) THEN 'Single image' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (9)) THEN 'Carousel' WHEN (ad_format_id IN (2)) THEN 'Single image' WHEN (ad_format_id IN (7)) THEN 'Video' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (3)) THEN 'Single image' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (8)) THEN 'Video with HTML Endcard' WHEN (ad_format_id IN (4)) THEN 'Single image' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'Other' END, CASE WHEN (ad_format_id IN (101)) THEN 'DPA Carousel Ad' WHEN (ad_format_id IN (97)) THEN 'DPA Collection Ad' WHEN (ad_format_id IN (98)) THEN 'DPA View More' WHEN (ad_format_id IN (35)) THEN 'Product Ad' WHEN (ad_format_id IN (99)) THEN 'DPA Extended Carousel' WHEN (ad_format_id IN (100)) THEN 'DPA Single Image Ad' ELSE 'N/A' END, campaign_id
            
           ) f0
                     INNER JOIN
           (SELECT /*+ CampaignHint */ campaign_name, id, advertiser_id
            FROM campaign_postgres
            WHERE (advertiser_id = 12345) AND (campaign_name IS NOT NULL)
             )
           cp1 ON ( f0.advertiser_id = cp1.advertiser_id AND f0.campaign_id = cp1.id)
           INNER JOIN
           (SELECT  advertiser_id, campaign_id, CASE WHEN status = 'ON' THEN 'ON' ELSE 'OFF' END AS "Ad Group Status", id
            FROM ad_group_postgres
            WHERE (advertiser_id = 12345)
             )
           agp2 ON ( f0.advertiser_id = agp2.advertiser_id AND f0.ad_group_id = agp2.id)

          GROUP BY f0.device_id, agp2.advertiser_id, f0.ad_format_id, f0.ad_format_sub_type, agp2."Ad Group Status", cp1.campaign_name
) sqalias1 
   ORDER BY "Advertiser ID" ASC NULLS LAST, "Ad Format Name" ASC NULLS LAST) sqalias2 LIMIT 200) D ) sqalias3 WHERE ROWNUM >= 1 AND ROWNUM <= 200- Query with both aliases with filter and sort by
Set(campaign_adjustments, ad_fact1, advertiser_postgres, pg_combined_class, ad_group_postgres, v_publisher_stats, campaign_stats, k_stats_fact1, ad_dim_postgres, k_stats_new_partitioning_two, fact_druid, restaurant_postgres, campaign_postgres, f_class_stats, v_publisher_stats2, fact1, k_stats_new_partitioning_one, v_publisher_stats_str, fact2, pg_non_hash_paritioned_with_singleton_dim, pg_targetingattribute, account_stats, account_adjustment)
09:14:33.282 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:33.282 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:33.283 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:33.286 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:33.286 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- Successfully generated Outer Group By Query if NoopRollupp derived column is requested for non-derived source fields
09:14:33.379 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:33.379 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:33.379 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:33.383 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:33.383 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- Successfully generated Outer Group By Query if aggregate derived column (eg UDAF) is requested
09:14:33.461 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to eb93d87c-23e3-422e-a588-e05e83358b93
09:14:33.475 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:33.475 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:33.475 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:33.479 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:33.479 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- Druid query should be generated successfully with scan query type
- Successfully generated Outer Group By Query with id cols requested from dims
09:14:33.542 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:33.542 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:33.542 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:33.544 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:33.545 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- generating presto outer group by query with greater than filter
09:14:33.605 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:33.605 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:33.605 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:33.608 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:33.608 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- generating presto query with outer group containing derived columns of level 2
09:14:33.645 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 0fc4f56a-98bb-46be-8788-2f2ce7f0bf7a
- Druid query should fail to generate with scan query type when sort by requested
09:14:33.671 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:33.671 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:33.672 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:33.676 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:33.676 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- generating presto query with outer group by, 2 dim joins and sorting
09:14:33.740 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:33.740 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:33.740 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:33.742 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:33.742 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- generating presto query with outer group by,  Noop rollup cols
09:14:33.807 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:33.807 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:33.807 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:33.811 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:33.811 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- generating presto query with outer group by, derived cols
09:14:33.827 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 03d1432d-2743-4b26-8b5f-5655395e8f01
- Druid query should fail to generate with scan query type when derived fact requested
09:14:33.881 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:33.881 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:33.881 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:33.884 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:33.884 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- generating presto query with outer group by, having and partitioning scheme, test part col renderer
09:14:33.955 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:33.955 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:33.955 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:33.959 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:33.959 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- Test constant requested fields with Outer Group By
09:14:34.003 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to db0fbdcd-71fd-41c2-910f-15575e24f64a
- Druid query should fail to generate with scan query type when filter on derived fact requested
09:14:34.007 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to f1f3be0f-0d1c-4bf8-90a6-17e2d435c3ec
- Druid query should fail to generate with scan query type when using druid for dimension joins
09:14:34.012 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 79b7f011-513f-45f3-af74-5bf452c26b2b
- dimension time extraction function for druid time when no timezone is specified in additional parameters
09:14:34.019 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 9d5c5551-ef9c-4d76-8652-2b5c0afe052d
- dimension time extraction function for druid time when timezone is specified in the request
- Filter on time dimension extracted using request context should render correctly
09:14:34.031 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
09:14:34.031 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:34.031 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:34.032 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
- Inner should query should not have limitSpec if 'shouldLimitInnerQueries' is set to false
09:14:34.035 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:34.036 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- NoopRollup columns in Outer Group By should be rendered correctly
09:14:34.037 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
- should generate nested groupby query if expensive date time filter is present
09:14:34.046 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
- should generate nested groupby query if expensive date time filter is present and inner groupby should include Day even though it's not in the original request
09:14:34.055 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 092c0022-7f10-42e0-b1e8-6122329d68bd
- populate context with hostname
09:14:34.063 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to bcfc593b-f7dc-4ac3-b248-e7f744d1237a
- namespace lookup extraction functionality for timestamp
09:14:34.071 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
- Successfully generate a query with HyperUniques Filter
09:14:34.080 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
- Successfully generate a query with HyperUniqueCardinalityWrapper
09:14:34.086 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 1679a9bb-a914-471f-a94c-36993970880a
09:14:34.088 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:34.088 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- Successfully set query priority for async request
09:14:34.112 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:34.112 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:34.112 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:34.114 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:34.114 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- Successfully generated Outer Group By Query with dim non id field as filter
09:14:34.176 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:34.176 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:34.176 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:34.178 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:34.178 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- Successfully generated Outer Group By Query with dim non id field as filter and derived fact field having dim source col
09:14:34.246 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:34.246 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:34.247 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:34.248 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:34.248 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- successfully generate fact driven query for day grain with datetime between filter
09:14:34.264 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 0873b86f-ebe0-4e11-81ea-e01c31afa907
09:14:34.320 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:34.320 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:34.320 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:34.322 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:34.322 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- successfully generate fact driven query for minute grain with datetime between filter
09:14:34.381 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:34.381 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:34.381 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:34.382 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:34.383 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
- Multiple filters on same column
09:14:34.447 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 128df789-9da1-49b1-9837-e7b4e9a0f9ec
- test row count groupby query
09:14:34.453 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to e5e4c4bd-d080-4c30-b918-1a67fd0e828c
- Test generating a query for a request with derived fact column using JavaScript Aggregator
09:14:34.459 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Selecting QueryGen buckets for engine: Presto with params: UserId: , isInternal: false, dryRunRevision: None, forceRevision: None, forceEngine: NoneforceQueryGenVersion: None
09:14:34.459 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.b.BucketSelector - Buckets Selected: engine: Presto, queryGenVersion: Version(1), dryRunQueryGenVersion: None
09:14:34.460 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.p.PrestoQueryGeneratorV1 - Generating Presto query using PrestoQueryGenerator V1 Outer Group By:, version Version(1)
09:14:34.462 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:34.462 INFO  [ScalaTest-17-running-PrestoQueryGeneratorV1Test] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:34.462 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 4ee6d687-77b9-4ef6-ab9d-87b7eb295225
- Not Like filter Presto
09:14:34.463 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request!
09:14:34.463 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.DefaultQueryPipelineFactory - No fallback query for request: Success(None)
09:14:34.466 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 829ea073-2e04-4b85-900f-422277d8426d
09:14:34.477 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 11314901-584f-45c3-9385-24e2e1f6ac81
- limit should be set when rowsPerPage is specified for Async
- Test generating a query for a request with derived fact column using ThetaSketchEstimateWrapper
{"queryType":"groupBy","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"statsDate","value":"20201107"},{"type":"selector","dimension":"statsDate","value":"20201104"},{"type":"selector","dimension":"statsDate","value":"20201108"},{"type":"selector","dimension":"statsDate","value":"20201105"},{"type":"selector","dimension":"statsDate","value":"20201109"},{"type":"selector","dimension":"statsDate","value":"20201110"},{"type":"selector","dimension":"statsDate","value":"20201106"},{"type":"selector","dimension":"statsDate","value":"20201103"}]},{"type":"selector","dimension":"advertiser_id","value":"12345"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"},{"type":"default","dimension":"statsDate","outputName":"Day","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impressions"},{"type":"filtered","aggregator":{"type":"thetaSketch","name":"Conversion User Count","fieldName":"uniqueUserCount","size":16384,"shouldFinalize":true,"isInputThetaSketch":false},"filter":{"type":"javascript","dimension":"segments","function":"function(x) { return x > 0; }"},"name":"Conversion User Count"},{"type":"longSum","name":"Clicks","fieldName":"clicks"},{"type":"filtered","aggregator":{"type":"thetaSketch","name":"segments_unique_users","fieldName":"uniqueUserCount","size":16384,"shouldFinalize":true,"isInputThetaSketch":false},"filter":{"type":"or","fields":[{"type":"selector","dimension":"segments","value":"1234"}]},"name":"segments_unique_users"}],"postAggregations":[{"type":"arithmetic","name":"Conv Segments Unique User Count","fn":"+","fields":[{"type":"thetaSketchEstimate","name":"conv_unique_users","field":{"type":"fieldAccess","name":"conv_unique_users","fieldName":"Conversion User Count"}},{"type":"thetaSketchEstimate","name":"segments_unique_users","field":{"type":"fieldAccess","name":"segments_unique_users","fieldName":"segments_unique_users"}}]},{"type":"javascript","name":"variance","fieldNames":["Clicks","Impressions"],"function":"function(clicks,impressions){return clicks * Math.sqrt(impressions);}"},{"type":"arithmetic","name":"Derived User Count Plus Variance","fn":"+","fields":[{"type":"fieldAccess","name":"Conv Segments Unique User Count","fieldName":"Conv Segments Unique User Count"},{"type":"fieldAccess","name":"variance","fieldName":"variance"}]},{"type":"arithmetic","name":"Segment Count By Variance","fn":"/","fields":[{"type":"fieldAccess","name":"Derived User Count Plus Variance","fieldName":"Derived User Count Plus Variance"},{"type":"fieldAccess","name":"variance","fieldName":"variance"}]}],"limitSpec":{"type":"default","columns":[],"limit":120},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":5000,"queryId":"11314901-584f-45c3-9385-24e2e1f6ac81"},"descending":false}- Test generating a query with a derived column which is used in both its derived column and its derived derived column
09:14:34.487 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
- Successfully generate a time extraction function when period granularity is specified
09:14:34.492 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to abc123
- Successfully generate a filter on an aggregated fact col even when the fact is not in the selected fields
09:14:34.497 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 867ce9f9-005f-410d-a43c-48e6c9402506
{"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"statsDate","value":"20201107"},{"type":"selector","dimension":"statsDate","value":"20201104"},{"type":"selector","dimension":"statsDate","value":"20201108"},{"type":"selector","dimension":"statsDate","value":"20201105"},{"type":"selector","dimension":"statsDate","value":"20201109"},{"type":"selector","dimension":"statsDate","value":"20201110"},{"type":"selector","dimension":"statsDate","value":"20201106"},{"type":"selector","dimension":"statsDate","value":"20201103"}]},{"type":"selector","dimension":"advertiser_id","value":"12345"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"},{"type":"default","dimension":"statsDate","outputName":"Day","outputType":"STRING"},{"type":"extraction","dimension":"campaign_id_alias","outputName":"Campaign Name","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"campaign_lookup","retainMissingValue":false,"replaceMissingValueWith":"MAHA_LOOKUP_EMPTY","injective":false,"optimize":true,"valueColumn":"name","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impressions"}],"postAggregations":[],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":5000,"queryId":"867ce9f9-005f-410d-a43c-48e6c9402506"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"not","field":{"type":"search","dimension":"Campaign Name","query":{"type":"insensitive_contains","value":"test","caseSensitive":false}}}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"Advertiser ID","outputName":"Advertiser ID","outputType":"STRING"},{"type":"default","dimension":"Day","outputName":"Day","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"Impressions"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[],"limit":220},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":5000,"queryId":"867ce9f9-005f-410d-a43c-48e6c9402506"},"descending":false}
- Druid query should be generated with NotLike filter
09:14:34.504 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to b7f357c1-c542-4be6-bba1-b1d562612d15
{"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"statsDate","value":"20201107"},{"type":"selector","dimension":"statsDate","value":"20201104"},{"type":"selector","dimension":"statsDate","value":"20201108"},{"type":"selector","dimension":"statsDate","value":"20201105"},{"type":"selector","dimension":"statsDate","value":"20201109"},{"type":"selector","dimension":"statsDate","value":"20201110"},{"type":"selector","dimension":"statsDate","value":"20201106"},{"type":"selector","dimension":"statsDate","value":"20201103"}]},{"type":"selector","dimension":"advertiser_id","value":"12345"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"},{"type":"default","dimension":"statsDate","outputName":"Day","outputType":"STRING"},{"type":"extraction","dimension":"campaign_id_alias","outputName":"Campaign Name","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"campaign_lookup","retainMissingValue":false,"replaceMissingValueWith":"MAHA_LOOKUP_EMPTY","injective":false,"optimize":true,"valueColumn":"name","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[],"postAggregations":[],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":5000,"queryId":"b7f357c1-c542-4be6-bba1-b1d562612d15"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"not","field":{"type":"search","dimension":"Campaign Name","query":{"type":"insensitive_contains","value":"test","caseSensitive":false}}}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"Advertiser ID","outputName":"Advertiser ID","outputType":"STRING"},{"type":"default","dimension":"Day","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"Campaign Name","outputName":"Campaign Name","outputType":"STRING"}],"aggregations":[],"postAggregations":[],"limitSpec":{"type":"default","columns":[],"limit":220},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":5000,"queryId":"b7f357c1-c542-4be6-bba1-b1d562612d15"},"descending":false}
- Druid query with Lookups should contain column alias if available
09:14:34.511 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to ee1a4ab2-0c92-4fed-b54f-aa76b58a7167
- Druid query should retain missing value if LOOKUP_WITH_EMPTY_VALUE_OVERRIDE is used
09:14:34.672 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 3f133564-77dd-472a-b8a6-31709dfe798b
{"queryType":"groupBy","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"statsDate","value":"20201103"},{"type":"selector","dimension":"statsDate","value":"20201110"}]},{"type":"selector","dimension":"advertiser_id","value":"12345"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"campaign_id_alias","outputName":"Campaign ID","outputType":"STRING"},{"type":"extraction","dimension":"campaign_id_alias","outputName":"Campaign Name","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"campaign_lookup","retainMissingValue":false,"replaceMissingValueWith":"MAHA_LOOKUP_EMPTY","injective":false,"optimize":true,"valueColumn":"name","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impressions"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[{"dimension":"Campaign Name","direction":"ascending","dimensionOrder":{"type":"lexicographic"}}],"limit":1020},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":5000,"queryId":"3f133564-77dd-472a-b8a6-31709dfe798b"},"descending":false}
- Druid query should be generated with sort on lookup dimensions
09:14:34.831 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to f69b2f23-b8ca-4404-ae19-e8bb5e14da4c
{"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"statsDate","value":"20201103"},{"type":"selector","dimension":"statsDate","value":"20201110"}]},{"type":"selector","dimension":"advertiser_id","value":"12345"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"campaign_id_alias","outputName":"Campaign ID","outputType":"STRING"},{"type":"extraction","dimension":"campaign_id_alias","outputName":"Campaign Name","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"campaign_lookup","retainMissingValue":false,"replaceMissingValueWith":"MAHA_LOOKUP_EMPTY","injective":false,"optimize":true,"valueColumn":"name","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impressions"}],"postAggregations":[],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":5000,"queryId":"f69b2f23-b8ca-4404-ae19-e8bb5e14da4c"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"not","field":{"type":"selector","dimension":"Campaign Name","value":"-3"}},{"type":"not","field":{"type":"selector","dimension":"Campaign Name"}}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"Campaign ID","outputName":"Campaign ID","outputType":"STRING"},{"type":"default","dimension":"Campaign Name","outputName":"Campaign Name","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"Impressions"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[{"dimension":"Campaign Name","direction":"ascending","dimensionOrder":{"type":"lexicographic"}}],"limit":2020},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":5000,"queryId":"f69b2f23-b8ca-4404-ae19-e8bb5e14da4c"},"descending":false}
- Multiple filters on same column
09:14:34.979 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 59d7bffc-437e-4276-81df-36169a86019f
- Query with both aliases
09:14:35.138 INFO  [ScalaTest-21-running-DruidQueryGeneratorTest] c.y.m.c.q.d.DruidQueryGenerator - Druid requestId is set to 887de888-af6e-4198-a08f-9f13325f3d9f
- Query with both aliases with filter and sort by
Run completed in 17 seconds, 996 milliseconds.
Total number of tests run: 1472
Suites: completed 81, aborted 0
Tests: succeeded 1472, failed 0, canceled 0, ignored 5, pending 0
All tests passed.
09:14:35.208 INFO  [log:pid(87389)] pg-097f66ba-826d-4eb9-99dc-d9878c365276 - 2020-11-10 09:14:35.208 PST [87391] LOG:  received fast shutdown request
09:14:35.312 INFO  [log:pid(87455)] init-097f66ba-826d-4eb9-99dc-d9878c365276:pg_ctl - waiting for server to shut down.... done
09:14:35.312 INFO  [log:pid(87455)] init-097f66ba-826d-4eb9-99dc-d9878c365276:pg_ctl - server stopped
09:14:35.313 INFO  [postgres-097f66ba-826d-4eb9-99dc-d9878c365276-closer] c.o.d.p.e.EmbeddedPostgres - 097f66ba-826d-4eb9-99dc-d9878c365276 shut down postmaster in 00:00:00.121
09:14:35.314 INFO  [log:pid(87456)] init-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31:pg_ctl - waiting for server to shut down.... done
09:14:35.314 INFO  [log:pid(87456)] init-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31:pg_ctl - server stopped
09:14:35.315 INFO  [postgres-deb1cdd2-6de5-4e43-b865-fa9ae64f1e31-closer] c.o.d.p.e.EmbeddedPostgres - deb1cdd2-6de5-4e43-b865-fa9ae64f1e31 shut down postmaster in 00:00:00.122
[INFO] 
[INFO] <<< scoverage-maven-plugin:1.4.1:report (coverage) < [scoverage]test @ maha-core <<<
[INFO] 
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:report (coverage) @ maha-core ---
[INFO] Reading scoverage instrumentation [/Users/lgadde/git/Native-Ads/maha/core/target/scoverage-data/scoverage.coverage]...
[INFO] Reading scoverage measurements [/Users/lgadde/git/Native-Ads/maha/core/target/scoverage-data/scoverage.measurements.*]...
[INFO] Generating coverage reports...
[INFO] Written Cobertura XML report [/Users/lgadde/git/Native-Ads/maha/core/target/cobertura.xml]
[INFO] Written XML coverage report [/Users/lgadde/git/Native-Ads/maha/core/target/scoverage.xml]
[INFO] Written HTML coverage report [/Users/lgadde/git/Native-Ads/maha/core/target/site/scoverage/index.html]
[INFO] Statement coverage.: 90.10%
[INFO] Branch coverage....: 83.85%
[INFO] Coverage reports completed.
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:check-only (coverage) @ maha-core ---
[INFO] Statement coverage.: 90.10%
[INFO] Branch coverage....: 83.85%
[INFO] Coverage is above minimum [90.10% >= 90.00%]
[INFO] 
[INFO] ------------------< com.yahoo.maha:maha-job-service >-------------------
[INFO] Building maha job service 6.24-SNAPSHOT                           [7/15]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ maha-job-service ---
[INFO] Deleting /Users/lgadde/git/Native-Ads/maha/job-service/target
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-job-service ---
[INFO] Add Source directory: /Users/lgadde/git/Native-Ads/maha/job-service/src/main/scala
[INFO] Add Test Source directory: /Users/lgadde/git/Native-Ads/maha/job-service/src/test/scala
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-job-service ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/lgadde/git/Native-Ads/maha/job-service/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ maha-job-service ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-job-service ---
[INFO] /Users/lgadde/git/Native-Ads/maha/job-service/src/main/scala:-1: info: compiling
[INFO] Compiling 5 source files to /Users/lgadde/git/Native-Ads/maha/job-service/target/classes at 1605028484069
[ERROR] /Users/lgadde/git/Native-Ads/maha/job-service/src/main/scala/com/yahoo/maha/job/service/SqlJobMetadata.scala:36: warning: a type was inferred to be `Any`; this may indicate a programming error.
[ERROR]       val row = scala.collection.immutable.Seq(job.jobId, job.jobType.name, job.jobStatus.toString,
[ERROR]                                            ^
[ERROR] /Users/lgadde/git/Native-Ads/maha/job-service/src/main/scala/com/yahoo/maha/job/service/SqlJobMetadata.scala:92: warning: a type was inferred to be `Any`; this may indicate a programming error.
[ERROR]     val row = scala.collection.immutable.Seq(jobStatus.toString, jobId)
[ERROR]                                          ^
[ERROR] /Users/lgadde/git/Native-Ads/maha/job-service/src/main/scala/com/yahoo/maha/job/service/SqlJobMetadata.scala:102: warning: a type was inferred to be `Any`; this may indicate a programming error.
[ERROR]     val row = scala.collection.immutable.Seq(endStatus.toString, message, jobId)
[ERROR]                                          ^
[WARNING] three warnings found
[INFO] prepare-compile in 0 s
[INFO] compile in 5 s
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-job-service ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ maha-job-service ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-job-service ---
[INFO] /Users/lgadde/git/Native-Ads/maha/job-service/src/test/scala:-1: info: compiling
[INFO] Compiling 3 source files to /Users/lgadde/git/Native-Ads/maha/job-service/target/test-classes at 1605028489650
[WARNING] /Users/lgadde/git/Native-Ads/maha/job-service/src/test/scala/com.yahoo.maha.job.service/JobMetadataTest.scala:50: warning: postfix operator millis should be enabled
[WARNING] by making the implicit value scala.language.postfixOps visible.
[WARNING] This can be achieved by adding the import clause 'import scala.language.postfixOps'
[WARNING] or by setting the compiler option -language:postfixOps.
[WARNING] See the Scaladoc for value scala.language.postfixOps for a discussion
[WARNING] why the feature should be explicitly enabled.
[WARNING]     Await.result(futurePassThroughJobMetadata, 100 millis)
[WARNING]                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/job-service/src/test/scala/com.yahoo.maha.job.service/JobMetadataTest.scala:51: warning: postfix operator millis should be enabled
[WARNING] by making the implicit value scala.language.postfixOps visible.
[WARNING]     Await.result(futurePassThough, 100 millis)
[WARNING]                                        ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/job-service/src/test/scala/com.yahoo.maha.job.service/JobMetadataTest.scala:103: warning: postfix operator millis should be enabled
[WARNING] by making the implicit value scala.language.postfixOps visible.
[WARNING]       Await.result(futurePassThroughJobMetadata, 100 millis)
[WARNING]                                                      ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/job-service/src/test/scala/com.yahoo.maha.job.service/JobMetadataTest.scala:104: warning: postfix operator millis should be enabled
[WARNING] by making the implicit value scala.language.postfixOps visible.
[WARNING]       Await.result(futurePassThough, 100 millis)
[WARNING]                                          ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/job-service/src/test/scala/com.yahoo.maha.job.service/SqlJobMetadataTest.scala:39: warning: postfix operator millis should be enabled
[WARNING] by making the implicit value scala.language.postfixOps visible.
[WARNING]     Await.result(insertFuture, 500 millis)
[WARNING]                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/job-service/src/test/scala/com.yahoo.maha.job.service/SqlJobMetadataTest.scala:61: warning: postfix operator millis should be enabled
[WARNING] by making the implicit value scala.language.postfixOps visible.
[WARNING]     Await.result(jobFuture, 500 millis)
[WARNING]                                 ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/job-service/src/test/scala/com.yahoo.maha.job.service/SqlJobMetadataTest.scala:70: warning: postfix operator millis should be enabled
[WARNING] by making the implicit value scala.language.postfixOps visible.
[WARNING]     Await.result(deleteJobFuture, 500 millis)
[WARNING]                                       ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/job-service/src/test/scala/com.yahoo.maha.job.service/SqlJobMetadataTest.scala:79: warning: postfix operator millis should be enabled
[WARNING] by making the implicit value scala.language.postfixOps visible.
[WARNING]     Await.result(updateJobFuture, 500 millis)
[WARNING]                                       ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/job-service/src/test/scala/com.yahoo.maha.job.service/SqlJobMetadataTest.scala:88: warning: postfix operator millis should be enabled
[WARNING] by making the implicit value scala.language.postfixOps visible.
[WARNING]     Await.result(jobEndedJobFuture, 500 millis)
[WARNING]                                         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/job-service/src/test/scala/com.yahoo.maha.job.service/SqlJobMetadataTest.scala:97: warning: postfix operator millis should be enabled
[WARNING] by making the implicit value scala.language.postfixOps visible.
[WARNING]     Await.result(currentJobsFuture, 500 millis)
[WARNING]                                         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/job-service/src/test/scala/com.yahoo.maha.job.service/SqlJobMetadataTest.scala:108: warning: postfix operator millis should be enabled
[WARNING] by making the implicit value scala.language.postfixOps visible.
[WARNING]     Await.result(insertFuture, 500 millis)
[WARNING]                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/job-service/src/test/scala/com.yahoo.maha.job.service/SqlJobMetadataTest.scala:113: warning: postfix operator millis should be enabled
[WARNING] by making the implicit value scala.language.postfixOps visible.
[WARNING]       Await.result(insertFuture, 500 millis)
[WARNING]                                      ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/job-service/src/test/scala/com.yahoo.maha.job.service/SqlJobMetadataTest.scala:119: warning: postfix operator millis should be enabled
[WARNING] by making the implicit value scala.language.postfixOps visible.
[WARNING]       Await.result(insertFuture, 500 millis)
[WARNING]                                      ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/job-service/src/test/scala/com.yahoo.maha.job.service/SqlJobMetadataTest.scala:124: warning: postfix operator millis should be enabled
[WARNING] by making the implicit value scala.language.postfixOps visible.
[WARNING]       Await.result(insertFuture, 500 millis)
[WARNING]                                      ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/job-service/src/test/scala/com.yahoo.maha.job.service/SqlJobMetadataTest.scala:129: warning: postfix operator millis should be enabled
[WARNING] by making the implicit value scala.language.postfixOps visible.
[WARNING]       Await.result(insertFuture, 500 millis)
[WARNING]                                      ^
[WARNING] 15 warnings found
[INFO] prepare-compile in 0 s
[INFO] compile in 6 s
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-job-service ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- scalatest-maven-plugin:2.0.0:test (test) @ maha-job-service ---
Discovery starting.
Discovery completed in 908 milliseconds.
Run starting. Expected test count is: 7
JobMetadataTest:
- test Job metadata
- Test JobType decode
- JobMetadata trait testing
- Test JobType encode
- Job Status
JobID= 12345
Int Value 1
09:14:59.255 ERROR [scala-execution-context-global-16] c.y.m.j.s.SqlJobMetadata - Failed to create job Failure(org.h2.jdbc.JdbcSQLException: Table "TEST" not found; SQL statement:
INSERT INTO test (jobId, jobType, jobStatus,
    jobResponse, numAcquired, createdTimestamp,
    acquiredTimestamp, endedTimestamp,jobParentId,
     jobRequest, hostname, cubeName,
      isDeleted) values(?,?,?,?,?,?,?,?,?,?,?,?,?) [42102-191])
09:14:59.260 ERROR [scala-execution-context-global-16] c.y.m.j.s.SqlJobMetadata - Failed to update the job status Failure(org.h2.jdbc.JdbcSQLException: Table "TEST" not found; SQL statement:
UPDATE test  SET jobStatus = ? where jobId = ? [42102-191])
09:14:59.262 ERROR [scala-execution-context-global-16] c.y.m.j.s.SqlJobMetadata - Failed to update the job end status Failure(org.h2.jdbc.JdbcSQLException: Table "TEST" not found; SQL statement:
UPDATE test SET jobStatus = ? , jobResponse = ? where jobId = ? [42102-191])
SqlJobMetadataTest:
- Test Job Creation
  + Found the job =12345 
- test SQL Job metadata failures
Run completed in 1 second, 198 milliseconds.
Total number of tests run: 7
Suites: completed 3, aborted 0
Tests: succeeded 7, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
[INFO] 
[INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ maha-job-service ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/job-service/target/maha-job-service-6.24-SNAPSHOT.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:jar (default) > generate-sources @ maha-job-service >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-job-service ---
[INFO] 
[INFO] <<< maven-source-plugin:2.4:jar (default) < generate-sources @ maha-job-service <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:jar (default) @ maha-job-service ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/job-service/target/maha-job-service-6.24-SNAPSHOT-sources.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:test-jar (default) > generate-sources @ maha-job-service >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-job-service ---
[INFO] 
[INFO] <<< maven-source-plugin:2.4:test-jar (default) < generate-sources @ maha-job-service <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:test-jar (default) @ maha-job-service ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/job-service/target/maha-job-service-6.24-SNAPSHOT-test-sources.jar
[INFO] 
[INFO] --- maven-jar-plugin:2.6:test-jar (default) @ maha-job-service ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/job-service/target/maha-job-service-6.24-SNAPSHOT-tests.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ maha-job-service ---
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/job-service/target/maha-job-service-6.24-SNAPSHOT.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-job-service/6.24-SNAPSHOT/maha-job-service-6.24-SNAPSHOT.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/job-service/pom.xml to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-job-service/6.24-SNAPSHOT/maha-job-service-6.24-SNAPSHOT.pom
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/job-service/target/maha-job-service-6.24-SNAPSHOT-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-job-service/6.24-SNAPSHOT/maha-job-service-6.24-SNAPSHOT-sources.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/job-service/target/maha-job-service-6.24-SNAPSHOT-test-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-job-service/6.24-SNAPSHOT/maha-job-service-6.24-SNAPSHOT-test-sources.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/job-service/target/maha-job-service-6.24-SNAPSHOT-tests.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-job-service/6.24-SNAPSHOT/maha-job-service-6.24-SNAPSHOT-tests.jar
[INFO] 
[INFO] >>> scoverage-maven-plugin:1.4.1:report (coverage) > [scoverage]test @ maha-job-service >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-job-service ---
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:pre-compile (coverage) @ maha-job-service ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-job-service ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/lgadde/git/Native-Ads/maha/job-service/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ maha-job-service ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-job-service ---
[INFO] /Users/lgadde/git/Native-Ads/maha/job-service/src/main/scala:-1: info: compiling
[INFO] Compiling 5 source files to /Users/lgadde/git/Native-Ads/maha/job-service/target/scoverage-classes at 1605028499570
[ERROR] /Users/lgadde/git/Native-Ads/maha/job-service/src/main/scala/com/yahoo/maha/job/service/SqlJobMetadata.scala:36: warning: a type was inferred to be `Any`; this may indicate a programming error.
[ERROR]       val row = scala.collection.immutable.Seq(job.jobId, job.jobType.name, job.jobStatus.toString,
[ERROR]                                            ^
[ERROR] /Users/lgadde/git/Native-Ads/maha/job-service/src/main/scala/com/yahoo/maha/job/service/SqlJobMetadata.scala:92: warning: a type was inferred to be `Any`; this may indicate a programming error.
[ERROR]     val row = scala.collection.immutable.Seq(jobStatus.toString, jobId)
[ERROR]                                          ^
[ERROR] /Users/lgadde/git/Native-Ads/maha/job-service/src/main/scala/com/yahoo/maha/job/service/SqlJobMetadata.scala:102: warning: a type was inferred to be `Any`; this may indicate a programming error.
[ERROR]     val row = scala.collection.immutable.Seq(endStatus.toString, message, jobId)
[ERROR]                                          ^
[INFO] Cleaning datadir [/Users/lgadde/git/Native-Ads/maha/job-service/target/scoverage-data]
[INFO] Beginning coverage instrumentation
[INFO] Instrumentation completed [175 statements]
[INFO] Wrote instrumentation file [/Users/lgadde/git/Native-Ads/maha/job-service/target/scoverage-data/scoverage.coverage]
[INFO] Will write measurement data to [/Users/lgadde/git/Native-Ads/maha/job-service/target/scoverage-data]
[WARNING] three warnings found
[INFO] prepare-compile in 0 s
[INFO] compile in 5 s
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:post-compile (coverage) @ maha-job-service ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-job-service ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ maha-job-service ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-job-service ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-job-service ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- scalatest-maven-plugin:2.0.0:test (test) @ maha-job-service ---
Discovery starting.
Discovery completed in 890 milliseconds.
Run starting. Expected test count is: 7
JobMetadataTest:
- test Job metadata
- Test JobType decode
- JobMetadata trait testing
- Test JobType encode
- Job Status
JobID= 12345
Int Value 1
09:15:08.684 ERROR [scala-execution-context-global-15] c.y.m.j.s.SqlJobMetadata - Failed to create job Failure(org.h2.jdbc.JdbcSQLException: Table "TEST" not found; SQL statement:
INSERT INTO test (jobId, jobType, jobStatus,
    jobResponse, numAcquired, createdTimestamp,
    acquiredTimestamp, endedTimestamp,jobParentId,
     jobRequest, hostname, cubeName,
      isDeleted) values(?,?,?,?,?,?,?,?,?,?,?,?,?) [42102-191])
09:15:08.690 ERROR [scala-execution-context-global-15] c.y.m.j.s.SqlJobMetadata - Failed to update the job status Failure(org.h2.jdbc.JdbcSQLException: Table "TEST" not found; SQL statement:
UPDATE test  SET jobStatus = ? where jobId = ? [42102-191])
09:15:08.691 ERROR [scala-execution-context-global-15] c.y.m.j.s.SqlJobMetadata - Failed to update the job end status Failure(org.h2.jdbc.JdbcSQLException: Table "TEST" not found; SQL statement:
UPDATE test SET jobStatus = ? , jobResponse = ? where jobId = ? [42102-191])
SqlJobMetadataTest:
- Test Job Creation
  + Found the job =12345 
- test SQL Job metadata failures
Run completed in 1 second, 201 milliseconds.
Total number of tests run: 7
Suites: completed 3, aborted 0
Tests: succeeded 7, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
[INFO] 
[INFO] <<< scoverage-maven-plugin:1.4.1:report (coverage) < [scoverage]test @ maha-job-service <<<
[INFO] 
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:report (coverage) @ maha-job-service ---
[INFO] Reading scoverage instrumentation [/Users/lgadde/git/Native-Ads/maha/job-service/target/scoverage-data/scoverage.coverage]...
[INFO] Reading scoverage measurements [/Users/lgadde/git/Native-Ads/maha/job-service/target/scoverage-data/scoverage.measurements.*]...
[INFO] Generating coverage reports...
[INFO] Written Cobertura XML report [/Users/lgadde/git/Native-Ads/maha/job-service/target/cobertura.xml]
[INFO] Written XML coverage report [/Users/lgadde/git/Native-Ads/maha/job-service/target/scoverage.xml]
[INFO] Written HTML coverage report [/Users/lgadde/git/Native-Ads/maha/job-service/target/site/scoverage/index.html]
[INFO] Statement coverage.: 92.00%
[INFO] Branch coverage....: 83.33%
[INFO] Coverage reports completed.
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:check-only (coverage) @ maha-job-service ---
[INFO] Statement coverage.: 92.00%
[INFO] Branch coverage....: 83.33%
[INFO] Coverage is above minimum [92.00% >= 90.00%]
[INFO] 
[INFO] -----------------< com.yahoo.maha:maha-druid-executor >-----------------
[INFO] Building maha druid executor 6.24-SNAPSHOT                        [8/15]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ maha-druid-executor ---
[INFO] Deleting /Users/lgadde/git/Native-Ads/maha/druid/target
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-druid-executor ---
[INFO] Add Source directory: /Users/lgadde/git/Native-Ads/maha/druid/src/main/scala
[INFO] Add Test Source directory: /Users/lgadde/git/Native-Ads/maha/druid/src/test/scala
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-druid-executor ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/lgadde/git/Native-Ads/maha/druid/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ maha-druid-executor ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-druid-executor ---
[INFO] /Users/lgadde/git/Native-Ads/maha/druid/src/main/scala:-1: info: compiling
[INFO] Compiling 3 source files to /Users/lgadde/git/Native-Ads/maha/druid/target/classes at 1605028509453
[WARNING] /Users/lgadde/git/Native-Ads/maha/druid/src/main/scala/com/yahoo/maha/executor/druid/DruidQueryExecutor.scala:440: warning: local val isFactDriven in method execute is never used
[WARNING]           val isFactDriven = query.queryContext.requestModel.isFactDriven
[WARNING]               ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/druid/src/main/scala/com/yahoo/maha/executor/druid/HttpUtils.scala:10: warning: Unused import
[WARNING] import javax.net.ssl.SSLContext
[WARNING]                      ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/druid/src/main/scala/com/yahoo/maha/executor/druid/HttpUtils.scala:16: warning: Unused import
[WARNING] import org.asynchttpclient.{AsyncHttpClient, AsyncHttpClientConfig, BoundRequestBuilder, DefaultAsyncHttpClient, DefaultAsyncHttpClientConfig, Response};
[WARNING]                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/druid/src/main/scala/com/yahoo/maha/executor/druid/HttpUtils.scala:26: warning: private default argument in class HttpUtils is never used
[WARNING]                                 ,headers:Option[Map[String, String]] = None
[WARNING]                                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/druid/src/main/scala/com/yahoo/maha/executor/druid/HttpUtils.scala:51: warning: local val request in method execute is never used
[WARNING]       val request = requestBuilder.build()
[WARNING]           ^
[WARNING] 5 warnings found
[INFO] prepare-compile in 0 s
[INFO] compile in 7 s
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-druid-executor ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ maha-druid-executor ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-druid-executor ---
[INFO] /Users/lgadde/git/Native-Ads/maha/druid/src/test/scala:-1: info: compiling
[INFO] Compiling 4 source files to /Users/lgadde/git/Native-Ads/maha/druid/target/test-classes at 1605028516983
[WARNING] /Users/lgadde/git/Native-Ads/maha/druid/src/test/scala/com/yahoo/maha/executor/druid/DruidQueryExecutorTest.scala:22: warning: Unused import
[WARNING] import org.apache.druid.common.config.NullHandling
[WARNING]                                       ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/druid/src/test/scala/com/yahoo/maha/executor/druid/DruidQueryExecutorTest.scala:201: warning: private default argument in class DruidQueryExecutorTest is never used
[WARNING]   private[this] def pubfact(forcedFilters: Set[ForcedFilter] = Set.empty): PublicFact = {
[WARNING]                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/druid/src/test/scala/com/yahoo/maha/executor/druid/DruidQueryExecutorTest.scala:967: warning: local val query in value <local DruidQueryExecutorTest> is never used
[WARNING]     val query = queryPipelineTry.toOption.get.queryChain.drivingQuery.asInstanceOf[DruidQuery[_]]
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/druid/src/test/scala/com/yahoo/maha/executor/druid/DruidQueryExecutorTest.scala:1855: warning: local val query in value <local DruidQueryExecutorTest> is never used
[WARNING]     val query = queryPipelineTry.toOption.get.queryChain.drivingQuery.asInstanceOf[DruidQuery[_]]
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/druid/src/test/scala/com/yahoo/maha/executor/druid/DruidQueryExecutorTest.scala:1945: warning: local val query in value <local DruidQueryExecutorTest> is never used
[WARNING]     val query = queryPipelineTry.toOption.get.queryChain.drivingQuery.asInstanceOf[DruidQuery[_]]
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/druid/src/test/scala/com/yahoo/maha/executor/druid/DruidQueryExecutorTest.scala:2626: warning: local val query in value <local DruidQueryExecutorTest> is never used
[WARNING]     val query = queryPipelineTry.toOption.get.queryChain.drivingQuery.asInstanceOf[DruidQuery[_]]
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/druid/src/test/scala/com/yahoo/maha/executor/druid/DruidQueryExecutorTest.scala:2721: warning: local val query in value <local DruidQueryExecutorTest> is never used
[WARNING]     val query = queryPipelineTry.toOption.get.queryChain.drivingQuery.asInstanceOf[DruidQuery[_]]
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/druid/src/test/scala/com/yahoo/maha/executor/druid/DruidQueryExecutorTest.scala:3197: warning: local val query in value <local DruidQueryExecutorTest> is never used
[WARNING]     val query = queryPipelineTry.toOption.get.queryChain.drivingQuery.asInstanceOf[OracleQuery].asString
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/druid/src/test/scala/com/yahoo/maha/executor/druid/HttpUtilsTest.scala:112: warning: local var headers in value <local HttpUtilsTest> is never updated: consider using immutable val
[WARNING]     var headers = Map("Content-Type"->"Application/Json")
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/druid/src/test/scala/com/yahoo/maha/executor/druid/TimeoutThrottlingFilterTest.scala:100: warning: local val response in value result is never used
[WARNING]         val response = f.get();
[WARNING]             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/druid/src/test/scala/com/yahoo/maha/executor/druid/TestWebService.scala:57: warning: method http4sEffectResponseSyntax in trait EffectResponseSyntax is deprecated (since 0.18.0-M2): Use map or flatMap directly on the response
[WARNING]       Ok(uncovered).putHeaders(Header("X-Druid-Response-Context", "{}"))
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/druid/src/test/scala/com/yahoo/maha/executor/druid/TestWebService.scala:99: warning: method http4sEffectResponseSyntax in trait EffectResponseSyntax is deprecated (since 0.18.0-M2): Use map or flatMap directly on the response
[WARNING]       Ok(uncovered).putHeaders(Header("X-Druid-Response-Context", "{\"uncoveredIntervals\":[2017-11-13T21:00:00.000Z/2017-11-14T00:00:00.000Z\"],\"uncoveredIntervalsOverflowed\":false}"))
[WARNING]         ^
[WARNING] 12 warnings found
[INFO] prepare-compile in 0 s
[INFO] compile in 13 s
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-druid-executor ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- scalatest-maven-plugin:2.0.0:test (test) @ maha-druid-executor ---
Discovery starting.
Discovery completed in 517 milliseconds.
Run starting. Expected test count is: 56
HttpUtilsTest:
09:15:33,927 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Found resource [logback-test.xml] at [file:/Users/lgadde/git/Native-Ads/maha/druid/target/test-classes/logback-test.xml]
09:15:33,927 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs multiple times on the classpath.
09:15:33,928 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [file:/Users/lgadde/git/Native-Ads/maha/druid/target/test-classes/logback-test.xml]
09:15:33,928 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [jar:file:/Users/lgadde/git/Native-Ads/maha/core/target/maha-core-6.24-SNAPSHOT-tests.jar!/logback-test.xml]
09:15:34,086 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - debug attribute not set
09:15:34,086 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.rolling.RollingFileAppender]
09:15:34,098 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [FILE]
09:15:34,110 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
09:15:34,188 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@665698670 - No compression will be used
09:15:34,189 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@665698670 - Will use the pattern application.%d{yyyy-MM-dd}.log for the active file
09:15:34,196 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - The date pattern is 'yyyy-MM-dd' from file name pattern 'application.%d{yyyy-MM-dd}.log'.
09:15:34,196 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Roll-over at midnight.
09:15:34,199 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Setting initial period to Tue Nov 10 09:15:34 PST 2020
09:15:34,202 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - Active log file name: target/logs/application.log
09:15:34,202 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - File property is set to [target/logs/application.log]
09:15:34,203 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]
09:15:34,205 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [STDOUT]
09:15:34,206 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
09:15:34,208 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.classic.AsyncAppender]
09:15:34,210 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [ASYNCFILE]
09:15:34,210 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [FILE] to ch.qos.logback.classic.AsyncAppender[ASYNCFILE]
09:15:34,210 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCFILE] - Attaching appender named [FILE] to AsyncAppender.
09:15:34,211 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCFILE] - Setting discardingThreshold to 51
09:15:34,211 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.classic.AsyncAppender]
09:15:34,211 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [ASYNCSTDOUT]
09:15:34,211 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [STDOUT] to ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT]
09:15:34,211 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT] - Attaching appender named [STDOUT] to AsyncAppender.
09:15:34,211 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT] - Setting discardingThreshold to 51
09:15:34,212 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.zaxxer.hikari] to ERROR
09:15:34,212 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [org.http4s.server.blaze] to ERROR
09:15:34,212 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.yahoo.maha.core.query] to ERROR
09:15:34,212 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.yahoo.maha.executor.druid.filters] to DEBUG
09:15:34,212 |-INFO in ch.qos.logback.classic.joran.action.RootLoggerAction - Setting level of ROOT logger to INFO
09:15:34,212 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [ASYNCFILE] to Logger[ROOT]
09:15:34,212 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [ASYNCSTDOUT] to Logger[ROOT]
09:15:34,212 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration.
09:15:34,213 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@b83a9be - Registering current configuration as safe fallback point

09:15:34.636 INFO  [ScalaTest-main-running-DiscoverySuite] o.h.b.c.n.NIO1SocketServerGroup - Service bound to address /127.0.0.1:5544
09:15:34.641 INFO  [ScalaTest-main-running-DiscoverySuite] c.y.m.e.d.HttpUtilsTest - Started blaze server
- Successful ResultSet conversion
09:15:35.222 DEBUG [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:35.360 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51403 accepted at Tue Nov 10 09:15:35 PST 2020.
- successful POST call test
09:15:36.245 DEBUG [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:36.250 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51404 accepted at Tue Nov 10 09:15:36 PST 2020.
- successful POST call test with Payload
09:15:36.265 DEBUG [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:36.267 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51405 accepted at Tue Nov 10 09:15:36 PST 2020.
- successful GET call test
09:15:36.278 DEBUG [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:36.279 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51406 accepted at Tue Nov 10 09:15:36 PST 2020.
- Invalid url call test
09:15:36.295 DEBUG [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:36.296 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51407 accepted at Tue Nov 10 09:15:36 PST 2020.
- GET call test with headers
- Unsupported HTTP method
09:15:36.310 DEBUG [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:36.312 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51408 accepted at Tue Nov 10 09:15:36 PST 2020.
09:15:36.320 ERROR [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.HttpUtils - Got 500 response, retrying, retry count=1 : fail first try!
09:15:36.823 DEBUG [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
- successfully retry on 500
09:15:36.832 DEBUG [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:36.834 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51409 accepted at Tue Nov 10 09:15:36 PST 2020.
09:15:36.838 ERROR [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.HttpUtils - Got 500 response, retrying, retry count=1 : always fail!
09:15:37.341 DEBUG [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:37.345 ERROR [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.HttpUtils - Got 500 response, retrying, retry count=2 : always fail!
09:15:37.846 DEBUG [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:37.850 ERROR [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.HttpUtils - Got 500 response, retrying, retry count=3 : always fail!
09:15:38.355 DEBUG [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
- exhaust max retry on 500
09:15:38.371 INFO  [ScalaTest-main-running-DiscoverySuite] c.y.m.e.d.HttpUtilsTest - Stopping blaze server
09:15:38.379 INFO  [ScalaTest-main-running-DiscoverySuite] o.h.b.c.n.NIO1SocketServerGroup - Service bound to address /127.0.0.1:6667
DruidQueryExecutorTest:
09:15:40.090 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:15:40.096 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:15:40.101 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:15:40.102 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:15:40.102 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:15:40.548 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"timeseries","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"descending":false,"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":"DAY","aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limit":2147483647,"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"8cd0f38a-f3f3-4e70-8b64-8509fabf4347"}}
09:15:40.549 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:40.550 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:40.553 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51411 accepted at Tue Nov 10 09:15:40 PST 2020.
09:15:40.561 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp": "2012-01-01T00:00:00.000Z",
    "result": { "Impressions": 15 }
  },
  {
   "timestamp": "2012-01-02T00:00:00.000Z",
   "result": { "Impressions": 16 }
  },
  {
    "timestamp": "2012-01-03T00:00:00.000Z",
    "result": { "Impressions": 17 }
  }
]
09:15:40.562 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=20
09:15:40.563 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Timeseries rows.size=3
09:15:40.573 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=3
- success case for TimeSeries query
09:15:40.602 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:15:40.602 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:15:40.602 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:15:40.602 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:15:40.602 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:15:40.613 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"timeseries","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"descending":false,"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":"DAY","aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limit":2147483647,"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"55a8d03e-c7fc-4f3b-8ade-3e037aa94312"}}
09:15:40.613 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:40.613 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:40.616 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51412 accepted at Tue Nov 10 09:15:40 PST 2020.
09:15:40.621 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp": "2012-01-01T00:00:00.000Z",
    "result": { "Impressions": 15, "Intentions": 55 }
  },
  {
   "timestamp": "2012-01-02T00:00:00.000Z",
   "result": { "Impressions": 16 }
  },
  {
    "timestamp": "2012-01-03T00:00:00.000Z",
    "result": { "Impressions": 17 }
  }
]
09:15:40.621 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=20
09:15:40.621 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Timeseries rows.size=3
09:15:40.622 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Intentions : JInt(55)
09:15:40.623 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=3
- success case for TimeSeries query with debugging
09:15:40.634 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:15:40.634 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:15:40.634 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:15:40.635 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:15:40.635 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:15:40.642 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"timeseries","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"descending":false,"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":"DAY","aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limit":2147483647,"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"f7f957fc-b154-4d9d-b57e-93d8e6ac3155"}}
09:15:40.642 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:40.642 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:40.645 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51413 accepted at Tue Nov 10 09:15:40 PST 2020.
09:15:40.649 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp": "2012-01-01T00:00:00.000Z",
    "result": { "Impressions": 15 },
    "unsupported":"field"
  }
]
09:15:40.649 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=20
09:15:40.650 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Timeseries rows.size=1
09:15:40.651 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - unhandled field : (unsupported,JString(field))
09:15:40.654 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in timeseries json response : (unsupported,JString(field))
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$7(DruidQueryExecutor.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$7$adapted(DruidQueryExecutor.scala:187)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$6(DruidQueryExecutor.scala:187)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$6$adapted(DruidQueryExecutor.scala:184)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:184)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
09:15:40.692 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"timeseries","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"descending":false,"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":"DAY","aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limit":2147483647,"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"f7f957fc-b154-4d9d-b57e-93d8e6ac3155"}}
09:15:40.693 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:40.693 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:40.696 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51414 accepted at Tue Nov 10 09:15:40 PST 2020.
09:15:40.700 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp": "2012-01-01T00:00:00.000Z",
    "result": "unsupported"
  }
]
09:15:40.701 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=20
09:15:40.701 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Timeseries rows.size=1
09:15:40.702 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in timeseries json response : JString(unsupported)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$7(DruidQueryExecutor.scala:207)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$7$adapted(DruidQueryExecutor.scala:187)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$6(DruidQueryExecutor.scala:187)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$6$adapted(DruidQueryExecutor.scala:184)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:184)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
09:15:40.723 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"timeseries","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"descending":false,"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":"DAY","aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limit":2147483647,"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"f7f957fc-b154-4d9d-b57e-93d8e6ac3155"}}
09:15:40.723 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:40.724 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:40.727 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51415 accepted at Tue Nov 10 09:15:40 PST 2020.
09:15:40.733 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response ["unsupported"]
09:15:40.733 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=20
09:15:40.733 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Timeseries rows.size=1
09:15:40.734 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in timeseries json response : JString(unsupported)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$6(DruidQueryExecutor.scala:215)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$6$adapted(DruidQueryExecutor.scala:184)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:184)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$15(DruidQueryExecutorTest.scala:582)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$15$adapted(DruidQueryExecutorTest.scala:580)
09:15:40.757 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"timeseries","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"descending":false,"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":"DAY","aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limit":2147483647,"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"f7f957fc-b154-4d9d-b57e-93d8e6ac3155"}}
09:15:40.757 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:40.757 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:40.760 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51416 accepted at Tue Nov 10 09:15:40 PST 2020.
09:15:40.765 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response {}
09:15:40.765 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=20
09:15:40.766 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in timeseries json response : JObject(List())
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:217)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$15(DruidQueryExecutorTest.scala:582)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$15$adapted(DruidQueryExecutorTest.scala:580)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.withDruidQueryExecutor(DruidQueryExecutorTest.scala:429)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$14(DruidQueryExecutorTest.scala:580)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$14$adapted(DruidQueryExecutorTest.scala:578)
- Test TimeSeries query with response with missing result field
09:15:40.802 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:15:40.802 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:15:40.803 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:15:40.803 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:15:40.803 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:15:40.832 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":2,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"3bcd6944-56fd-432b-b144-a636d8affeec"},"descending":false}
09:15:40.832 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:40.833 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:40.836 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51417 accepted at Tue Nov 10 09:15:40 PST 2020.
09:15:40.841 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [{
	"timestamp": "2013-08-31T00:00:00.000Z",
	"result": [{
		"Keyword ID": 14,
		"Impressions": 10669
	},{
		"Keyword ID": 13,
		"Impressions": 106
	}]
}]
09:15:40.841 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:40.842 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - TopN rows.size=1
09:15:40.843 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - results size=2
09:15:40.844 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
- success case for TopN query
09:15:40.854 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:15:40.854 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:15:40.854 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:15:40.854 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:15:40.854 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:15:40.861 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":2,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"f15530fb-029d-4a88-b2ed-7e0e1e2d3a8d"},"descending":false}
09:15:40.861 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:40.865 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:40.880 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51418 accepted at Tue Nov 10 09:15:40 PST 2020.
09:15:40.885 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [{
	"timestamp": "2013-08-31T00:00:00.000Z",
	"result": [{
		"Keyword ID": 14,
    "Keyword Value":1,
		"Impressions": 10669
	},{
		"Keyword ID": 13,
		"Impressions": 106,
    "Keyword Value":30
	}],
 "unsupported": "field"
}]
09:15:40.885 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:40.886 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - TopN rows.size=1
09:15:40.886 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - results size=2
09:15:40.886 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(1)
09:15:40.887 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(30)
09:15:40.887 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - unhandled field : (unsupported,JString(field))
09:15:40.887 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in TopNDruidQuery json response : (unsupported,JString(field))
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$12(DruidQueryExecutor.scala:249)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$12$adapted(DruidQueryExecutor.scala:229)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$11(DruidQueryExecutor.scala:229)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$11$adapted(DruidQueryExecutor.scala:227)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:227)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
09:15:40.905 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":2,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"f15530fb-029d-4a88-b2ed-7e0e1e2d3a8d"},"descending":false}
09:15:40.905 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:40.905 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:40.909 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51419 accepted at Tue Nov 10 09:15:40 PST 2020.
09:15:40.913 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [{
	"timestamp": "2013-08-31T00:00:00.000Z",
	"result": ["unsupported"]
}]
09:15:40.913 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:40.913 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - TopN rows.size=1
09:15:40.914 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - results size=1
09:15:40.914 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in TopNDruidQuery json response : JString(unsupported)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$14(DruidQueryExecutor.scala:241)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$14$adapted(DruidQueryExecutor.scala:237)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$12(DruidQueryExecutor.scala:237)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$12$adapted(DruidQueryExecutor.scala:229)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$11(DruidQueryExecutor.scala:229)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$11$adapted(DruidQueryExecutor.scala:227)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:227)
09:15:40.933 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":2,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"f15530fb-029d-4a88-b2ed-7e0e1e2d3a8d"},"descending":false}
09:15:40.933 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:40.934 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:40.937 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51420 accepted at Tue Nov 10 09:15:40 PST 2020.
09:15:40.941 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [{
	"timestamp": "2013-08-31T00:00:00.000Z",
	"result": "unsupported"
}]
09:15:40.941 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:40.941 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - TopN rows.size=1
09:15:40.942 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in TopNDruidQuery json response : JString(unsupported)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$12(DruidQueryExecutor.scala:243)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$12$adapted(DruidQueryExecutor.scala:229)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$11(DruidQueryExecutor.scala:229)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$11$adapted(DruidQueryExecutor.scala:227)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:227)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
09:15:40.959 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":2,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"f15530fb-029d-4a88-b2ed-7e0e1e2d3a8d"},"descending":false}
09:15:40.959 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:40.959 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:40.963 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51421 accepted at Tue Nov 10 09:15:40 PST 2020.
09:15:40.968 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response ["unsupported"]
09:15:40.968 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:40.968 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - TopN rows.size=1
09:15:40.969 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in TopNDruidQuery json response : JString(unsupported)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$11(DruidQueryExecutor.scala:251)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$11$adapted(DruidQueryExecutor.scala:227)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:227)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$24(DruidQueryExecutorTest.scala:671)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$24$adapted(DruidQueryExecutorTest.scala:669)
09:15:40.985 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":2,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"f15530fb-029d-4a88-b2ed-7e0e1e2d3a8d"},"descending":false}
09:15:40.985 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:40.986 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:40.989 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51422 accepted at Tue Nov 10 09:15:40 PST 2020.
09:15:40.993 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response {}
09:15:40.993 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:40.994 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in TopNDruidQuery json response : JObject(List())
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:253)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$24(DruidQueryExecutorTest.scala:671)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$24$adapted(DruidQueryExecutorTest.scala:669)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.withDruidQueryExecutor(DruidQueryExecutorTest.scala:429)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$23(DruidQueryExecutorTest.scala:669)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$23$adapted(DruidQueryExecutorTest.scala:667)
- TopN query with unhandled field
09:15:41.013 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:15:41.013 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:15:41.014 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:15:41.014 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:15:41.014 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:15:41.020 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":2,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"a6c32c38-5d32-4397-856f-318bddfd02e0"},"descending":false}
09:15:41.020 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:41.021 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:41.024 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51423 accepted at Tue Nov 10 09:15:41 PST 2020.
09:15:41.028 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp": "2012-01-01T00:00:00.000Z",
    "result": { "Impressions": 15 }
  },
  {
   "timestamp": "2012-01-02T00:00:00.000Z",
   "result": { "Impressions": 16 }
  },
  {
    "timestamp": "2012-01-03T00:00:00.000Z",
    "result": { "Impressions": 17 }
  }
]
09:15:41.028 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:41.029 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - TopN rows.size=3
09:15:41.029 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in TopNDruidQuery json response : JObject(List((Impressions,JInt(15))))
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$12(DruidQueryExecutor.scala:243)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$12$adapted(DruidQueryExecutor.scala:229)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$11(DruidQueryExecutor.scala:229)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$11$adapted(DruidQueryExecutor.scala:227)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:227)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
- TopN query with invalid response
09:15:41.047 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:15:41.047 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:15:41.047 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:15:41.047 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:15:41.047 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:15:41.052 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":120,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"0a04fc4a-f6f8-446b-bf71-d25fec16f413"},"descending":false}
09:15:41.052 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:41.055 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:41.059 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51424 accepted at Tue Nov 10 09:15:41 PST 2020.
09:15:41.063 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response Not found
09:15:41.064 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.IllegalArgumentException: requirement failed: received status code from druid is 404 instead of 200 : Not found
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:161)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$28(DruidQueryExecutorTest.scala:751)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$28$adapted(DruidQueryExecutorTest.scala:749)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.withDruidQueryExecutor(DruidQueryExecutorTest.scala:429)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$27(DruidQueryExecutorTest.scala:749)
- Test Response code other than 200
09:15:41.098 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-advertiser filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:15:41.098 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:15:41.099 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:15:41.306 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"},{"type":"extraction","dimension":"advertiser_id","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"advertiser_lookup","retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true,"valueColumn":"status","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"longSum","name":"Conversions","fieldName":"conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"dcb94052-d407-4a15-8ce9-0985ad028199"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"granularity":"DAY","dimensions":[{"type":"default","dimension":"Pricing Type","outputName":"Pricing Type","outputType":"STRING"},{"type":"default","dimension":"Day","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"Keyword ID","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"},{"type":"extraction","dimension":"Advertiser Status","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"ON":"ON"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"Impressions"},{"type":"longSum","name":"Conversions","fieldName":"Conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"Max Bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"Min Bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"dcb94052-d407-4a15-8ce9-0985ad028199"},"descending":false}
09:15:41.306 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:41.308 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:41.318 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51425 accepted at Tue Nov 10 09:15:41 PST 2020.
09:15:41.321 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
      "Pricing Type" : 11,
      "Keyword ID": "10",
      "Average Bid": 9,
     "Max Bid": 163,
     "Impressions":175,
     "Conversions":15.0,
     "Min Bid":184,
     "Keyword Value": 419,
     "Average Position":205,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "0",
     "Impression Share": 0.4567
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
    "Pricing Type" : 13,
     "Keyword ID": "14",
     "Average Bid": 15,
     "Max Bid": 16,
     "Impressions":17,
     "Conversions":2.3,
     "Min Bid":18,
     "Keyword Value": 19,
     "Average Position":20,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "1",
     "Impression Share": 0.0123
    }
  }
  ]
09:15:41.321 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:41.324 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:15:41.338 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(419)
09:15:41.341 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(19)
09:15:41.342 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
- success case for groupby query execution
09:15:41.352 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-advertiser filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:15:41.352 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:15:41.352 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:15:41.362 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"},{"type":"extraction","dimension":"advertiser_id","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"advertiser_lookup","retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true,"valueColumn":"status","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"longSum","name":"Conversions","fieldName":"conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"05424b41-1b25-475a-bab8-ac2a72351a90"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"granularity":"DAY","dimensions":[{"type":"default","dimension":"Pricing Type","outputName":"Pricing Type","outputType":"STRING"},{"type":"default","dimension":"Day","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"Keyword ID","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"},{"type":"extraction","dimension":"Advertiser Status","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"ON":"ON"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"Impressions"},{"type":"longSum","name":"Conversions","fieldName":"Conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"Max Bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"Min Bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"05424b41-1b25-475a-bab8-ac2a72351a90"},"descending":false}
09:15:41.362 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:41.363 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:41.367 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51426 accepted at Tue Nov 10 09:15:41 PST 2020.
09:15:41.372 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "unsupported" : "field",
    "event" : {
      "Pricing Type" : 11,
      "Keyword ID": "10",
      "Average Bid": 9,
     "Max Bid": 163,
     "Impressions":175,
     "Conversions":15.0,
     "Min Bid":184,
     "Keyword Value": 419,
     "Average Position":205,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "0",
     "Impression Share": 0.4567
    }
  }
  ]
09:15:41.373 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:41.373 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=1
09:15:41.373 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - unhandled field : (unsupported,JString(field))
09:15:41.374 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in GroupByDruidQuery json response : (unsupported,JString(field))
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$18(DruidQueryExecutor.scala:286)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$18$adapted(DruidQueryExecutor.scala:274)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$17(DruidQueryExecutor.scala:274)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$17$adapted(DruidQueryExecutor.scala:271)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:271)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
09:15:41.412 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"},{"type":"extraction","dimension":"advertiser_id","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"advertiser_lookup","retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true,"valueColumn":"status","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"longSum","name":"Conversions","fieldName":"conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"05424b41-1b25-475a-bab8-ac2a72351a90"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"granularity":"DAY","dimensions":[{"type":"default","dimension":"Pricing Type","outputName":"Pricing Type","outputType":"STRING"},{"type":"default","dimension":"Day","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"Keyword ID","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"},{"type":"extraction","dimension":"Advertiser Status","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"ON":"ON"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"Impressions"},{"type":"longSum","name":"Conversions","fieldName":"Conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"Max Bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"Min Bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"05424b41-1b25-475a-bab8-ac2a72351a90"},"descending":false}
09:15:41.412 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:41.414 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:41.420 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51427 accepted at Tue Nov 10 09:15:41 PST 2020.
09:15:41.424 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : "unsupported"
  }
  ]
09:15:41.424 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:41.424 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=1
09:15:41.425 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in GroupByDruidQuery json response : JString(unsupported)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$18(DruidQueryExecutor.scala:280)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$18$adapted(DruidQueryExecutor.scala:274)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$17(DruidQueryExecutor.scala:274)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$17$adapted(DruidQueryExecutor.scala:271)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:271)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
09:15:41.444 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"},{"type":"extraction","dimension":"advertiser_id","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"advertiser_lookup","retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true,"valueColumn":"status","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"longSum","name":"Conversions","fieldName":"conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"05424b41-1b25-475a-bab8-ac2a72351a90"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"granularity":"DAY","dimensions":[{"type":"default","dimension":"Pricing Type","outputName":"Pricing Type","outputType":"STRING"},{"type":"default","dimension":"Day","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"Keyword ID","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"},{"type":"extraction","dimension":"Advertiser Status","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"ON":"ON"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"Impressions"},{"type":"longSum","name":"Conversions","fieldName":"Conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"Max Bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"Min Bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"05424b41-1b25-475a-bab8-ac2a72351a90"},"descending":false}
09:15:41.444 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:41.448 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:41.452 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51428 accepted at Tue Nov 10 09:15:41 PST 2020.
09:15:41.456 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response ["unsupported"]
09:15:41.456 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:41.456 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=1
09:15:41.457 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in GroupByDruidQuery json response : JString(unsupported)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$17(DruidQueryExecutor.scala:288)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$17$adapted(DruidQueryExecutor.scala:271)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:271)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$37(DruidQueryExecutorTest.scala:875)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$37$adapted(DruidQueryExecutorTest.scala:873)
09:15:41.472 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"},{"type":"extraction","dimension":"advertiser_id","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"advertiser_lookup","retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true,"valueColumn":"status","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"longSum","name":"Conversions","fieldName":"conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"05424b41-1b25-475a-bab8-ac2a72351a90"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"granularity":"DAY","dimensions":[{"type":"default","dimension":"Pricing Type","outputName":"Pricing Type","outputType":"STRING"},{"type":"default","dimension":"Day","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"Keyword ID","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"},{"type":"extraction","dimension":"Advertiser Status","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"ON":"ON"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"Impressions"},{"type":"longSum","name":"Conversions","fieldName":"Conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"Max Bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"Min Bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"05424b41-1b25-475a-bab8-ac2a72351a90"},"descending":false}
09:15:41.472 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:41.472 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:41.481 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51429 accepted at Tue Nov 10 09:15:41 PST 2020.
09:15:41.484 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response {}
09:15:41.484 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:41.485 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in GroupByDruidQuery json response : JObject(List())
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:290)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$37(DruidQueryExecutorTest.scala:875)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$37$adapted(DruidQueryExecutorTest.scala:873)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.withDruidQueryExecutor(DruidQueryExecutorTest.scala:429)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$36(DruidQueryExecutorTest.scala:873)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$36$adapted(DruidQueryExecutorTest.scala:871)
- fail to execute groupby query type with unhandled json
09:15:41.508 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-advertiser filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:15:41.508 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:15:41.509 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:15:41.520 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"},{"type":"extraction","dimension":"advertiser_id","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"advertiser_lookup","retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true,"valueColumn":"status","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"longSum","name":"Conversions","fieldName":"conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"e256a2a4-43f7-4ee0-9231-35e24d1a245e"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"granularity":"DAY","dimensions":[{"type":"default","dimension":"Pricing Type","outputName":"Pricing Type","outputType":"STRING"},{"type":"default","dimension":"Day","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"Keyword ID","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"},{"type":"extraction","dimension":"Advertiser Status","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"ON":"ON"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"Impressions"},{"type":"longSum","name":"Conversions","fieldName":"Conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"Max Bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"Min Bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"e256a2a4-43f7-4ee0-9231-35e24d1a245e"},"descending":false}
09:15:41.520 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:41.521 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:41.525 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51430 accepted at Tue Nov 10 09:15:41 PST 2020.
09:15:41.529 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
      "Pricing Type" : 11,
      "Keyword ID": "10",
      "Average Bid": 9,
     "Max Bid": 163,
     "Impressions":175,
     "Conversions":15.0,
     "Min Bid":184,
     "Keyword Value": 419,
     "Average Position":205,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "0",
     "Impression Share": 0.4567
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
    "Pricing Type" : 13,
     "Keyword ID": "14",
     "Average Bid": 15,
     "Max Bid": 16,
     "Impressions":17,
     "Conversions":2.3,
     "Min Bid":18,
     "Keyword Value": 19,
     "Average Position":20,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "1",
     "Impression Share": 0.0123
    }
  }
  ]
09:15:41.529 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:41.531 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:15:41.532 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(419)
09:15:41.533 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(19)
09:15:41.534 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:15:41.535 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.IllegalArgumentException: requirement failed: Non paginated query fails rowsCount < maxRows, partial result possible : rowsCount=2 maxRows=2
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:362)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$39(DruidQueryExecutorTest.scala:927)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$39$adapted(DruidQueryExecutorTest.scala:925)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.withDruidQueryExecutor(DruidQueryExecutorTest.scala:429)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$38(DruidQueryExecutorTest.scala:925)
- failure case for query execution when non paginated query returns max rows
09:15:41.551 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-advertiser filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:15:41.551 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:15:41.551 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:15:41.551 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:15:41.551 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
ESAPI: WARNING: System property [org.owasp.esapi.opsteam] is not set
ESAPI: WARNING: System property [org.owasp.esapi.devteam] is not set
ESAPI: Attempting to load ESAPI.properties via file I/O.
ESAPI: Attempting to load ESAPI.properties as resource file via file I/O.
ESAPI: Not found in 'org.owasp.esapi.resources' directory or file not readable: /Users/lgadde/git/Native-Ads/maha/druid/ESAPI.properties
ESAPI: Not found in SystemResource Directory/resourceDirectory: .esapi/ESAPI.properties
ESAPI: Not found in 'user.home' (/Users/lgadde) directory: /Users/lgadde/esapi/ESAPI.properties
ESAPI: Loading ESAPI.properties via file I/O failed. Exception was: java.io.FileNotFoundException
ESAPI: Attempting to load ESAPI.properties via the classpath.
ESAPI: SUCCESSFULLY LOADED ESAPI.properties via the CLASSPATH from '/ (root)' using current thread context class loader!
ESAPI: SecurityConfiguration for Validator.ConfigurationFile.MultiValued not found in ESAPI.properties. Using default: false
ESAPI: Attempting to load validation.properties via file I/O.
ESAPI: Attempting to load validation.properties as resource file via file I/O.
ESAPI: Not found in 'org.owasp.esapi.resources' directory or file not readable: /Users/lgadde/git/Native-Ads/maha/druid/validation.properties
ESAPI: Not found in SystemResource Directory/resourceDirectory: .esapi/validation.properties
ESAPI: Not found in 'user.home' (/Users/lgadde) directory: /Users/lgadde/esapi/validation.properties
ESAPI: Loading validation.properties via file I/O failed.
ESAPI: Attempting to load validation.properties via the classpath.
ESAPI: SUCCESSFULLY LOADED validation.properties via the CLASSPATH from '/ (root)' using current thread context class loader!
09:15:41.663 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"extraction","dimension":"advertiser_id","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"advertiser_lookup","retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true,"valueColumn":"status","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"f8628ca9-cbb7-4923-8d94-4ff5f5281324"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"granularity":"DAY","dimensions":[{"type":"default","dimension":"Keyword ID","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"Day","outputName":"Day","outputType":"STRING"},{"type":"extraction","dimension":"Advertiser Status","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"ON":"ON"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"Impressions"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"f8628ca9-cbb7-4923-8d94-4ff5f5281324"},"descending":false}
09:15:41.663 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:41.664 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:41.670 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51431 accepted at Tue Nov 10 09:15:41 PST 2020.
09:15:41.673 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
      "Pricing Type" : 11,
      "Keyword ID": "10",
      "Average Bid": 9,
     "Max Bid": 163,
     "Impressions":175,
     "Conversions":15.0,
     "Min Bid":184,
     "Keyword Value": 419,
     "Average Position":205,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "0",
     "Impression Share": 0.4567
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
    "Pricing Type" : 13,
     "Keyword ID": "14",
     "Average Bid": 15,
     "Max Bid": 16,
     "Impressions":17,
     "Conversions":2.3,
     "Min Bid":18,
     "Keyword Value": 19,
     "Average Position":20,
     "Day":"20120101",
     "Advertiser Status": "MAHA_LOOKUP_EMPTY",
     "show_sov_flag": "1",
     "Impression Share": 0.0123
    }
  }
  ]
09:15:41.673 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:41.674 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:15:41.675 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Pricing Type : JInt(11)
09:15:41.675 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Max Bid : JInt(163)
09:15:41.675 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Conversions : JDouble(15.0)
09:15:41.675 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Min Bid : JInt(184)
09:15:41.675 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(419)
09:15:41.676 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Average Position : JInt(205)
09:15:41.676 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Impression Share : JDouble(0.4567)
09:15:41.676 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Pricing Type : JInt(13)
09:15:41.676 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Max Bid : JInt(16)
09:15:41.676 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Conversions : JDouble(2.3)
09:15:41.676 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Min Bid : JInt(18)
09:15:41.676 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(19)
09:15:41.676 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Average Position : JInt(20)
09:15:41.677 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.IllegalStateException: MAHA_LOOKUP_EMPTY
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseHelper$1(DruidQueryExecutor.scala:84)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseHelper$1$adapted(DruidQueryExecutor.scala:80)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseHelper(DruidQueryExecutor.scala:80)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$processResult$4(DruidQueryExecutor.scala:128)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$processResult$4$adapted(DruidQueryExecutor.scala:122)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.processResult(DruidQueryExecutor.scala:122)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$18(DruidQueryExecutor.scala:279)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$18$adapted(DruidQueryExecutor.scala:274)
09:15:41.679 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.q.QueryPipelineWithFallback - Primary query chain failed, recovering with fall back
java.lang.RuntimeException: query execution failed : MAHA_LOOKUP_EMPTY
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:20)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.$anonfun$execute$1(QueryPipeline.scala:127)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.execute(QueryPipeline.scala:126)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$41(DruidQueryExecutorTest.scala:1014)
Caused by: java.lang.IllegalStateException: MAHA_LOOKUP_EMPTY
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseHelper$1(DruidQueryExecutor.scala:84)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseHelper$1$adapted(DruidQueryExecutor.scala:80)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseHelper(DruidQueryExecutor.scala:80)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$processResult$4(DruidQueryExecutor.scala:128)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$processResult$4$adapted(DruidQueryExecutor.scala:122)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.processResult(DruidQueryExecutor.scala:122)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$18(DruidQueryExecutor.scala:279)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$18$adapted(DruidQueryExecutor.scala:274)
- test fallback to oracle when druid fails with empty lookup value
09:15:41.698 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5430,false,false))) : None
09:15:41.698 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:15:41.698 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:15:41.708 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5430"}]},"granularity":"DAY","dimensions":[{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"},{"type":"extraction","dimension":"device_id","outputName":"Device Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"1":"'Desktop'"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"'SmartPhone'","injective":false,"optimize":true}},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"}],"aggregations":[{"type":"doubleSum","name":"Spend","fieldName":"spend"},{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"doubleSum","name":"weighted_bid_modifier","fieldName":"weighted_bid_modifier"},{"type":"longSum","name":"bid_mod_impressions","fieldName":"bid_mod_impressions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"}],"postAggregations":[{"type":"arithmetic","name":"Bid Modifier","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_modifier","fieldName":"weighted_bid_modifier"},{"type":"fieldAccess","name":"bid_mod_impressions","fieldName":"bid_mod_impressions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Modified Bid","fn":"*","fields":[{"type":"fieldAccess","name":"Bid Modifier","fieldName":"Bid Modifier"},{"type":"fieldAccess","name":"Average Bid","fieldName":"Average Bid"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"9701ee8c-f189-4d76-b808-1030cda09fd9"},"descending":false}
09:15:41.708 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:41.709 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:41.716 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51432 accepted at Tue Nov 10 09:15:41 PST 2020.
09:15:41.720 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
    {
        "version": "v1",
        "timestamp": "2017-08-07T00:00:00.000Z",
        "event": {
            "weighted_bid_usd": 878831.4919335842,
            "Impressions": 2884485,
            "Bid Mod": 8.999999637413556,
            "weighted_bid_modifier": 74464998,
            "Device Type": "'Desktop'",
            "Modified Bid": 2.742078086296123,
            "Advertiser ID": "5430",
            "bid_mod_impressions": 8273889,
            "Average Bid": 0.3046753551963641,
            "Spend": 5793.1630783081055,
            "Bid Modifier": 8.999999637413556,
            "Day": "20170807"
        }
    },
    {
        "version": "v1",
        "timestamp": "2017-08-07T00:00:00.000Z",
        "event": {
            "weighted_bid_usd": 811215.2593688965,
            "Impressions": 2701909,
            "Bid Mod": 8.997264297550355,
            "weighted_bid_modifier": 71617594,
            "Device Type": "'Desktop'",
            "Modified Bid": 2.7013189899244656,
            "Advertiser ID": "5430",
            "bid_mod_impressions": 7959930,
            "Average Bid": 0.30023781680615313,
            "Spend": 5237.020672619343,
            "Bid Modifier": 8.997264297550355,
            "Day": "20170808"
        }
    },
    {
        "version": "v1",
        "timestamp": "2017-08-07T00:00:00.000Z",
        "event": {
            "weighted_bid_usd": 681.9299856424332,
            "Impressions": 2250,
            "Bid Mod": 0,
            "weighted_bid_modifier": 0,
            "Device Type": "'SmartPhone'",
            "Modified Bid": 0,
            "Advertiser ID": "5430",
            "bid_mod_impressions": 0,
            "Average Bid": 0.3030799936188592,
            "Spend": 1.4580000340938568,
            "Bid Modifier": 0,
            "Day": "20170807"
        }
    },
    {
        "version": "v1",
        "timestamp": "2017-08-07T00:00:00.000Z",
        "event": {
            "weighted_bid_usd": 643.7700130343437,
            "Impressions": 2138,
            "Bid Mod": 0.19999999689559142,
            "weighted_bid_modifier": 23.99999962747097,
            "Device Type": "'SmartPhone'",
            "Modified Bid": 0.06022170281026361,
            "Advertiser ID": "5430",
            "bid_mod_impressions": 120,
            "Average Bid": 0.3011085187251374,
            "Spend": 1.080000039190054,
            "Bid Modifier": 0.19999999689559142,
            "Day": "20170808"
        }
    }
]

09:15:41.720 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:41.722 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=4
09:15:41.723 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : weighted_bid_usd : JDouble(878831.4919335842)
09:15:41.723 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : weighted_bid_modifier : JInt(74464998)
09:15:41.724 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : bid_mod_impressions : JInt(8273889)
09:15:41.725 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : weighted_bid_usd : JDouble(811215.2593688965)
09:15:41.725 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : weighted_bid_modifier : JInt(71617594)
09:15:41.726 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : bid_mod_impressions : JInt(7959930)
09:15:41.726 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
- success case for Bid Modifier and Modified Bid post results
09:15:41.737 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:15:41.737 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:15:41.737 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:15:41.751 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"extraction","dimension":"stats_date","outputName":"Week","outputType":"STRING","extractionFn":{"type":"time","timeFormat":"YYYYMMdd","resultFormat":"YYYY-w","joda":false}},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"longSum","name":"Conversions","fieldName":"conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"d0ed0bd2-76b3-48fc-bac0-5931e51b3179"},"descending":false}
09:15:41.751 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:41.752 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:41.757 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51433 accepted at Tue Nov 10 09:15:41 PST 2020.
09:15:41.760 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
      "Pricing Type" : 11,
      "Keyword ID": "10",
      "Average Bid": 9,
     "Max Bid": 163,
     "Impressions":175,
     "Conversions":15.0,
     "Min Bid":184,
     "Average Position":205,
     "Week":"2017-26",
     "show_sov_flag": "0",
     "Impression Share": 0.4567
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
    "Pricing Type" : 13,
     "Keyword ID": "14",
     "Average Bid": 15,
     "Max Bid": 16,
     "Impressions":17,
     "Conversions":2.3,
     "Min Bid":18,
     "Average Position":20,
     "Week":"2017-28",
     "show_sov_flag": "1",
     "Impression Share": 0.0123
    }
  }
  ]
09:15:41.760 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:41.762 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:15:41.766 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
- success case for groupby query execution with Start of the week field
09:15:41.775 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:15:41.775 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:15:41.775 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:15:41.781 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"extraction","dimension":"stats_date","outputName":"Month","outputType":"STRING","extractionFn":{"type":"time","timeFormat":"YYYYMMdd","resultFormat":"yyyy-MM-01","joda":false}},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"longSum","name":"Conversions","fieldName":"conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"6d9ae8c3-f4eb-4924-9cbe-e9e905a9735b"},"descending":false}
09:15:41.781 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:41.781 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:41.786 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51434 accepted at Tue Nov 10 09:15:41 PST 2020.
09:15:41.790 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
      "Pricing Type" : 11,
      "Keyword ID": "10",
      "Average Bid": 9,
     "Max Bid": 163,
     "Impressions":175,
     "Conversions":15.0,
     "Min Bid":184,
     "Average Position":205,
     "Month":"2017-06-01",
     "show_sov_flag": "0",
     "Impression Share": 0.4567
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
    "Pricing Type" : 13,
     "Keyword ID": "14",
     "Average Bid": 15,
     "Max Bid": 16,
     "Impressions":17,
     "Conversions":2.3,
     "Min Bid":18,
     "Average Position":20,
     "Month":"2017-07-01",
     "show_sov_flag": "1",
     "Impression Share": 0.0123
    }
  }
  ]
09:15:41.790 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:41.790 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:15:41.793 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
- success case for groupby query execution with Start of the month field
09:15:41.802 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:15:41.802 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:15:41.802 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:15:41.808 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":1},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"8a211bce-73b5-4b4d-ac96-d7f9f80459af"},"descending":false}
09:15:41.808 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:41.808 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:41.813 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51435 accepted at Tue Nov 10 09:15:41 PST 2020.
09:15:41.817 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
      "Pricing Type" : 11,
      "Keyword ID": "10",
      "Average Bid": 9,
     "Max Bid": 163,
     "Impressions":175,
     "Conversions":15.0,
     "Min Bid":184,
     "Keyword Value": 419,
     "Average Position":205,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "0",
     "Impression Share": 0.4567
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
    "Pricing Type" : 13,
     "Keyword ID": "14",
     "Average Bid": 15,
     "Max Bid": 16,
     "Impressions":17,
     "Conversions":2.3,
     "Min Bid":18,
     "Keyword Value": 19,
     "Average Position":20,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "1",
     "Impression Share": 0.0123
    }
  }
  ]
09:15:41.817 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:41.818 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:15:41.819 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Conversions : JDouble(15.0)
09:15:41.819 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(419)
09:15:41.820 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Advertiser Status : JString(ON)
09:15:41.820 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Impression Share : JDouble(0.4567)
09:15:41.821 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Conversions : JDouble(2.3)
09:15:41.821 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(19)
09:15:41.822 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Advertiser Status : JString(ON)
09:15:41.822 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Impression Share : JDouble(0.0123)
09:15:41.822 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
- success case for groupby query execution with startIndex < 0
09:15:41.832 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-woeid filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:15:41.832 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:15:41.832 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:15:41.839 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},{"type":"extraction","dimension":"country_woeid","outputName":"Country Name","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"woeid_lookup","retainMissingValue":false,"replaceMissingValueWith":"MAHA_LOOKUP_EMPTY","injective":false,"optimize":true,"valueColumn":"value","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":3},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"d7a4c600-f0cf-4941-85f0-131152f3eda6"},"descending":false}
09:15:41.839 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:41.842 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:41.847 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51436 accepted at Tue Nov 10 09:15:41 PST 2020.
09:15:41.851 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
     "Country WOEID" : 1,
     "Country Name" : "US",
     "Pricing Type" : 11,
     "Keyword ID": 1,
     "Average Bid": 9,
     "Max Bid": 163,
     "Impressions":175,
     "Min Bid":184,
     "Keyword Value": 419,
     "Average Position":205,
     "Day":"20160101"
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
     "Country WOEID" : 1,
     "Country Name" : "US",
     "Pricing Type" : 13,
     "Keyword ID": 2,
     "Average Bid": 15,
     "Max Bid": 16,
     "Impressions":17,
     "Min Bid":18,
     "Keyword Value": 19,
     "Average Position":20,
     "Day":"20160101"
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
     "Country WOEID" : 1,
     "Country Name" : "US",
     "Pricing Type" : 13,
     "Keyword ID": 3,
     "Average Bid": 10,
     "Max Bid": 160123456,
     "Impressions":127,
     "Min Bid":18,
     "Keyword Value": 19,
     "Average Position":20.12345,
     "Day":"20160101"
    }
  }
  ]
09:15:41.851 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=1
09:15:41.852 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=3
09:15:41.852 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Country WOEID : JInt(1)
09:15:41.853 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(19)
09:15:41.853 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Country WOEID : JInt(1)
09:15:41.854 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(19)
09:15:41.854 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
- success case for groupby query execution with startIndex = 1
09:15:41.865 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:15:41.865 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:15:41.865 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:15:41.871 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"e2a40a35-910b-4f8a-b068-ad8b405a1fa7"},"descending":false}
09:15:41.871 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:41.872 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:41.877 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51437 accepted at Tue Nov 10 09:15:41 PST 2020.
09:15:41.880 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [{
	"timestamp": "2013-08-31T00:00:00.000Z",
	"result": [{
		"Keyword ID": 14,
		"Impressions": 10669
	},{
		"Keyword ID": 13,
		"Impressions": 106
	}]
}]
09:15:41.880 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:41.882 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=1
09:15:41.882 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - unhandled field : (result,JArray(List(JObject(List((Keyword ID,JInt(14)), (Impressions,JInt(10669)))), JObject(List((Keyword ID,JInt(13)), (Impressions,JInt(106)))))))
09:15:41.882 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in GroupByDruidQuery json response : (result,JArray(List(JObject(List((Keyword ID,JInt(14)), (Impressions,JInt(10669)))), JObject(List((Keyword ID,JInt(13)), (Impressions,JInt(106)))))))
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$18(DruidQueryExecutor.scala:286)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$18$adapted(DruidQueryExecutor.scala:274)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$17(DruidQueryExecutor.scala:274)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$17$adapted(DruidQueryExecutor.scala:271)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:271)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
- groupby query execution with invalid url
09:15:41.896 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:15:41.896 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:15:41.896 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:15:41.896 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:15:41.896 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:15:41.905 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"timeseries","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"descending":false,"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":"DAY","aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limit":2147483647,"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"46dad1d5-6bdb-448f-9a2f-4e6627f154ad"}}
09:15:41.905 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:41.906 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:41.912 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51438 accepted at Tue Nov 10 09:15:41 PST 2020.
09:15:41.917 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp": "2012-01-01T00:00:00.000Z",
    "result": { "Impressions": 15 }
  },
  {
   "timestamp": "2012-01-02T00:00:00.000Z",
   "result": { "Impressions": 16 }
  },
  {
    "timestamp": "2012-01-03T00:00:00.000Z",
    "result": { "Impressions": 17 }
  }
]
09:15:41.917 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=20
09:15:41.917 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Timeseries rows.size=3
09:15:41.921 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=3
09:15:41.921 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - rowList.size=3, rowList.updatedSet=1
- success case for Partial TimeSeries query
09:15:41.929 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-keyword filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:15:41.929 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:15:41.930 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:15:41.946 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"33e19292-6b58-447e-8b69-58cb500992b2"},"descending":false}
09:15:41.946 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:41.946 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:41.952 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51439 accepted at Tue Nov 10 09:15:41 PST 2020.
09:15:41.955 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
      "Pricing Type" : 11,
      "Keyword ID": "10",
      "Average Bid": 9,
     "Max Bid": 163,
     "Impressions":175,
     "Conversions":15.0,
     "Min Bid":184,
     "Keyword Value": 419,
     "Average Position":205,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "0",
     "Impression Share": 0.4567
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
    "Pricing Type" : 13,
     "Keyword ID": "14",
     "Average Bid": 15,
     "Max Bid": 16,
     "Impressions":17,
     "Conversions":2.3,
     "Min Bid":18,
     "Keyword Value": 19,
     "Average Position":20,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "1",
     "Impression Share": 0.0123
    }
  }
  ]
09:15:41.955 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:41.957 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:15:41.958 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Conversions : JDouble(15.0)
09:15:41.958 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(419)
09:15:41.959 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Advertiser Status : JString(ON)
09:15:41.959 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Impression Share : JDouble(0.4567)
09:15:41.961 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Conversions : JDouble(2.3)
09:15:41.961 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(19)
09:15:41.962 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Advertiser Status : JString(ON)
09:15:41.962 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Impression Share : JDouble(0.0123)
09:15:41.962 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:15:41.962 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - rowList.size=2, rowList.updatedSet=0
- success case for partial groupby query execution with no non fk dim filters
09:15:42.006 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-keyword filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false)), Keyword Status -> TreeSet(EqualityFilter(Keyword Status,ON,false,false))) : None
09:15:42.007 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:15:42.007 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:15:42.019 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":4},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"008a2feb-872a-45d7-b9a3-464e1b215a92"},"descending":false}
09:15:42.019 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.020 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.026 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51440 accepted at Tue Nov 10 09:15:42 PST 2020.
09:15:42.029 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
      "Pricing Type" : 11,
      "Keyword ID": "10",
      "Average Bid": 9,
     "Max Bid": 163,
     "Impressions":175,
     "Conversions":15.0,
     "Min Bid":184,
     "Keyword Value": 419,
     "Average Position":205,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "0",
     "Impression Share": 0.4567
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
    "Pricing Type" : 13,
     "Keyword ID": "14",
     "Average Bid": 15,
     "Max Bid": 16,
     "Impressions":17,
     "Conversions":2.3,
     "Min Bid":18,
     "Keyword Value": 19,
     "Average Position":20,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "1",
     "Impression Share": 0.0123
    }
  }
  ]
09:15:42.029 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:42.031 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:15:42.032 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Conversions : JDouble(15.0)
09:15:42.032 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(419)
09:15:42.033 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Advertiser Status : JString(ON)
09:15:42.033 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Impression Share : JDouble(0.4567)
09:15:42.034 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Conversions : JDouble(2.3)
09:15:42.034 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(19)
09:15:42.034 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Advertiser Status : JString(ON)
09:15:42.036 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Impression Share : JDouble(0.0123)
09:15:42.037 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:15:42.037 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - rowList.size=2, rowList.updatedSet=0
- success case for partial groupby query execution with non fk dim filters
09:15:42.056 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-keyword filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:15:42.056 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:15:42.056 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:15:42.064 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"eed2ffcc-a35d-4cd3-9154-b9d8777f3beb"},"descending":false}
09:15:42.064 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.064 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.071 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51441 accepted at Tue Nov 10 09:15:42 PST 2020.
09:15:42.074 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
      "Pricing Type" : 11,
      "Keyword ID": "10",
      "Average Bid": 9,
     "Max Bid": 163,
     "Impressions":175,
     "Conversions":15.0,
     "Min Bid":184,
     "Keyword Value": 419,
     "Average Position":205,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "0",
     "Impression Share": 0.4567
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
    "Pricing Type" : 13,
     "Keyword ID": "14",
     "Average Bid": 15,
     "Max Bid": 16,
     "Impressions":17,
     "Conversions":2.3,
     "Min Bid":18,
     "Keyword Value": 19,
     "Average Position":20,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "1",
     "Impression Share": 0.0123
    }
  }
  ]
09:15:42.076 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:42.076 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:15:42.077 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Conversions : JDouble(15.0)
09:15:42.077 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(419)
09:15:42.078 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Advertiser Status : JString(ON)
09:15:42.078 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Conversions : JDouble(2.3)
09:15:42.079 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(19)
09:15:42.079 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Advertiser Status : JString(ON)
09:15:42.079 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:15:42.079 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - rowList.size=2, rowList.updatedSet=0
- success case for groupby fact driven query execution
09:15:42.092 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:15:42.092 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:15:42.092 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:15:42.092 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:15:42.092 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:15:42.097 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":2,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"c496ae38-d0e3-4c2d-a62d-578f49b8ee1f"},"descending":false}
09:15:42.097 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.098 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.103 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51442 accepted at Tue Nov 10 09:15:42 PST 2020.
09:15:42.107 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [{
	"timestamp": "2013-08-31T00:00:00.000Z",
	"result": [{
		"Keyword ID": 14,
		"Impressions": 10669
	},{
		"Keyword ID": 13,
		"Impressions": 106
	}]
}]
09:15:42.107 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:42.107 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - TopN rows.size=1
09:15:42.109 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - results size=2
09:15:42.109 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:15:42.109 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - rowList.size=2, rowList.updatedSet=2
- success case for TopN query with partial result set
09:15:42.117 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:15:42.117 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:15:42.117 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:15:42.117 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:15:42.117 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:15:42.122 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":2,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"73896334-7b87-4822-a620-bdf750d25693"},"descending":false}
09:15:42.123 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.123 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.129 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51443 accepted at Tue Nov 10 09:15:42 PST 2020.
09:15:42.132 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [{
	"timestamp": "2013-08-31T00:00:00.000Z",
	"result": [{
		"Keyword ID": null,
		"Impressions": 10669
	},{
		"Keyword ID": null,
		"Impressions": 106
	}]
}]
09:15:42.132 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:42.134 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - TopN rows.size=1
09:15:42.134 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - results size=2
09:15:42.135 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Druid has null value : [{
	"timestamp": "2013-08-31T00:00:00.000Z",
	"result": [{
		"Keyword ID": null,
		"Impressions": 10669
	},{
		"Keyword ID": null,
		"Impressions": 106
	}]
}]
09:15:42.135 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.q.DimDrivenIndexedRowList - Index alias (Keyword ID) value is null on addRow, dropping row : Row(Map(Keyword ID -> 0, Impressions -> 1),ArrayBuffer(null, 10669))
09:15:42.136 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Druid has null value : [{
	"timestamp": "2013-08-31T00:00:00.000Z",
	"result": [{
		"Keyword ID": null,
		"Impressions": 10669
	},{
		"Keyword ID": null,
		"Impressions": 106
	}]
}]
09:15:42.136 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.q.DimDrivenIndexedRowList - Index alias (Keyword ID) value is null on addRow, dropping row : Row(Map(Keyword ID -> 0, Impressions -> 1),ArrayBuffer(null, 106))
09:15:42.136 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:15:42.136 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - rowList.size=2, rowList.updatedSet=0
- Handle null values from druid gracefully
09:15:42.142 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-keyword filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:15:42.142 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:15:42.142 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:15:42.142 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:15:42.142 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:15:42.147 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":100,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"4063f6ac-8ff6-4235-acf1-1bb06789a54e"},"descending":false}
09:15:42.147 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.148 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.153 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51444 accepted at Tue Nov 10 09:15:42 PST 2020.
09:15:42.156 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [{
	"timestamp": "2013-08-31T00:00:00.000Z",
	"result": [{
		"Keyword ID": 14,
		"Impressions": 10669
	},{
		"Keyword ID": 13,
		"Impressions": 106
	}]
}]
09:15:42.156 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:42.158 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - TopN rows.size=1
09:15:42.158 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - results size=2
09:15:42.159 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:15:42.159 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - rowList.size=2, rowList.updatedSet=0
- success case for TopN query with partial result set: MultiEngine
09:15:42.169 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-keyword filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:15:42.170 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:15:42.170 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:15:42.170 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:15:42.170 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:15:42.177 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}},{"dimension":"Keyword ID","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":100},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"adc33c72-eb7e-4d1f-bef7-c392d8c0aeab"},"descending":false}
09:15:42.177 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.177 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.188 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51445 accepted at Tue Nov 10 09:15:42 PST 2020.
09:15:42.191 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2013-08-31T00:00:00.000Z",
    "event" : {
      "Keyword ID": 14,
     "Impressions":10669
    }
  },
  {
    "timestamp" : "2013-08-31T00:00:00.000Z",
    "event" : {
     "Keyword ID": 13,
     "Impressions":106
    }
  }
  ]
09:15:42.191 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:42.191 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:15:42.193 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:15:42.193 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - rowList.size=2, rowList.updatedSet=0
- success case for TopN query with partial result set: MultiEngine with 2 sorts
09:15:42.201 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:15:42.201 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:15:42.201 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:15:42.202 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:15:42.202 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:15:42.206 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":2,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"deb8eea2-cba5-48d6-8921-d40a530716d2"},"descending":false}
09:15:42.206 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.206 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.211 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51446 accepted at Tue Nov 10 09:15:42 PST 2020.
09:15:42.214 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [{
	"timestamp": "2013-08-31T00:00:00.000Z",
	"result": [{
		"Keyword ID": null,
    "Keyword Value":1,
		"Impressions": 10669
	},{
		"Keyword ID": [{
	"timestamp": "2013-08-31T00:00:00.000Z",
	"result": [{
		"Keyword ID": 14,
    "Keyword Value":1,
		"Impressions": 10669
	},{
		"Keyword ID": 13,
		"Impressions": 106,
    "Keyword Value":30
	}]
}],
		"Impressions": 106,
    "Keyword Value":30
	}]
}]
09:15:42.214 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:42.214 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - TopN rows.size=1
09:15:42.216 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - results size=2
09:15:42.216 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(1)
09:15:42.217 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: unsupported field type
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.extractField(DruidQueryExecutor.scala:377)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseHelper$1(DruidQueryExecutor.scala:82)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseHelper$1$adapted(DruidQueryExecutor.scala:80)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseHelper(DruidQueryExecutor.scala:80)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$processResult$4(DruidQueryExecutor.scala:128)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$processResult$4$adapted(DruidQueryExecutor.scala:122)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.processResult(DruidQueryExecutor.scala:122)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$14(DruidQueryExecutor.scala:240)
- Invalid field extraction failure
09:15:42.233 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:15:42.233 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:15:42.234 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:15:42.234 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:15:42.234 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:15:42.238 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":120,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"86693241-526d-4409-a662-0fe0b1759443"},"descending":false}
09:15:42.238 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.239 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.244 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51447 accepted at Tue Nov 10 09:15:42 PST 2020.
09:15:42.249 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response Not found
09:15:42.250 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.IllegalArgumentException: requirement failed: received status code from druid is 404 instead of 200 : Not found
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:161)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$3(DruidQueryExecutor.scala:473)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:443)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$128(DruidQueryExecutorTest.scala:2082)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$128$adapted(DruidQueryExecutorTest.scala:2072)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.withDruidQueryExecutor(DruidQueryExecutorTest.scala:429)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$127(DruidQueryExecutorTest.scala:2072)
- TopN query with partial result set and request code not 200
09:15:42.273 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:15:42.273 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:15:42.273 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:15:42.274 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:15:42.274 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:15:42.280 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"timeseries","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"descending":false,"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":"DAY","aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limit":2147483647,"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"861d9fce-30aa-439e-98d2-8fe4c5df0acc"}}
09:15:42.280 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.281 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.287 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51448 accepted at Tue Nov 10 09:15:42 PST 2020.
09:15:42.290 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp": "2012-01-01T00:00:00.000Z",
    "result": { "Impressions": 15 },
    "unsupported":"field"
  }
]
09:15:42.290 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=20
09:15:42.297 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Timeseries rows.size=1
09:15:42.298 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - unhandled field : (unsupported,JString(field))
09:15:42.298 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in timeseries json response : (unsupported,JString(field))
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$7(DruidQueryExecutor.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$7$adapted(DruidQueryExecutor.scala:187)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$6(DruidQueryExecutor.scala:187)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$6$adapted(DruidQueryExecutor.scala:184)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:184)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$3(DruidQueryExecutor.scala:473)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
- Test TimeSeries query with partial result set with missing result field
- testing extract field
09:15:42.325 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Test Flag -> TreeSet(EqualityFilter(Test Flag,0,true,false)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,12345,false,false))) : None
09:15:42.325 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:15:42.325 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:15:42.346 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"account_stats"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"stats_date","value":"2020-11-312"},{"type":"selector","dimension":"stats_date","value":"2020-11-309"},{"type":"selector","dimension":"stats_date","value":"2020-11-313"},{"type":"selector","dimension":"stats_date","value":"2020-11-310"},{"type":"selector","dimension":"stats_date","value":"2020-11-314"},{"type":"selector","dimension":"stats_date","value":"2020-11-315"},{"type":"selector","dimension":"stats_date","value":"2020-11-311"},{"type":"selector","dimension":"stats_date","value":"2020-11-308"}]},{"type":"selector","dimension":"advertiser_id","value":"12345"},{"type":"selector","dimension":"{test_flag}","value":"0"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impressions"},{"type":"doubleSum","name":"Spend","fieldName":"spend"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[],"limit":200},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"a8f61e9d-9892-46c1-9180-7c3d05fc5a55"},"descending":false}
09:15:42.346 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.347 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.362 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51449 accepted at Tue Nov 10 09:15:42 PST 2020.
09:15:42.365 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
     "Impressions":100,
     "Spend":15.0,
     "Advertiser ID":184,
     "Day":"2012-01-01"
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
     "Impressions":100,
     "Spend":10.0,
     "Advertiser ID":199,
     "Day":"2012-01-01"
    }
  }
  ]
09:15:42.365 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:42.365 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:15:42.367 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:15:42.368 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"a_adjustments"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"stats_date","value":"2020-11-312"},{"type":"selector","dimension":"stats_date","value":"2020-11-309"},{"type":"selector","dimension":"stats_date","value":"2020-11-313"},{"type":"selector","dimension":"stats_date","value":"2020-11-310"},{"type":"selector","dimension":"stats_date","value":"2020-11-314"},{"type":"selector","dimension":"stats_date","value":"2020-11-315"},{"type":"selector","dimension":"stats_date","value":"2020-11-311"},{"type":"selector","dimension":"stats_date","value":"2020-11-308"}]},{"type":"selector","dimension":"advertiser_id","value":"12345"},{"type":"selector","dimension":"{test_flag}","value":"0"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impressions"},{"type":"doubleSum","name":"Spend","fieldName":"spend"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[],"limit":200},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"2ec92755-8c03-4b93-b1ad-c73045e9dbf4"},"descending":false}
09:15:42.368 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.369 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.374 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
     "Impressions":100,
     "Spend":15.0,
     "Advertiser ID":184,
     "Day":"2012-01-01"
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
     "Impressions":100,
     "Spend":10.0,
     "Advertiser ID":199,
     "Day":"2012-01-01"
    }
  }
  ]
09:15:42.374 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:42.375 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:15:42.376 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
- Fact View Query Tests Adjustment Stats without Filter
09:15:42.386 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Test Flag -> TreeSet(EqualityFilter(Test Flag,0,true,false)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,12345,false,false))) : None
09:15:42.386 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:15:42.386 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:15:42.395 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"account_stats"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"stats_date","value":"2020-11-312"},{"type":"selector","dimension":"stats_date","value":"2020-11-309"},{"type":"selector","dimension":"stats_date","value":"2020-11-313"},{"type":"selector","dimension":"stats_date","value":"2020-11-310"},{"type":"selector","dimension":"stats_date","value":"2020-11-314"},{"type":"selector","dimension":"stats_date","value":"2020-11-315"},{"type":"selector","dimension":"stats_date","value":"2020-11-311"},{"type":"selector","dimension":"stats_date","value":"2020-11-308"}]},{"type":"selector","dimension":"advertiser_id","value":"12345"},{"type":"selector","dimension":"{test_flag}","value":"0"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impressions"},{"type":"doubleSum","name":"Spend","fieldName":"spend"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[],"limit":200},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"28689707-db0e-4a2e-a4b2-43fd6077f5bf"},"descending":false}
09:15:42.395 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.395 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.397 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51450 accepted at Tue Nov 10 09:15:42 PST 2020.
09:15:42.401 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
     "Impressions":100,
     "Spend":15.0,
     "Advertiser ID":184,
     "Day":"2012-01-01"
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
     "Impressions":100,
     "Spend":10.0,
     "Advertiser ID":199,
     "Day":"2012-01-01"
    }
  }
  ]
09:15:42.401 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:42.401 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:15:42.402 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:15:42.402 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"a_adjustments"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"stats_date","value":"2020-11-312"},{"type":"selector","dimension":"stats_date","value":"2020-11-309"},{"type":"selector","dimension":"stats_date","value":"2020-11-313"},{"type":"selector","dimension":"stats_date","value":"2020-11-310"},{"type":"selector","dimension":"stats_date","value":"2020-11-314"},{"type":"selector","dimension":"stats_date","value":"2020-11-315"},{"type":"selector","dimension":"stats_date","value":"2020-11-311"},{"type":"selector","dimension":"stats_date","value":"2020-11-308"}]},{"type":"selector","dimension":"advertiser_id","value":"12345"},{"type":"selector","dimension":"{test_flag}","value":"0"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impressions"},{"type":"doubleSum","name":"Spend","fieldName":"spend"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[],"limit":200},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"0c972074-13db-48c0-aa10-d3321802e619"},"descending":false}
09:15:42.402 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.402 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.408 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
     "Impressions":100,
     "Spend":15.0,
     "Advertiser ID":184,
     "Day":"2012-01-01"
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
     "Impressions":100,
     "Spend":10.0,
     "Advertiser ID":199,
     "Day":"2012-01-01"
    }
  }
  ]
09:15:42.408 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:42.408 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:15:42.409 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
- Async Fact View Query Tests A Stats Api Side join
09:15:42.424 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.425 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51451 accepted at Tue Nov 10 09:15:42 PST 2020.
09:15:42.432 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
- Successfully get the result if result rowCount exceeds maxRowLimit, if allowPartialIfResultExceedsMaxRowLimit is set
09:15:42.446 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Test Flag -> TreeSet(EqualityFilter(Test Flag,0,true,false)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,1035663,false,false)), Is Adjustment -> TreeSet(EqualityFilter(Is Adjustment,Y,false,false))) : None
09:15:42.446 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:15:42.446 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:15:42.454 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"account_stats"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"stats_date","value":"2020-11-312"},{"type":"selector","dimension":"stats_date","value":"2020-11-309"},{"type":"selector","dimension":"stats_date","value":"2020-11-313"},{"type":"selector","dimension":"stats_date","value":"2020-11-310"},{"type":"selector","dimension":"stats_date","value":"2020-11-314"},{"type":"selector","dimension":"stats_date","value":"2020-11-315"},{"type":"selector","dimension":"stats_date","value":"2020-11-311"},{"type":"selector","dimension":"stats_date","value":"2020-11-308"}]},{"type":"selector","dimension":"advertiser_id","value":"1035663"},{"type":"selector","dimension":"{test_flag}","value":"0"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impressions"},{"type":"doubleSum","name":"Spend","fieldName":"spend"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[],"limit":200},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"a5827be6-285c-4657-9119-71a5fb18839a"},"descending":false}
09:15:42.454 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.455 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.457 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51452 accepted at Tue Nov 10 09:15:42 PST 2020.
09:15:42.460 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
     "Impressions":100,
     "Spend":15.0,
     "Advertiser ID":184,
     "Day":"2012-01-01"
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
     "Impressions":100,
     "Spend":10.0,
     "Advertiser ID":199,
     "Day":"2012-01-01"
    }
  }
  ]
09:15:42.460 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:42.460 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:15:42.461 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:15:42.462 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"a_adjustments"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"stats_date","value":"2020-11-312"},{"type":"selector","dimension":"stats_date","value":"2020-11-309"},{"type":"selector","dimension":"stats_date","value":"2020-11-313"},{"type":"selector","dimension":"stats_date","value":"2020-11-310"},{"type":"selector","dimension":"stats_date","value":"2020-11-314"},{"type":"selector","dimension":"stats_date","value":"2020-11-315"},{"type":"selector","dimension":"stats_date","value":"2020-11-311"},{"type":"selector","dimension":"stats_date","value":"2020-11-308"}]},{"type":"selector","dimension":"advertiser_id","value":"1035663"},{"type":"selector","dimension":"{test_flag}","value":"0"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impressions"},{"type":"doubleSum","name":"Spend","fieldName":"spend"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[],"limit":200},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"aedb69f5-2a67-4654-823c-f0c589285ce2"},"descending":false}
09:15:42.462 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.462 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.469 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
     "Impressions":100,
     "Spend":15.0,
     "Advertiser ID":184,
     "Day":"2012-01-01"
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
     "Impressions":100,
     "Spend":10.0,
     "Advertiser ID":199,
     "Day":"2012-01-01"
    }
  }
  ]
09:15:42.469 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:42.469 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:15:42.470 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
- Fact View Query Tests Adjustment Stats with constant column filter
09:15:42.477 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey: filters:Map() : None
09:15:42.477 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:15:42.477 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=false
09:15:42.485 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"dr_wg_stats"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"stats_date","value":"20201107"},{"type":"selector","dimension":"stats_date","value":"20201104"},{"type":"selector","dimension":"stats_date","value":"20201108"},{"type":"selector","dimension":"stats_date","value":"20201105"},{"type":"selector","dimension":"stats_date","value":"20201109"},{"type":"selector","dimension":"stats_date","value":"20201110"},{"type":"selector","dimension":"stats_date","value":"20201106"},{"type":"selector","dimension":"stats_date","value":"20201103"}]}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"stats_hour","outputName":"Hour","outputType":"STRING"},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"}],"aggregations":[{"type":"doubleSum","name":"Spend Usd","fieldName":"spend_usd"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[{"dimension":"Spend Usd","direction":"descending","dimensionOrder":{"type":"numeric"}}],"limit":1000},"context":{"groupByStrategy":"v2","applyLimitPushDown":"false","priority":-1,"uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":false,"timeout":300000,"queryId":"f6517cec-97a3-45ff-b1da-783d5c2a4787"},"descending":false}
09:15:42.485 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.486 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.488 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51453 accepted at Tue Nov 10 09:15:42 PST 2020.
09:15:42.492 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response 
[
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":100702.5269201994,
         "Day":"20170502",
         "Hour":"12"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":100105.47737568617,
         "Day":"20170501",
         "Hour":"10"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":99452.79603540897,
         "Day":"20170502",
         "Hour":"11"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":99278.75371289253,
         "Day":"20170501",
         "Hour":"12"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":97812.48666465282,
         "Day":"20170501",
         "Hour":"11"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":97590.620177567,
         "Day":"20170502",
         "Hour":"10"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":97567.92169524357,
         "Day":"20170501",
         "Hour":"13"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":96825.4939264059,
         "Day":"20170502",
         "Hour":"13"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":94937.976395607,
         "Day":"20170501",
         "Hour":"14"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":93734.20419290662,
         "Day":"20170502",
         "Hour":"15"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":93478.08122582361,
         "Day":"20170502",
         "Hour":"14"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":93372.62983252853,
         "Day":"20170501",
         "Hour":"15"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":92731.11964201927,
         "Day":"20170502",
         "Hour":"16"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":92407.92718720436,
         "Day":"20170502",
         "Hour":"09"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":92231.04085025191,
         "Day":"20170501",
         "Hour":"16"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":91216.1552691944,
         "Day":"20170501",
         "Hour":"09"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":86134.26635608822,
         "Day":"20170501",
         "Hour":"17"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":83792.81063309312,
         "Day":"20170502",
         "Hour":"17"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":81854.47675731778,
         "Day":"20170501",
         "Hour":"08"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":80682.35567551851,
         "Day":"20170502",
         "Hour":"08"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":78679.26031523943,
         "Day":"20170501",
         "Hour":"18"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":78148.13511765003,
         "Day":"20170502",
         "Hour":"18"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":74984.74295082316,
         "Day":"20170502",
         "Hour":"19"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":74374.6146068573,
         "Day":"20170501",
         "Hour":"19"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":70020.28937721252,
         "Day":"20170501",
         "Hour":"20"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":69916.24665260315,
         "Day":"20170502",
         "Hour":"20"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":68890.52107673883,
         "Day":"20170501",
         "Hour":"07"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":67616.82631015778,
         "Day":"20170502",
         "Hour":"07"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":64026.77501773834,
         "Day":"20170501",
         "Hour":"21"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":61437.951813697815,
         "Day":"20170502",
         "Hour":"21"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":54657.061321258545,
         "Day":"20170501",
         "Hour":"22"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":54380.0269228816,
         "Day":"20170501",
         "Hour":"00"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":52897.4322437644,
         "Day":"20170502",
         "Hour":"06"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":52755.80685228109,
         "Day":"20170502",
         "Hour":"00"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":52233.05034738779,
         "Day":"20170501",
         "Hour":"06"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":50291.44211769104,
         "Day":"20170502",
         "Hour":"22"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":41530.911318697035,
         "Day":"20170501",
         "Hour":"23"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":41114.491149783134,
         "Day":"20170502",
         "Hour":"01"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":40357.94918587804,
         "Day":"20170501",
         "Hour":"01"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":39912.34553909302,
         "Day":"20170502",
         "Hour":"05"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":39016.80207681656,
         "Day":"20170502",
         "Hour":"23"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":39015.84096670151,
         "Day":"20170501",
         "Hour":"05"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":35015.9358971715,
         "Day":"20170501",
         "Hour":"02"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":34740.93743869662,
         "Day":"20170502",
         "Hour":"02"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":33221.94006937742,
         "Day":"20170502",
         "Hour":"04"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":32514.756277024746,
         "Day":"20170501",
         "Hour":"04"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":31368.691083669662,
         "Day":"20170502",
         "Hour":"03"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":31223.54076075554,
         "Day":"20170501",
         "Hour":"03"
      }
   }
]
        
09:15:42.492 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:42.496 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=48
09:15:42.510 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=48
- Exectue Hourly grain query with day field
09:15:42.520 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-advertiser filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:15:42.521 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:15:42.521 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:15:42.521 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:15:42.521 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:15:42.532 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"extraction","dimension":"advertiser_id","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"advertiser_lookup","retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true,"valueColumn":"status","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"7759bb92-e4f5-46e1-9c58-5dbd140af499"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"granularity":"DAY","dimensions":[{"type":"default","dimension":"Keyword ID","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"Day","outputName":"Day","outputType":"STRING"},{"type":"extraction","dimension":"Advertiser Status","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"ON":"ON"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"Impressions"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":3},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"7759bb92-e4f5-46e1-9c58-5dbd140af499"},"descending":false}
09:15:42.532 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.533 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.535 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51454 accepted at Tue Nov 10 09:15:42 PST 2020.
09:15:42.544 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - uncoveredIntervals Found: {"uncoveredIntervals":[2017-11-13T21:00:00.000Z/2017-11-14T00:00:00.000Z"],"uncoveredIntervalsOverflowed":false}
09:15:42.544 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response 
  [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
      "Pricing Type" : 11,
      "Keyword ID": "10",
      "Average Bid": 9,
     "Max Bid": 163,
     "Impressions":175,
     "Conversions":15.0,
     "Min Bid":184,
     "Average Position":205,
     "Week":"2017-26",
     "show_sov_flag": "0",
     "Impression Share": 0.4567
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
    "Pricing Type" : 13,
     "Keyword ID": "14",
     "Average Bid": 15,
     "Max Bid": 16,
     "Impressions":17,
     "Conversions":2.3,
     "Min Bid":18,
     "Average Position":20,
     "Week":"2017-28",
     "show_sov_flag": "1",
     "Impression Share": 0.0123
    }
  }
  ]


        
09:15:42.544 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:42.545 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:15:42.545 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Pricing Type : JInt(11)
09:15:42.545 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Max Bid : JInt(163)
09:15:42.545 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Conversions : JDouble(15.0)
09:15:42.545 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Min Bid : JInt(184)
09:15:42.545 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Average Position : JInt(205)
09:15:42.545 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Week : JString(2017-26)
09:15:42.545 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Impression Share : JDouble(0.4567)
09:15:42.545 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Pricing Type : JInt(13)
09:15:42.546 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Max Bid : JInt(16)
09:15:42.546 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Conversions : JDouble(2.3)
09:15:42.546 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Min Bid : JInt(18)
09:15:42.546 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Average Position : JInt(20)
09:15:42.546 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Week : JString(2017-28)
09:15:42.546 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Impression Share : JDouble(0.0123)
09:15:42.546 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
- Uncovered Interval response: should not fall back
09:15:42.558 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:ad_group filters:Map(Ad Group Status -> TreeSet(NotInFilter(Ad Group Status,List(DELETED),false,false)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false)), Campaign Status -> TreeSet(NotInFilter(Campaign Status,List(DELETED),false,false))) : None
09:15:42.558 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:15:42.558 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:15:42.566 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"campaign_id","outputName":"Campaign ID","outputType":"STRING"},{"type":"default","dimension":"ad_group_id","outputName":"Ad Group ID","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"descending","dimensionOrder":{"type":"numeric"}}],"limit":200},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"aff9301d-a265-47f5-b63d-c5aec5dd7f5f"},"descending":false}
09:15:42.566 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.567 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.569 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51455 accepted at Tue Nov 10 09:15:42 PST 2020.
09:15:42.572 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2013-08-31T00:00:00.000Z",
    "event" : {
       "Advertiser ID": 1,
		   "Ad Group ID": 114,
       "Campaign ID": 14,
		   "Impressions": 1106
    }
  },
  {
    "timestamp" : "2013-08-31T00:00:00.000Z",
    "event" : {
      "Advertiser ID": 1,
	  	"Ad Group ID": 113,
      "Campaign ID": 13,
	  	"Impressions": 106
    }
  }
  ]
09:15:42.572 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:42.573 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:15:42.574 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which is not in columnNames : Advertiser ID : JInt(1)
09:15:42.574 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which is not in columnNames : Advertiser ID : JInt(1)
09:15:42.575 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:15:42.575 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - rowList.size=2, rowList.updatedSet=0
- successfully generate the dim only INNER JOIN query if request has hasNonDrivingDimNonFKNonPKFilter in MultiEngine Case
09:15:42.623 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:15:42.623 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:15:42.623 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
{"queryType":"scan","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"resultFormat":"list","batchSize":20480,"limit":5,"order":"none","filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"columns":["id","__time","impressions"],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"timeout":300000,"queryId":"7ba54f6d-2c33-4c4c-a205-efbd6eee78dd"},"descending":false,"granularity":{"type":"all"}}
09:15:42.641 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"scan","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"resultFormat":"list","batchSize":20480,"limit":5,"order":"none","filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"columns":["id","__time","impressions"],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"timeout":300000,"queryId":"7ba54f6d-2c33-4c4c-a205-efbd6eee78dd"},"descending":false,"granularity":{"type":"all"}}
09:15:42.641 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.642 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.643 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51456 accepted at Tue Nov 10 09:15:42 PST 2020.
09:15:42.647 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response  [{
 	"timestamp": "2013-01-01T00:00:00.000Z",
 	"result": {
 		"pagingIdentifiers": {
 			"wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9": 4
 		},
    "dimensons": ["Keyword ID", "Day"],
    "metrics": ["impressions"],
 		"events": [{
 			"segmentId": "wikipedia_editstream_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 0,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id1",
        "Day": "2013-01-01 00",
 				"impressions": "1"
 			}
 		}, {
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 1,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id2",
        "Day": "2013-01-01 00",
 				"impressions": "2"
 			}
 		}, {
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 2,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id3",
        "Day": "2013-01-01 00",
 				"impressions": "3"
 			}
 		}, {
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 3,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id4",
        "Day": "2013-01-01 00",
 				"impressions": "4"
 			}
 		}, {
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 4,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id5",
        "Day": "2013-01-01 00",
 				"impressions": "5"
 			}
 		}]
 	}
 }]
09:15:42.647 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:42.647 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ScanQuery rows.size=1
09:15:42.649 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignoring unhandled field : (dimensons,JArray(List(JString(Keyword ID), JString(Day))))
09:15:42.649 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignoring unhandled field : (metrics,JArray(List(JString(impressions))))
09:15:42.649 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - events size=5
09:15:42.650 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (segmentId,JString(wikipedia_editstream_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9))
09:15:42.650 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (offset,JInt(0))
09:15:42.651 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : timestamp : JString(2013-01-01T00:00:00.000Z)
09:15:42.651 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (segmentId,JString(wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9))
09:15:42.651 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (offset,JInt(1))
09:15:42.651 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : timestamp : JString(2013-01-01T00:00:00.000Z)
09:15:42.651 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (segmentId,JString(wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9))
09:15:42.651 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (offset,JInt(2))
09:15:42.651 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : timestamp : JString(2013-01-01T00:00:00.000Z)
09:15:42.651 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (segmentId,JString(wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9))
09:15:42.651 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (offset,JInt(3))
09:15:42.652 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : timestamp : JString(2013-01-01T00:00:00.000Z)
09:15:42.652 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (segmentId,JString(wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9))
09:15:42.652 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (offset,JInt(4))
09:15:42.652 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : timestamp : JString(2013-01-01T00:00:00.000Z)
09:15:42.652 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=5
09:15:42.652 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.IllegalArgumentException: requirement failed: Non paginated query fails rowsCount < maxRows, partial result possible : rowsCount=5 maxRows=5
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:362)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$156(DruidQueryExecutorTest.scala:2830)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$156$adapted(DruidQueryExecutorTest.scala:2828)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.withDruidQueryExecutor(DruidQueryExecutorTest.scala:429)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$155(DruidQueryExecutorTest.scala:2828)
- successfully execute scan query type
09:15:42.661 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:15:42.661 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:15:42.661 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:15:42.666 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"scan","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"resultFormat":"list","batchSize":20480,"limit":5,"order":"none","filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"columns":["id","__time","impressions"],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"timeout":300000,"queryId":"22db5a71-fd00-4905-b6d4-21b906be2fb0"},"descending":false,"granularity":{"type":"all"}}
09:15:42.666 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.667 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.668 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51457 accepted at Tue Nov 10 09:15:42 PST 2020.
09:15:42.672 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response  [{
 	"timestamp": "2013-01-01T00:00:00.000Z",
  "unsupported": "field",
 	"result": {
 		"pagingIdentifiers": {
 			"wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9": 4
 		},
    "dimensons": ["Keyword ID", "Day"],
    "metrics": ["impressions"],
 		"events": [{
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 4,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id5",
        "Day": "2013-01-01 00",
 				"impressions": "5"
 			}
 		}]
 	}
 }]
09:15:42.672 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:42.672 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ScanQuery rows.size=1
09:15:42.672 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - unhandled field : (unsupported,JString(field))
09:15:42.673 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in SelectDruidQuery json response : (unsupported,JString(field))
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$22(DruidQueryExecutor.scala:347)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$22$adapted(DruidQueryExecutor.scala:301)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$21(DruidQueryExecutor.scala:301)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$21$adapted(DruidQueryExecutor.scala:299)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:299)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
09:15:42.683 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"scan","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"resultFormat":"list","batchSize":20480,"limit":5,"order":"none","filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"columns":["id","__time","impressions"],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"timeout":300000,"queryId":"22db5a71-fd00-4905-b6d4-21b906be2fb0"},"descending":false,"granularity":{"type":"all"}}
09:15:42.683 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.683 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.685 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51458 accepted at Tue Nov 10 09:15:42 PST 2020.
09:15:42.690 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response  [{
 	"timestamp": "2013-01-01T00:00:00.000Z",
 	"result": {
 		"pagingIdentifiers": {
 			"wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9": 4
 		},
    "dimensons": ["Keyword ID", "Day"],
    "metrics": ["impressions"],
 		"events": [{
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 4,
 			"event": "unsupported"
 		}]
 	}
 }]
09:15:42.690 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:42.690 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ScanQuery rows.size=1
09:15:42.690 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignoring unhandled field : (dimensons,JArray(List(JString(Keyword ID), JString(Day))))
09:15:42.690 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignoring unhandled field : (metrics,JArray(List(JString(impressions))))
09:15:42.690 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - events size=1
09:15:42.690 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (segmentId,JString(wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9))
09:15:42.690 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (offset,JInt(4))
09:15:42.690 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in SelectDruidQuery json response : JString(unsupported)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$26(DruidQueryExecutor.scala:323)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$26$adapted(DruidQueryExecutor.scala:317)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$25(DruidQueryExecutor.scala:317)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$25$adapted(DruidQueryExecutor.scala:315)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$23(DruidQueryExecutor.scala:315)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$23$adapted(DruidQueryExecutor.scala:306)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$22(DruidQueryExecutor.scala:306)
09:15:42.700 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"scan","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"resultFormat":"list","batchSize":20480,"limit":5,"order":"none","filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"columns":["id","__time","impressions"],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"timeout":300000,"queryId":"22db5a71-fd00-4905-b6d4-21b906be2fb0"},"descending":false,"granularity":{"type":"all"}}
09:15:42.700 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.700 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.702 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51459 accepted at Tue Nov 10 09:15:42 PST 2020.
09:15:42.706 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response  [{
 	"timestamp": "2013-01-01T00:00:00.000Z",
 	"result": {
 		"pagingIdentifiers": {
 			"wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9": 4
 		},
    "dimensons": ["Keyword ID", "Day"],
    "metrics": ["impressions"],
 		"events": ["unsupported"]
 	}
 }]
09:15:42.706 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:42.706 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ScanQuery rows.size=1
09:15:42.706 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignoring unhandled field : (dimensons,JArray(List(JString(Keyword ID), JString(Day))))
09:15:42.706 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignoring unhandled field : (metrics,JArray(List(JString(impressions))))
09:15:42.706 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - events size=1
09:15:42.706 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in SelectDruidQuery json response : JString(unsupported)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$25(DruidQueryExecutor.scala:330)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$25$adapted(DruidQueryExecutor.scala:315)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$23(DruidQueryExecutor.scala:315)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$23$adapted(DruidQueryExecutor.scala:306)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$22(DruidQueryExecutor.scala:306)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$22$adapted(DruidQueryExecutor.scala:301)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$21(DruidQueryExecutor.scala:301)
09:15:42.716 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"scan","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"resultFormat":"list","batchSize":20480,"limit":5,"order":"none","filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"columns":["id","__time","impressions"],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"timeout":300000,"queryId":"22db5a71-fd00-4905-b6d4-21b906be2fb0"},"descending":false,"granularity":{"type":"all"}}
09:15:42.716 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.716 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.718 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51460 accepted at Tue Nov 10 09:15:42 PST 2020.
09:15:42.721 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response  [{
 	"timestamp": "2013-01-01T00:00:00.000Z",
 	"result": {
 		"pagingIdentifiers": {
 			"wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9": 4
 		},
    "dimensons": ["Keyword ID", "Day"],
    "metrics": ["impressions"],
 		"events": "unsupported"
 	}
 }]
09:15:42.721 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:42.721 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ScanQuery rows.size=1
09:15:42.721 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignoring unhandled field : (dimensons,JArray(List(JString(Keyword ID), JString(Day))))
09:15:42.721 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignoring unhandled field : (metrics,JArray(List(JString(impressions))))
09:15:42.722 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in SelectDruidQuery json response : JString(unsupported)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$23(DruidQueryExecutor.scala:334)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$23$adapted(DruidQueryExecutor.scala:306)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$22(DruidQueryExecutor.scala:306)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$22$adapted(DruidQueryExecutor.scala:301)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$21(DruidQueryExecutor.scala:301)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$21$adapted(DruidQueryExecutor.scala:299)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:299)
09:15:42.732 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"scan","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"resultFormat":"list","batchSize":20480,"limit":5,"order":"none","filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"columns":["id","__time","impressions"],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"timeout":300000,"queryId":"22db5a71-fd00-4905-b6d4-21b906be2fb0"},"descending":false,"granularity":{"type":"all"}}
09:15:42.732 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.732 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.733 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51461 accepted at Tue Nov 10 09:15:42 PST 2020.
09:15:42.737 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response  [{
 	"timestamp": "2013-01-01T00:00:00.000Z",
 	"result": "unsupported"
 }]
09:15:42.737 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:42.737 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ScanQuery rows.size=1
09:15:42.737 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in SelectDruidQuery json response : JString(unsupported)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$22(DruidQueryExecutor.scala:341)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$22$adapted(DruidQueryExecutor.scala:301)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$21(DruidQueryExecutor.scala:301)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$21$adapted(DruidQueryExecutor.scala:299)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:299)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
09:15:42.747 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"scan","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"resultFormat":"list","batchSize":20480,"limit":5,"order":"none","filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"columns":["id","__time","impressions"],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"timeout":300000,"queryId":"22db5a71-fd00-4905-b6d4-21b906be2fb0"},"descending":false,"granularity":{"type":"all"}}
09:15:42.747 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.747 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.748 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51462 accepted at Tue Nov 10 09:15:42 PST 2020.
09:15:42.751 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response  ["unsupported"]
09:15:42.751 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:42.751 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ScanQuery rows.size=1
09:15:42.752 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in SelectDruidQuery json response : JString(unsupported)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$21(DruidQueryExecutor.scala:349)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$21$adapted(DruidQueryExecutor.scala:299)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:299)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$163(DruidQueryExecutorTest.scala:2895)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$163$adapted(DruidQueryExecutorTest.scala:2893)
09:15:42.763 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"scan","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"resultFormat":"list","batchSize":20480,"limit":5,"order":"none","filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"columns":["id","__time","impressions"],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"timeout":300000,"queryId":"22db5a71-fd00-4905-b6d4-21b906be2fb0"},"descending":false,"granularity":{"type":"all"}}
09:15:42.763 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:42.763 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:42.765 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51463 accepted at Tue Nov 10 09:15:42 PST 2020.
09:15:42.768 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response {}
09:15:42.768 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:42.769 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in SelectDruidQuery json response : JObject(List())
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:351)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$163(DruidQueryExecutorTest.scala:2895)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$163$adapted(DruidQueryExecutorTest.scala:2893)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.withDruidQueryExecutor(DruidQueryExecutorTest.scala:429)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$162(DruidQueryExecutorTest.scala:2893)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$162$adapted(DruidQueryExecutorTest.scala:2891)
- fail to execute scan query type with unhandled json
09:15:42.779 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:15:42.779 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:15:42.780 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
{"queryType":"scan","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"resultFormat":"list","batchSize":20480,"limit":5,"order":"none","filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"columns":["id","__time","impressions"],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"timeout":300000,"queryId":"df8e2657-c46a-4897-8230-864d2cd72ba4"},"descending":false,"granularity":{"type":"all"}}
09:15:43.014 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"scan","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"resultFormat":"list","batchSize":20480,"limit":5,"order":"none","filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"columns":["id","__time","impressions"],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"timeout":300000,"queryId":"df8e2657-c46a-4897-8230-864d2cd72ba4"},"descending":false,"granularity":{"type":"all"}}
09:15:43.014 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:43.014 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:43.016 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51464 accepted at Tue Nov 10 09:15:43 PST 2020.
09:15:43.019 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response  [{
 	"timestamp": "2013-01-01T00:00:00.000Z",
 	"result": {
 		"pagingIdentifiers": {
 			"wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9": 4
 		},
    "dimensons": ["Keyword ID", "Day"],
    "metrics": ["impressions"],
 		"events": [{
 			"segmentId": "wikipedia_editstream_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 0,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id1",
        "Day": "2013-01-01 00",
 				"impressions": "1"
 			}
 		}, {
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 1,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id2",
        "Day": "2013-01-01 00",
 				"impressions": "2"
 			}
 		}, {
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 2,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id3",
        "Day": "2013-01-01 00",
 				"impressions": "3"
 			}
 		}, {
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 3,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id4",
        "Day": "2013-01-01 00",
 				"impressions": "4"
 			}
 		}, {
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 4,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id5",
        "Day": "2013-01-01 00",
 				"impressions": "5"
 			}
 		}]
 	}
 }]
09:15:43.019 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:43.020 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ScanQuery rows.size=1
09:15:43.020 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignoring unhandled field : (dimensons,JArray(List(JString(Keyword ID), JString(Day))))
09:15:43.020 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignoring unhandled field : (metrics,JArray(List(JString(impressions))))
09:15:43.020 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - events size=5
09:15:43.020 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (segmentId,JString(wikipedia_editstream_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9))
09:15:43.020 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (offset,JInt(0))
09:15:43.021 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : timestamp : JString(2013-01-01T00:00:00.000Z)
09:15:43.026 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Failed to add row to rowList Row(Map(Day -> 0, Keyword ID -> 1, Impressions -> 2),ArrayBuffer(2013-01-01 00, id1, 1)), response json  [{
 	"timestamp": "2013-01-01T00:00:00.000Z",
 	"result": {
 		"pagingIdentifiers": {
 			"wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9": 4
 		},
    "dimensons": ["Keyword ID", "Day"],
    "metrics": ["impressions"],
 		"events": [{
 			"segmentId": "wikipedia_editstream_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 0,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id1",
        "Day": "2013-01-01 00",
 				"impressions": "1"
 			}
 		}, {
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 1,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id2",
        "Day": "2013-01-01 00",
 				"impressions": "2"
 			}
 		}, {
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 2,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id3",
        "Day": "2013-01-01 00",
 				"impressions": "3"
 			}
 		}, {
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 3,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id4",
        "Day": "2013-01-01 00",
 				"impressions": "4"
 			}
 		}, {
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 4,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id5",
        "Day": "2013-01-01 00",
 				"impressions": "5"
 			}
 		}]
 	}
 }],  Query: {"queryType":"scan","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"resultFormat":"list","batchSize":20480,"limit":5,"order":"none","filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"columns":["id","__time","impressions"],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"timeout":300000,"queryId":"df8e2657-c46a-4897-8230-864d2cd72ba4"},"descending":false,"granularity":{"type":"all"}}
09:15:43.026 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: fail
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.processResult(DruidQueryExecutor.scala:145)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$26(DruidQueryExecutor.scala:322)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$26$adapted(DruidQueryExecutor.scala:317)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$25(DruidQueryExecutor.scala:317)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$25$adapted(DruidQueryExecutor.scala:315)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$23(DruidQueryExecutor.scala:315)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$23$adapted(DruidQueryExecutor.scala:306)
	at scala.collection.immutable.List.foreach(List.scala:392)
- fail to execute query when rowList throws exception
09:15:43.041 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:43.043 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51465 accepted at Tue Nov 10 09:15:43 PST 2020.
09:15:43.046 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Druid Query type not supported com.yahoo.maha.executor.druid.DruidQueryExecutorTest$$anon$1@3915e7c3
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:353)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$167(DruidQueryExecutorTest.scala:2993)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$167$adapted(DruidQueryExecutorTest.scala:2991)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.withDruidQueryExecutor(DruidQueryExecutorTest.scala:429)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$166(DruidQueryExecutorTest.scala:2991)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
- fail to execute query which is unknown type
- fail to execute oracle query
09:15:43.070 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:15:43.070 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:15:43.070 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:15:43.071 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:15:43.071 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
{"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"99aa2716-8d21-4190-8888-b9a458e4f13a"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"granularity":{"type":"all"},"dimensions":[],"aggregations":[{"type":"count","name":"TOTALROWS"}],"postAggregations":[],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"99aa2716-8d21-4190-8888-b9a458e4f13a"},"descending":false}
09:15:43.078 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"99aa2716-8d21-4190-8888-b9a458e4f13a"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"granularity":{"type":"all"},"dimensions":[],"aggregations":[{"type":"count","name":"TOTALROWS"}],"postAggregations":[],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"99aa2716-8d21-4190-8888-b9a458e4f13a"},"descending":false}
09:15:43.078 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:43.079 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:43.080 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51466 accepted at Tue Nov 10 09:15:43 PST 2020.
09:15:43.083 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
     "TOTALROWS" : 100
    }
  }
  ]
09:15:43.083 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:43.083 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=1
09:15:43.083 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=1
- test row count groupby query execution
09:15:43.102 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:43.103 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51467 accepted at Tue Nov 10 09:15:43 PST 2020.
- successfully drop rows that more than specific maxrows
09:15:43.117 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-keyword filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:15:43.117 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:15:43.117 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:15:43.117 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:15:43.117 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:15:43.129 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"},{"type":"or","fields":[{"type":"selector","dimension":"id","value":"13"},{"type":"selector","dimension":"id","value":"14"}]}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[],"limit":100},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"7dc05bd1-2a6b-4efe-a23e-3e452febf9ca"},"descending":false}
09:15:43.129 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:15:43.129 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:43.131 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51468 accepted at Tue Nov 10 09:15:43 PST 2020.
09:15:43.134 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2013-08-31T00:00:00.000Z",
    "event" : {
      "Keyword ID": 14,
     "Impressions":10669
    }
  },
  {
    "timestamp" : "2013-08-31T00:00:00.000Z",
    "event" : {
     "Keyword ID": 13,
     "Impressions":106
    }
  }
  ]
09:15:43.134 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:15:43.134 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:15:43.135 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:15:43.135 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - rowList.size=2, rowList.updatedSet=2
- test use of startIndex for multiEngineQuery
Info Provided - Stopping blaze server
+ Started blaze server 
09:15:43.154 INFO  [ScalaTest-main-running-DiscoverySuite] o.h.b.c.n.NIO1SocketServerGroup - Service bound to address /127.0.0.1:16367
09:15:43.157 INFO  [ScalaTest-main-running-DiscoverySuite] c.y.m.e.d.TimeoutThrottlingFilterTest - Started blaze server
TimeoutThrottlingFilterTest:
- Test TimeoutMillsStore
09:15:43.280 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:43.282 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51469 accepted at Tue Nov 10 09:15:43 PST 2020.
09:15:43.288 DEBUG [AsyncHttpClient-137-1] c.y.m.e.d.f.TimeoutThrottlingFilter - Response taking too long. Returned response time is 4 Configured maxResponseTime is: 1 Adding to timeoutList.
09:15:46.284 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:46.288 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:46.288 ERROR [AsyncHttpClient-137-3] c.y.m.e.d.f.TimeoutThrottlingFilter - Connection or Timeout Exception caught. java.net.ConnectException: Can't assign requested address: localhost/0:0:0:0:0:0:0:1:0 Adding to timeoutList for url: http://localhost:0/echo
09:15:46.290 ERROR [AsyncHttpClient-137-5] c.y.m.e.d.f.TimeoutThrottlingFilter - Connection or Timeout Exception caught. java.net.ConnectException: Can't assign requested address: localhost/0:0:0:0:0:0:0:1:0 Adding to timeoutList for url: http://localhost:0/echo
09:15:46.290 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:46.292 ERROR [AsyncHttpClient-137-7] c.y.m.e.d.f.TimeoutThrottlingFilter - Connection or Timeout Exception caught. java.net.ConnectException: Can't assign requested address: localhost/0:0:0:0:0:0:0:1:0 Adding to timeoutList for url: http://localhost:0/echo
09:15:46.292 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:47.294 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:47.297 DEBUG [AsyncHttpClient-137-1] c.y.m.e.d.f.TimeoutThrottlingFilter - Response taking too long. Returned response time is 3 Configured maxResponseTime is: 1 Adding to timeoutList.
- TimeoutThrottlingFilterTest
09:15:47.301 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:47.315 ERROR [AsyncHttpClient-139-12] c.y.m.e.d.f.TimeoutThrottlingFilter - Connection or Timeout Exception caught. java.net.ConnectException: Connection refused: localhost/0:0:0:0:0:0:0:1:16368 Adding to timeoutList for url: http://localhost:16368/bad
09:15:47.316 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:47.328 ERROR [AsyncHttpClient-139-24] c.y.m.e.d.f.TimeoutThrottlingFilter - Connection or Timeout Exception caught. java.net.ConnectException: Connection refused: localhost/0:0:0:0:0:0:0:1:16368 Adding to timeoutList for url: http://localhost:16368/bad
09:15:47.328 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:47.335 ERROR [AsyncHttpClient-139-12] c.y.m.e.d.f.TimeoutThrottlingFilter - Connection or Timeout Exception caught. java.net.ConnectException: Connection refused: localhost/0:0:0:0:0:0:0:1:16368 Adding to timeoutList for url: http://localhost:16368/bad
09:15:47.336 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:47.336 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:47.337 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:48.339 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:15:48.340 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51513 accepted at Tue Nov 10 09:15:48 PST 2020.
- Test thread safeness of TimeoutThrottlingFilter
09:15:48.343 INFO  [ScalaTest-main-running-DiscoverySuite] c.y.m.e.d.TimeoutThrottlingFilterTest - Stopping blaze server
Run completed in 15 seconds, 145 milliseconds.
Total number of tests run: 56
Suites: completed 4, aborted 0
Tests: succeeded 56, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
[INFO] 
[INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ maha-druid-executor ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/druid/target/maha-druid-executor-6.24-SNAPSHOT.jar
[INFO] 
[INFO] --- maven-jar-plugin:2.6:test-jar (default) @ maha-druid-executor ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/druid/target/maha-druid-executor-6.24-SNAPSHOT-tests.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:jar (default) > generate-sources @ maha-druid-executor >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-druid-executor ---
[INFO] 
[INFO] <<< maven-source-plugin:2.4:jar (default) < generate-sources @ maha-druid-executor <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:jar (default) @ maha-druid-executor ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/druid/target/maha-druid-executor-6.24-SNAPSHOT-sources.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:test-jar (default) > generate-sources @ maha-druid-executor >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-druid-executor ---
[INFO] 
[INFO] <<< maven-source-plugin:2.4:test-jar (default) < generate-sources @ maha-druid-executor <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:test-jar (default) @ maha-druid-executor ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/druid/target/maha-druid-executor-6.24-SNAPSHOT-test-sources.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ maha-druid-executor ---
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/druid/target/maha-druid-executor-6.24-SNAPSHOT.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-druid-executor/6.24-SNAPSHOT/maha-druid-executor-6.24-SNAPSHOT.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/druid/pom.xml to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-druid-executor/6.24-SNAPSHOT/maha-druid-executor-6.24-SNAPSHOT.pom
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/druid/target/maha-druid-executor-6.24-SNAPSHOT-tests.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-druid-executor/6.24-SNAPSHOT/maha-druid-executor-6.24-SNAPSHOT-tests.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/druid/target/maha-druid-executor-6.24-SNAPSHOT-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-druid-executor/6.24-SNAPSHOT/maha-druid-executor-6.24-SNAPSHOT-sources.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/druid/target/maha-druid-executor-6.24-SNAPSHOT-test-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-druid-executor/6.24-SNAPSHOT/maha-druid-executor-6.24-SNAPSHOT-test-sources.jar
[INFO] 
[INFO] >>> scoverage-maven-plugin:1.4.1:report (coverage) > [scoverage]test @ maha-druid-executor >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-druid-executor ---
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:pre-compile (coverage) @ maha-druid-executor ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-druid-executor ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/lgadde/git/Native-Ads/maha/druid/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ maha-druid-executor ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-druid-executor ---
[INFO] /Users/lgadde/git/Native-Ads/maha/druid/src/main/scala:-1: info: compiling
[INFO] Compiling 3 source files to /Users/lgadde/git/Native-Ads/maha/druid/target/scoverage-classes at 1605028548978
[WARNING] /Users/lgadde/git/Native-Ads/maha/druid/src/main/scala/com/yahoo/maha/executor/druid/DruidQueryExecutor.scala:440: warning: local val isFactDriven in method execute is never used
[WARNING]           val isFactDriven = query.queryContext.requestModel.isFactDriven
[WARNING]               ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/druid/src/main/scala/com/yahoo/maha/executor/druid/HttpUtils.scala:10: warning: Unused import
[WARNING] import javax.net.ssl.SSLContext
[WARNING]                      ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/druid/src/main/scala/com/yahoo/maha/executor/druid/HttpUtils.scala:16: warning: Unused import
[WARNING] import org.asynchttpclient.{AsyncHttpClient, AsyncHttpClientConfig, BoundRequestBuilder, DefaultAsyncHttpClient, DefaultAsyncHttpClientConfig, Response};
[WARNING]                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/druid/src/main/scala/com/yahoo/maha/executor/druid/HttpUtils.scala:26: warning: private default argument in class HttpUtils is never used
[WARNING]                                 ,headers:Option[Map[String, String]] = None
[WARNING]                                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/druid/src/main/scala/com/yahoo/maha/executor/druid/HttpUtils.scala:51: warning: local val request in method execute is never used
[WARNING]       val request = requestBuilder.build()
[WARNING]           ^
[INFO] Cleaning datadir [/Users/lgadde/git/Native-Ads/maha/druid/target/scoverage-data]
[INFO] Beginning coverage instrumentation
[INFO] Instrumentation completed [684 statements]
[INFO] Wrote instrumentation file [/Users/lgadde/git/Native-Ads/maha/druid/target/scoverage-data/scoverage.coverage]
[INFO] Will write measurement data to [/Users/lgadde/git/Native-Ads/maha/druid/target/scoverage-data]
[WARNING] 5 warnings found
[INFO] prepare-compile in 0 s
[INFO] compile in 8 s
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:post-compile (coverage) @ maha-druid-executor ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-druid-executor ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ maha-druid-executor ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-druid-executor ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-druid-executor ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- scalatest-maven-plugin:2.0.0:test (test) @ maha-druid-executor ---
Discovery starting.
Discovery completed in 500 milliseconds.
Run starting. Expected test count is: 56
HttpUtilsTest:
09:16:00,265 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Found resource [logback-test.xml] at [file:/Users/lgadde/git/Native-Ads/maha/druid/target/test-classes/logback-test.xml]
09:16:00,266 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs multiple times on the classpath.
09:16:00,266 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [file:/Users/lgadde/git/Native-Ads/maha/druid/target/test-classes/logback-test.xml]
09:16:00,266 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [jar:file:/Users/lgadde/git/Native-Ads/maha/core/target/maha-core-6.24-SNAPSHOT-tests.jar!/logback-test.xml]
09:16:00,414 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - debug attribute not set
09:16:00,415 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.rolling.RollingFileAppender]
09:16:00,424 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [FILE]
09:16:00,433 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
09:16:00,508 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@665698670 - No compression will be used
09:16:00,513 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@665698670 - Will use the pattern application.%d{yyyy-MM-dd}.log for the active file
09:16:00,519 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - The date pattern is 'yyyy-MM-dd' from file name pattern 'application.%d{yyyy-MM-dd}.log'.
09:16:00,519 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Roll-over at midnight.
09:16:00,522 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Setting initial period to Tue Nov 10 09:15:48 PST 2020
09:16:00,526 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - Active log file name: target/logs/application.log
09:16:00,526 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - File property is set to [target/logs/application.log]
09:16:00,527 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]
09:16:00,529 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [STDOUT]
09:16:00,530 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
09:16:00,533 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.classic.AsyncAppender]
09:16:00,535 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [ASYNCFILE]
09:16:00,536 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [FILE] to ch.qos.logback.classic.AsyncAppender[ASYNCFILE]
09:16:00,536 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCFILE] - Attaching appender named [FILE] to AsyncAppender.
09:16:00,536 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCFILE] - Setting discardingThreshold to 51
09:16:00,536 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.classic.AsyncAppender]
09:16:00,537 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [ASYNCSTDOUT]
09:16:00,537 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [STDOUT] to ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT]
09:16:00,537 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT] - Attaching appender named [STDOUT] to AsyncAppender.
09:16:00,537 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT] - Setting discardingThreshold to 51
09:16:00,537 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.zaxxer.hikari] to ERROR
09:16:00,538 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [org.http4s.server.blaze] to ERROR
09:16:00,538 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.yahoo.maha.core.query] to ERROR
09:16:00,538 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.yahoo.maha.executor.druid.filters] to DEBUG
09:16:00,538 |-INFO in ch.qos.logback.classic.joran.action.RootLoggerAction - Setting level of ROOT logger to INFO
09:16:00,538 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [ASYNCFILE] to Logger[ROOT]
09:16:00,538 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [ASYNCSTDOUT] to Logger[ROOT]
09:16:00,538 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration.
09:16:00,539 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@b83a9be - Registering current configuration as safe fallback point

09:16:00.877 INFO  [ScalaTest-main-running-DiscoverySuite] o.h.b.c.n.NIO1SocketServerGroup - Service bound to address /127.0.0.1:5544
09:16:00.883 INFO  [ScalaTest-main-running-DiscoverySuite] c.y.m.e.d.HttpUtilsTest - Started blaze server
- Successful ResultSet conversion
09:16:01.433 DEBUG [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:01.561 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51515 accepted at Tue Nov 10 09:16:01 PST 2020.
- successful POST call test
09:16:02.328 DEBUG [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:02.333 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51516 accepted at Tue Nov 10 09:16:02 PST 2020.
- successful POST call test with Payload
09:16:02.348 DEBUG [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:02.350 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51517 accepted at Tue Nov 10 09:16:02 PST 2020.
- successful GET call test
09:16:02.362 DEBUG [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:02.364 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51518 accepted at Tue Nov 10 09:16:02 PST 2020.
- Invalid url call test
09:16:02.379 DEBUG [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:02.381 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51519 accepted at Tue Nov 10 09:16:02 PST 2020.
- GET call test with headers
- Unsupported HTTP method
09:16:02.394 DEBUG [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:02.396 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51520 accepted at Tue Nov 10 09:16:02 PST 2020.
09:16:02.407 ERROR [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.HttpUtils - Got 500 response, retrying, retry count=1 : fail first try!
09:16:02.909 DEBUG [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
- successfully retry on 500
09:16:02.918 DEBUG [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:02.921 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51521 accepted at Tue Nov 10 09:16:02 PST 2020.
09:16:02.925 ERROR [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.HttpUtils - Got 500 response, retrying, retry count=1 : always fail!
09:16:03.427 DEBUG [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:03.432 ERROR [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.HttpUtils - Got 500 response, retrying, retry count=2 : always fail!
09:16:03.933 DEBUG [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:03.937 ERROR [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.HttpUtils - Got 500 response, retrying, retry count=3 : always fail!
09:16:04.441 DEBUG [ScalaTest-main-running-HttpUtilsTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
- exhaust max retry on 500
09:16:04.456 INFO  [ScalaTest-main-running-DiscoverySuite] c.y.m.e.d.HttpUtilsTest - Stopping blaze server
09:16:04.464 INFO  [ScalaTest-main-running-DiscoverySuite] o.h.b.c.n.NIO1SocketServerGroup - Service bound to address /127.0.0.1:6667
DruidQueryExecutorTest:
09:16:05.973 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:16:05.979 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:16:05.983 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:16:05.983 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:16:05.983 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:16:06.402 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"timeseries","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"descending":false,"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":"DAY","aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limit":2147483647,"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"630767b2-9661-44fd-9567-2bcbc3c532ef"}}
09:16:06.403 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:06.405 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:06.408 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51522 accepted at Tue Nov 10 09:16:06 PST 2020.
09:16:06.415 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp": "2012-01-01T00:00:00.000Z",
    "result": { "Impressions": 15 }
  },
  {
   "timestamp": "2012-01-02T00:00:00.000Z",
   "result": { "Impressions": 16 }
  },
  {
    "timestamp": "2012-01-03T00:00:00.000Z",
    "result": { "Impressions": 17 }
  }
]
09:16:06.416 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=20
09:16:06.417 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Timeseries rows.size=3
09:16:06.426 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=3
- success case for TimeSeries query
09:16:06.451 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:16:06.451 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:16:06.452 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:16:06.452 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:16:06.452 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:16:06.458 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"timeseries","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"descending":false,"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":"DAY","aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limit":2147483647,"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"873d1f32-5f16-4395-aead-86d203ddc420"}}
09:16:06.458 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:06.458 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:06.460 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51523 accepted at Tue Nov 10 09:16:06 PST 2020.
09:16:06.464 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp": "2012-01-01T00:00:00.000Z",
    "result": { "Impressions": 15, "Intentions": 55 }
  },
  {
   "timestamp": "2012-01-02T00:00:00.000Z",
   "result": { "Impressions": 16 }
  },
  {
    "timestamp": "2012-01-03T00:00:00.000Z",
    "result": { "Impressions": 17 }
  }
]
09:16:06.464 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=20
09:16:06.465 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Timeseries rows.size=3
09:16:06.466 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Intentions : JInt(55)
09:16:06.468 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=3
- success case for TimeSeries query with debugging
09:16:06.478 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:16:06.478 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:16:06.479 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:16:06.479 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:16:06.479 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:16:06.485 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"timeseries","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"descending":false,"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":"DAY","aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limit":2147483647,"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"e27c8763-4122-4e22-9000-3a9963f8cb22"}}
09:16:06.486 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:06.486 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:06.489 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51524 accepted at Tue Nov 10 09:16:06 PST 2020.
09:16:06.493 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp": "2012-01-01T00:00:00.000Z",
    "result": { "Impressions": 15 },
    "unsupported":"field"
  }
]
09:16:06.493 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=20
09:16:06.494 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Timeseries rows.size=1
09:16:06.495 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - unhandled field : (unsupported,JString(field))
09:16:06.498 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in timeseries json response : (unsupported,JString(field))
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$7(DruidQueryExecutor.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$7$adapted(DruidQueryExecutor.scala:187)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$6(DruidQueryExecutor.scala:187)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$6$adapted(DruidQueryExecutor.scala:184)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:184)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
09:16:06.535 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"timeseries","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"descending":false,"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":"DAY","aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limit":2147483647,"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"e27c8763-4122-4e22-9000-3a9963f8cb22"}}
09:16:06.535 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:06.535 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:06.538 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51525 accepted at Tue Nov 10 09:16:06 PST 2020.
09:16:06.542 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp": "2012-01-01T00:00:00.000Z",
    "result": "unsupported"
  }
]
09:16:06.542 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=20
09:16:06.543 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Timeseries rows.size=1
09:16:06.543 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in timeseries json response : JString(unsupported)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$7(DruidQueryExecutor.scala:207)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$7$adapted(DruidQueryExecutor.scala:187)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$6(DruidQueryExecutor.scala:187)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$6$adapted(DruidQueryExecutor.scala:184)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:184)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
09:16:06.563 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"timeseries","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"descending":false,"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":"DAY","aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limit":2147483647,"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"e27c8763-4122-4e22-9000-3a9963f8cb22"}}
09:16:06.563 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:06.563 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:06.566 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51526 accepted at Tue Nov 10 09:16:06 PST 2020.
09:16:06.573 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response ["unsupported"]
09:16:06.573 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=20
09:16:06.574 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Timeseries rows.size=1
09:16:06.574 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in timeseries json response : JString(unsupported)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$6(DruidQueryExecutor.scala:215)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$6$adapted(DruidQueryExecutor.scala:184)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:184)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$15(DruidQueryExecutorTest.scala:582)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$15$adapted(DruidQueryExecutorTest.scala:580)
09:16:06.595 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"timeseries","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"descending":false,"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":"DAY","aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limit":2147483647,"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"e27c8763-4122-4e22-9000-3a9963f8cb22"}}
09:16:06.595 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:06.596 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:06.599 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51527 accepted at Tue Nov 10 09:16:06 PST 2020.
09:16:06.603 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response {}
09:16:06.603 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=20
09:16:06.604 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in timeseries json response : JObject(List())
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:217)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$15(DruidQueryExecutorTest.scala:582)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$15$adapted(DruidQueryExecutorTest.scala:580)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.withDruidQueryExecutor(DruidQueryExecutorTest.scala:429)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$14(DruidQueryExecutorTest.scala:580)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$14$adapted(DruidQueryExecutorTest.scala:578)
- Test TimeSeries query with response with missing result field
09:16:06.641 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:16:06.641 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:16:06.641 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:16:06.641 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:16:06.641 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:16:06.674 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":2,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"27300636-d10e-4f81-900c-2150aa81686f"},"descending":false}
09:16:06.675 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:06.675 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:06.678 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51528 accepted at Tue Nov 10 09:16:06 PST 2020.
09:16:06.682 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [{
	"timestamp": "2013-08-31T00:00:00.000Z",
	"result": [{
		"Keyword ID": 14,
		"Impressions": 10669
	},{
		"Keyword ID": 13,
		"Impressions": 106
	}]
}]
09:16:06.682 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:06.683 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - TopN rows.size=1
09:16:06.685 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - results size=2
09:16:06.686 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
- success case for TopN query
09:16:06.706 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:16:06.706 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:16:06.707 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:16:06.707 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:16:06.707 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:16:06.712 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":2,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"a30823b1-1458-498f-8b83-4bf24c64e440"},"descending":false}
09:16:06.712 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:06.716 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:06.719 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51529 accepted at Tue Nov 10 09:16:06 PST 2020.
09:16:06.723 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [{
	"timestamp": "2013-08-31T00:00:00.000Z",
	"result": [{
		"Keyword ID": 14,
    "Keyword Value":1,
		"Impressions": 10669
	},{
		"Keyword ID": 13,
		"Impressions": 106,
    "Keyword Value":30
	}],
 "unsupported": "field"
}]
09:16:06.723 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:06.724 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - TopN rows.size=1
09:16:06.724 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - results size=2
09:16:06.725 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(1)
09:16:06.725 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(30)
09:16:06.726 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - unhandled field : (unsupported,JString(field))
09:16:06.726 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in TopNDruidQuery json response : (unsupported,JString(field))
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$12(DruidQueryExecutor.scala:249)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$12$adapted(DruidQueryExecutor.scala:229)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$11(DruidQueryExecutor.scala:229)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$11$adapted(DruidQueryExecutor.scala:227)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:227)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
09:16:06.741 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":2,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"a30823b1-1458-498f-8b83-4bf24c64e440"},"descending":false}
09:16:06.741 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:06.741 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:06.745 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51530 accepted at Tue Nov 10 09:16:06 PST 2020.
09:16:06.748 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [{
	"timestamp": "2013-08-31T00:00:00.000Z",
	"result": ["unsupported"]
}]
09:16:06.748 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:06.749 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - TopN rows.size=1
09:16:06.749 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - results size=1
09:16:06.749 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in TopNDruidQuery json response : JString(unsupported)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$14(DruidQueryExecutor.scala:241)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$14$adapted(DruidQueryExecutor.scala:237)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$12(DruidQueryExecutor.scala:237)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$12$adapted(DruidQueryExecutor.scala:229)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$11(DruidQueryExecutor.scala:229)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$11$adapted(DruidQueryExecutor.scala:227)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:227)
09:16:06.766 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":2,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"a30823b1-1458-498f-8b83-4bf24c64e440"},"descending":false}
09:16:06.766 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:06.766 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:06.770 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51531 accepted at Tue Nov 10 09:16:06 PST 2020.
09:16:06.773 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [{
	"timestamp": "2013-08-31T00:00:00.000Z",
	"result": "unsupported"
}]
09:16:06.773 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:06.773 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - TopN rows.size=1
09:16:06.774 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in TopNDruidQuery json response : JString(unsupported)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$12(DruidQueryExecutor.scala:243)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$12$adapted(DruidQueryExecutor.scala:229)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$11(DruidQueryExecutor.scala:229)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$11$adapted(DruidQueryExecutor.scala:227)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:227)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
09:16:06.790 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":2,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"a30823b1-1458-498f-8b83-4bf24c64e440"},"descending":false}
09:16:06.790 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:06.791 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:06.794 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51532 accepted at Tue Nov 10 09:16:06 PST 2020.
09:16:06.798 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response ["unsupported"]
09:16:06.798 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:06.798 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - TopN rows.size=1
09:16:06.799 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in TopNDruidQuery json response : JString(unsupported)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$11(DruidQueryExecutor.scala:251)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$11$adapted(DruidQueryExecutor.scala:227)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:227)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$24(DruidQueryExecutorTest.scala:671)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$24$adapted(DruidQueryExecutorTest.scala:669)
09:16:06.814 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":2,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"a30823b1-1458-498f-8b83-4bf24c64e440"},"descending":false}
09:16:06.814 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:06.814 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:06.818 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51533 accepted at Tue Nov 10 09:16:06 PST 2020.
09:16:06.821 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response {}
09:16:06.821 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:06.822 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in TopNDruidQuery json response : JObject(List())
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:253)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$24(DruidQueryExecutorTest.scala:671)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$24$adapted(DruidQueryExecutorTest.scala:669)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.withDruidQueryExecutor(DruidQueryExecutorTest.scala:429)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$23(DruidQueryExecutorTest.scala:669)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$23$adapted(DruidQueryExecutorTest.scala:667)
- TopN query with unhandled field
09:16:06.837 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:16:06.837 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:16:06.838 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:16:06.838 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:16:06.838 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:16:06.844 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":2,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"c4aecf6f-41cf-491e-b6ff-22d098e22236"},"descending":false}
09:16:06.844 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:06.845 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:06.848 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51534 accepted at Tue Nov 10 09:16:06 PST 2020.
09:16:06.851 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp": "2012-01-01T00:00:00.000Z",
    "result": { "Impressions": 15 }
  },
  {
   "timestamp": "2012-01-02T00:00:00.000Z",
   "result": { "Impressions": 16 }
  },
  {
    "timestamp": "2012-01-03T00:00:00.000Z",
    "result": { "Impressions": 17 }
  }
]
09:16:06.851 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:06.852 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - TopN rows.size=3
09:16:06.852 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in TopNDruidQuery json response : JObject(List((Impressions,JInt(15))))
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$12(DruidQueryExecutor.scala:243)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$12$adapted(DruidQueryExecutor.scala:229)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$11(DruidQueryExecutor.scala:229)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$11$adapted(DruidQueryExecutor.scala:227)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:227)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
- TopN query with invalid response
09:16:06.867 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:16:06.868 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:16:06.868 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:16:06.868 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:16:06.868 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:16:06.873 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":120,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"7a610154-b26e-412a-b861-a1b25bbfe576"},"descending":false}
09:16:06.873 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:06.875 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:06.879 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51535 accepted at Tue Nov 10 09:16:06 PST 2020.
09:16:06.884 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response Not found
09:16:06.884 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.IllegalArgumentException: requirement failed: received status code from druid is 404 instead of 200 : Not found
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:161)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$28(DruidQueryExecutorTest.scala:751)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$28$adapted(DruidQueryExecutorTest.scala:749)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.withDruidQueryExecutor(DruidQueryExecutorTest.scala:429)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$27(DruidQueryExecutorTest.scala:749)
- Test Response code other than 200
09:16:06.915 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-advertiser filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:16:06.915 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:16:06.915 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:16:07.114 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"},{"type":"extraction","dimension":"advertiser_id","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"advertiser_lookup","retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true,"valueColumn":"status","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"longSum","name":"Conversions","fieldName":"conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"6042cdc0-8820-4142-9fdb-8af1df6a40d0"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"granularity":"DAY","dimensions":[{"type":"default","dimension":"Pricing Type","outputName":"Pricing Type","outputType":"STRING"},{"type":"default","dimension":"Day","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"Keyword ID","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"},{"type":"extraction","dimension":"Advertiser Status","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"ON":"ON"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"Impressions"},{"type":"longSum","name":"Conversions","fieldName":"Conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"Max Bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"Min Bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"6042cdc0-8820-4142-9fdb-8af1df6a40d0"},"descending":false}
09:16:07.115 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:07.117 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:07.124 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51536 accepted at Tue Nov 10 09:16:07 PST 2020.
09:16:07.127 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
      "Pricing Type" : 11,
      "Keyword ID": "10",
      "Average Bid": 9,
     "Max Bid": 163,
     "Impressions":175,
     "Conversions":15.0,
     "Min Bid":184,
     "Keyword Value": 419,
     "Average Position":205,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "0",
     "Impression Share": 0.4567
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
    "Pricing Type" : 13,
     "Keyword ID": "14",
     "Average Bid": 15,
     "Max Bid": 16,
     "Impressions":17,
     "Conversions":2.3,
     "Min Bid":18,
     "Keyword Value": 19,
     "Average Position":20,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "1",
     "Impression Share": 0.0123
    }
  }
  ]
09:16:07.127 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:07.130 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:16:07.145 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(419)
09:16:07.148 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(19)
09:16:07.149 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
- success case for groupby query execution
09:16:07.158 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-advertiser filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:16:07.159 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:16:07.159 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:16:07.168 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"},{"type":"extraction","dimension":"advertiser_id","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"advertiser_lookup","retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true,"valueColumn":"status","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"longSum","name":"Conversions","fieldName":"conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"43d35652-6b4c-4a2c-8af4-36e97a49d6f5"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"granularity":"DAY","dimensions":[{"type":"default","dimension":"Pricing Type","outputName":"Pricing Type","outputType":"STRING"},{"type":"default","dimension":"Day","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"Keyword ID","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"},{"type":"extraction","dimension":"Advertiser Status","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"ON":"ON"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"Impressions"},{"type":"longSum","name":"Conversions","fieldName":"Conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"Max Bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"Min Bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"43d35652-6b4c-4a2c-8af4-36e97a49d6f5"},"descending":false}
09:16:07.168 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:07.169 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:07.176 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51537 accepted at Tue Nov 10 09:16:07 PST 2020.
09:16:07.179 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "unsupported" : "field",
    "event" : {
      "Pricing Type" : 11,
      "Keyword ID": "10",
      "Average Bid": 9,
     "Max Bid": 163,
     "Impressions":175,
     "Conversions":15.0,
     "Min Bid":184,
     "Keyword Value": 419,
     "Average Position":205,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "0",
     "Impression Share": 0.4567
    }
  }
  ]
09:16:07.180 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:07.180 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=1
09:16:07.181 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - unhandled field : (unsupported,JString(field))
09:16:07.181 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in GroupByDruidQuery json response : (unsupported,JString(field))
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$18(DruidQueryExecutor.scala:286)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$18$adapted(DruidQueryExecutor.scala:274)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$17(DruidQueryExecutor.scala:274)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$17$adapted(DruidQueryExecutor.scala:271)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:271)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
09:16:07.204 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"},{"type":"extraction","dimension":"advertiser_id","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"advertiser_lookup","retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true,"valueColumn":"status","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"longSum","name":"Conversions","fieldName":"conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"43d35652-6b4c-4a2c-8af4-36e97a49d6f5"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"granularity":"DAY","dimensions":[{"type":"default","dimension":"Pricing Type","outputName":"Pricing Type","outputType":"STRING"},{"type":"default","dimension":"Day","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"Keyword ID","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"},{"type":"extraction","dimension":"Advertiser Status","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"ON":"ON"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"Impressions"},{"type":"longSum","name":"Conversions","fieldName":"Conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"Max Bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"Min Bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"43d35652-6b4c-4a2c-8af4-36e97a49d6f5"},"descending":false}
09:16:07.204 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:07.206 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:07.222 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51538 accepted at Tue Nov 10 09:16:07 PST 2020.
09:16:07.225 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : "unsupported"
  }
  ]
09:16:07.225 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:07.225 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=1
09:16:07.226 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in GroupByDruidQuery json response : JString(unsupported)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$18(DruidQueryExecutor.scala:280)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$18$adapted(DruidQueryExecutor.scala:274)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$17(DruidQueryExecutor.scala:274)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$17$adapted(DruidQueryExecutor.scala:271)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:271)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
09:16:07.239 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"},{"type":"extraction","dimension":"advertiser_id","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"advertiser_lookup","retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true,"valueColumn":"status","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"longSum","name":"Conversions","fieldName":"conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"43d35652-6b4c-4a2c-8af4-36e97a49d6f5"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"granularity":"DAY","dimensions":[{"type":"default","dimension":"Pricing Type","outputName":"Pricing Type","outputType":"STRING"},{"type":"default","dimension":"Day","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"Keyword ID","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"},{"type":"extraction","dimension":"Advertiser Status","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"ON":"ON"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"Impressions"},{"type":"longSum","name":"Conversions","fieldName":"Conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"Max Bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"Min Bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"43d35652-6b4c-4a2c-8af4-36e97a49d6f5"},"descending":false}
09:16:07.240 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:07.243 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:07.247 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51539 accepted at Tue Nov 10 09:16:07 PST 2020.
09:16:07.250 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response ["unsupported"]
09:16:07.250 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:07.251 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=1
09:16:07.251 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in GroupByDruidQuery json response : JString(unsupported)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$17(DruidQueryExecutor.scala:288)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$17$adapted(DruidQueryExecutor.scala:271)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:271)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$37(DruidQueryExecutorTest.scala:875)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$37$adapted(DruidQueryExecutorTest.scala:873)
09:16:07.265 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"},{"type":"extraction","dimension":"advertiser_id","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"advertiser_lookup","retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true,"valueColumn":"status","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"longSum","name":"Conversions","fieldName":"conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"43d35652-6b4c-4a2c-8af4-36e97a49d6f5"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"granularity":"DAY","dimensions":[{"type":"default","dimension":"Pricing Type","outputName":"Pricing Type","outputType":"STRING"},{"type":"default","dimension":"Day","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"Keyword ID","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"},{"type":"extraction","dimension":"Advertiser Status","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"ON":"ON"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"Impressions"},{"type":"longSum","name":"Conversions","fieldName":"Conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"Max Bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"Min Bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"43d35652-6b4c-4a2c-8af4-36e97a49d6f5"},"descending":false}
09:16:07.265 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:07.266 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:07.275 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51540 accepted at Tue Nov 10 09:16:07 PST 2020.
09:16:07.279 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response {}
09:16:07.279 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:07.282 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in GroupByDruidQuery json response : JObject(List())
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:290)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$37(DruidQueryExecutorTest.scala:875)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$37$adapted(DruidQueryExecutorTest.scala:873)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.withDruidQueryExecutor(DruidQueryExecutorTest.scala:429)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$36(DruidQueryExecutorTest.scala:873)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$36$adapted(DruidQueryExecutorTest.scala:871)
- fail to execute groupby query type with unhandled json
09:16:07.300 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-advertiser filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:16:07.300 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:16:07.300 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:16:07.311 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"},{"type":"extraction","dimension":"advertiser_id","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"advertiser_lookup","retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true,"valueColumn":"status","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"longSum","name":"Conversions","fieldName":"conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"7f58f46b-b4a1-479c-acb6-e56f6c985f6c"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"granularity":"DAY","dimensions":[{"type":"default","dimension":"Pricing Type","outputName":"Pricing Type","outputType":"STRING"},{"type":"default","dimension":"Day","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"Keyword ID","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"},{"type":"extraction","dimension":"Advertiser Status","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"ON":"ON"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"Impressions"},{"type":"longSum","name":"Conversions","fieldName":"Conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"Max Bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"Min Bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"7f58f46b-b4a1-479c-acb6-e56f6c985f6c"},"descending":false}
09:16:07.311 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:07.312 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:07.318 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51541 accepted at Tue Nov 10 09:16:07 PST 2020.
09:16:07.322 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
      "Pricing Type" : 11,
      "Keyword ID": "10",
      "Average Bid": 9,
     "Max Bid": 163,
     "Impressions":175,
     "Conversions":15.0,
     "Min Bid":184,
     "Keyword Value": 419,
     "Average Position":205,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "0",
     "Impression Share": 0.4567
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
    "Pricing Type" : 13,
     "Keyword ID": "14",
     "Average Bid": 15,
     "Max Bid": 16,
     "Impressions":17,
     "Conversions":2.3,
     "Min Bid":18,
     "Keyword Value": 19,
     "Average Position":20,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "1",
     "Impression Share": 0.0123
    }
  }
  ]
09:16:07.322 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:07.324 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:16:07.325 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(419)
09:16:07.327 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(19)
09:16:07.327 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:16:07.328 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.IllegalArgumentException: requirement failed: Non paginated query fails rowsCount < maxRows, partial result possible : rowsCount=2 maxRows=2
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:362)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$39(DruidQueryExecutorTest.scala:927)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$39$adapted(DruidQueryExecutorTest.scala:925)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.withDruidQueryExecutor(DruidQueryExecutorTest.scala:429)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$38(DruidQueryExecutorTest.scala:925)
- failure case for query execution when non paginated query returns max rows
09:16:07.344 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-advertiser filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:16:07.344 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:16:07.344 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:16:07.344 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:16:07.344 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
ESAPI: WARNING: System property [org.owasp.esapi.opsteam] is not set
ESAPI: WARNING: System property [org.owasp.esapi.devteam] is not set
ESAPI: Attempting to load ESAPI.properties via file I/O.
ESAPI: Attempting to load ESAPI.properties as resource file via file I/O.
ESAPI: Not found in 'org.owasp.esapi.resources' directory or file not readable: /Users/lgadde/git/Native-Ads/maha/druid/ESAPI.properties
ESAPI: Not found in SystemResource Directory/resourceDirectory: .esapi/ESAPI.properties
ESAPI: Not found in 'user.home' (/Users/lgadde) directory: /Users/lgadde/esapi/ESAPI.properties
ESAPI: Loading ESAPI.properties via file I/O failed. Exception was: java.io.FileNotFoundException
ESAPI: Attempting to load ESAPI.properties via the classpath.
ESAPI: SUCCESSFULLY LOADED ESAPI.properties via the CLASSPATH from '/ (root)' using current thread context class loader!
ESAPI: SecurityConfiguration for Validator.ConfigurationFile.MultiValued not found in ESAPI.properties. Using default: false
ESAPI: Attempting to load validation.properties via file I/O.
ESAPI: Attempting to load validation.properties as resource file via file I/O.
ESAPI: Not found in 'org.owasp.esapi.resources' directory or file not readable: /Users/lgadde/git/Native-Ads/maha/druid/validation.properties
ESAPI: Not found in SystemResource Directory/resourceDirectory: .esapi/validation.properties
ESAPI: Not found in 'user.home' (/Users/lgadde) directory: /Users/lgadde/esapi/validation.properties
ESAPI: Loading validation.properties via file I/O failed.
ESAPI: Attempting to load validation.properties via the classpath.
ESAPI: SUCCESSFULLY LOADED validation.properties via the CLASSPATH from '/ (root)' using current thread context class loader!
09:16:07.441 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"extraction","dimension":"advertiser_id","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"advertiser_lookup","retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true,"valueColumn":"status","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"fc8561ae-361a-4cad-a93f-85019063adb2"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"granularity":"DAY","dimensions":[{"type":"default","dimension":"Keyword ID","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"Day","outputName":"Day","outputType":"STRING"},{"type":"extraction","dimension":"Advertiser Status","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"ON":"ON"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"Impressions"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"fc8561ae-361a-4cad-a93f-85019063adb2"},"descending":false}
09:16:07.441 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:07.442 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:07.447 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51542 accepted at Tue Nov 10 09:16:07 PST 2020.
09:16:07.450 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
      "Pricing Type" : 11,
      "Keyword ID": "10",
      "Average Bid": 9,
     "Max Bid": 163,
     "Impressions":175,
     "Conversions":15.0,
     "Min Bid":184,
     "Keyword Value": 419,
     "Average Position":205,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "0",
     "Impression Share": 0.4567
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
    "Pricing Type" : 13,
     "Keyword ID": "14",
     "Average Bid": 15,
     "Max Bid": 16,
     "Impressions":17,
     "Conversions":2.3,
     "Min Bid":18,
     "Keyword Value": 19,
     "Average Position":20,
     "Day":"20120101",
     "Advertiser Status": "MAHA_LOOKUP_EMPTY",
     "show_sov_flag": "1",
     "Impression Share": 0.0123
    }
  }
  ]
09:16:07.450 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:07.451 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:16:07.452 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Pricing Type : JInt(11)
09:16:07.452 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Max Bid : JInt(163)
09:16:07.452 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Conversions : JDouble(15.0)
09:16:07.452 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Min Bid : JInt(184)
09:16:07.452 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(419)
09:16:07.452 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Average Position : JInt(205)
09:16:07.453 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Impression Share : JDouble(0.4567)
09:16:07.453 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Pricing Type : JInt(13)
09:16:07.453 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Max Bid : JInt(16)
09:16:07.453 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Conversions : JDouble(2.3)
09:16:07.453 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Min Bid : JInt(18)
09:16:07.454 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(19)
09:16:07.454 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Average Position : JInt(20)
09:16:07.454 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.IllegalStateException: MAHA_LOOKUP_EMPTY
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseHelper$1(DruidQueryExecutor.scala:84)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseHelper$1$adapted(DruidQueryExecutor.scala:80)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseHelper(DruidQueryExecutor.scala:80)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$processResult$4(DruidQueryExecutor.scala:128)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$processResult$4$adapted(DruidQueryExecutor.scala:122)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.processResult(DruidQueryExecutor.scala:122)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$18(DruidQueryExecutor.scala:279)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$18$adapted(DruidQueryExecutor.scala:274)
09:16:07.456 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.q.QueryPipelineWithFallback - Primary query chain failed, recovering with fall back
java.lang.RuntimeException: query execution failed : MAHA_LOOKUP_EMPTY
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:20)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.$anonfun$execute$1(QueryPipeline.scala:127)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.QueryPipelineWithFallback.execute(QueryPipeline.scala:126)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$41(DruidQueryExecutorTest.scala:1014)
Caused by: java.lang.IllegalStateException: MAHA_LOOKUP_EMPTY
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseHelper$1(DruidQueryExecutor.scala:84)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseHelper$1$adapted(DruidQueryExecutor.scala:80)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseHelper(DruidQueryExecutor.scala:80)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$processResult$4(DruidQueryExecutor.scala:128)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$processResult$4$adapted(DruidQueryExecutor.scala:122)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.processResult(DruidQueryExecutor.scala:122)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$18(DruidQueryExecutor.scala:279)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$18$adapted(DruidQueryExecutor.scala:274)
- test fallback to oracle when druid fails with empty lookup value
09:16:07.467 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5430,false,false))) : None
09:16:07.467 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:16:07.467 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:16:07.474 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5430"}]},"granularity":"DAY","dimensions":[{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"},{"type":"extraction","dimension":"device_id","outputName":"Device Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"1":"'Desktop'"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"'SmartPhone'","injective":false,"optimize":true}},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"}],"aggregations":[{"type":"doubleSum","name":"Spend","fieldName":"spend"},{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"doubleSum","name":"weighted_bid_modifier","fieldName":"weighted_bid_modifier"},{"type":"longSum","name":"bid_mod_impressions","fieldName":"bid_mod_impressions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"}],"postAggregations":[{"type":"arithmetic","name":"Bid Modifier","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_modifier","fieldName":"weighted_bid_modifier"},{"type":"fieldAccess","name":"bid_mod_impressions","fieldName":"bid_mod_impressions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Modified Bid","fn":"*","fields":[{"type":"fieldAccess","name":"Bid Modifier","fieldName":"Bid Modifier"},{"type":"fieldAccess","name":"Average Bid","fieldName":"Average Bid"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"39fef87b-7947-4f0b-84ad-4ebd4b7988dd"},"descending":false}
09:16:07.474 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:07.475 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:07.479 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51543 accepted at Tue Nov 10 09:16:07 PST 2020.
09:16:07.484 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
    {
        "version": "v1",
        "timestamp": "2017-08-07T00:00:00.000Z",
        "event": {
            "weighted_bid_usd": 878831.4919335842,
            "Impressions": 2884485,
            "Bid Mod": 8.999999637413556,
            "weighted_bid_modifier": 74464998,
            "Device Type": "'Desktop'",
            "Modified Bid": 2.742078086296123,
            "Advertiser ID": "5430",
            "bid_mod_impressions": 8273889,
            "Average Bid": 0.3046753551963641,
            "Spend": 5793.1630783081055,
            "Bid Modifier": 8.999999637413556,
            "Day": "20170807"
        }
    },
    {
        "version": "v1",
        "timestamp": "2017-08-07T00:00:00.000Z",
        "event": {
            "weighted_bid_usd": 811215.2593688965,
            "Impressions": 2701909,
            "Bid Mod": 8.997264297550355,
            "weighted_bid_modifier": 71617594,
            "Device Type": "'Desktop'",
            "Modified Bid": 2.7013189899244656,
            "Advertiser ID": "5430",
            "bid_mod_impressions": 7959930,
            "Average Bid": 0.30023781680615313,
            "Spend": 5237.020672619343,
            "Bid Modifier": 8.997264297550355,
            "Day": "20170808"
        }
    },
    {
        "version": "v1",
        "timestamp": "2017-08-07T00:00:00.000Z",
        "event": {
            "weighted_bid_usd": 681.9299856424332,
            "Impressions": 2250,
            "Bid Mod": 0,
            "weighted_bid_modifier": 0,
            "Device Type": "'SmartPhone'",
            "Modified Bid": 0,
            "Advertiser ID": "5430",
            "bid_mod_impressions": 0,
            "Average Bid": 0.3030799936188592,
            "Spend": 1.4580000340938568,
            "Bid Modifier": 0,
            "Day": "20170807"
        }
    },
    {
        "version": "v1",
        "timestamp": "2017-08-07T00:00:00.000Z",
        "event": {
            "weighted_bid_usd": 643.7700130343437,
            "Impressions": 2138,
            "Bid Mod": 0.19999999689559142,
            "weighted_bid_modifier": 23.99999962747097,
            "Device Type": "'SmartPhone'",
            "Modified Bid": 0.06022170281026361,
            "Advertiser ID": "5430",
            "bid_mod_impressions": 120,
            "Average Bid": 0.3011085187251374,
            "Spend": 1.080000039190054,
            "Bid Modifier": 0.19999999689559142,
            "Day": "20170808"
        }
    }
]

09:16:07.484 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:07.485 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=4
09:16:07.485 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : weighted_bid_usd : JDouble(878831.4919335842)
09:16:07.485 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : weighted_bid_modifier : JInt(74464998)
09:16:07.486 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : bid_mod_impressions : JInt(8273889)
09:16:07.486 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : weighted_bid_usd : JDouble(811215.2593688965)
09:16:07.487 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : weighted_bid_modifier : JInt(71617594)
09:16:07.487 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : bid_mod_impressions : JInt(7959930)
09:16:07.487 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
- success case for Bid Modifier and Modified Bid post results
09:16:07.496 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:16:07.497 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:16:07.497 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:16:07.510 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"extraction","dimension":"stats_date","outputName":"Week","outputType":"STRING","extractionFn":{"type":"time","timeFormat":"YYYYMMdd","resultFormat":"YYYY-w","joda":false}},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"longSum","name":"Conversions","fieldName":"conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"9ee11e4e-48da-4b8b-a202-b559c7eecaf7"},"descending":false}
09:16:07.510 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:07.511 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:07.516 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51544 accepted at Tue Nov 10 09:16:07 PST 2020.
09:16:07.522 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
      "Pricing Type" : 11,
      "Keyword ID": "10",
      "Average Bid": 9,
     "Max Bid": 163,
     "Impressions":175,
     "Conversions":15.0,
     "Min Bid":184,
     "Average Position":205,
     "Week":"2017-26",
     "show_sov_flag": "0",
     "Impression Share": 0.4567
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
    "Pricing Type" : 13,
     "Keyword ID": "14",
     "Average Bid": 15,
     "Max Bid": 16,
     "Impressions":17,
     "Conversions":2.3,
     "Min Bid":18,
     "Average Position":20,
     "Week":"2017-28",
     "show_sov_flag": "1",
     "Impression Share": 0.0123
    }
  }
  ]
09:16:07.522 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:07.523 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:16:07.527 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
- success case for groupby query execution with Start of the week field
09:16:07.538 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:16:07.538 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:16:07.538 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:16:07.543 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"extraction","dimension":"stats_date","outputName":"Month","outputType":"STRING","extractionFn":{"type":"time","timeFormat":"YYYYMMdd","resultFormat":"yyyy-MM-01","joda":false}},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"longSum","name":"Conversions","fieldName":"conversions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"a242d89a-bf0a-4428-818b-6eaec365e0bc"},"descending":false}
09:16:07.543 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:07.543 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:07.548 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51545 accepted at Tue Nov 10 09:16:07 PST 2020.
09:16:07.551 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
      "Pricing Type" : 11,
      "Keyword ID": "10",
      "Average Bid": 9,
     "Max Bid": 163,
     "Impressions":175,
     "Conversions":15.0,
     "Min Bid":184,
     "Average Position":205,
     "Month":"2017-06-01",
     "show_sov_flag": "0",
     "Impression Share": 0.4567
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
    "Pricing Type" : 13,
     "Keyword ID": "14",
     "Average Bid": 15,
     "Max Bid": 16,
     "Impressions":17,
     "Conversions":2.3,
     "Min Bid":18,
     "Average Position":20,
     "Month":"2017-07-01",
     "show_sov_flag": "1",
     "Impression Share": 0.0123
    }
  }
  ]
09:16:07.551 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:07.552 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:16:07.554 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
- success case for groupby query execution with Start of the month field
09:16:07.564 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:16:07.564 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:16:07.564 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:16:07.569 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":1},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"bda8bc6e-6182-45af-a7a8-73fa925c0922"},"descending":false}
09:16:07.569 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:07.570 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:07.575 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51546 accepted at Tue Nov 10 09:16:07 PST 2020.
09:16:07.578 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
      "Pricing Type" : 11,
      "Keyword ID": "10",
      "Average Bid": 9,
     "Max Bid": 163,
     "Impressions":175,
     "Conversions":15.0,
     "Min Bid":184,
     "Keyword Value": 419,
     "Average Position":205,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "0",
     "Impression Share": 0.4567
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
    "Pricing Type" : 13,
     "Keyword ID": "14",
     "Average Bid": 15,
     "Max Bid": 16,
     "Impressions":17,
     "Conversions":2.3,
     "Min Bid":18,
     "Keyword Value": 19,
     "Average Position":20,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "1",
     "Impression Share": 0.0123
    }
  }
  ]
09:16:07.578 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:07.580 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:16:07.580 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Conversions : JDouble(15.0)
09:16:07.581 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(419)
09:16:07.581 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Advertiser Status : JString(ON)
09:16:07.581 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Impression Share : JDouble(0.4567)
09:16:07.582 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Conversions : JDouble(2.3)
09:16:07.582 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(19)
09:16:07.582 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Advertiser Status : JString(ON)
09:16:07.582 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Impression Share : JDouble(0.0123)
09:16:07.582 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
- success case for groupby query execution with startIndex < 0
09:16:07.595 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-woeid filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:16:07.595 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:16:07.595 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:16:07.601 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},{"type":"extraction","dimension":"country_woeid","outputName":"Country Name","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"woeid_lookup","retainMissingValue":false,"replaceMissingValueWith":"MAHA_LOOKUP_EMPTY","injective":false,"optimize":true,"valueColumn":"value","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":3},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"02f159a2-3a1e-4403-a856-054df4ebb16a"},"descending":false}
09:16:07.601 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:07.604 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:07.609 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51547 accepted at Tue Nov 10 09:16:07 PST 2020.
09:16:07.613 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
     "Country WOEID" : 1,
     "Country Name" : "US",
     "Pricing Type" : 11,
     "Keyword ID": 1,
     "Average Bid": 9,
     "Max Bid": 163,
     "Impressions":175,
     "Min Bid":184,
     "Keyword Value": 419,
     "Average Position":205,
     "Day":"20160101"
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
     "Country WOEID" : 1,
     "Country Name" : "US",
     "Pricing Type" : 13,
     "Keyword ID": 2,
     "Average Bid": 15,
     "Max Bid": 16,
     "Impressions":17,
     "Min Bid":18,
     "Keyword Value": 19,
     "Average Position":20,
     "Day":"20160101"
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
     "Country WOEID" : 1,
     "Country Name" : "US",
     "Pricing Type" : 13,
     "Keyword ID": 3,
     "Average Bid": 10,
     "Max Bid": 160123456,
     "Impressions":127,
     "Min Bid":18,
     "Keyword Value": 19,
     "Average Position":20.12345,
     "Day":"20160101"
    }
  }
  ]
09:16:07.614 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=1
09:16:07.614 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=3
09:16:07.614 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Country WOEID : JInt(1)
09:16:07.615 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(19)
09:16:07.616 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Country WOEID : JInt(1)
09:16:07.616 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(19)
09:16:07.617 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
- success case for groupby query execution with startIndex = 1
09:16:07.626 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:16:07.626 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:16:07.626 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:16:07.633 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"fc364bf0-4093-4f8f-9e06-5a807c1f0dbb"},"descending":false}
09:16:07.633 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:07.634 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:07.640 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51548 accepted at Tue Nov 10 09:16:07 PST 2020.
09:16:07.643 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [{
	"timestamp": "2013-08-31T00:00:00.000Z",
	"result": [{
		"Keyword ID": 14,
		"Impressions": 10669
	},{
		"Keyword ID": 13,
		"Impressions": 106
	}]
}]
09:16:07.643 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:07.645 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=1
09:16:07.645 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - unhandled field : (result,JArray(List(JObject(List((Keyword ID,JInt(14)), (Impressions,JInt(10669)))), JObject(List((Keyword ID,JInt(13)), (Impressions,JInt(106)))))))
09:16:07.645 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in GroupByDruidQuery json response : (result,JArray(List(JObject(List((Keyword ID,JInt(14)), (Impressions,JInt(10669)))), JObject(List((Keyword ID,JInt(13)), (Impressions,JInt(106)))))))
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$18(DruidQueryExecutor.scala:286)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$18$adapted(DruidQueryExecutor.scala:274)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$17(DruidQueryExecutor.scala:274)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$17$adapted(DruidQueryExecutor.scala:271)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:271)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
- groupby query execution with invalid url
09:16:07.657 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:16:07.657 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:16:07.657 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:16:07.657 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:16:07.657 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:16:07.665 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"timeseries","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"descending":false,"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":"DAY","aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limit":2147483647,"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"7a23401d-ad08-4200-b338-5500f24645f7"}}
09:16:07.665 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:07.667 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:07.672 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51549 accepted at Tue Nov 10 09:16:07 PST 2020.
09:16:07.677 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp": "2012-01-01T00:00:00.000Z",
    "result": { "Impressions": 15 }
  },
  {
   "timestamp": "2012-01-02T00:00:00.000Z",
   "result": { "Impressions": 16 }
  },
  {
    "timestamp": "2012-01-03T00:00:00.000Z",
    "result": { "Impressions": 17 }
  }
]
09:16:07.677 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=20
09:16:07.677 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Timeseries rows.size=3
09:16:07.681 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=3
09:16:07.681 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - rowList.size=3, rowList.updatedSet=1
- success case for Partial TimeSeries query
09:16:07.689 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-keyword filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:16:07.690 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:16:07.690 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:16:07.707 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"a5ce7b27-31a9-4286-abdc-5807161d9fdc"},"descending":false}
09:16:07.707 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:07.708 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:07.713 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51550 accepted at Tue Nov 10 09:16:07 PST 2020.
09:16:07.717 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
      "Pricing Type" : 11,
      "Keyword ID": "10",
      "Average Bid": 9,
     "Max Bid": 163,
     "Impressions":175,
     "Conversions":15.0,
     "Min Bid":184,
     "Keyword Value": 419,
     "Average Position":205,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "0",
     "Impression Share": 0.4567
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
    "Pricing Type" : 13,
     "Keyword ID": "14",
     "Average Bid": 15,
     "Max Bid": 16,
     "Impressions":17,
     "Conversions":2.3,
     "Min Bid":18,
     "Keyword Value": 19,
     "Average Position":20,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "1",
     "Impression Share": 0.0123
    }
  }
  ]
09:16:07.717 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:07.718 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:16:07.719 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Conversions : JDouble(15.0)
09:16:07.720 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(419)
09:16:07.720 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Advertiser Status : JString(ON)
09:16:07.720 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Impression Share : JDouble(0.4567)
09:16:07.722 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Conversions : JDouble(2.3)
09:16:07.722 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(19)
09:16:07.723 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Advertiser Status : JString(ON)
09:16:07.723 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Impression Share : JDouble(0.0123)
09:16:07.723 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:16:07.723 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - rowList.size=2, rowList.updatedSet=0
- success case for partial groupby query execution with no non fk dim filters
09:16:07.760 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-keyword filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false)), Keyword Status -> TreeSet(EqualityFilter(Keyword Status,ON,false,false))) : None
09:16:07.760 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:16:07.760 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:16:07.770 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":4},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"0a9da20f-1ad3-4515-9529-49745561c1ef"},"descending":false}
09:16:07.770 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:07.770 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:07.776 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51551 accepted at Tue Nov 10 09:16:07 PST 2020.
09:16:07.779 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
      "Pricing Type" : 11,
      "Keyword ID": "10",
      "Average Bid": 9,
     "Max Bid": 163,
     "Impressions":175,
     "Conversions":15.0,
     "Min Bid":184,
     "Keyword Value": 419,
     "Average Position":205,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "0",
     "Impression Share": 0.4567
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
    "Pricing Type" : 13,
     "Keyword ID": "14",
     "Average Bid": 15,
     "Max Bid": 16,
     "Impressions":17,
     "Conversions":2.3,
     "Min Bid":18,
     "Keyword Value": 19,
     "Average Position":20,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "1",
     "Impression Share": 0.0123
    }
  }
  ]
09:16:07.779 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:07.781 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:16:07.781 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Conversions : JDouble(15.0)
09:16:07.782 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(419)
09:16:07.782 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Advertiser Status : JString(ON)
09:16:07.782 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Impression Share : JDouble(0.4567)
09:16:07.783 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Conversions : JDouble(2.3)
09:16:07.783 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(19)
09:16:07.783 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Advertiser Status : JString(ON)
09:16:07.785 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Impression Share : JDouble(0.0123)
09:16:07.785 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:16:07.785 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - rowList.size=2, rowList.updatedSet=0
- success case for partial groupby query execution with non fk dim filters
09:16:07.801 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-keyword filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:16:07.801 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:16:07.801 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:16:07.808 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"extraction","dimension":"price_type","outputName":"Pricing Type","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"-10":"CPE","-20":"CPF","6":"CPV","1":"CPC","2":"CPA","7":"CPCV","3":"CPM"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"NONE","injective":false,"optimize":true}},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"show_sov_flag","outputName":"show_sov_flag","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"},{"type":"doubleMax","name":"Max Bid","fieldName":"max_bid"},{"type":"doubleMin","name":"Min Bid","fieldName":"min_bid"},{"type":"longSum","name":"sov_impresssions","fieldName":"sov_impresssions"},{"type":"doubleSum","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"doubleMax","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"}],"postAggregations":[{"type":"arithmetic","name":"Impression Share","fn":"/","fields":[{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"},{"type":"fieldAccess","name":"sov_impresssions","fieldName":"sov_impresssions"}]},{"type":"arithmetic","name":"Average Bid","fn":"/","fields":[{"type":"fieldAccess","name":"weighted_bid_usd","fieldName":"weighted_bid_usd"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]},{"type":"arithmetic","name":"Average Position","fn":"/","fields":[{"type":"fieldAccess","name":"avg_pos_times_impressions","fieldName":"avg_pos_times_impressions"},{"type":"fieldAccess","name":"impresssions","fieldName":"Impressions"}]}],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":2},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"c2b6a786-fbf3-4ebc-ab8e-a8e409b508fa"},"descending":false}
09:16:07.808 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:07.808 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:07.814 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51552 accepted at Tue Nov 10 09:16:07 PST 2020.
09:16:07.817 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
      "Pricing Type" : 11,
      "Keyword ID": "10",
      "Average Bid": 9,
     "Max Bid": 163,
     "Impressions":175,
     "Conversions":15.0,
     "Min Bid":184,
     "Keyword Value": 419,
     "Average Position":205,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "0",
     "Impression Share": 0.4567
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
    "Pricing Type" : 13,
     "Keyword ID": "14",
     "Average Bid": 15,
     "Max Bid": 16,
     "Impressions":17,
     "Conversions":2.3,
     "Min Bid":18,
     "Keyword Value": 19,
     "Average Position":20,
     "Day":"20120101",
     "Advertiser Status": "ON",
     "show_sov_flag": "1",
     "Impression Share": 0.0123
    }
  }
  ]
09:16:07.817 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:07.819 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:16:07.820 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Conversions : JDouble(15.0)
09:16:07.820 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(419)
09:16:07.820 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Advertiser Status : JString(ON)
09:16:07.822 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Conversions : JDouble(2.3)
09:16:07.822 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(19)
09:16:07.822 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Advertiser Status : JString(ON)
09:16:07.822 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:16:07.822 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - rowList.size=2, rowList.updatedSet=0
- success case for groupby fact driven query execution
09:16:07.833 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:16:07.833 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:16:07.833 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:16:07.833 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:16:07.834 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:16:07.838 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":2,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"969c83fc-0105-493d-8047-d57a46174288"},"descending":false}
09:16:07.838 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:07.839 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:07.844 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51553 accepted at Tue Nov 10 09:16:07 PST 2020.
09:16:07.847 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [{
	"timestamp": "2013-08-31T00:00:00.000Z",
	"result": [{
		"Keyword ID": 14,
		"Impressions": 10669
	},{
		"Keyword ID": 13,
		"Impressions": 106
	}]
}]
09:16:07.847 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:07.847 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - TopN rows.size=1
09:16:07.848 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - results size=2
09:16:07.850 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:16:07.850 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - rowList.size=2, rowList.updatedSet=2
- success case for TopN query with partial result set
09:16:07.856 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:16:07.856 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:16:07.856 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:16:07.856 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:16:07.857 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:16:07.861 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":2,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"6f6a7d3d-6b85-4862-a9b8-aab9da42d5c7"},"descending":false}
09:16:07.861 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:07.861 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:07.867 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51554 accepted at Tue Nov 10 09:16:07 PST 2020.
09:16:07.871 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [{
	"timestamp": "2013-08-31T00:00:00.000Z",
	"result": [{
		"Keyword ID": null,
		"Impressions": 10669
	},{
		"Keyword ID": null,
		"Impressions": 106
	}]
}]
09:16:07.871 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:07.873 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - TopN rows.size=1
09:16:07.873 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - results size=2
09:16:07.873 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Druid has null value : [{
	"timestamp": "2013-08-31T00:00:00.000Z",
	"result": [{
		"Keyword ID": null,
		"Impressions": 10669
	},{
		"Keyword ID": null,
		"Impressions": 106
	}]
}]
09:16:07.874 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.q.DimDrivenIndexedRowList - Index alias (Keyword ID) value is null on addRow, dropping row : Row(Map(Keyword ID -> 0, Impressions -> 1),ArrayBuffer(null, 10669))
09:16:07.874 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Druid has null value : [{
	"timestamp": "2013-08-31T00:00:00.000Z",
	"result": [{
		"Keyword ID": null,
		"Impressions": 10669
	},{
		"Keyword ID": null,
		"Impressions": 106
	}]
}]
09:16:07.874 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.q.DimDrivenIndexedRowList - Index alias (Keyword ID) value is null on addRow, dropping row : Row(Map(Keyword ID -> 0, Impressions -> 1),ArrayBuffer(null, 106))
09:16:07.874 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:16:07.874 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - rowList.size=2, rowList.updatedSet=0
- Handle null values from druid gracefully
09:16:07.881 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-keyword filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:16:07.882 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:16:07.882 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:16:07.882 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:16:07.882 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:16:07.887 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":100,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"83674476-28bf-43da-8716-58ce3385112b"},"descending":false}
09:16:07.887 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:07.887 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:07.893 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51555 accepted at Tue Nov 10 09:16:07 PST 2020.
09:16:07.896 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [{
	"timestamp": "2013-08-31T00:00:00.000Z",
	"result": [{
		"Keyword ID": 14,
		"Impressions": 10669
	},{
		"Keyword ID": 13,
		"Impressions": 106
	}]
}]
09:16:07.896 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:07.896 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - TopN rows.size=1
09:16:07.896 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - results size=2
09:16:07.898 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:16:07.898 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - rowList.size=2, rowList.updatedSet=0
- success case for TopN query with partial result set: MultiEngine
09:16:07.908 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-keyword filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:16:07.908 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:16:07.908 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:16:07.908 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:16:07.908 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:16:07.914 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}},{"dimension":"Keyword ID","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":100},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"cce5b430-2182-4c11-b16f-c87fc17b89c7"},"descending":false}
09:16:07.914 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:07.914 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:07.924 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51556 accepted at Tue Nov 10 09:16:07 PST 2020.
09:16:07.927 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2013-08-31T00:00:00.000Z",
    "event" : {
      "Keyword ID": 14,
     "Impressions":10669
    }
  },
  {
    "timestamp" : "2013-08-31T00:00:00.000Z",
    "event" : {
     "Keyword ID": 13,
     "Impressions":106
    }
  }
  ]
09:16:07.927 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:07.927 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:16:07.930 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:16:07.930 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - rowList.size=2, rowList.updatedSet=0
- success case for TopN query with partial result set: MultiEngine with 2 sorts
09:16:07.938 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:16:07.938 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:16:07.938 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:16:07.938 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:16:07.938 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:16:07.942 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":2,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"156adc17-3c20-4c3e-bcf8-1be5d68f5368"},"descending":false}
09:16:07.942 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:07.942 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:07.947 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51557 accepted at Tue Nov 10 09:16:07 PST 2020.
09:16:07.951 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [{
	"timestamp": "2013-08-31T00:00:00.000Z",
	"result": [{
		"Keyword ID": null,
    "Keyword Value":1,
		"Impressions": 10669
	},{
		"Keyword ID": [{
	"timestamp": "2013-08-31T00:00:00.000Z",
	"result": [{
		"Keyword ID": 14,
    "Keyword Value":1,
		"Impressions": 10669
	},{
		"Keyword ID": 13,
		"Impressions": 106,
    "Keyword Value":30
	}]
}],
		"Impressions": 106,
    "Keyword Value":30
	}]
}]
09:16:07.951 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:07.951 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - TopN rows.size=1
09:16:07.951 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - results size=2
09:16:07.954 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Keyword Value : JInt(1)
09:16:07.954 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: unsupported field type
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.extractField(DruidQueryExecutor.scala:377)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseHelper$1(DruidQueryExecutor.scala:82)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseHelper$1$adapted(DruidQueryExecutor.scala:80)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseHelper(DruidQueryExecutor.scala:80)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$processResult$4(DruidQueryExecutor.scala:128)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$processResult$4$adapted(DruidQueryExecutor.scala:122)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.processResult(DruidQueryExecutor.scala:122)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$14(DruidQueryExecutor.scala:240)
- Invalid field extraction failure
09:16:07.974 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:16:07.974 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:16:07.974 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:16:07.974 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:16:07.974 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:16:07.980 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"topN","dataSource":{"type":"table","name":"fact_s_term"},"virtualColumns":[],"dimension":{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},"metric":{"type":"inverted","metric":{"type":"numeric","metric":"Impressions"}},"threshold":120,"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"5c7e0926-72e6-4822-b733-51c05962bbdc"},"descending":false}
09:16:07.980 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:07.980 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:07.985 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51558 accepted at Tue Nov 10 09:16:07 PST 2020.
09:16:07.990 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response Not found
09:16:07.992 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.IllegalArgumentException: requirement failed: received status code from druid is 404 instead of 200 : Not found
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:161)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$3(DruidQueryExecutor.scala:473)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:443)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$128(DruidQueryExecutorTest.scala:2082)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$128$adapted(DruidQueryExecutorTest.scala:2072)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.withDruidQueryExecutor(DruidQueryExecutorTest.scala:429)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$127(DruidQueryExecutorTest.scala:2072)
- TopN query with partial result set and request code not 200
09:16:08.015 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:16:08.015 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:16:08.015 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:16:08.015 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:16:08.015 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:16:08.022 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"timeseries","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"descending":false,"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":"DAY","aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limit":2147483647,"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"28613d7c-3760-444a-9b63-19a02caa0976"}}
09:16:08.022 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:08.023 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:08.029 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51559 accepted at Tue Nov 10 09:16:08 PST 2020.
09:16:08.033 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp": "2012-01-01T00:00:00.000Z",
    "result": { "Impressions": 15 },
    "unsupported":"field"
  }
]
09:16:08.033 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=20
09:16:08.040 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Timeseries rows.size=1
09:16:08.040 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - unhandled field : (unsupported,JString(field))
09:16:08.041 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in timeseries json response : (unsupported,JString(field))
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$7(DruidQueryExecutor.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$7$adapted(DruidQueryExecutor.scala:187)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$6(DruidQueryExecutor.scala:187)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$6$adapted(DruidQueryExecutor.scala:184)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:184)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$3(DruidQueryExecutor.scala:473)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
- Test TimeSeries query with partial result set with missing result field
- testing extract field
09:16:08.065 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Test Flag -> TreeSet(EqualityFilter(Test Flag,0,true,false)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,12345,false,false))) : None
09:16:08.066 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:16:08.066 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:16:08.087 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"account_stats"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"stats_date","value":"2020-11-312"},{"type":"selector","dimension":"stats_date","value":"2020-11-309"},{"type":"selector","dimension":"stats_date","value":"2020-11-313"},{"type":"selector","dimension":"stats_date","value":"2020-11-310"},{"type":"selector","dimension":"stats_date","value":"2020-11-314"},{"type":"selector","dimension":"stats_date","value":"2020-11-315"},{"type":"selector","dimension":"stats_date","value":"2020-11-311"},{"type":"selector","dimension":"stats_date","value":"2020-11-308"}]},{"type":"selector","dimension":"advertiser_id","value":"12345"},{"type":"selector","dimension":"{test_flag}","value":"0"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impressions"},{"type":"doubleSum","name":"Spend","fieldName":"spend"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[],"limit":200},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"169b78d4-874c-4d92-90ef-72e27b1737b1"},"descending":false}
09:16:08.087 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:08.087 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:08.102 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51560 accepted at Tue Nov 10 09:16:08 PST 2020.
09:16:08.106 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
     "Impressions":100,
     "Spend":15.0,
     "Advertiser ID":184,
     "Day":"2012-01-01"
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
     "Impressions":100,
     "Spend":10.0,
     "Advertiser ID":199,
     "Day":"2012-01-01"
    }
  }
  ]
09:16:08.106 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:08.106 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:16:08.108 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:16:08.110 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"a_adjustments"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"stats_date","value":"2020-11-312"},{"type":"selector","dimension":"stats_date","value":"2020-11-309"},{"type":"selector","dimension":"stats_date","value":"2020-11-313"},{"type":"selector","dimension":"stats_date","value":"2020-11-310"},{"type":"selector","dimension":"stats_date","value":"2020-11-314"},{"type":"selector","dimension":"stats_date","value":"2020-11-315"},{"type":"selector","dimension":"stats_date","value":"2020-11-311"},{"type":"selector","dimension":"stats_date","value":"2020-11-308"}]},{"type":"selector","dimension":"advertiser_id","value":"12345"},{"type":"selector","dimension":"{test_flag}","value":"0"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impressions"},{"type":"doubleSum","name":"Spend","fieldName":"spend"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[],"limit":200},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"1e380282-c006-4705-9538-82f949ad2d30"},"descending":false}
09:16:08.110 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:08.110 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:08.115 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
     "Impressions":100,
     "Spend":15.0,
     "Advertiser ID":184,
     "Day":"2012-01-01"
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
     "Impressions":100,
     "Spend":10.0,
     "Advertiser ID":199,
     "Day":"2012-01-01"
    }
  }
  ]
09:16:08.115 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:08.116 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:16:08.117 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
- Fact View Query Tests Adjustment Stats without Filter
09:16:08.126 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Test Flag -> TreeSet(EqualityFilter(Test Flag,0,true,false)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,12345,false,false))) : None
09:16:08.126 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:16:08.126 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:16:08.136 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"account_stats"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"stats_date","value":"2020-11-312"},{"type":"selector","dimension":"stats_date","value":"2020-11-309"},{"type":"selector","dimension":"stats_date","value":"2020-11-313"},{"type":"selector","dimension":"stats_date","value":"2020-11-310"},{"type":"selector","dimension":"stats_date","value":"2020-11-314"},{"type":"selector","dimension":"stats_date","value":"2020-11-315"},{"type":"selector","dimension":"stats_date","value":"2020-11-311"},{"type":"selector","dimension":"stats_date","value":"2020-11-308"}]},{"type":"selector","dimension":"advertiser_id","value":"12345"},{"type":"selector","dimension":"{test_flag}","value":"0"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impressions"},{"type":"doubleSum","name":"Spend","fieldName":"spend"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[],"limit":200},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"33fec2d4-a4a5-4885-921e-4cd172b49ec2"},"descending":false}
09:16:08.136 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:08.136 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:08.138 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51561 accepted at Tue Nov 10 09:16:08 PST 2020.
09:16:08.142 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
     "Impressions":100,
     "Spend":15.0,
     "Advertiser ID":184,
     "Day":"2012-01-01"
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
     "Impressions":100,
     "Spend":10.0,
     "Advertiser ID":199,
     "Day":"2012-01-01"
    }
  }
  ]
09:16:08.142 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:08.142 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:16:08.143 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:16:08.144 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"a_adjustments"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"stats_date","value":"2020-11-312"},{"type":"selector","dimension":"stats_date","value":"2020-11-309"},{"type":"selector","dimension":"stats_date","value":"2020-11-313"},{"type":"selector","dimension":"stats_date","value":"2020-11-310"},{"type":"selector","dimension":"stats_date","value":"2020-11-314"},{"type":"selector","dimension":"stats_date","value":"2020-11-315"},{"type":"selector","dimension":"stats_date","value":"2020-11-311"},{"type":"selector","dimension":"stats_date","value":"2020-11-308"}]},{"type":"selector","dimension":"advertiser_id","value":"12345"},{"type":"selector","dimension":"{test_flag}","value":"0"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impressions"},{"type":"doubleSum","name":"Spend","fieldName":"spend"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[],"limit":200},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"af2d6314-949f-486a-838e-c35e31bb17df"},"descending":false}
09:16:08.144 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:08.144 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:08.150 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
     "Impressions":100,
     "Spend":15.0,
     "Advertiser ID":184,
     "Day":"2012-01-01"
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
     "Impressions":100,
     "Spend":10.0,
     "Advertiser ID":199,
     "Day":"2012-01-01"
    }
  }
  ]
09:16:08.150 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:08.150 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:16:08.151 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
- Async Fact View Query Tests A Stats Api Side join
09:16:08.167 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:08.168 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51562 accepted at Tue Nov 10 09:16:08 PST 2020.
09:16:08.175 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
- Successfully get the result if result rowCount exceeds maxRowLimit, if allowPartialIfResultExceedsMaxRowLimit is set
09:16:08.189 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Test Flag -> TreeSet(EqualityFilter(Test Flag,0,true,false)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,1035663,false,false)), Is Adjustment -> TreeSet(EqualityFilter(Is Adjustment,Y,false,false))) : None
09:16:08.189 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:16:08.190 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=true
09:16:08.197 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"account_stats"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"stats_date","value":"2020-11-312"},{"type":"selector","dimension":"stats_date","value":"2020-11-309"},{"type":"selector","dimension":"stats_date","value":"2020-11-313"},{"type":"selector","dimension":"stats_date","value":"2020-11-310"},{"type":"selector","dimension":"stats_date","value":"2020-11-314"},{"type":"selector","dimension":"stats_date","value":"2020-11-315"},{"type":"selector","dimension":"stats_date","value":"2020-11-311"},{"type":"selector","dimension":"stats_date","value":"2020-11-308"}]},{"type":"selector","dimension":"advertiser_id","value":"1035663"},{"type":"selector","dimension":"{test_flag}","value":"0"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impressions"},{"type":"doubleSum","name":"Spend","fieldName":"spend"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[],"limit":200},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"80976fdd-46ba-4c95-9223-a93bb5d68f5a"},"descending":false}
09:16:08.197 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:08.197 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:08.198 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51563 accepted at Tue Nov 10 09:16:08 PST 2020.
09:16:08.201 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
     "Impressions":100,
     "Spend":15.0,
     "Advertiser ID":184,
     "Day":"2012-01-01"
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
     "Impressions":100,
     "Spend":10.0,
     "Advertiser ID":199,
     "Day":"2012-01-01"
    }
  }
  ]
09:16:08.201 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:08.202 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:16:08.203 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:16:08.203 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"a_adjustments"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"stats_date","value":"2020-11-312"},{"type":"selector","dimension":"stats_date","value":"2020-11-309"},{"type":"selector","dimension":"stats_date","value":"2020-11-313"},{"type":"selector","dimension":"stats_date","value":"2020-11-310"},{"type":"selector","dimension":"stats_date","value":"2020-11-314"},{"type":"selector","dimension":"stats_date","value":"2020-11-315"},{"type":"selector","dimension":"stats_date","value":"2020-11-311"},{"type":"selector","dimension":"stats_date","value":"2020-11-308"}]},{"type":"selector","dimension":"advertiser_id","value":"1035663"},{"type":"selector","dimension":"{test_flag}","value":"0"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impressions"},{"type":"doubleSum","name":"Spend","fieldName":"spend"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[],"limit":200},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"6edd26a7-57be-4762-a04b-7402446ad487"},"descending":false}
09:16:08.203 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:08.203 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:08.209 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
     "Impressions":100,
     "Spend":15.0,
     "Advertiser ID":184,
     "Day":"2012-01-01"
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
     "Impressions":100,
     "Spend":10.0,
     "Advertiser ID":199,
     "Day":"2012-01-01"
    }
  }
  ]
09:16:08.209 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:08.209 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:16:08.210 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
- Fact View Query Tests Adjustment Stats with constant column filter
09:16:08.217 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey: filters:Map() : None
09:16:08.217 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(800,false,9223372036854775807,false)
09:16:08.217 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(800,false,9223372036854775807,false) costEstimate=800 isGrainOptimized=false isIndexOptimized=false
09:16:08.223 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"dr_wg_stats"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"or","fields":[{"type":"selector","dimension":"stats_date","value":"20201107"},{"type":"selector","dimension":"stats_date","value":"20201104"},{"type":"selector","dimension":"stats_date","value":"20201108"},{"type":"selector","dimension":"stats_date","value":"20201105"},{"type":"selector","dimension":"stats_date","value":"20201109"},{"type":"selector","dimension":"stats_date","value":"20201110"},{"type":"selector","dimension":"stats_date","value":"20201106"},{"type":"selector","dimension":"stats_date","value":"20201103"}]}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"stats_hour","outputName":"Hour","outputType":"STRING"},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"}],"aggregations":[{"type":"doubleSum","name":"Spend Usd","fieldName":"spend_usd"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[{"dimension":"Spend Usd","direction":"descending","dimensionOrder":{"type":"numeric"}}],"limit":1000},"context":{"groupByStrategy":"v2","applyLimitPushDown":"false","priority":-1,"uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":false,"timeout":300000,"queryId":"c83e60ab-a657-4e9b-aa62-dddc122d08f8"},"descending":false}
09:16:08.224 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:08.224 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:08.226 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51564 accepted at Tue Nov 10 09:16:08 PST 2020.
09:16:08.230 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response 
[
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":100702.5269201994,
         "Day":"20170502",
         "Hour":"12"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":100105.47737568617,
         "Day":"20170501",
         "Hour":"10"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":99452.79603540897,
         "Day":"20170502",
         "Hour":"11"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":99278.75371289253,
         "Day":"20170501",
         "Hour":"12"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":97812.48666465282,
         "Day":"20170501",
         "Hour":"11"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":97590.620177567,
         "Day":"20170502",
         "Hour":"10"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":97567.92169524357,
         "Day":"20170501",
         "Hour":"13"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":96825.4939264059,
         "Day":"20170502",
         "Hour":"13"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":94937.976395607,
         "Day":"20170501",
         "Hour":"14"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":93734.20419290662,
         "Day":"20170502",
         "Hour":"15"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":93478.08122582361,
         "Day":"20170502",
         "Hour":"14"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":93372.62983252853,
         "Day":"20170501",
         "Hour":"15"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":92731.11964201927,
         "Day":"20170502",
         "Hour":"16"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":92407.92718720436,
         "Day":"20170502",
         "Hour":"09"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":92231.04085025191,
         "Day":"20170501",
         "Hour":"16"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":91216.1552691944,
         "Day":"20170501",
         "Hour":"09"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":86134.26635608822,
         "Day":"20170501",
         "Hour":"17"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":83792.81063309312,
         "Day":"20170502",
         "Hour":"17"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":81854.47675731778,
         "Day":"20170501",
         "Hour":"08"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":80682.35567551851,
         "Day":"20170502",
         "Hour":"08"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":78679.26031523943,
         "Day":"20170501",
         "Hour":"18"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":78148.13511765003,
         "Day":"20170502",
         "Hour":"18"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":74984.74295082316,
         "Day":"20170502",
         "Hour":"19"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":74374.6146068573,
         "Day":"20170501",
         "Hour":"19"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":70020.28937721252,
         "Day":"20170501",
         "Hour":"20"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":69916.24665260315,
         "Day":"20170502",
         "Hour":"20"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":68890.52107673883,
         "Day":"20170501",
         "Hour":"07"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":67616.82631015778,
         "Day":"20170502",
         "Hour":"07"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":64026.77501773834,
         "Day":"20170501",
         "Hour":"21"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":61437.951813697815,
         "Day":"20170502",
         "Hour":"21"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":54657.061321258545,
         "Day":"20170501",
         "Hour":"22"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":54380.0269228816,
         "Day":"20170501",
         "Hour":"00"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":52897.4322437644,
         "Day":"20170502",
         "Hour":"06"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":52755.80685228109,
         "Day":"20170502",
         "Hour":"00"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":52233.05034738779,
         "Day":"20170501",
         "Hour":"06"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":50291.44211769104,
         "Day":"20170502",
         "Hour":"22"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":41530.911318697035,
         "Day":"20170501",
         "Hour":"23"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":41114.491149783134,
         "Day":"20170502",
         "Hour":"01"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":40357.94918587804,
         "Day":"20170501",
         "Hour":"01"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":39912.34553909302,
         "Day":"20170502",
         "Hour":"05"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":39016.80207681656,
         "Day":"20170502",
         "Hour":"23"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":39015.84096670151,
         "Day":"20170501",
         "Hour":"05"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":35015.9358971715,
         "Day":"20170501",
         "Hour":"02"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":34740.93743869662,
         "Day":"20170502",
         "Hour":"02"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":33221.94006937742,
         "Day":"20170502",
         "Hour":"04"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":32514.756277024746,
         "Day":"20170501",
         "Hour":"04"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":31368.691083669662,
         "Day":"20170502",
         "Hour":"03"
      }
   },
   {
      "version":"v1",
      "timestamp":"2017-04-30T00:00:00.000Z",
      "event":{
         "Spend Usd":31223.54076075554,
         "Day":"20170501",
         "Hour":"03"
      }
   }
]
        
09:16:08.230 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:08.231 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=48
09:16:08.241 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=48
- Exectue Hourly grain query with day field
09:16:08.250 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-advertiser filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:16:08.250 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:16:08.250 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:16:08.250 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:16:08.250 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:16:08.260 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":"DAY","dimensions":[{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"stats_date","outputName":"Day","outputType":"STRING"},{"type":"extraction","dimension":"advertiser_id","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"mahaRegisteredLookup","lookup":"advertiser_lookup","retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true,"valueColumn":"status","dimensionOverrideMap":{},"useQueryLevelCache":false}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"a90e4e19-c519-4d32-9fc1-ac8108b6db6c"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"granularity":"DAY","dimensions":[{"type":"default","dimension":"Keyword ID","outputName":"Keyword ID","outputType":"STRING"},{"type":"default","dimension":"Day","outputName":"Day","outputType":"STRING"},{"type":"extraction","dimension":"Advertiser Status","outputName":"Advertiser Status","outputType":"STRING","extractionFn":{"type":"lookup","lookup":{"type":"map","map":{"ON":"ON"},"isOneToOne":false},"retainMissingValue":false,"replaceMissingValueWith":"OFF","injective":false,"optimize":true}}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"Impressions"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"ascending","dimensionOrder":{"type":"numeric"}}],"limit":3},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"a90e4e19-c519-4d32-9fc1-ac8108b6db6c"},"descending":false}
09:16:08.260 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:08.261 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:08.262 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51565 accepted at Tue Nov 10 09:16:08 PST 2020.
09:16:08.272 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - uncoveredIntervals Found: {"uncoveredIntervals":[2017-11-13T21:00:00.000Z/2017-11-14T00:00:00.000Z"],"uncoveredIntervalsOverflowed":false}
09:16:08.272 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response 
  [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
      "Pricing Type" : 11,
      "Keyword ID": "10",
      "Average Bid": 9,
     "Max Bid": 163,
     "Impressions":175,
     "Conversions":15.0,
     "Min Bid":184,
     "Average Position":205,
     "Week":"2017-26",
     "show_sov_flag": "0",
     "Impression Share": 0.4567
    }
  },
  {
    "timestamp" : "2012-01-01T00:00:12.000Z",
    "event" : {
    "Pricing Type" : 13,
     "Keyword ID": "14",
     "Average Bid": 15,
     "Max Bid": 16,
     "Impressions":17,
     "Conversions":2.3,
     "Min Bid":18,
     "Average Position":20,
     "Week":"2017-28",
     "show_sov_flag": "1",
     "Impression Share": 0.0123
    }
  }
  ]


        
09:16:08.272 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:08.272 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:16:08.272 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Pricing Type : JInt(11)
09:16:08.272 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Max Bid : JInt(163)
09:16:08.272 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Conversions : JDouble(15.0)
09:16:08.272 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Min Bid : JInt(184)
09:16:08.272 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Average Position : JInt(205)
09:16:08.272 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Week : JString(2017-26)
09:16:08.273 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Impression Share : JDouble(0.4567)
09:16:08.273 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Pricing Type : JInt(13)
09:16:08.273 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Max Bid : JInt(16)
09:16:08.273 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Conversions : JDouble(2.3)
09:16:08.273 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Min Bid : JInt(18)
09:16:08.273 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Average Position : JInt(20)
09:16:08.273 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Week : JString(2017-28)
09:16:08.273 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : Impression Share : JDouble(0.0123)
09:16:08.273 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
- Uncovered Interval response: should not fall back
09:16:08.284 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:ad_group filters:Map(Ad Group Status -> TreeSet(NotInFilter(Ad Group Status,List(DELETED),false,false)), Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false)), Campaign Status -> TreeSet(NotInFilter(Campaign Status,List(DELETED),false,false))) : None
09:16:08.284 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:16:08.284 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:16:08.291 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"campaign_id","outputName":"Campaign ID","outputType":"STRING"},{"type":"default","dimension":"ad_group_id","outputName":"Ad Group ID","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[{"dimension":"Impressions","direction":"descending","dimensionOrder":{"type":"numeric"}}],"limit":200},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"e852270b-67e1-4523-bdd6-6a0f720a1b89"},"descending":false}
09:16:08.291 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:08.292 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:08.293 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51566 accepted at Tue Nov 10 09:16:08 PST 2020.
09:16:08.296 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2013-08-31T00:00:00.000Z",
    "event" : {
       "Advertiser ID": 1,
		   "Ad Group ID": 114,
       "Campaign ID": 14,
		   "Impressions": 1106
    }
  },
  {
    "timestamp" : "2013-08-31T00:00:00.000Z",
    "event" : {
      "Advertiser ID": 1,
	  	"Ad Group ID": 113,
      "Campaign ID": 13,
	  	"Impressions": 106
    }
  }
  ]
09:16:08.296 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:08.296 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:16:08.297 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which is not in columnNames : Advertiser ID : JInt(1)
09:16:08.297 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which is not in columnNames : Advertiser ID : JInt(1)
09:16:08.297 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:16:08.297 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - rowList.size=2, rowList.updatedSet=0
- successfully generate the dim only INNER JOIN query if request has hasNonDrivingDimNonFKNonPKFilter in MultiEngine Case
09:16:08.308 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:16:08.308 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:16:08.308 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
{"queryType":"scan","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"resultFormat":"list","batchSize":20480,"limit":5,"order":"none","filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"columns":["id","__time","impressions"],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"timeout":300000,"queryId":"8caafbe2-8c26-471c-a2e6-1030b735ef67"},"descending":false,"granularity":{"type":"all"}}
09:16:08.325 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"scan","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"resultFormat":"list","batchSize":20480,"limit":5,"order":"none","filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"columns":["id","__time","impressions"],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"timeout":300000,"queryId":"8caafbe2-8c26-471c-a2e6-1030b735ef67"},"descending":false,"granularity":{"type":"all"}}
09:16:08.325 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:08.326 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:08.351 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51567 accepted at Tue Nov 10 09:16:08 PST 2020.
09:16:08.354 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response  [{
 	"timestamp": "2013-01-01T00:00:00.000Z",
 	"result": {
 		"pagingIdentifiers": {
 			"wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9": 4
 		},
    "dimensons": ["Keyword ID", "Day"],
    "metrics": ["impressions"],
 		"events": [{
 			"segmentId": "wikipedia_editstream_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 0,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id1",
        "Day": "2013-01-01 00",
 				"impressions": "1"
 			}
 		}, {
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 1,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id2",
        "Day": "2013-01-01 00",
 				"impressions": "2"
 			}
 		}, {
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 2,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id3",
        "Day": "2013-01-01 00",
 				"impressions": "3"
 			}
 		}, {
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 3,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id4",
        "Day": "2013-01-01 00",
 				"impressions": "4"
 			}
 		}, {
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 4,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id5",
        "Day": "2013-01-01 00",
 				"impressions": "5"
 			}
 		}]
 	}
 }]
09:16:08.354 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:08.355 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ScanQuery rows.size=1
09:16:08.357 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignoring unhandled field : (dimensons,JArray(List(JString(Keyword ID), JString(Day))))
09:16:08.357 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignoring unhandled field : (metrics,JArray(List(JString(impressions))))
09:16:08.357 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - events size=5
09:16:08.359 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (segmentId,JString(wikipedia_editstream_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9))
09:16:08.359 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (offset,JInt(0))
09:16:08.359 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : timestamp : JString(2013-01-01T00:00:00.000Z)
09:16:08.360 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (segmentId,JString(wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9))
09:16:08.360 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (offset,JInt(1))
09:16:08.360 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : timestamp : JString(2013-01-01T00:00:00.000Z)
09:16:08.360 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (segmentId,JString(wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9))
09:16:08.360 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (offset,JInt(2))
09:16:08.360 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : timestamp : JString(2013-01-01T00:00:00.000Z)
09:16:08.360 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (segmentId,JString(wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9))
09:16:08.360 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (offset,JInt(3))
09:16:08.360 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : timestamp : JString(2013-01-01T00:00:00.000Z)
09:16:08.360 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (segmentId,JString(wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9))
09:16:08.360 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (offset,JInt(4))
09:16:08.360 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : timestamp : JString(2013-01-01T00:00:00.000Z)
09:16:08.361 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=5
09:16:08.361 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.IllegalArgumentException: requirement failed: Non paginated query fails rowsCount < maxRows, partial result possible : rowsCount=5 maxRows=5
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:362)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$156(DruidQueryExecutorTest.scala:2830)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$156$adapted(DruidQueryExecutorTest.scala:2828)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.withDruidQueryExecutor(DruidQueryExecutorTest.scala:429)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$155(DruidQueryExecutorTest.scala:2828)
- successfully execute scan query type
09:16:08.369 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:16:08.369 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:16:08.369 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:16:08.374 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"scan","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"resultFormat":"list","batchSize":20480,"limit":5,"order":"none","filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"columns":["id","__time","impressions"],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"timeout":300000,"queryId":"5bfc43b5-89cd-4e64-ad8f-79ae8311baee"},"descending":false,"granularity":{"type":"all"}}
09:16:08.374 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:08.374 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:08.377 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51568 accepted at Tue Nov 10 09:16:08 PST 2020.
09:16:08.380 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response  [{
 	"timestamp": "2013-01-01T00:00:00.000Z",
  "unsupported": "field",
 	"result": {
 		"pagingIdentifiers": {
 			"wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9": 4
 		},
    "dimensons": ["Keyword ID", "Day"],
    "metrics": ["impressions"],
 		"events": [{
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 4,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id5",
        "Day": "2013-01-01 00",
 				"impressions": "5"
 			}
 		}]
 	}
 }]
09:16:08.380 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:08.380 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ScanQuery rows.size=1
09:16:08.381 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - unhandled field : (unsupported,JString(field))
09:16:08.381 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in SelectDruidQuery json response : (unsupported,JString(field))
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$22(DruidQueryExecutor.scala:347)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$22$adapted(DruidQueryExecutor.scala:301)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$21(DruidQueryExecutor.scala:301)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$21$adapted(DruidQueryExecutor.scala:299)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:299)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
09:16:08.389 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"scan","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"resultFormat":"list","batchSize":20480,"limit":5,"order":"none","filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"columns":["id","__time","impressions"],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"timeout":300000,"queryId":"5bfc43b5-89cd-4e64-ad8f-79ae8311baee"},"descending":false,"granularity":{"type":"all"}}
09:16:08.389 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:08.389 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:08.391 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51569 accepted at Tue Nov 10 09:16:08 PST 2020.
09:16:08.393 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response  [{
 	"timestamp": "2013-01-01T00:00:00.000Z",
 	"result": {
 		"pagingIdentifiers": {
 			"wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9": 4
 		},
    "dimensons": ["Keyword ID", "Day"],
    "metrics": ["impressions"],
 		"events": [{
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 4,
 			"event": "unsupported"
 		}]
 	}
 }]
09:16:08.393 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:08.393 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ScanQuery rows.size=1
09:16:08.393 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignoring unhandled field : (dimensons,JArray(List(JString(Keyword ID), JString(Day))))
09:16:08.393 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignoring unhandled field : (metrics,JArray(List(JString(impressions))))
09:16:08.393 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - events size=1
09:16:08.393 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (segmentId,JString(wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9))
09:16:08.393 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (offset,JInt(4))
09:16:08.394 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in SelectDruidQuery json response : JString(unsupported)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$26(DruidQueryExecutor.scala:323)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$26$adapted(DruidQueryExecutor.scala:317)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$25(DruidQueryExecutor.scala:317)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$25$adapted(DruidQueryExecutor.scala:315)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$23(DruidQueryExecutor.scala:315)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$23$adapted(DruidQueryExecutor.scala:306)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$22(DruidQueryExecutor.scala:306)
09:16:08.401 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"scan","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"resultFormat":"list","batchSize":20480,"limit":5,"order":"none","filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"columns":["id","__time","impressions"],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"timeout":300000,"queryId":"5bfc43b5-89cd-4e64-ad8f-79ae8311baee"},"descending":false,"granularity":{"type":"all"}}
09:16:08.402 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:08.402 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:08.403 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51570 accepted at Tue Nov 10 09:16:08 PST 2020.
09:16:08.406 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response  [{
 	"timestamp": "2013-01-01T00:00:00.000Z",
 	"result": {
 		"pagingIdentifiers": {
 			"wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9": 4
 		},
    "dimensons": ["Keyword ID", "Day"],
    "metrics": ["impressions"],
 		"events": ["unsupported"]
 	}
 }]
09:16:08.406 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:08.407 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ScanQuery rows.size=1
09:16:08.407 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignoring unhandled field : (dimensons,JArray(List(JString(Keyword ID), JString(Day))))
09:16:08.407 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignoring unhandled field : (metrics,JArray(List(JString(impressions))))
09:16:08.407 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - events size=1
09:16:08.407 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in SelectDruidQuery json response : JString(unsupported)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$25(DruidQueryExecutor.scala:330)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$25$adapted(DruidQueryExecutor.scala:315)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$23(DruidQueryExecutor.scala:315)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$23$adapted(DruidQueryExecutor.scala:306)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$22(DruidQueryExecutor.scala:306)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$22$adapted(DruidQueryExecutor.scala:301)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$21(DruidQueryExecutor.scala:301)
09:16:08.415 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"scan","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"resultFormat":"list","batchSize":20480,"limit":5,"order":"none","filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"columns":["id","__time","impressions"],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"timeout":300000,"queryId":"5bfc43b5-89cd-4e64-ad8f-79ae8311baee"},"descending":false,"granularity":{"type":"all"}}
09:16:08.415 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:08.416 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:08.417 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51571 accepted at Tue Nov 10 09:16:08 PST 2020.
09:16:08.420 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response  [{
 	"timestamp": "2013-01-01T00:00:00.000Z",
 	"result": {
 		"pagingIdentifiers": {
 			"wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9": 4
 		},
    "dimensons": ["Keyword ID", "Day"],
    "metrics": ["impressions"],
 		"events": "unsupported"
 	}
 }]
09:16:08.420 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:08.420 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ScanQuery rows.size=1
09:16:08.420 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignoring unhandled field : (dimensons,JArray(List(JString(Keyword ID), JString(Day))))
09:16:08.420 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignoring unhandled field : (metrics,JArray(List(JString(impressions))))
09:16:08.421 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in SelectDruidQuery json response : JString(unsupported)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$23(DruidQueryExecutor.scala:334)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$23$adapted(DruidQueryExecutor.scala:306)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$22(DruidQueryExecutor.scala:306)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$22$adapted(DruidQueryExecutor.scala:301)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$21(DruidQueryExecutor.scala:301)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$21$adapted(DruidQueryExecutor.scala:299)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:299)
09:16:08.429 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"scan","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"resultFormat":"list","batchSize":20480,"limit":5,"order":"none","filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"columns":["id","__time","impressions"],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"timeout":300000,"queryId":"5bfc43b5-89cd-4e64-ad8f-79ae8311baee"},"descending":false,"granularity":{"type":"all"}}
09:16:08.429 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:08.430 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:08.431 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51572 accepted at Tue Nov 10 09:16:08 PST 2020.
09:16:08.434 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response  [{
 	"timestamp": "2013-01-01T00:00:00.000Z",
 	"result": "unsupported"
 }]
09:16:08.434 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:08.434 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ScanQuery rows.size=1
09:16:08.435 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in SelectDruidQuery json response : JString(unsupported)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$22(DruidQueryExecutor.scala:341)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$22$adapted(DruidQueryExecutor.scala:301)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$21(DruidQueryExecutor.scala:301)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$21$adapted(DruidQueryExecutor.scala:299)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:299)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
09:16:08.444 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"scan","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"resultFormat":"list","batchSize":20480,"limit":5,"order":"none","filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"columns":["id","__time","impressions"],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"timeout":300000,"queryId":"5bfc43b5-89cd-4e64-ad8f-79ae8311baee"},"descending":false,"granularity":{"type":"all"}}
09:16:08.444 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:08.444 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:08.445 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51573 accepted at Tue Nov 10 09:16:08 PST 2020.
09:16:08.448 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response  ["unsupported"]
09:16:08.448 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:08.448 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ScanQuery rows.size=1
09:16:08.449 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in SelectDruidQuery json response : JString(unsupported)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$21(DruidQueryExecutor.scala:349)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$21$adapted(DruidQueryExecutor.scala:299)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:299)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$163(DruidQueryExecutorTest.scala:2895)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$163$adapted(DruidQueryExecutorTest.scala:2893)
09:16:08.459 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"scan","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"resultFormat":"list","batchSize":20480,"limit":5,"order":"none","filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"columns":["id","__time","impressions"],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"timeout":300000,"queryId":"5bfc43b5-89cd-4e64-ad8f-79ae8311baee"},"descending":false,"granularity":{"type":"all"}}
09:16:08.459 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:08.460 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:08.462 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51574 accepted at Tue Nov 10 09:16:08 PST 2020.
09:16:08.464 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response {}
09:16:08.465 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:08.465 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Unexpected field in SelectDruidQuery json response : JObject(List())
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:351)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$163(DruidQueryExecutorTest.scala:2895)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$163$adapted(DruidQueryExecutorTest.scala:2893)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.withDruidQueryExecutor(DruidQueryExecutorTest.scala:429)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$162(DruidQueryExecutorTest.scala:2893)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$162$adapted(DruidQueryExecutorTest.scala:2891)
- fail to execute scan query type with unhandled json
09:16:08.474 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:16:08.474 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:16:08.475 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
{"queryType":"scan","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"resultFormat":"list","batchSize":20480,"limit":5,"order":"none","filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"columns":["id","__time","impressions"],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"timeout":300000,"queryId":"4fc28cb6-e4f6-4279-9bce-73a2510d37dd"},"descending":false,"granularity":{"type":"all"}}
09:16:08.678 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"scan","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"resultFormat":"list","batchSize":20480,"limit":5,"order":"none","filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"columns":["id","__time","impressions"],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"timeout":300000,"queryId":"4fc28cb6-e4f6-4279-9bce-73a2510d37dd"},"descending":false,"granularity":{"type":"all"}}
09:16:08.678 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:08.678 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:08.680 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51575 accepted at Tue Nov 10 09:16:08 PST 2020.
09:16:08.683 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response  [{
 	"timestamp": "2013-01-01T00:00:00.000Z",
 	"result": {
 		"pagingIdentifiers": {
 			"wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9": 4
 		},
    "dimensons": ["Keyword ID", "Day"],
    "metrics": ["impressions"],
 		"events": [{
 			"segmentId": "wikipedia_editstream_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 0,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id1",
        "Day": "2013-01-01 00",
 				"impressions": "1"
 			}
 		}, {
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 1,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id2",
        "Day": "2013-01-01 00",
 				"impressions": "2"
 			}
 		}, {
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 2,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id3",
        "Day": "2013-01-01 00",
 				"impressions": "3"
 			}
 		}, {
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 3,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id4",
        "Day": "2013-01-01 00",
 				"impressions": "4"
 			}
 		}, {
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 4,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id5",
        "Day": "2013-01-01 00",
 				"impressions": "5"
 			}
 		}]
 	}
 }]
09:16:08.683 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:08.684 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ScanQuery rows.size=1
09:16:08.684 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignoring unhandled field : (dimensons,JArray(List(JString(Keyword ID), JString(Day))))
09:16:08.684 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignoring unhandled field : (metrics,JArray(List(JString(impressions))))
09:16:08.684 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - events size=5
09:16:08.684 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (segmentId,JString(wikipedia_editstream_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9))
09:16:08.684 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - ignore field from eventsFields : (offset,JInt(0))
09:16:08.685 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Skipping result from druid which could not be mapped to outputAlias or ephemeral column names : timestamp : JString(2013-01-01T00:00:00.000Z)
09:16:08.690 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - Failed to add row to rowList Row(Map(Day -> 0, Keyword ID -> 1, Impressions -> 2),ArrayBuffer(2013-01-01 00, id1, 1)), response json  [{
 	"timestamp": "2013-01-01T00:00:00.000Z",
 	"result": {
 		"pagingIdentifiers": {
 			"wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9": 4
 		},
    "dimensons": ["Keyword ID", "Day"],
    "metrics": ["impressions"],
 		"events": [{
 			"segmentId": "wikipedia_editstream_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 0,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id1",
        "Day": "2013-01-01 00",
 				"impressions": "1"
 			}
 		}, {
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 1,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id2",
        "Day": "2013-01-01 00",
 				"impressions": "2"
 			}
 		}, {
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 2,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id3",
        "Day": "2013-01-01 00",
 				"impressions": "3"
 			}
 		}, {
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 3,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id4",
        "Day": "2013-01-01 00",
 				"impressions": "4"
 			}
 		}, {
 			"segmentId": "wikipedia_2012-12-29T00:00:00.000Z_2013-01-10T08:00:00.000Z_2013-01-10T08:13:47.830Z_v9",
 			"offset": 4,
 			"event": {
 				"timestamp": "2013-01-01T00:00:00.000Z",
 				"Keyword ID": "id5",
        "Day": "2013-01-01 00",
 				"impressions": "5"
 			}
 		}]
 	}
 }],  Query: {"queryType":"scan","dataSource":{"type":"table","name":"fact1"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"resultFormat":"list","batchSize":20480,"limit":5,"order":"none","filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"columns":["id","__time","impressions"],"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"timeout":300000,"queryId":"4fc28cb6-e4f6-4279-9bce-73a2510d37dd"},"descending":false,"granularity":{"type":"all"}}
09:16:08.690 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: fail
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.processResult(DruidQueryExecutor.scala:145)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$26(DruidQueryExecutor.scala:322)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$26$adapted(DruidQueryExecutor.scala:317)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$25(DruidQueryExecutor.scala:317)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$25$adapted(DruidQueryExecutor.scala:315)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$23(DruidQueryExecutor.scala:315)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.$anonfun$parseJsonAndPopulateResultSet$23$adapted(DruidQueryExecutor.scala:306)
	at scala.collection.immutable.List.foreach(List.scala:392)
- fail to execute query when rowList throws exception
09:16:08.704 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:08.705 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51576 accepted at Tue Nov 10 09:16:08 PST 2020.
09:16:08.709 ERROR [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.lang.UnsupportedOperationException: Druid Query type not supported com.yahoo.maha.executor.druid.DruidQueryExecutorTest$$anon$1@7159d601
	at com.yahoo.maha.executor.druid.DruidQueryExecutor$.parseJsonAndPopulateResultSet(DruidQueryExecutor.scala:353)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:501)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$167(DruidQueryExecutorTest.scala:2993)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$167$adapted(DruidQueryExecutorTest.scala:2991)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.withDruidQueryExecutor(DruidQueryExecutorTest.scala:429)
	at com.yahoo.maha.executor.druid.DruidQueryExecutorTest.$anonfun$new$166(DruidQueryExecutorTest.scala:2991)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
- fail to execute query which is unknown type
- fail to execute oracle query
09:16:08.728 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser- filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,5485,false,false))) : None
09:16:08.728 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:16:08.728 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
09:16:08.729 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(300,false,9223372036854775807,false)
09:16:08.729 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(300,false,9223372036854775807,false) costEstimate=300 isGrainOptimized=false isIndexOptimized=true
{"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"6f9698d9-481e-4643-be1f-16e3f1138995"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"granularity":{"type":"all"},"dimensions":[],"aggregations":[{"type":"count","name":"TOTALROWS"}],"postAggregations":[],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"6f9698d9-481e-4643-be1f-16e3f1138995"},"descending":false}
09:16:08.737 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"5485"}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"advertiser_id","outputName":"Advertiser ID","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"6f9698d9-481e-4643-be1f-16e3f1138995"},"descending":false}},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z","2020-11-10T00:00:00.000Z/2020-11-11T00:00:00.000Z"]},"virtualColumns":[],"granularity":{"type":"all"},"dimensions":[],"aggregations":[{"type":"count","name":"TOTALROWS"}],"postAggregations":[],"limitSpec":{"type":"NoopLimitSpec"},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"6f9698d9-481e-4643-be1f-16e3f1138995"},"descending":false}
09:16:08.737 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:08.737 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:08.739 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51577 accepted at Tue Nov 10 09:16:08 PST 2020.
09:16:08.741 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2012-01-01T00:00:00.000Z",
    "event" : {
     "TOTALROWS" : 100
    }
  }
  ]
09:16:08.742 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:08.742 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=1
09:16:08.742 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=1
- test row count groupby query execution
09:16:08.763 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:08.765 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51578 accepted at Tue Nov 10 09:16:08 PST 2020.
- successfully drop rows that more than specific maxrows
09:16:08.779 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Dim Cost estimated for request with grainKey:advertiser-keyword filters:Map(Advertiser ID -> TreeSet(EqualityFilter(Advertiser ID,213,false,false))) : None
09:16:08.779 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:16:08.779 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:16:08.780 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.DefaultFactEstimator - RowsEstimate(200,false,9223372036854775807,false)
09:16:08.780 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.c.r.Registry - Fact Cost estimated for request with defaultRowCount=100 rowsEstimate=RowsEstimate(200,false,9223372036854775807,false) costEstimate=200 isGrainOptimized=false isIndexOptimized=true
09:16:08.794 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - Running query : {"queryType":"groupBy","dataSource":{"type":"table","name":"fact_s_term"},"intervals":{"type":"intervals","intervals":["2020-11-03T00:00:00.000Z/2020-11-04T00:00:00.000Z"]},"virtualColumns":[],"filter":{"type":"and","fields":[{"type":"selector","dimension":"advertiser_id","value":"213"},{"type":"or","fields":[{"type":"selector","dimension":"id","value":"13"},{"type":"selector","dimension":"id","value":"14"}]}]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"id","outputName":"Keyword ID","outputType":"STRING"}],"aggregations":[{"type":"longSum","name":"Impressions","fieldName":"impresssions"}],"postAggregations":[],"limitSpec":{"type":"default","columns":[],"limit":100},"context":{"applyLimitPushDown":"false","uncoveredIntervalsLimit":1,"groupByIsSingleThreaded":true,"timeout":300000,"queryId":"3fea55b2-8e19-4891-9190-d12c89a1ca22"},"descending":false}
09:16:08.795 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - headersWithAuthHeader : Some(Map())
09:16:08.795 DEBUG [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:08.797 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51579 accepted at Tue Nov 10 09:16:08 PST 2020.
09:16:08.800 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - received http response [
  {
    "timestamp" : "2013-08-31T00:00:00.000Z",
    "event" : {
      "Keyword ID": 14,
     "Impressions":10669
    }
  },
  {
    "timestamp" : "2013-08-31T00:00:00.000Z",
    "event" : {
     "Keyword ID": 13,
     "Impressions":106
    }
  }
  ]
09:16:08.800 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - starIndex=0
09:16:08.800 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - GroupBy rows.size=2
09:16:08.801 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor$ - rowsCount=2
09:16:08.801 INFO  [ScalaTest-main-running-DruidQueryExecutorTest] c.y.m.e.d.DruidQueryExecutor - rowList.size=2, rowList.updatedSet=2
- test use of startIndex for multiEngineQuery
Info Provided - Stopping blaze server
+ Started blaze server 
09:16:08.816 INFO  [ScalaTest-main-running-DiscoverySuite] o.h.b.c.n.NIO1SocketServerGroup - Service bound to address /127.0.0.1:16367
09:16:08.819 INFO  [ScalaTest-main-running-DiscoverySuite] c.y.m.e.d.TimeoutThrottlingFilterTest - Started blaze server
TimeoutThrottlingFilterTest:
- Test TimeoutMillsStore
09:16:08.940 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:08.941 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51580 accepted at Tue Nov 10 09:16:08 PST 2020.
09:16:08.948 DEBUG [AsyncHttpClient-137-1] c.y.m.e.d.f.TimeoutThrottlingFilter - Response taking too long. Returned response time is 4 Configured maxResponseTime is: 1 Adding to timeoutList.
09:16:11.946 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:11.950 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:11.951 ERROR [AsyncHttpClient-137-3] c.y.m.e.d.f.TimeoutThrottlingFilter - Connection or Timeout Exception caught. java.net.ConnectException: Can't assign requested address: localhost/0:0:0:0:0:0:0:1:0 Adding to timeoutList for url: http://localhost:0/echo
09:16:11.952 ERROR [AsyncHttpClient-137-5] c.y.m.e.d.f.TimeoutThrottlingFilter - Connection or Timeout Exception caught. java.net.ConnectException: Can't assign requested address: localhost/0:0:0:0:0:0:0:1:0 Adding to timeoutList for url: http://localhost:0/echo
09:16:11.952 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:11.954 ERROR [AsyncHttpClient-137-7] c.y.m.e.d.f.TimeoutThrottlingFilter - Connection or Timeout Exception caught. java.net.ConnectException: Can't assign requested address: localhost/0:0:0:0:0:0:0:1:0 Adding to timeoutList for url: http://localhost:0/echo
09:16:11.954 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:12.959 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:12.961 DEBUG [AsyncHttpClient-137-1] c.y.m.e.d.f.TimeoutThrottlingFilter - Response taking too long. Returned response time is 2 Configured maxResponseTime is: 1 Adding to timeoutList.
- TimeoutThrottlingFilterTest
09:16:12.965 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:12.976 ERROR [AsyncHttpClient-139-12] c.y.m.e.d.f.TimeoutThrottlingFilter - Connection or Timeout Exception caught. java.net.ConnectException: Connection refused: localhost/0:0:0:0:0:0:0:1:16368 Adding to timeoutList for url: http://localhost:16368/bad
09:16:12.977 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:12.988 ERROR [AsyncHttpClient-139-24] c.y.m.e.d.f.TimeoutThrottlingFilter - Connection or Timeout Exception caught. java.net.ConnectException: Connection refused: localhost/0:0:0:0:0:0:0:1:16368 Adding to timeoutList for url: http://localhost:16368/bad
09:16:12.989 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:12.995 ERROR [AsyncHttpClient-139-12] c.y.m.e.d.f.TimeoutThrottlingFilter - Connection or Timeout Exception caught. java.net.ConnectException: Connection refused: localhost/0:0:0:0:0:0:0:1:16368 Adding to timeoutList for url: http://localhost:16368/bad
09:16:12.995 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:12.995 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:12.996 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:14.001 DEBUG [ScalaTest-main-running-TimeoutThrottlingFilterTest] c.y.m.e.d.f.TimeoutThrottlingFilter - Checking for availability.
09:16:14.002 INFO  [blaze-nio1-acceptor] o.h.b.c.ServerChannelGroup - Connection to /127.0.0.1:51624 accepted at Tue Nov 10 09:16:14 PST 2020.
- Test thread safeness of TimeoutThrottlingFilter
09:16:14.004 INFO  [ScalaTest-main-running-DiscoverySuite] c.y.m.e.d.TimeoutThrottlingFilterTest - Stopping blaze server
Run completed in 14 seconds, 391 milliseconds.
Total number of tests run: 56
Suites: completed 4, aborted 0
Tests: succeeded 56, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
[INFO] 
[INFO] <<< scoverage-maven-plugin:1.4.1:report (coverage) < [scoverage]test @ maha-druid-executor <<<
[INFO] 
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:report (coverage) @ maha-druid-executor ---
[INFO] Reading scoverage instrumentation [/Users/lgadde/git/Native-Ads/maha/druid/target/scoverage-data/scoverage.coverage]...
[INFO] Reading scoverage measurements [/Users/lgadde/git/Native-Ads/maha/druid/target/scoverage-data/scoverage.measurements.*]...
[INFO] Generating coverage reports...
[INFO] Written Cobertura XML report [/Users/lgadde/git/Native-Ads/maha/druid/target/cobertura.xml]
[INFO] Written XML coverage report [/Users/lgadde/git/Native-Ads/maha/druid/target/scoverage.xml]
[INFO] Written HTML coverage report [/Users/lgadde/git/Native-Ads/maha/druid/target/site/scoverage/index.html]
[INFO] Statement coverage.: 91.67%
[INFO] Branch coverage....: 80.91%
[INFO] Coverage reports completed.
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:check-only (coverage) @ maha-druid-executor ---
[INFO] Statement coverage.: 91.67%
[INFO] Branch coverage....: 80.91%
[INFO] Coverage is above minimum [91.67% >= 90.00%]
[INFO] 
[INFO] ----------------< com.yahoo.maha:maha-oracle-executor >-----------------
[INFO] Building maha oracle executor 6.24-SNAPSHOT                       [9/15]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ maha-oracle-executor ---
[INFO] Deleting /Users/lgadde/git/Native-Ads/maha/oracle/target
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-oracle-executor ---
[INFO] Add Source directory: /Users/lgadde/git/Native-Ads/maha/oracle/src/main/scala
[INFO] Add Test Source directory: /Users/lgadde/git/Native-Ads/maha/oracle/src/test/scala
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-oracle-executor ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/lgadde/git/Native-Ads/maha/oracle/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ maha-oracle-executor ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-oracle-executor ---
[INFO] /Users/lgadde/git/Native-Ads/maha/oracle/src/main/scala:-1: info: compiling
[INFO] Compiling 1 source files to /Users/lgadde/git/Native-Ads/maha/oracle/target/classes at 1605028574827
[INFO] prepare-compile in 0 s
[INFO] compile in 4 s
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-oracle-executor ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ maha-oracle-executor ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-oracle-executor ---
[INFO] /Users/lgadde/git/Native-Ads/maha/oracle/src/test/scala:-1: info: compiling
[INFO] Compiling 1 source files to /Users/lgadde/git/Native-Ads/maha/oracle/target/test-classes at 1605028579383
[WARNING] /Users/lgadde/git/Native-Ads/maha/oracle/src/test/scala/com/yahoo/maha/executor/oracle/OracleQueryExecutorTest.scala:831: warning: a pure expression does nothing in statement position
[WARNING]     withMockDruidQueryExecutor(rl => rl.foreach(r => r)) {
[WARNING]                                                      ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/oracle/src/test/scala/com/yahoo/maha/executor/oracle/OracleQueryExecutorTest.scala:1071: warning: a pure expression does nothing in statement position; multiline expressions may require enclosing parentheses
[WARNING]         (q)
[WARNING]          ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/oracle/src/test/scala/com/yahoo/maha/executor/oracle/OracleQueryExecutorTest.scala:22: warning: Unused import
[WARNING] import org.apache.druid.common.config.NullHandling
[WARNING]                                       ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/oracle/src/test/scala/com/yahoo/maha/executor/oracle/OracleQueryExecutorTest.scala:221: warning: private default argument in class OracleQueryExecutorTest is never used
[WARNING]   private[this] def pubfact(forcedFilters: Set[ForcedFilter] = Set.empty): PublicFact = {
[WARNING]                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/oracle/src/test/scala/com/yahoo/maha/executor/oracle/OracleQueryExecutorTest.scala:277: warning: private default argument in class OracleQueryExecutorTest is never used
[WARNING]   private[this] def pubfactInvalid(forcedFilters: Set[ForcedFilter] = Set.empty): PublicFact = {
[WARNING]                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/oracle/src/test/scala/com/yahoo/maha/executor/oracle/OracleQueryExecutorTest.scala:331: warning: private default argument in class OracleQueryExecutorTest is never used
[WARNING]   private[this] def druidpubfact(forcedFilters: Set[ForcedFilter] = Set.empty): PublicFact = {
[WARNING]                                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/oracle/src/test/scala/com/yahoo/maha/executor/oracle/OracleQueryExecutorTest.scala:631: warning: local val sqlQuery in value <local OracleQueryExecutorTest> is never used
[WARNING]     val sqlQuery =  queryPipeline.queryChain.drivingQuery.asInstanceOf[OracleQuery].asString
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/oracle/src/test/scala/com/yahoo/maha/executor/oracle/OracleQueryExecutorTest.scala:686: warning: local val sqlQuery in value <local OracleQueryExecutorTest> is never used
[WARNING]     val sqlQuery =  queryPipeline.queryChain.drivingQuery.asInstanceOf[OracleQuery].asString
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/oracle/src/test/scala/com/yahoo/maha/executor/oracle/OracleQueryExecutorTest.scala:740: warning: local val sqlQuery in value <local OracleQueryExecutorTest> is never used
[WARNING]     val sqlQuery =  queryPipeline.queryChain.drivingQuery.asInstanceOf[OracleQuery].asString
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/oracle/src/test/scala/com/yahoo/maha/executor/oracle/OracleQueryExecutorTest.scala:806: warning: local val sqlQuery in value <local OracleQueryExecutorTest> is never used
[WARNING]     val sqlQuery =  queryPipeline.queryChain.drivingQuery.asInstanceOf[OracleQuery].asString
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/oracle/src/test/scala/com/yahoo/maha/executor/oracle/OracleQueryExecutorTest.scala:873: warning: local val sqlQuery in value <local OracleQueryExecutorTest> is never used
[WARNING]       val sqlQuery = queryPipeline.queryChain.drivingQuery.asInstanceOf[OracleQuery].asString
[WARNING]           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/oracle/src/test/scala/com/yahoo/maha/executor/oracle/OracleQueryExecutorTest.scala:989: warning: local val sqlQuery in value <local OracleQueryExecutorTest> is never used
[WARNING]     val sqlQuery =  queryPipeline.queryChain.drivingQuery.asInstanceOf[OracleQuery].asString
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/oracle/src/test/scala/com/yahoo/maha/executor/oracle/OracleQueryExecutorTest.scala:1033: warning: local val sqlQuery in value <local OracleQueryExecutorTest> is never used
[WARNING]     val sqlQuery =  queryPipeline.queryChain.drivingQuery.asInstanceOf[OracleQuery].asString
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/oracle/src/test/scala/com/yahoo/maha/executor/oracle/OracleQueryExecutorTest.scala:1085: warning: local var executor in value <local OracleQueryExecutorTest> is never used
[WARNING]     var executor : OracleQueryExecutor = Mockito.spy(oracleQueryExecutor.get)
[WARNING]         ^
[WARNING] 14 warnings found
[INFO] prepare-compile in 0 s
[INFO] compile in 7 s
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-oracle-executor ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- scalatest-maven-plugin:2.0.0:test (test) @ maha-oracle-executor ---
Discovery starting.
Discovery completed in 368 milliseconds.
Run starting. Expected test count is: 11
OracleQueryExecutorTest:
09:16:29,892 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Found resource [logback-test.xml] at [file:/Users/lgadde/git/Native-Ads/maha/oracle/target/test-classes/logback-test.xml]
09:16:29,893 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs multiple times on the classpath.
09:16:29,893 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [file:/Users/lgadde/git/Native-Ads/maha/oracle/target/test-classes/logback-test.xml]
09:16:29,893 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [jar:file:/Users/lgadde/git/Native-Ads/maha/core/target/maha-core-6.24-SNAPSHOT-tests.jar!/logback-test.xml]
09:16:30,044 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - debug attribute not set
09:16:30,046 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.rolling.RollingFileAppender]
09:16:30,058 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [FILE]
09:16:30,069 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
09:16:30,121 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@648936749 - No compression will be used
09:16:30,123 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@648936749 - Will use the pattern application.%d{yyyy-MM-dd}.log for the active file
09:16:30,129 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - The date pattern is 'yyyy-MM-dd' from file name pattern 'application.%d{yyyy-MM-dd}.log'.
09:16:30,129 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Roll-over at midnight.
09:16:30,132 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Setting initial period to Tue Nov 10 09:16:30 PST 2020
09:16:30,135 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - Active log file name: target/logs/application.log
09:16:30,135 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - File property is set to [target/logs/application.log]
09:16:30,136 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]
09:16:30,138 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [STDOUT]
09:16:30,138 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
09:16:30,140 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.classic.AsyncAppender]
09:16:30,142 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [ASYNCFILE]
09:16:30,142 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [FILE] to ch.qos.logback.classic.AsyncAppender[ASYNCFILE]
09:16:30,142 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCFILE] - Attaching appender named [FILE] to AsyncAppender.
09:16:30,143 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCFILE] - Setting discardingThreshold to 51
09:16:30,143 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.classic.AsyncAppender]
09:16:30,143 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [ASYNCSTDOUT]
09:16:30,143 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [STDOUT] to ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT]
09:16:30,143 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT] - Attaching appender named [STDOUT] to AsyncAppender.
09:16:30,143 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT] - Setting discardingThreshold to 51
09:16:30,144 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.zaxxer.hikari] to ERROR
09:16:30,144 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [org.http4s] to ERROR
09:16:30,144 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.yahoo.maha.core] to ERROR
09:16:30,144 |-INFO in ch.qos.logback.classic.joran.action.RootLoggerAction - Setting level of ROOT logger to INFO
09:16:30,144 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [ASYNCFILE] to Logger[ROOT]
09:16:30,144 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [ASYNCSTDOUT] to Logger[ROOT]
09:16:30,144 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration.
09:16:30,145 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@3336e6b6 - Registering current configuration as safe fallback point

ESAPI: WARNING: System property [org.owasp.esapi.opsteam] is not set
ESAPI: WARNING: System property [org.owasp.esapi.devteam] is not set
ESAPI: Attempting to load ESAPI.properties via file I/O.
ESAPI: Attempting to load ESAPI.properties as resource file via file I/O.
ESAPI: Not found in 'org.owasp.esapi.resources' directory or file not readable: /Users/lgadde/git/Native-Ads/maha/oracle/ESAPI.properties
ESAPI: Not found in SystemResource Directory/resourceDirectory: .esapi/ESAPI.properties
ESAPI: Not found in 'user.home' (/Users/lgadde) directory: /Users/lgadde/esapi/ESAPI.properties
ESAPI: Loading ESAPI.properties via file I/O failed. Exception was: java.io.FileNotFoundException
ESAPI: Attempting to load ESAPI.properties via the classpath.
ESAPI: SUCCESSFULLY LOADED ESAPI.properties via the CLASSPATH from '/ (root)' using current thread context class loader!
ESAPI: SecurityConfiguration for Validator.ConfigurationFile.MultiValued not found in ESAPI.properties. Using default: false
ESAPI: Attempting to load validation.properties via file I/O.
ESAPI: Attempting to load validation.properties as resource file via file I/O.
ESAPI: Not found in 'org.owasp.esapi.resources' directory or file not readable: /Users/lgadde/git/Native-Ads/maha/oracle/validation.properties
ESAPI: Not found in SystemResource Directory/resourceDirectory: .esapi/validation.properties
ESAPI: Not found in 'user.home' (/Users/lgadde) directory: /Users/lgadde/esapi/validation.properties
ESAPI: Loading validation.properties via file I/O failed.
ESAPI: Attempting to load validation.properties via the classpath.
ESAPI: SUCCESSFULLY LOADED validation.properties via the CLASSPATH from '/ (root)' using current thread context class loader!
- successfully execute async query for ad_stats
- successfully execute sync query for ad_stats
- successfully execute sync query for ad_stats with greater than filter
- successfully execute sync query for ad_stats with less than filter
09:16:33.065 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - Running query : SELECT  *
      FROM (
          SELECT "Campaign ID", "Ad Group ID", "Ad Group Name", "Ad Group Status", "Ad Group Date Created", "Ad Group Date Modified", ROWNUM AS ROW_NUMBER
              FROM(SELECT ago0.campaign_id "Campaign ID", ago0.id "Ad Group ID", ago0.name "Ad Group Name", ago0."Ad Group Status" "Ad Group Status", ago0."Ad Group Date Created" "Ad Group Date Created", ago0."Ad Group Date Modified" "Ad Group Date Modified"
                  FROM 
                (SELECT  name, campaign_id, DECODE(status, 'ON', 'ON', 'OFF') AS "Ad Group Status", NVL(TO_CHAR(last_updated, 'YYYY-MM-DD'), 'NULL') AS "Ad Group Date Modified", NVL(TO_CHAR(created_date, 'YYYY-MM-DD'), 'NULL') AS "Ad Group Date Created", id
            FROM ad_group_oracle
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) ago0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 100
09:16:33.075 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=1 label=Campaign ID
09:16:33.075 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=2 label=Ad Group ID
09:16:33.075 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=3 label=Ad Group Name
09:16:33.075 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=4 label=Ad Group Status
09:16:33.075 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=5 label=Ad Group Date Created
09:16:33.075 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=6 label=Ad Group Date Modified
09:16:33.075 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=7 label=ROW_NUMBER
09:16:33.076 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - columnIndexMap from metaData 
(Ad Group Date Created,5)
(Ad Group Date Modified,6)
(Ad Group ID,2)
(Ad Group Name,3)
(Ad Group Status,4)
(Campaign ID,1)
(ROW_NUMBER,7)

09:16:33.077 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - aliasColumnMap from query 
(Ad Group Date Created,Ad Group Date Created)
(Ad Group Date Modified,Ad Group Date Modified)
(Ad Group ID,id)
(Ad Group Name,name)
(Ad Group Status,Ad Group Status)
(Campaign ID,campaign_id)

09:16:33.084 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - rowCount = 4, rowList.size = 4, rowList.updatedSize = 4
- successfully execute dim driven sync query for ad_group_stats
09:16:33.332 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - Running query :  (SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT  *
      FROM (
          SELECT "Campaign ID", "Ad Group ID", "Ad Group Name", "Ad Group Status", "Ad Group Date Created", "Ad Group Date Modified"
              FROM(SELECT ago0.campaign_id "Campaign ID", ago0.id "Ad Group ID", ago0.name "Ad Group Name", ago0."Ad Group Status" "Ad Group Status", ago0."Ad Group Date Created" "Ad Group Date Created", ago0."Ad Group Date Modified" "Ad Group Date Modified"
                  FROM 
                (SELECT  campaign_id, DECODE(status, 'ON', 'ON', 'OFF') AS "Ad Group Status", NVL(TO_CHAR(last_updated, 'YYYY-MM-DD'), 'NULL') AS "Ad Group Date Modified", NVL(TO_CHAR(created_date, 'YYYY-MM-DD'), 'NULL') AS "Ad Group Date Created", name, id
            FROM ad_group_oracle
            WHERE (advertiser_id = 1) AND (id IN (103,100,101))
             ) ago0 
           

                  ))
                  ) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 100) UNION ALL (SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT  *
      FROM (
          SELECT "Campaign ID", "Ad Group ID", "Ad Group Name", "Ad Group Status", "Ad Group Date Created", "Ad Group Date Modified"
              FROM(SELECT ago0.campaign_id "Campaign ID", ago0.id "Ad Group ID", ago0.name "Ad Group Name", ago0."Ad Group Status" "Ad Group Status", ago0."Ad Group Date Created" "Ad Group Date Created", ago0."Ad Group Date Modified" "Ad Group Date Modified"
                  FROM 
                (SELECT  campaign_id, DECODE(status, 'ON', 'ON', 'OFF') AS "Ad Group Status", NVL(TO_CHAR(last_updated, 'YYYY-MM-DD'), 'NULL') AS "Ad Group Date Modified", NVL(TO_CHAR(created_date, 'YYYY-MM-DD'), 'NULL') AS "Ad Group Date Created", name, id
            FROM ad_group_oracle
            WHERE (advertiser_id = 1) AND (id NOT IN (103,100,101))
             ) ago0 
           

                  ))
                  ) WHERE ROWNUM <= 100) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 100) 
09:16:33.466 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=1 label=Campaign ID
09:16:33.467 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=2 label=Ad Group ID
09:16:33.467 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=3 label=Ad Group Name
09:16:33.467 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=4 label=Ad Group Status
09:16:33.467 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=5 label=Ad Group Date Created
09:16:33.467 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=6 label=Ad Group Date Modified
09:16:33.467 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=7 label=ROW_NUMBER
09:16:33.467 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - columnIndexMap from metaData 
(Ad Group Date Created,5)
(Ad Group Date Modified,6)
(Ad Group ID,2)
(Ad Group Name,3)
(Ad Group Status,4)
(Campaign ID,1)
(ROW_NUMBER,7)

09:16:33.467 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - aliasColumnMap from query 
(Ad Group Date Created,Ad Group Date Created)
(Ad Group Date Modified,Ad Group Date Modified)
(Ad Group ID,id)
(Ad Group Name,name)
(Ad Group Status,Ad Group Status)
(Campaign ID,campaign_id)

09:16:33.475 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - rowCount = 4, rowList.size = 3, rowList.updatedSize = 3
- successfully execute fact driven sync query for ad_group_stats
09:16:33.493 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - Running query : SELECT *
FROM (SELECT ao1.campaign_id "Campaign ID", ao1.ad_group_id "Ad Group ID", ao1.id "Ad ID", ao1.title "Ad Title", ao1."Ad Status" "Ad Status", ao1."Ad Date Created" "Ad Date Created", ao1."Ad Date Modified" "Ad Date Modified", ao1.last_updated "Ad Date Modified Timestamp"
      FROM (SELECT 
                   ad_group_id, ad_id, campaign_id
            FROM ad_stats_oracle FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_group_id, ad_id, campaign_id
            
           ) aso0
           LEFT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT  title, campaign_id, NVL(TO_CHAR(last_updated, 'YYYY-MM-DD'), 'NULL') AS "Ad Date Modified", last_updated, DECODE(status, 'ON', 'ON', 'OFF') AS "Ad Status", id, ad_group_id, NVL(TO_CHAR(created_date, 'YYYY-MM-DD'), 'NULL') AS "Ad Date Created"
            FROM ad_oracle
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) WHERE ROWNUM <= 101) D ) WHERE ROW_NUMBER >= 2 AND ROW_NUMBER <= 101) ao1 
            ON (aso0.ad_id = ao1.id)

) 
   
09:16:33.529 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=1 label=Campaign ID
09:16:33.529 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=2 label=Ad Group ID
09:16:33.529 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=3 label=Ad ID
09:16:33.529 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=4 label=Ad Title
09:16:33.529 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=5 label=Ad Status
09:16:33.529 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=6 label=Ad Date Created
09:16:33.529 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=7 label=Ad Date Modified
09:16:33.529 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=8 label=Ad Date Modified Timestamp
09:16:33.530 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - columnIndexMap from metaData 
(Ad Date Created,6)
(Ad Date Modified,7)
(Ad Date Modified Timestamp,8)
(Ad Group ID,2)
(Ad ID,3)
(Ad Status,5)
(Ad Title,4)
(Campaign ID,1)

09:16:33.531 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - aliasColumnMap from query 
(Ad Date Created,Ad Date Created)
(Ad Date Modified,Ad Date Modified)
(Ad Date Modified Timestamp,last_updated)
(Ad Group ID,ad_group_id)
(Ad ID,ad_id)
(Ad Status,Ad Status)
(Ad Title,title)
(Campaign ID,campaign_id)

09:16:33.533 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - rowCount = 8
- successfully execute dim driven dim only sync query for ad_stats
09:16:33.543 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - Running query : SELECT *
FROM (SELECT ao1.campaign_id "Campaign ID", ao1.ad_group_id "Ad Group ID", ao1.id "Ad ID", ao1.title "Ad Title", ao1."Ad Status" "Ad Status", ao1.unknown "Ad Unknown Column"
      FROM (SELECT 
                   ad_group_id, ad_id, campaign_id
            FROM ad_stats_oracle FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_group_id, ad_id, campaign_id
            
           ) aso0
           LEFT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT  title, campaign_id, DECODE(status, 'ON', 'ON', 'OFF') AS "Ad Status", id, ad_group_id, unknown
            FROM ad_oracle
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) WHERE ROWNUM <= 101) D ) WHERE ROW_NUMBER >= 2 AND ROW_NUMBER <= 101) ao1 
            ON (aso0.ad_id = ao1.id)

) 
   
09:16:33.547 ERROR [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - Failed query : SELECT *
FROM (SELECT ao1.campaign_id "Campaign ID", ao1.ad_group_id "Ad Group ID", ao1.id "Ad ID", ao1.title "Ad Title", ao1."Ad Status" "Ad Status", ao1.unknown "Ad Unknown Column"
      FROM (SELECT 
                   ad_group_id, ad_id, campaign_id
            FROM ad_stats_oracle FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_group_id, ad_id, campaign_id
            
           ) aso0
           LEFT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT  title, campaign_id, DECODE(status, 'ON', 'ON', 'OFF') AS "Ad Status", id, ad_group_id, unknown
            FROM ad_oracle
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) WHERE ROWNUM <= 101) D ) WHERE ROW_NUMBER >= 2 AND ROW_NUMBER <= 101) ao1 
            ON (aso0.ad_id = ao1.id)

) 
   
- Execution Failure test
SELECT *
FROM (SELECT ao1.campaign_id "Campaign ID", ao1.ad_group_id "Ad Group ID", ao1.id "Ad ID", ao1.title "Ad Title", ao1."Ad Status" "Ad Status", coalesce(aso0."impressions_invalid", 1) "Impressions"
      FROM (SELECT 
                   ad_group_id, ad_id, campaign_id, SUM(impressions_invalid) AS "impressions_invalid"
            FROM ad_stats_oracle FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_group_id, ad_id, campaign_id
            
           ) aso0
           LEFT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT  title, campaign_id, DECODE(status, 'ON', 'ON', 'OFF') AS "Ad Status", id, ad_group_id
            FROM ad_oracle
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) WHERE ROWNUM <= 101) D ) WHERE ROW_NUMBER >= 2 AND ROW_NUMBER <= 101) ao1 
            ON (aso0.ad_id = ao1.id)

) 
   
09:16:33.561 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - Running query : SELECT *
FROM (SELECT ao1.campaign_id "Campaign ID", ao1.ad_group_id "Ad Group ID", ao1.id "Ad ID", ao1.title "Ad Title", ao1."Ad Status" "Ad Status", coalesce(aso0."impressions_invalid", 1) "Impressions"
      FROM (SELECT 
                   ad_group_id, ad_id, campaign_id, SUM(impressions_invalid) AS "impressions_invalid"
            FROM ad_stats_oracle FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_group_id, ad_id, campaign_id
            
           ) aso0
           LEFT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT  title, campaign_id, DECODE(status, 'ON', 'ON', 'OFF') AS "Ad Status", id, ad_group_id
            FROM ad_oracle
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) WHERE ROWNUM <= 101) D ) WHERE ROW_NUMBER >= 2 AND ROW_NUMBER <= 101) ao1 
            ON (aso0.ad_id = ao1.id)

) 
   
09:16:33.563 ERROR [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - Failed query : SELECT *
FROM (SELECT ao1.campaign_id "Campaign ID", ao1.ad_group_id "Ad Group ID", ao1.id "Ad ID", ao1.title "Ad Title", ao1."Ad Status" "Ad Status", coalesce(aso0."impressions_invalid", 1) "Impressions"
      FROM (SELECT 
                   ad_group_id, ad_id, campaign_id, SUM(impressions_invalid) AS "impressions_invalid"
            FROM ad_stats_oracle FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_group_id, ad_id, campaign_id
            
           ) aso0
           LEFT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT  title, campaign_id, DECODE(status, 'ON', 'ON', 'OFF') AS "Ad Status", id, ad_group_id
            FROM ad_oracle
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) WHERE ROWNUM <= 101) D ) WHERE ROW_NUMBER >= 2 AND ROW_NUMBER <= 101) ao1 
            ON (aso0.ad_id = ao1.id)

) 
   
- Invalid definition test
- test null result
SELECT *
FROM (SELECT ao1.id "Ad ID", ao1.title "Ad Title", ao1."Ad Status" "Ad Status", ao1."Ad Date Created" "Ad Date Created"
      FROM (SELECT 
                   ad_id
            FROM ad_stats_oracle FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_id
            
           ) aso0
           RIGHT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT  title, NVL(TO_CHAR(created_date, 'YYYY-MM-DD'), 'NULL') AS "Ad Date Created", DECODE(status, 'ON', 'ON', 'OFF') AS "Ad Status", id
            FROM ad_oracle
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) WHERE ROWNUM <= 12) D ) WHERE ROW_NUMBER >= 3 AND ROW_NUMBER <= 12) ao1 
            ON (aso0.ad_id = ao1.id)

) 
   
09:16:33.818 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - Running query : SELECT *
FROM (SELECT ao1.id "Ad ID", ao1.title "Ad Title", ao1."Ad Status" "Ad Status", ao1."Ad Date Created" "Ad Date Created"
      FROM (SELECT 
                   ad_id
            FROM ad_stats_oracle FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_id
            
           ) aso0
           RIGHT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT  title, NVL(TO_CHAR(created_date, 'YYYY-MM-DD'), 'NULL') AS "Ad Date Created", DECODE(status, 'ON', 'ON', 'OFF') AS "Ad Status", id
            FROM ad_oracle
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) WHERE ROWNUM <= 12) D ) WHERE ROW_NUMBER >= 3 AND ROW_NUMBER <= 12) ao1 
            ON (aso0.ad_id = ao1.id)

) 
   
09:16:33.851 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=1 label=Ad ID
09:16:33.851 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=2 label=Ad Title
09:16:33.851 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=3 label=Ad Status
09:16:33.851 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=4 label=Ad Date Created
09:16:33.851 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - columnIndexMap from metaData 
(Ad Date Created,4)
(Ad ID,1)
(Ad Status,3)
(Ad Title,2)

09:16:33.851 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - aliasColumnMap from query 
(Ad Date Created,Ad Date Created)
(Ad ID,ad_id)
(Ad Status,Ad Status)
(Ad Title,title)

09:16:33.852 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - rowCount = 6
- successfully execute driving and non union dim only query with pagination
Run completed in 4 seconds, 434 milliseconds.
Total number of tests run: 11
Suites: completed 2, aborted 0
Tests: succeeded 11, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
[INFO] 
[INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ maha-oracle-executor ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/oracle/target/maha-oracle-executor-6.24-SNAPSHOT.jar
[INFO] 
[INFO] --- maven-jar-plugin:2.6:test-jar (default) @ maha-oracle-executor ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/oracle/target/maha-oracle-executor-6.24-SNAPSHOT-tests.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:jar (default) > generate-sources @ maha-oracle-executor >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-oracle-executor ---
[INFO] 
[INFO] <<< maven-source-plugin:2.4:jar (default) < generate-sources @ maha-oracle-executor <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:jar (default) @ maha-oracle-executor ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/oracle/target/maha-oracle-executor-6.24-SNAPSHOT-sources.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:test-jar (default) > generate-sources @ maha-oracle-executor >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-oracle-executor ---
[INFO] 
[INFO] <<< maven-source-plugin:2.4:test-jar (default) < generate-sources @ maha-oracle-executor <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:test-jar (default) @ maha-oracle-executor ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/oracle/target/maha-oracle-executor-6.24-SNAPSHOT-test-sources.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ maha-oracle-executor ---
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/oracle/target/maha-oracle-executor-6.24-SNAPSHOT.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-oracle-executor/6.24-SNAPSHOT/maha-oracle-executor-6.24-SNAPSHOT.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/oracle/pom.xml to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-oracle-executor/6.24-SNAPSHOT/maha-oracle-executor-6.24-SNAPSHOT.pom
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/oracle/target/maha-oracle-executor-6.24-SNAPSHOT-tests.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-oracle-executor/6.24-SNAPSHOT/maha-oracle-executor-6.24-SNAPSHOT-tests.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/oracle/target/maha-oracle-executor-6.24-SNAPSHOT-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-oracle-executor/6.24-SNAPSHOT/maha-oracle-executor-6.24-SNAPSHOT-sources.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/oracle/target/maha-oracle-executor-6.24-SNAPSHOT-test-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-oracle-executor/6.24-SNAPSHOT/maha-oracle-executor-6.24-SNAPSHOT-test-sources.jar
[INFO] 
[INFO] >>> scoverage-maven-plugin:1.4.1:report (coverage) > [scoverage]test @ maha-oracle-executor >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-oracle-executor ---
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:pre-compile (coverage) @ maha-oracle-executor ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-oracle-executor ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/lgadde/git/Native-Ads/maha/oracle/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ maha-oracle-executor ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-oracle-executor ---
[INFO] /Users/lgadde/git/Native-Ads/maha/oracle/src/main/scala:-1: info: compiling
[INFO] Compiling 1 source files to /Users/lgadde/git/Native-Ads/maha/oracle/target/scoverage-classes at 1605028594274
[INFO] Cleaning datadir [/Users/lgadde/git/Native-Ads/maha/oracle/target/scoverage-data]
[INFO] Beginning coverage instrumentation
[INFO] Instrumentation completed [217 statements]
[INFO] Wrote instrumentation file [/Users/lgadde/git/Native-Ads/maha/oracle/target/scoverage-data/scoverage.coverage]
[INFO] Will write measurement data to [/Users/lgadde/git/Native-Ads/maha/oracle/target/scoverage-data]
[INFO] prepare-compile in 0 s
[INFO] compile in 5 s
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:post-compile (coverage) @ maha-oracle-executor ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-oracle-executor ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ maha-oracle-executor ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-oracle-executor ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-oracle-executor ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- scalatest-maven-plugin:2.0.0:test (test) @ maha-oracle-executor ---
Discovery starting.
Discovery completed in 343 milliseconds.
Run starting. Expected test count is: 11
OracleQueryExecutorTest:
09:16:42,125 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Found resource [logback-test.xml] at [file:/Users/lgadde/git/Native-Ads/maha/oracle/target/test-classes/logback-test.xml]
09:16:42,125 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs multiple times on the classpath.
09:16:42,126 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [file:/Users/lgadde/git/Native-Ads/maha/oracle/target/test-classes/logback-test.xml]
09:16:42,126 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [jar:file:/Users/lgadde/git/Native-Ads/maha/core/target/maha-core-6.24-SNAPSHOT-tests.jar!/logback-test.xml]
09:16:42,266 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - debug attribute not set
09:16:42,266 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.rolling.RollingFileAppender]
09:16:42,275 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [FILE]
09:16:42,287 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
09:16:42,336 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@648936749 - No compression will be used
09:16:42,340 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@648936749 - Will use the pattern application.%d{yyyy-MM-dd}.log for the active file
09:16:42,344 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - The date pattern is 'yyyy-MM-dd' from file name pattern 'application.%d{yyyy-MM-dd}.log'.
09:16:42,344 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Roll-over at midnight.
09:16:42,347 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Setting initial period to Tue Nov 10 09:16:33 PST 2020
09:16:42,349 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - Active log file name: target/logs/application.log
09:16:42,349 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - File property is set to [target/logs/application.log]
09:16:42,350 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]
09:16:42,352 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [STDOUT]
09:16:42,352 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
09:16:42,354 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.classic.AsyncAppender]
09:16:42,356 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [ASYNCFILE]
09:16:42,356 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [FILE] to ch.qos.logback.classic.AsyncAppender[ASYNCFILE]
09:16:42,356 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCFILE] - Attaching appender named [FILE] to AsyncAppender.
09:16:42,357 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCFILE] - Setting discardingThreshold to 51
09:16:42,357 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.classic.AsyncAppender]
09:16:42,357 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [ASYNCSTDOUT]
09:16:42,357 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [STDOUT] to ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT]
09:16:42,357 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT] - Attaching appender named [STDOUT] to AsyncAppender.
09:16:42,357 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT] - Setting discardingThreshold to 51
09:16:42,358 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.zaxxer.hikari] to ERROR
09:16:42,358 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [org.http4s] to ERROR
09:16:42,358 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.yahoo.maha.core] to ERROR
09:16:42,358 |-INFO in ch.qos.logback.classic.joran.action.RootLoggerAction - Setting level of ROOT logger to INFO
09:16:42,358 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [ASYNCFILE] to Logger[ROOT]
09:16:42,358 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [ASYNCSTDOUT] to Logger[ROOT]
09:16:42,358 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration.
09:16:42,359 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@3336e6b6 - Registering current configuration as safe fallback point

ESAPI: WARNING: System property [org.owasp.esapi.opsteam] is not set
ESAPI: WARNING: System property [org.owasp.esapi.devteam] is not set
ESAPI: Attempting to load ESAPI.properties via file I/O.
ESAPI: Attempting to load ESAPI.properties as resource file via file I/O.
ESAPI: Not found in 'org.owasp.esapi.resources' directory or file not readable: /Users/lgadde/git/Native-Ads/maha/oracle/ESAPI.properties
ESAPI: Not found in SystemResource Directory/resourceDirectory: .esapi/ESAPI.properties
ESAPI: Not found in 'user.home' (/Users/lgadde) directory: /Users/lgadde/esapi/ESAPI.properties
ESAPI: Loading ESAPI.properties via file I/O failed. Exception was: java.io.FileNotFoundException
ESAPI: Attempting to load ESAPI.properties via the classpath.
ESAPI: SUCCESSFULLY LOADED ESAPI.properties via the CLASSPATH from '/ (root)' using current thread context class loader!
ESAPI: SecurityConfiguration for Validator.ConfigurationFile.MultiValued not found in ESAPI.properties. Using default: false
ESAPI: Attempting to load validation.properties via file I/O.
ESAPI: Attempting to load validation.properties as resource file via file I/O.
ESAPI: Not found in 'org.owasp.esapi.resources' directory or file not readable: /Users/lgadde/git/Native-Ads/maha/oracle/validation.properties
ESAPI: Not found in SystemResource Directory/resourceDirectory: .esapi/validation.properties
ESAPI: Not found in 'user.home' (/Users/lgadde) directory: /Users/lgadde/esapi/validation.properties
ESAPI: Loading validation.properties via file I/O failed.
ESAPI: Attempting to load validation.properties via the classpath.
ESAPI: SUCCESSFULLY LOADED validation.properties via the CLASSPATH from '/ (root)' using current thread context class loader!
- successfully execute async query for ad_stats
- successfully execute sync query for ad_stats
- successfully execute sync query for ad_stats with greater than filter
- successfully execute sync query for ad_stats with less than filter
09:16:45.243 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - Running query : SELECT  *
      FROM (
          SELECT "Campaign ID", "Ad Group ID", "Ad Group Name", "Ad Group Status", "Ad Group Date Created", "Ad Group Date Modified", ROWNUM AS ROW_NUMBER
              FROM(SELECT ago0.campaign_id "Campaign ID", ago0.id "Ad Group ID", ago0.name "Ad Group Name", ago0."Ad Group Status" "Ad Group Status", ago0."Ad Group Date Created" "Ad Group Date Created", ago0."Ad Group Date Modified" "Ad Group Date Modified"
                  FROM 
                (SELECT  name, campaign_id, DECODE(status, 'ON', 'ON', 'OFF') AS "Ad Group Status", NVL(TO_CHAR(last_updated, 'YYYY-MM-DD'), 'NULL') AS "Ad Group Date Modified", NVL(TO_CHAR(created_date, 'YYYY-MM-DD'), 'NULL') AS "Ad Group Date Created", id
            FROM ad_group_oracle
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) ago0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 100
09:16:45.253 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=1 label=Campaign ID
09:16:45.253 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=2 label=Ad Group ID
09:16:45.253 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=3 label=Ad Group Name
09:16:45.253 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=4 label=Ad Group Status
09:16:45.253 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=5 label=Ad Group Date Created
09:16:45.254 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=6 label=Ad Group Date Modified
09:16:45.254 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=7 label=ROW_NUMBER
09:16:45.255 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - columnIndexMap from metaData 
(Ad Group Date Created,5)
(Ad Group Date Modified,6)
(Ad Group ID,2)
(Ad Group Name,3)
(Ad Group Status,4)
(Campaign ID,1)
(ROW_NUMBER,7)

09:16:45.256 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - aliasColumnMap from query 
(Ad Group Date Created,Ad Group Date Created)
(Ad Group Date Modified,Ad Group Date Modified)
(Ad Group ID,id)
(Ad Group Name,name)
(Ad Group Status,Ad Group Status)
(Campaign ID,campaign_id)

09:16:45.264 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - rowCount = 4, rowList.size = 4, rowList.updatedSize = 4
- successfully execute dim driven sync query for ad_group_stats
09:16:45.507 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - Running query :  (SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT  *
      FROM (
          SELECT "Campaign ID", "Ad Group ID", "Ad Group Name", "Ad Group Status", "Ad Group Date Created", "Ad Group Date Modified"
              FROM(SELECT ago0.campaign_id "Campaign ID", ago0.id "Ad Group ID", ago0.name "Ad Group Name", ago0."Ad Group Status" "Ad Group Status", ago0."Ad Group Date Created" "Ad Group Date Created", ago0."Ad Group Date Modified" "Ad Group Date Modified"
                  FROM 
                (SELECT  campaign_id, DECODE(status, 'ON', 'ON', 'OFF') AS "Ad Group Status", NVL(TO_CHAR(last_updated, 'YYYY-MM-DD'), 'NULL') AS "Ad Group Date Modified", NVL(TO_CHAR(created_date, 'YYYY-MM-DD'), 'NULL') AS "Ad Group Date Created", name, id
            FROM ad_group_oracle
            WHERE (advertiser_id = 1) AND (id IN (103,100,101))
             ) ago0 
           

                  ))
                  ) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 100) UNION ALL (SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT  *
      FROM (
          SELECT "Campaign ID", "Ad Group ID", "Ad Group Name", "Ad Group Status", "Ad Group Date Created", "Ad Group Date Modified"
              FROM(SELECT ago0.campaign_id "Campaign ID", ago0.id "Ad Group ID", ago0.name "Ad Group Name", ago0."Ad Group Status" "Ad Group Status", ago0."Ad Group Date Created" "Ad Group Date Created", ago0."Ad Group Date Modified" "Ad Group Date Modified"
                  FROM 
                (SELECT  campaign_id, DECODE(status, 'ON', 'ON', 'OFF') AS "Ad Group Status", NVL(TO_CHAR(last_updated, 'YYYY-MM-DD'), 'NULL') AS "Ad Group Date Modified", NVL(TO_CHAR(created_date, 'YYYY-MM-DD'), 'NULL') AS "Ad Group Date Created", name, id
            FROM ad_group_oracle
            WHERE (advertiser_id = 1) AND (id NOT IN (103,100,101))
             ) ago0 
           

                  ))
                  ) WHERE ROWNUM <= 100) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 100) 
09:16:45.630 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=1 label=Campaign ID
09:16:45.630 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=2 label=Ad Group ID
09:16:45.630 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=3 label=Ad Group Name
09:16:45.630 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=4 label=Ad Group Status
09:16:45.630 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=5 label=Ad Group Date Created
09:16:45.630 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=6 label=Ad Group Date Modified
09:16:45.630 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=7 label=ROW_NUMBER
09:16:45.630 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - columnIndexMap from metaData 
(Ad Group Date Created,5)
(Ad Group Date Modified,6)
(Ad Group ID,2)
(Ad Group Name,3)
(Ad Group Status,4)
(Campaign ID,1)
(ROW_NUMBER,7)

09:16:45.630 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - aliasColumnMap from query 
(Ad Group Date Created,Ad Group Date Created)
(Ad Group Date Modified,Ad Group Date Modified)
(Ad Group ID,id)
(Ad Group Name,name)
(Ad Group Status,Ad Group Status)
(Campaign ID,campaign_id)

09:16:45.638 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - rowCount = 4, rowList.size = 3, rowList.updatedSize = 3
- successfully execute fact driven sync query for ad_group_stats
09:16:45.655 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - Running query : SELECT *
FROM (SELECT ao1.campaign_id "Campaign ID", ao1.ad_group_id "Ad Group ID", ao1.id "Ad ID", ao1.title "Ad Title", ao1."Ad Status" "Ad Status", ao1."Ad Date Created" "Ad Date Created", ao1."Ad Date Modified" "Ad Date Modified", ao1.last_updated "Ad Date Modified Timestamp"
      FROM (SELECT 
                   ad_group_id, ad_id, campaign_id
            FROM ad_stats_oracle FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_group_id, ad_id, campaign_id
            
           ) aso0
           LEFT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT  title, campaign_id, NVL(TO_CHAR(last_updated, 'YYYY-MM-DD'), 'NULL') AS "Ad Date Modified", last_updated, DECODE(status, 'ON', 'ON', 'OFF') AS "Ad Status", id, ad_group_id, NVL(TO_CHAR(created_date, 'YYYY-MM-DD'), 'NULL') AS "Ad Date Created"
            FROM ad_oracle
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) WHERE ROWNUM <= 101) D ) WHERE ROW_NUMBER >= 2 AND ROW_NUMBER <= 101) ao1 
            ON (aso0.ad_id = ao1.id)

) 
   
09:16:45.687 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=1 label=Campaign ID
09:16:45.687 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=2 label=Ad Group ID
09:16:45.687 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=3 label=Ad ID
09:16:45.687 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=4 label=Ad Title
09:16:45.687 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=5 label=Ad Status
09:16:45.687 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=6 label=Ad Date Created
09:16:45.687 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=7 label=Ad Date Modified
09:16:45.687 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=8 label=Ad Date Modified Timestamp
09:16:45.688 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - columnIndexMap from metaData 
(Ad Date Created,6)
(Ad Date Modified,7)
(Ad Date Modified Timestamp,8)
(Ad Group ID,2)
(Ad ID,3)
(Ad Status,5)
(Ad Title,4)
(Campaign ID,1)

09:16:45.690 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - aliasColumnMap from query 
(Ad Date Created,Ad Date Created)
(Ad Date Modified,Ad Date Modified)
(Ad Date Modified Timestamp,last_updated)
(Ad Group ID,ad_group_id)
(Ad ID,ad_id)
(Ad Status,Ad Status)
(Ad Title,title)
(Campaign ID,campaign_id)

09:16:45.693 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - rowCount = 8
- successfully execute dim driven dim only sync query for ad_stats
09:16:45.707 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - Running query : SELECT *
FROM (SELECT ao1.campaign_id "Campaign ID", ao1.ad_group_id "Ad Group ID", ao1.id "Ad ID", ao1.title "Ad Title", ao1."Ad Status" "Ad Status", ao1.unknown "Ad Unknown Column"
      FROM (SELECT 
                   ad_group_id, ad_id, campaign_id
            FROM ad_stats_oracle FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_group_id, ad_id, campaign_id
            
           ) aso0
           LEFT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT  title, campaign_id, DECODE(status, 'ON', 'ON', 'OFF') AS "Ad Status", id, ad_group_id, unknown
            FROM ad_oracle
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) WHERE ROWNUM <= 101) D ) WHERE ROW_NUMBER >= 2 AND ROW_NUMBER <= 101) ao1 
            ON (aso0.ad_id = ao1.id)

) 
   
09:16:45.713 ERROR [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - Failed query : SELECT *
FROM (SELECT ao1.campaign_id "Campaign ID", ao1.ad_group_id "Ad Group ID", ao1.id "Ad ID", ao1.title "Ad Title", ao1."Ad Status" "Ad Status", ao1.unknown "Ad Unknown Column"
      FROM (SELECT 
                   ad_group_id, ad_id, campaign_id
            FROM ad_stats_oracle FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_group_id, ad_id, campaign_id
            
           ) aso0
           LEFT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT  title, campaign_id, DECODE(status, 'ON', 'ON', 'OFF') AS "Ad Status", id, ad_group_id, unknown
            FROM ad_oracle
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) WHERE ROWNUM <= 101) D ) WHERE ROW_NUMBER >= 2 AND ROW_NUMBER <= 101) ao1 
            ON (aso0.ad_id = ao1.id)

) 
   
- Execution Failure test
SELECT *
FROM (SELECT ao1.campaign_id "Campaign ID", ao1.ad_group_id "Ad Group ID", ao1.id "Ad ID", ao1.title "Ad Title", ao1."Ad Status" "Ad Status", coalesce(aso0."impressions_invalid", 1) "Impressions"
      FROM (SELECT 
                   ad_group_id, ad_id, campaign_id, SUM(impressions_invalid) AS "impressions_invalid"
            FROM ad_stats_oracle FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_group_id, ad_id, campaign_id
            
           ) aso0
           LEFT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT  title, campaign_id, DECODE(status, 'ON', 'ON', 'OFF') AS "Ad Status", id, ad_group_id
            FROM ad_oracle
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) WHERE ROWNUM <= 101) D ) WHERE ROW_NUMBER >= 2 AND ROW_NUMBER <= 101) ao1 
            ON (aso0.ad_id = ao1.id)

) 
   
09:16:45.725 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - Running query : SELECT *
FROM (SELECT ao1.campaign_id "Campaign ID", ao1.ad_group_id "Ad Group ID", ao1.id "Ad ID", ao1.title "Ad Title", ao1."Ad Status" "Ad Status", coalesce(aso0."impressions_invalid", 1) "Impressions"
      FROM (SELECT 
                   ad_group_id, ad_id, campaign_id, SUM(impressions_invalid) AS "impressions_invalid"
            FROM ad_stats_oracle FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_group_id, ad_id, campaign_id
            
           ) aso0
           LEFT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT  title, campaign_id, DECODE(status, 'ON', 'ON', 'OFF') AS "Ad Status", id, ad_group_id
            FROM ad_oracle
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) WHERE ROWNUM <= 101) D ) WHERE ROW_NUMBER >= 2 AND ROW_NUMBER <= 101) ao1 
            ON (aso0.ad_id = ao1.id)

) 
   
09:16:45.727 ERROR [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - Failed query : SELECT *
FROM (SELECT ao1.campaign_id "Campaign ID", ao1.ad_group_id "Ad Group ID", ao1.id "Ad ID", ao1.title "Ad Title", ao1."Ad Status" "Ad Status", coalesce(aso0."impressions_invalid", 1) "Impressions"
      FROM (SELECT 
                   ad_group_id, ad_id, campaign_id, SUM(impressions_invalid) AS "impressions_invalid"
            FROM ad_stats_oracle FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_group_id, ad_id, campaign_id
            
           ) aso0
           LEFT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT  title, campaign_id, DECODE(status, 'ON', 'ON', 'OFF') AS "Ad Status", id, ad_group_id
            FROM ad_oracle
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) WHERE ROWNUM <= 101) D ) WHERE ROW_NUMBER >= 2 AND ROW_NUMBER <= 101) ao1 
            ON (aso0.ad_id = ao1.id)

) 
   
- Invalid definition test
- test null result
SELECT *
FROM (SELECT ao1.id "Ad ID", ao1.title "Ad Title", ao1."Ad Status" "Ad Status", ao1."Ad Date Created" "Ad Date Created"
      FROM (SELECT 
                   ad_id
            FROM ad_stats_oracle FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_id
            
           ) aso0
           RIGHT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT  title, NVL(TO_CHAR(created_date, 'YYYY-MM-DD'), 'NULL') AS "Ad Date Created", DECODE(status, 'ON', 'ON', 'OFF') AS "Ad Status", id
            FROM ad_oracle
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) WHERE ROWNUM <= 12) D ) WHERE ROW_NUMBER >= 3 AND ROW_NUMBER <= 12) ao1 
            ON (aso0.ad_id = ao1.id)

) 
   
09:16:45.993 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - Running query : SELECT *
FROM (SELECT ao1.id "Ad ID", ao1.title "Ad Title", ao1."Ad Status" "Ad Status", ao1."Ad Date Created" "Ad Date Created"
      FROM (SELECT 
                   ad_id
            FROM ad_stats_oracle FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_id
            
           ) aso0
           RIGHT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT  title, NVL(TO_CHAR(created_date, 'YYYY-MM-DD'), 'NULL') AS "Ad Date Created", DECODE(status, 'ON', 'ON', 'OFF') AS "Ad Status", id
            FROM ad_oracle
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) WHERE ROWNUM <= 12) D ) WHERE ROW_NUMBER >= 3 AND ROW_NUMBER <= 12) ao1 
            ON (aso0.ad_id = ao1.id)

) 
   
09:16:46.026 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=1 label=Ad ID
09:16:46.026 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=2 label=Ad Title
09:16:46.026 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=3 label=Ad Status
09:16:46.026 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - metaData index=4 label=Ad Date Created
09:16:46.026 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - columnIndexMap from metaData 
(Ad Date Created,4)
(Ad ID,1)
(Ad Status,3)
(Ad Title,2)

09:16:46.026 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - aliasColumnMap from query 
(Ad Date Created,Ad Date Created)
(Ad ID,ad_id)
(Ad Status,Ad Status)
(Ad Title,title)

09:16:46.027 INFO  [ScalaTest-main-running-OracleQueryExecutorTest] c.y.m.e.o.OracleQueryExecutor - rowCount = 6
- successfully execute driving and non union dim only query with pagination
Run completed in 4 seconds, 350 milliseconds.
Total number of tests run: 11
Suites: completed 2, aborted 0
Tests: succeeded 11, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
[INFO] 
[INFO] <<< scoverage-maven-plugin:1.4.1:report (coverage) < [scoverage]test @ maha-oracle-executor <<<
[INFO] 
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:report (coverage) @ maha-oracle-executor ---
[INFO] Reading scoverage instrumentation [/Users/lgadde/git/Native-Ads/maha/oracle/target/scoverage-data/scoverage.coverage]...
[INFO] Reading scoverage measurements [/Users/lgadde/git/Native-Ads/maha/oracle/target/scoverage-data/scoverage.measurements.*]...
[INFO] Generating coverage reports...
[INFO] Written Cobertura XML report [/Users/lgadde/git/Native-Ads/maha/oracle/target/cobertura.xml]
[INFO] Written XML coverage report [/Users/lgadde/git/Native-Ads/maha/oracle/target/scoverage.xml]
[INFO] Written HTML coverage report [/Users/lgadde/git/Native-Ads/maha/oracle/target/site/scoverage/index.html]
[INFO] Statement coverage.: 91.71%
[INFO] Branch coverage....: 76.32%
[INFO] Coverage reports completed.
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:check-only (coverage) @ maha-oracle-executor ---
[INFO] Statement coverage.: 91.71%
[INFO] Branch coverage....: 76.32%
[INFO] Coverage is above minimum [91.71% >= 90.00%]
[INFO] 
[INFO] ----------------< com.yahoo.maha:maha-presto-executor >-----------------
[INFO] Building maha presto executor 6.24-SNAPSHOT                      [10/15]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ maha-presto-executor ---
[INFO] Deleting /Users/lgadde/git/Native-Ads/maha/presto/target
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-presto-executor ---
[INFO] Add Source directory: /Users/lgadde/git/Native-Ads/maha/presto/src/main/scala
[INFO] Add Test Source directory: /Users/lgadde/git/Native-Ads/maha/presto/src/test/scala
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-presto-executor ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/lgadde/git/Native-Ads/maha/presto/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ maha-presto-executor ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-presto-executor ---
[INFO] /Users/lgadde/git/Native-Ads/maha/presto/src/main/scala:-1: info: compiling
[INFO] Compiling 1 source files to /Users/lgadde/git/Native-Ads/maha/presto/target/classes at 1605028606456
[INFO] prepare-compile in 0 s
[INFO] compile in 4 s
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-presto-executor ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ maha-presto-executor ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-presto-executor ---
[INFO] /Users/lgadde/git/Native-Ads/maha/presto/src/test/scala:-1: info: compiling
[INFO] Compiling 1 source files to /Users/lgadde/git/Native-Ads/maha/presto/target/test-classes at 1605028611023
[WARNING] /Users/lgadde/git/Native-Ads/maha/presto/src/test/scala/com/yahoo/maha/executor/PrestoQueryExecutorTest.scala:958: warning: Unused import
[WARNING]     import org.json4s.jackson.JsonMethods._
[WARNING]                                           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/presto/src/test/scala/com/yahoo/maha/executor/PrestoQueryExecutorTest.scala:243: warning: private default argument in class PrestoQueryExecutorTest is never used
[WARNING]   private[this] def pubfact(forcedFilters: Set[ForcedFilter] = Set.empty): PublicFact = {
[WARNING]                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/presto/src/test/scala/com/yahoo/maha/executor/PrestoQueryExecutorTest.scala:552: warning: local val sqlQuery in value <local PrestoQueryExecutorTest> is never used
[WARNING]     val sqlQuery =  queryPipeline.queryChain.drivingQuery.asInstanceOf[PrestoQuery].asString
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/presto/src/test/scala/com/yahoo/maha/executor/PrestoQueryExecutorTest.scala:602: warning: local val sqlQuery in value <local PrestoQueryExecutorTest> is never used
[WARNING]     val sqlQuery =  queryPipeline.queryChain.drivingQuery.asInstanceOf[PrestoQuery].asString
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/presto/src/test/scala/com/yahoo/maha/executor/PrestoQueryExecutorTest.scala:667: warning: local val sqlQuery in value <local PrestoQueryExecutorTest> is never used
[WARNING]     val sqlQuery =  queryPipeline.queryChain.drivingQuery.asInstanceOf[PrestoQuery].asString
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/presto/src/test/scala/com/yahoo/maha/executor/PrestoQueryExecutorTest.scala:723: warning: local val sqlQuery in value <local PrestoQueryExecutorTest> is never used
[WARNING]     val sqlQuery =  queryPipeline.queryChain.drivingQuery.asInstanceOf[PrestoQuery].asString
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/presto/src/test/scala/com/yahoo/maha/executor/PrestoQueryExecutorTest.scala:959: warning: local val formats in value <local PrestoQueryExecutorTest> is never used
[WARNING]     implicit val formats = DefaultFormats
[WARNING]                  ^
[WARNING] 7 warnings found
[INFO] prepare-compile in 0 s
[INFO] compile in 8 s
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-presto-executor ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- scalatest-maven-plugin:2.0.0:test (test) @ maha-presto-executor ---
Discovery starting.
Discovery completed in 389 milliseconds.
Run starting. Expected test count is: 9
PrestoQueryExecutorTest:
09:17:02,631 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Found resource [logback-test.xml] at [file:/Users/lgadde/git/Native-Ads/maha/presto/target/test-classes/logback-test.xml]
09:17:02,632 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs multiple times on the classpath.
09:17:02,632 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [file:/Users/lgadde/git/Native-Ads/maha/presto/target/test-classes/logback-test.xml]
09:17:02,632 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [jar:file:/Users/lgadde/git/Native-Ads/maha/core/target/maha-core-6.24-SNAPSHOT-tests.jar!/logback-test.xml]
09:17:02,799 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - debug attribute not set
09:17:02,800 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.rolling.RollingFileAppender]
09:17:02,810 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [FILE]
09:17:02,822 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
09:17:02,875 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@412111214 - No compression will be used
09:17:02,877 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@412111214 - Will use the pattern application.%d{yyyy-MM-dd}.log for the active file
09:17:02,884 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - The date pattern is 'yyyy-MM-dd' from file name pattern 'application.%d{yyyy-MM-dd}.log'.
09:17:02,884 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Roll-over at midnight.
09:17:02,887 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Setting initial period to Tue Nov 10 09:17:02 PST 2020
09:17:02,890 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - Active log file name: target/logs/application.log
09:17:02,890 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - File property is set to [target/logs/application.log]
09:17:02,891 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]
09:17:02,893 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [STDOUT]
09:17:02,894 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
09:17:02,896 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.classic.AsyncAppender]
09:17:02,898 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [ASYNCFILE]
09:17:02,898 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [FILE] to ch.qos.logback.classic.AsyncAppender[ASYNCFILE]
09:17:02,898 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCFILE] - Attaching appender named [FILE] to AsyncAppender.
09:17:02,899 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCFILE] - Setting discardingThreshold to 51
09:17:02,899 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.classic.AsyncAppender]
09:17:02,899 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [ASYNCSTDOUT]
09:17:02,899 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [STDOUT] to ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT]
09:17:02,899 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT] - Attaching appender named [STDOUT] to AsyncAppender.
09:17:02,899 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT] - Setting discardingThreshold to 51
09:17:02,900 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.zaxxer.hikari] to ERROR
09:17:02,900 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [org.http4s] to ERROR
09:17:02,900 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.yahoo.maha.core] to ERROR
09:17:02,900 |-INFO in ch.qos.logback.classic.joran.action.RootLoggerAction - Setting level of ROOT logger to INFO
09:17:02,900 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [ASYNCFILE] to Logger[ROOT]
09:17:02,900 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [ASYNCSTDOUT] to Logger[ROOT]
09:17:02,901 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration.
09:17:02,901 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@15a04efb - Registering current configuration as safe fallback point

ESAPI: WARNING: System property [org.owasp.esapi.opsteam] is not set
ESAPI: WARNING: System property [org.owasp.esapi.devteam] is not set
ESAPI: Attempting to load ESAPI.properties via file I/O.
ESAPI: Attempting to load ESAPI.properties as resource file via file I/O.
ESAPI: Not found in 'org.owasp.esapi.resources' directory or file not readable: /Users/lgadde/git/Native-Ads/maha/presto/ESAPI.properties
ESAPI: Not found in SystemResource Directory/resourceDirectory: .esapi/ESAPI.properties
ESAPI: Not found in 'user.home' (/Users/lgadde) directory: /Users/lgadde/esapi/ESAPI.properties
ESAPI: Loading ESAPI.properties via file I/O failed. Exception was: java.io.FileNotFoundException
ESAPI: Attempting to load ESAPI.properties via the classpath.
ESAPI: SUCCESSFULLY LOADED ESAPI.properties via the CLASSPATH from '/ (root)' using current thread context class loader!
ESAPI: SecurityConfiguration for Validator.ConfigurationFile.MultiValued not found in ESAPI.properties. Using default: false
ESAPI: Attempting to load validation.properties via file I/O.
ESAPI: Attempting to load validation.properties as resource file via file I/O.
ESAPI: Not found in 'org.owasp.esapi.resources' directory or file not readable: /Users/lgadde/git/Native-Ads/maha/presto/validation.properties
ESAPI: Not found in SystemResource Directory/resourceDirectory: .esapi/validation.properties
ESAPI: Not found in 'user.home' (/Users/lgadde) directory: /Users/lgadde/esapi/validation.properties
ESAPI: Loading validation.properties via file I/O failed.
ESAPI: Attempting to load validation.properties via the classpath.
ESAPI: SUCCESSFULLY LOADED validation.properties via the CLASSPATH from '/ (root)' using current thread context class loader!
09:17:06.085 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - Running query : SELECT CAST(mang_day as VARCHAR) AS mang_day, CAST(ad_id as VARCHAR) AS ad_id, CAST(mang_count as VARCHAR) AS mang_count, CAST(mang_impressions as VARCHAR) AS mang_impressions
FROM(
SELECT getFormattedDate(stats_date) mang_day, COALESCE(CAST(ad_id as bigint), 0) ad_id, COALESCE(CAST(Count as bigint), 0) mang_count, COALESCE(CAST(impressions as bigint), 1) mang_impressions
FROM(SELECT ad_id, stats_date, SUM(impressions) impressions, COUNT(*) Count
FROM ad_stats_presto
WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= '2020-11-03' AND stats_date <= '2020-11-10')
GROUP BY ad_id, stats_date
HAVING (SUM(impressions) > 2014)
       )
asp0

ORDER BY ad_id DESC
          )
        queryAlias LIMIT 100
09:17:06.116 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=1 label=mang_day
09:17:06.116 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=2 label=ad_id
09:17:06.116 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=3 label=mang_count
09:17:06.116 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=4 label=mang_impressions
09:17:06.117 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - columnIndexMap from metaData 
(ad_id,2)
(mang_count,3)
(mang_day,1)
(mang_impressions,4)

09:17:06.118 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - aliasColumnMap from query 
(ad_id,ad_id)
(mang_count,Count)
(mang_day,stats_date)
(mang_impressions,impressions)

09:17:06.126 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - rowCount = 4
09:17:06.127 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - Successfully retrieved results from Presto: 4
- successfully execute async query for ad_stats with greater than filter
09:17:06.194 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - Running query : SELECT CAST(mang_day as VARCHAR) AS mang_day, CAST(ad_id as VARCHAR) AS ad_id, CAST(mang_count as VARCHAR) AS mang_count, CAST(mang_impressions as VARCHAR) AS mang_impressions
FROM(
SELECT getFormattedDate(stats_date) mang_day, COALESCE(CAST(ad_id as bigint), 0) ad_id, COALESCE(CAST(Count as bigint), 0) mang_count, COALESCE(CAST(impressions as bigint), 1) mang_impressions
FROM(SELECT ad_id, stats_date, SUM(impressions) impressions, COUNT(*) Count
FROM ad_stats_presto
WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= '2020-11-03' AND stats_date <= '2020-11-10')
GROUP BY ad_id, stats_date
HAVING (SUM(impressions) < 2014)
       )
asp0

ORDER BY ad_id DESC
          )
        queryAlias LIMIT 100
09:17:06.202 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=1 label=mang_day
09:17:06.203 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=2 label=ad_id
09:17:06.203 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=3 label=mang_count
09:17:06.203 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=4 label=mang_impressions
09:17:06.203 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - columnIndexMap from metaData 
(ad_id,2)
(mang_count,3)
(mang_day,1)
(mang_impressions,4)

09:17:06.203 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - aliasColumnMap from query 
(ad_id,ad_id)
(mang_count,Count)
(mang_day,stats_date)
(mang_impressions,impressions)

09:17:06.204 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - rowCount = 4
09:17:06.204 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - Successfully retrieved results from Presto: 4
- successfully execute async query for ad_stats with less than filter
09:17:06.331 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - Running query : SELECT CAST(mang_day as VARCHAR) AS mang_day, CAST(campaign_id as VARCHAR) AS campaign_id, CAST(ad_group_id as VARCHAR) AS ad_group_id, CAST(ad_id as VARCHAR) AS ad_id, CAST(mang_ad_title as VARCHAR) AS mang_ad_title, CAST(mang_ad_status as VARCHAR) AS mang_ad_status, CAST(mang_ad_date_created as VARCHAR) AS mang_ad_date_created, CAST(mang_ad_date_modified as VARCHAR) AS mang_ad_date_modified, CAST(mang_ad_date_modified_timestamp as VARCHAR) AS mang_ad_date_modified_timestamp, CAST(mang_pricing_type as VARCHAR) AS mang_pricing_type, CAST(network_id as VARCHAR) AS network_id, CAST(mang_impressions as VARCHAR) AS mang_impressions, CAST(max_bid as VARCHAR) AS max_bid, CAST(mang_average_cpc as VARCHAR) AS mang_average_cpc, CAST(mang_spend as VARCHAR) AS mang_spend, CAST(mang_ctr_percentage as VARCHAR) AS mang_ctr_percentage, CAST(mang_ctr as VARCHAR) AS mang_ctr, CAST(mang_country as VARCHAR) AS mang_country
FROM(
SELECT getFormattedDate(stats_date) mang_day, COALESCE(CAST(campaign_id as bigint), 0) campaign_id, COALESCE(CAST(ad_group_id as bigint), 0) ad_group_id, COALESCE(CAST(asp0.ad_id as bigint), 0) ad_id, getCsvEscapedString(CAST(COALESCE(a1.mang_ad_title, '') AS VARCHAR)) mang_ad_title, COALESCE(CAST(a1.mang_ad_status as VARCHAR), 'NA') mang_ad_status, COALESCE(CAST(a1.mang_ad_date_created as VARCHAR), 'NA') mang_ad_date_created, COALESCE(CAST(a1.mang_ad_date_modified as VARCHAR), 'NA') mang_ad_date_modified, COALESCE(cast(a1.mang_ad_date_modified_timestamp as VARCHAR), 'NA') mang_ad_date_modified_timestamp, COALESCE(CAST(price_type as varchar), 'NA') mang_pricing_type, COALESCE(CAST(network_type as VARCHAR), 'NA') network_id, COALESCE(CAST(impressions as bigint), 1) mang_impressions, ROUND(COALESCE(max_bid, 0.0), 10) max_bid, ROUND(COALESCE((spend / clicks), 0), 10) mang_average_cpc, ROUND(COALESCE(spend, 0.0), 10) mang_spend, ROUND(COALESCE((CASE WHEN impressions = 0 THEN 0.0 ELSE CAST(clicks AS DOUBLE) / impressions END * 100), 0), 10) mang_ctr_percentage, ROUND(COALESCE(CTR, 0), 10) mang_ctr, COALESCE(CAST(country as VARCHAR), 'NA') mang_country
FROM(SELECT CASE WHEN (network_type IN ('TEST_PUBLISHER')) THEN 'Test Publisher' WHEN (network_type IN ('CONTENT_S')) THEN 'Content Secured' WHEN (network_type IN ('EXTERNAL')) THEN 'External Partners' WHEN (network_type IN ('INTERNAL')) THEN 'Internal Properties' ELSE 'NONE' END network_type, stats_date, CASE WHEN (price_type IN (1)) THEN 'CPC' WHEN (price_type IN (6)) THEN 'CPV' WHEN (price_type IN (2)) THEN 'CPA' WHEN (price_type IN (-10)) THEN 'CPE' WHEN (price_type IN (-20)) THEN 'CPF' WHEN (price_type IN (7)) THEN 'CPCV' WHEN (price_type IN (3)) THEN 'CPM' ELSE 'NONE' END price_type, country, ad_group_id, ad_id, campaign_id, SUM(impressions) impressions, SUM(spend) spend, MAX(max_bid) max_bid, (SUM(CASE WHEN impressions = 0 THEN 0.0 ELSE CAST(clicks AS DOUBLE) / impressions END)) CTR, SUM(clicks) clicks
FROM ad_stats_presto
WHERE (advertiser_id = 1) AND (stats_source = 2) AND (price_type IN (1,2)) AND (stats_date >= '2020-11-03' AND stats_date <= '2020-11-10')
GROUP BY CASE WHEN (network_type IN ('TEST_PUBLISHER')) THEN 'Test Publisher' WHEN (network_type IN ('CONTENT_S')) THEN 'Content Secured' WHEN (network_type IN ('EXTERNAL')) THEN 'External Partners' WHEN (network_type IN ('INTERNAL')) THEN 'Internal Properties' ELSE 'NONE' END, stats_date, CASE WHEN (price_type IN (1)) THEN 'CPC' WHEN (price_type IN (6)) THEN 'CPV' WHEN (price_type IN (2)) THEN 'CPA' WHEN (price_type IN (-10)) THEN 'CPE' WHEN (price_type IN (-20)) THEN 'CPF' WHEN (price_type IN (7)) THEN 'CPCV' WHEN (price_type IN (3)) THEN 'CPM' ELSE 'NONE' END, country, ad_group_id, ad_id, campaign_id

       )
asp0
LEFT OUTER JOIN (
SELECT title AS mang_ad_title, id a1_id, functionIF(status = 'ON', 'ON', 'OFF') AS mang_ad_status, last_updated AS mang_ad_date_modified_timestamp, format_datetime(last_updated, 'YYYY-MM-DD') AS mang_ad_date_modified, format_datetime(last_updated, 'YYYY-MM-DD') AS mang_ad_date_created
FROM ad_presto
WHERE ((load_time = '2018' )) AND (advertiser_id = 1)
)
a1
ON
asp0.ad_id = a1.a1_id
       
ORDER BY mang_ad_title DESC
          )
        queryAlias LIMIT 100
09:17:06.394 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=1 label=mang_day
09:17:06.394 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=2 label=campaign_id
09:17:06.394 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=3 label=ad_group_id
09:17:06.394 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=4 label=ad_id
09:17:06.395 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=5 label=mang_ad_title
09:17:06.395 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=6 label=mang_ad_status
09:17:06.395 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=7 label=mang_ad_date_created
09:17:06.395 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=8 label=mang_ad_date_modified
09:17:06.395 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=9 label=mang_ad_date_modified_timestamp
09:17:06.395 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=10 label=mang_pricing_type
09:17:06.395 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=11 label=network_id
09:17:06.395 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=12 label=mang_impressions
09:17:06.395 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=13 label=max_bid
09:17:06.395 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=14 label=mang_average_cpc
09:17:06.395 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=15 label=mang_spend
09:17:06.395 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=16 label=mang_ctr_percentage
09:17:06.395 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=17 label=mang_ctr
09:17:06.395 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=18 label=mang_country
09:17:06.396 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - columnIndexMap from metaData 
(ad_group_id,3)
(ad_id,4)
(campaign_id,2)
(mang_ad_date_created,7)
(mang_ad_date_modified,8)
(mang_ad_date_modified_timestamp,9)
(mang_ad_status,6)
(mang_ad_title,5)
(mang_average_cpc,14)
(mang_country,18)
(mang_ctr,17)
(mang_ctr_percentage,16)
(mang_day,1)
(mang_impressions,12)
(mang_pricing_type,10)
(mang_spend,15)
(max_bid,13)
(network_id,11)

09:17:06.396 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - aliasColumnMap from query 
(ad_group_id,ad_group_id)
(ad_id,ad_id)
(campaign_id,campaign_id)
(mang_ad_date_created,Ad Date Created)
(mang_ad_date_modified,Ad Date Modified)
(mang_ad_date_modified_timestamp,last_updated)
(mang_ad_status,Ad Status)
(mang_ad_title,title)
(mang_average_cpc,average_cpc)
(mang_country,country)
(mang_ctr,CTR)
(mang_ctr_percentage,CTR Percentage)
(mang_day,stats_date)
(mang_impressions,impressions)
(mang_pricing_type,price_type)
(mang_spend,spend)
(max_bid,max_bid)
(network_id,network_type)

09:17:06.441 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - rowCount = 16
09:17:06.441 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - Successfully retrieved results from Presto: 16
- successfully execute async query for ad_stats
09:17:06.493 ERROR [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - Failed query : SELECT CAST(mang_day as VARCHAR) AS mang_day, CAST(ad_id as VARCHAR) AS ad_id, CAST(mang_ad_creation_date as VARCHAR) AS mang_ad_creation_date, CAST(mang_impressions as VARCHAR) AS mang_impressions
FROM(
SELECT getFormattedDate(stats_date) mang_day, COALESCE(CAST(asp0.ad_id as bigint), 0) ad_id, getFormattedDate(a1.mang_ad_creation_date) mang_ad_creation_date, COALESCE(CAST(impressions as bigint), 1) mang_impressions
FROM(SELECT ad_id, stats_date, SUM(impressions) impressions
FROM ad_stats_presto
WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= '2020-11-03' AND stats_date <= '2020-11-10')
GROUP BY ad_id, stats_date

java.lang.RuntimeException: query execution failed : Cannot parse "DATE" constant "01-03-2018" [22007-191]
       )
asp0
LEFT OUTER JOIN (
SELECT created_date AS mang_ad_creation_date, id a1_id
FROM ad_presto
WHERE ((load_time = '2018' )) AND (advertiser_id = 1)
)
a1
ON
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:20)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.$anonfun$execute$5(QueryPipeline.scala:167)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.execute(QueryPipeline.scala:166)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.execute(QueryPipeline.scala:161)
	at com.yahoo.maha.executor.presto.PrestoQueryExecutorTest.$anonfun$new$7(PrestoQueryExecutorTest.scala:725)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.funsuite.AnyFunSuiteLike$$anon$1.apply(AnyFunSuiteLike.scala:189)
	at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
	at org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)
	at org.scalatest.funsuite.AnyFunSuite.withFixture(AnyFunSuite.scala:1562)
	at org.scalatest.funsuite.AnyFunSuiteLike.invokeWithFixture$1(AnyFunSuiteLike.scala:187)
	at org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$runTest$1(AnyFunSuiteLike.scala:199)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTest(AnyFunSuiteLike.scala:199)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTest$(AnyFunSuiteLike.scala:181)
	at org.scalatest.funsuite.AnyFunSuite.runTest(AnyFunSuite.scala:1562)
	at org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$runTests$1(AnyFunSuiteLike.scala:232)
asp0.ad_id = a1.a1_id
       

          )
        queryAlias LIMIT 100
	at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:413)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:475)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTests(AnyFunSuiteLike.scala:232)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTests$(AnyFunSuiteLike.scala:231)
	at org.scalatest.funsuite.AnyFunSuite.runTests(AnyFunSuite.scala:1562)
	at org.scalatest.Suite.run(Suite.scala:1112)
	at org.scalatest.Suite.run$(Suite.scala:1094)
	at org.scalatest.funsuite.AnyFunSuite.org$scalatest$funsuite$AnyFunSuiteLike$$super$run(AnyFunSuite.scala:1562)
	at org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$run$1(AnyFunSuiteLike.scala:236)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:535)
	at org.scalatest.funsuite.AnyFunSuiteLike.run(AnyFunSuiteLike.scala:236)
	at org.scalatest.funsuite.AnyFunSuiteLike.run$(AnyFunSuiteLike.scala:235)
	at com.yahoo.maha.executor.presto.PrestoQueryExecutorTest.org$scalatest$BeforeAndAfterAll$$super$run(PrestoQueryExecutorTest.scala:31)
	at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)
	at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:210)
	at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:208)
	at com.yahoo.maha.executor.presto.PrestoQueryExecutorTest.run(PrestoQueryExecutorTest.scala:31)
	at org.scalatest.Suite.callExecuteOnSuite$1(Suite.scala:1175)
	at org.scalatest.Suite.$anonfun$runNestedSuites$1(Suite.scala:1222)
	at scala.collection.IndexedSeqOptimized.foreach(IndexedSeqOptimized.scala:36)
	at scala.collection.IndexedSeqOptimized.foreach$(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:198)
	at org.scalatest.Suite.runNestedSuites(Suite.scala:1220)
	at org.scalatest.Suite.runNestedSuites$(Suite.scala:1154)
	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:30)
	at org.scalatest.Suite.run(Suite.scala:1109)
	at org.scalatest.Suite.run$(Suite.scala:1094)
	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:30)
	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:45)
	at org.scalatest.tools.Runner$.$anonfun$doRunRunRunDaDoRunRun$13(Runner.scala:1320)
	at org.scalatest.tools.Runner$.$anonfun$doRunRunRunDaDoRunRun$13$adapted(Runner.scala:1314)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:1314)
	at org.scalatest.tools.Runner$.$anonfun$runOptionallyWithPassFailReporter$24(Runner.scala:993)
	at org.scalatest.tools.Runner$.$anonfun$runOptionallyWithPassFailReporter$24$adapted(Runner.scala:971)
	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:1480)
	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:971)
	at org.scalatest.tools.Runner$.main(Runner.scala:775)
	at org.scalatest.tools.Runner.main(Runner.scala)
Caused by: org.h2.jdbc.JdbcSQLException: Cannot parse "DATE" constant "01-03-2018" [22007-191]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)
	at org.h2.message.DbException.get(DbException.java:168)
	at org.h2.value.ValueDate.parse(ValueDate.java:81)
	at org.h2.value.Value.convertTo(Value.java:909)
	at org.h2.value.Value.getDate(Value.java:404)
	at org.h2.jdbc.JdbcResultSet.getDate(JdbcResultSet.java:375)
	at com.zaxxer.hikari.pool.HikariProxyResultSet.getDate(HikariProxyResultSet.java)
	at com.yahoo.maha.core.query.ColumnValueExtractor.getColumnValue(QueryExecutor.scala:165)
	at com.yahoo.maha.executor.presto.PrestoQueryExecutor.$anonfun$execute$10(PrestoQueryExecutor.scala:69)
	at com.yahoo.maha.executor.presto.PrestoQueryExecutor.$anonfun$execute$10$adapted(PrestoQueryExecutor.scala:66)
	at scala.collection.TraversableLike$WithFilter.$anonfun$foreach$1(TraversableLike.scala:877)
	at scala.collection.immutable.Map$Map4.foreach(Map.scala:236)
- test invalid result
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:876)
	at com.yahoo.maha.executor.presto.PrestoQueryExecutor.$anonfun$execute$2(PrestoQueryExecutor.scala:66)
	at com.yahoo.maha.executor.presto.PrestoQueryExecutor.$anonfun$execute$2$adapted(PrestoQueryExecutor.scala:42)
	at com.yahoo.maha.jdbc.JdbcConnection.$anonfun$queryForObject$1(JdbcConnection.scala:72)
	at com.yahoo.maha.jdbc.JdbcConnection.$anonfun$withResultSet$1(JdbcConnection.scala:51)
	at com.yahoo.maha.jdbc.JdbcConnection.$anonfun$withStatement$1(JdbcConnection.scala:33)
	at com.yahoo.maha.jdbc.JdbcConnection.$anonfun$withConnection$3(JdbcConnection.scala:22)
	at resource.AbstractManagedResource.$anonfun$acquireFor$1(AbstractManagedResource.scala:88)
	at scala.util.control.Exception$Catch.$anonfun$either$1(Exception.scala:252)
	at scala.util.control.Exception$Catch.apply(Exception.scala:228)
	at scala.util.control.Exception$Catch.either(Exception.scala:252)
	at resource.AbstractManagedResource.acquireFor(AbstractManagedResource.scala:88)
	at resource.DeferredExtractableManagedResource.either(AbstractManagedResource.scala:29)
	at com.yahoo.maha.jdbc.JdbcConnection.$anonfun$withConnection$1(JdbcConnection.scala:22)
	at scala.concurrent.BlockContext$DefaultBlockContext$.blockOn(BlockContext.scala:57)
	at scala.concurrent.package$.blocking(package.scala:146)
	at com.yahoo.maha.jdbc.JdbcConnection.withConnection(JdbcConnection.scala:19)
	at com.yahoo.maha.jdbc.JdbcConnection.withStatement(JdbcConnection.scala:30)
	at com.yahoo.maha.jdbc.JdbcConnection.withResultSet(JdbcConnection.scala:51)
	at com.yahoo.maha.jdbc.JdbcConnection.queryForObject(JdbcConnection.scala:69)
	at com.yahoo.maha.executor.presto.PrestoQueryExecutor.execute(PrestoQueryExecutor.scala:42)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$8(QueryPipeline.scala:265)
	at scala.Option.fold(Option.scala:251)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:265)
	... 67 more
Caused by: java.lang.IllegalArgumentException: 1-3-2018
	at org.h2.util.DateTimeUtils.parseDateValue(DateTimeUtils.java:311)
	at org.h2.value.ValueDate.parse(ValueDate.java:79)
	... 100 more
- test null result
- test invalid query engine
09:17:06.963 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - Running query : SELECT CAST(mang_day as VARCHAR) AS mang_day, CAST(advertiser_id as VARCHAR) AS advertiser_id, CAST(campaign_id as VARCHAR) AS campaign_id, CAST(mang_source as VARCHAR) AS mang_source, CAST(mang_spend as VARCHAR) AS mang_spend
FROM(
SELECT getFormattedDate(stats_date) mang_day, COALESCE(CAST(advertiser_id as bigint), 0) advertiser_id, COALESCE(CAST(campaign_id as bigint), 0) campaign_id, '2' mang_source, ROUND(COALESCE(spend, 0.0), 10) mang_spend
FROM(SELECT advertiser_id, campaign_id, stats_date, SUM(spend) spend
FROM ad_stats_presto
WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= '2020-11-03' AND stats_date <= '2020-11-10')
GROUP BY advertiser_id, campaign_id, stats_date

       )
asp0

ORDER BY mang_spend DESC
          )
        queryAlias LIMIT 100
09:17:06.971 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=1 label=mang_day
09:17:06.971 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=2 label=advertiser_id
09:17:06.971 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=3 label=campaign_id
09:17:06.971 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=4 label=mang_source
09:17:06.971 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=5 label=mang_spend
09:17:06.971 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - columnIndexMap from metaData 
(advertiser_id,2)
(campaign_id,3)
(mang_day,1)
(mang_source,4)
(mang_spend,5)

09:17:06.971 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - aliasColumnMap from query 
(advertiser_id,advertiser_id)
(campaign_id,campaign_id)
(mang_day,stats_date)
(mang_source,stats_source)
(mang_spend,spend)

09:17:06.972 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - rowCount = 2
09:17:06.972 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - Successfully retrieved results from Presto: 2
- Non-ogb query for presto_v1 should have aliasColumnMap populated for constant column
09:17:07.041 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - Running query : SELECT CAST(mang_day as VARCHAR) AS mang_day, CAST(advertiser_id as VARCHAR) AS advertiser_id, CAST(mang_campaign_name as VARCHAR) AS mang_campaign_name, CAST(mang_source as VARCHAR) AS mang_source, CAST(mang_spend as VARCHAR) AS mang_spend
FROM(
SELECT mang_day AS mang_day, advertiser_id AS advertiser_id, mang_campaign_name AS mang_campaign_name, '2' AS mang_source, spend AS mang_spend
FROM(
SELECT getFormattedDate(stats_date) mang_day, COALESCE(CAST(advertiser_id as BIGINT), 0) advertiser_id, getCsvEscapedString(CAST(COALESCE(c1.mang_campaign_name, '') AS VARCHAR)) mang_campaign_name, SUM(spend) AS spend
FROM(SELECT advertiser_id, campaign_id, stats_date, SUM(spend) spend
FROM ad_stats_presto
WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= '2020-11-03' AND stats_date <= '2020-11-10')
GROUP BY advertiser_id, campaign_id, stats_date

       )
asp0
LEFT OUTER JOIN (
SELECT name AS mang_campaign_name, id c1_id
FROM campaign_presto
WHERE ((load_time = '2018' )) AND (advertiser_id = 1)
)
c1
ON
asp0.campaign_id = c1.c1_id
       
GROUP BY getFormattedDate(stats_date), COALESCE(CAST(advertiser_id as BIGINT), 0), getCsvEscapedString(CAST(COALESCE(c1.mang_campaign_name, '') AS VARCHAR))
ORDER BY mang_campaign_name DESC) OgbQueryAlias
)
        queryAlias LIMIT 100
09:17:07.066 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=1 label=mang_day
09:17:07.066 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=2 label=advertiser_id
09:17:07.066 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=3 label=mang_campaign_name
09:17:07.066 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=4 label=mang_source
09:17:07.066 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=5 label=mang_spend
09:17:07.067 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - columnIndexMap from metaData 
(advertiser_id,2)
(mang_campaign_name,3)
(mang_day,1)
(mang_source,4)
(mang_spend,5)

09:17:07.067 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - aliasColumnMap from query 
(advertiser_id,advertiser_id)
(mang_campaign_name,name)
(mang_day,stats_date)
(mang_source,stats_source)
(mang_spend,spend)

09:17:07.068 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - rowCount = 2
09:17:07.068 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - Successfully retrieved results from Presto: 2
- ogb query should have aliasColumnMap populated
All tables with fact ad_stats: campaign,ad_group,advertiser,ad
- Should render proper JSON Strings for all public cols.
Run completed in 4 seconds, 988 milliseconds.
Total number of tests run: 9
Suites: completed 2, aborted 0
Tests: succeeded 9, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
[INFO] 
[INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ maha-presto-executor ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/presto/target/maha-presto-executor-6.24-SNAPSHOT.jar
[INFO] 
[INFO] --- maven-jar-plugin:2.6:test-jar (default) @ maha-presto-executor ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/presto/target/maha-presto-executor-6.24-SNAPSHOT-tests.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:jar (default) > generate-sources @ maha-presto-executor >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-presto-executor ---
[INFO] 
[INFO] <<< maven-source-plugin:2.4:jar (default) < generate-sources @ maha-presto-executor <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:jar (default) @ maha-presto-executor ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/presto/target/maha-presto-executor-6.24-SNAPSHOT-sources.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:test-jar (default) > generate-sources @ maha-presto-executor >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-presto-executor ---
[INFO] 
[INFO] <<< maven-source-plugin:2.4:test-jar (default) < generate-sources @ maha-presto-executor <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:test-jar (default) @ maha-presto-executor ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/presto/target/maha-presto-executor-6.24-SNAPSHOT-test-sources.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ maha-presto-executor ---
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/presto/target/maha-presto-executor-6.24-SNAPSHOT.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-presto-executor/6.24-SNAPSHOT/maha-presto-executor-6.24-SNAPSHOT.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/presto/pom.xml to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-presto-executor/6.24-SNAPSHOT/maha-presto-executor-6.24-SNAPSHOT.pom
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/presto/target/maha-presto-executor-6.24-SNAPSHOT-tests.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-presto-executor/6.24-SNAPSHOT/maha-presto-executor-6.24-SNAPSHOT-tests.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/presto/target/maha-presto-executor-6.24-SNAPSHOT-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-presto-executor/6.24-SNAPSHOT/maha-presto-executor-6.24-SNAPSHOT-sources.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/presto/target/maha-presto-executor-6.24-SNAPSHOT-test-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-presto-executor/6.24-SNAPSHOT/maha-presto-executor-6.24-SNAPSHOT-test-sources.jar
[INFO] 
[INFO] >>> scoverage-maven-plugin:1.4.1:report (coverage) > [scoverage]test @ maha-presto-executor >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-presto-executor ---
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:pre-compile (coverage) @ maha-presto-executor ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-presto-executor ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/lgadde/git/Native-Ads/maha/presto/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ maha-presto-executor ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-presto-executor ---
[INFO] /Users/lgadde/git/Native-Ads/maha/presto/src/main/scala:-1: info: compiling
[INFO] Compiling 1 source files to /Users/lgadde/git/Native-Ads/maha/presto/target/scoverage-classes at 1605028627492
[INFO] Cleaning datadir [/Users/lgadde/git/Native-Ads/maha/presto/target/scoverage-data]
[INFO] Beginning coverage instrumentation
[INFO] Instrumentation completed [112 statements]
[INFO] Wrote instrumentation file [/Users/lgadde/git/Native-Ads/maha/presto/target/scoverage-data/scoverage.coverage]
[INFO] Will write measurement data to [/Users/lgadde/git/Native-Ads/maha/presto/target/scoverage-data]
[INFO] prepare-compile in 0 s
[INFO] compile in 5 s
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:post-compile (coverage) @ maha-presto-executor ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-presto-executor ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ maha-presto-executor ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-presto-executor ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-presto-executor ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- scalatest-maven-plugin:2.0.0:test (test) @ maha-presto-executor ---
Discovery starting.
Discovery completed in 398 milliseconds.
Run starting. Expected test count is: 9
PrestoQueryExecutorTest:
09:17:15,655 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Found resource [logback-test.xml] at [file:/Users/lgadde/git/Native-Ads/maha/presto/target/test-classes/logback-test.xml]
09:17:15,656 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs multiple times on the classpath.
09:17:15,656 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [file:/Users/lgadde/git/Native-Ads/maha/presto/target/test-classes/logback-test.xml]
09:17:15,656 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [jar:file:/Users/lgadde/git/Native-Ads/maha/core/target/maha-core-6.24-SNAPSHOT-tests.jar!/logback-test.xml]
09:17:15,818 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - debug attribute not set
09:17:15,819 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.rolling.RollingFileAppender]
09:17:15,830 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [FILE]
09:17:15,841 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
09:17:15,898 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@412111214 - No compression will be used
09:17:15,902 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@412111214 - Will use the pattern application.%d{yyyy-MM-dd}.log for the active file
09:17:15,907 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - The date pattern is 'yyyy-MM-dd' from file name pattern 'application.%d{yyyy-MM-dd}.log'.
09:17:15,907 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Roll-over at midnight.
09:17:15,911 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Setting initial period to Tue Nov 10 09:17:07 PST 2020
09:17:15,914 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - Active log file name: target/logs/application.log
09:17:15,914 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - File property is set to [target/logs/application.log]
09:17:15,915 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]
09:17:15,917 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [STDOUT]
09:17:15,918 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
09:17:15,920 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.classic.AsyncAppender]
09:17:15,922 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [ASYNCFILE]
09:17:15,923 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [FILE] to ch.qos.logback.classic.AsyncAppender[ASYNCFILE]
09:17:15,923 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCFILE] - Attaching appender named [FILE] to AsyncAppender.
09:17:15,923 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCFILE] - Setting discardingThreshold to 51
09:17:15,923 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.classic.AsyncAppender]
09:17:15,923 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [ASYNCSTDOUT]
09:17:15,923 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [STDOUT] to ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT]
09:17:15,923 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT] - Attaching appender named [STDOUT] to AsyncAppender.
09:17:15,923 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT] - Setting discardingThreshold to 51
09:17:15,924 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.zaxxer.hikari] to ERROR
09:17:15,924 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [org.http4s] to ERROR
09:17:15,924 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.yahoo.maha.core] to ERROR
09:17:15,924 |-INFO in ch.qos.logback.classic.joran.action.RootLoggerAction - Setting level of ROOT logger to INFO
09:17:15,924 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [ASYNCFILE] to Logger[ROOT]
09:17:15,924 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [ASYNCSTDOUT] to Logger[ROOT]
09:17:15,924 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration.
09:17:15,925 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@15a04efb - Registering current configuration as safe fallback point

ESAPI: WARNING: System property [org.owasp.esapi.opsteam] is not set
ESAPI: WARNING: System property [org.owasp.esapi.devteam] is not set
ESAPI: Attempting to load ESAPI.properties via file I/O.
ESAPI: Attempting to load ESAPI.properties as resource file via file I/O.
ESAPI: Not found in 'org.owasp.esapi.resources' directory or file not readable: /Users/lgadde/git/Native-Ads/maha/presto/ESAPI.properties
ESAPI: Not found in SystemResource Directory/resourceDirectory: .esapi/ESAPI.properties
ESAPI: Not found in 'user.home' (/Users/lgadde) directory: /Users/lgadde/esapi/ESAPI.properties
ESAPI: Loading ESAPI.properties via file I/O failed. Exception was: java.io.FileNotFoundException
ESAPI: Attempting to load ESAPI.properties via the classpath.
ESAPI: SUCCESSFULLY LOADED ESAPI.properties via the CLASSPATH from '/ (root)' using current thread context class loader!
ESAPI: SecurityConfiguration for Validator.ConfigurationFile.MultiValued not found in ESAPI.properties. Using default: false
ESAPI: Attempting to load validation.properties via file I/O.
ESAPI: Attempting to load validation.properties as resource file via file I/O.
ESAPI: Not found in 'org.owasp.esapi.resources' directory or file not readable: /Users/lgadde/git/Native-Ads/maha/presto/validation.properties
ESAPI: Not found in SystemResource Directory/resourceDirectory: .esapi/validation.properties
ESAPI: Not found in 'user.home' (/Users/lgadde) directory: /Users/lgadde/esapi/validation.properties
ESAPI: Loading validation.properties via file I/O failed.
ESAPI: Attempting to load validation.properties via the classpath.
ESAPI: SUCCESSFULLY LOADED validation.properties via the CLASSPATH from '/ (root)' using current thread context class loader!
09:17:19.112 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - Running query : SELECT CAST(mang_day as VARCHAR) AS mang_day, CAST(ad_id as VARCHAR) AS ad_id, CAST(mang_count as VARCHAR) AS mang_count, CAST(mang_impressions as VARCHAR) AS mang_impressions
FROM(
SELECT getFormattedDate(stats_date) mang_day, COALESCE(CAST(ad_id as bigint), 0) ad_id, COALESCE(CAST(Count as bigint), 0) mang_count, COALESCE(CAST(impressions as bigint), 1) mang_impressions
FROM(SELECT ad_id, stats_date, SUM(impressions) impressions, COUNT(*) Count
FROM ad_stats_presto
WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= '2020-11-03' AND stats_date <= '2020-11-10')
GROUP BY ad_id, stats_date
HAVING (SUM(impressions) > 2014)
       )
asp0

ORDER BY ad_id DESC
          )
        queryAlias LIMIT 100
09:17:19.142 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=1 label=mang_day
09:17:19.143 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=2 label=ad_id
09:17:19.143 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=3 label=mang_count
09:17:19.143 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=4 label=mang_impressions
09:17:19.147 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - columnIndexMap from metaData 
(ad_id,2)
(mang_count,3)
(mang_day,1)
(mang_impressions,4)

09:17:19.148 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - aliasColumnMap from query 
(ad_id,ad_id)
(mang_count,Count)
(mang_day,stats_date)
(mang_impressions,impressions)

09:17:19.161 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - rowCount = 4
09:17:19.162 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - Successfully retrieved results from Presto: 4
- successfully execute async query for ad_stats with greater than filter
09:17:19.230 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - Running query : SELECT CAST(mang_day as VARCHAR) AS mang_day, CAST(ad_id as VARCHAR) AS ad_id, CAST(mang_count as VARCHAR) AS mang_count, CAST(mang_impressions as VARCHAR) AS mang_impressions
FROM(
SELECT getFormattedDate(stats_date) mang_day, COALESCE(CAST(ad_id as bigint), 0) ad_id, COALESCE(CAST(Count as bigint), 0) mang_count, COALESCE(CAST(impressions as bigint), 1) mang_impressions
FROM(SELECT ad_id, stats_date, SUM(impressions) impressions, COUNT(*) Count
FROM ad_stats_presto
WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= '2020-11-03' AND stats_date <= '2020-11-10')
GROUP BY ad_id, stats_date
HAVING (SUM(impressions) < 2014)
       )
asp0

ORDER BY ad_id DESC
          )
        queryAlias LIMIT 100
09:17:19.238 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=1 label=mang_day
09:17:19.239 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=2 label=ad_id
09:17:19.239 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=3 label=mang_count
09:17:19.239 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=4 label=mang_impressions
09:17:19.239 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - columnIndexMap from metaData 
(ad_id,2)
(mang_count,3)
(mang_day,1)
(mang_impressions,4)

09:17:19.239 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - aliasColumnMap from query 
(ad_id,ad_id)
(mang_count,Count)
(mang_day,stats_date)
(mang_impressions,impressions)

09:17:19.241 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - rowCount = 4
09:17:19.241 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - Successfully retrieved results from Presto: 4
- successfully execute async query for ad_stats with less than filter
09:17:19.386 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - Running query : SELECT CAST(mang_day as VARCHAR) AS mang_day, CAST(campaign_id as VARCHAR) AS campaign_id, CAST(ad_group_id as VARCHAR) AS ad_group_id, CAST(ad_id as VARCHAR) AS ad_id, CAST(mang_ad_title as VARCHAR) AS mang_ad_title, CAST(mang_ad_status as VARCHAR) AS mang_ad_status, CAST(mang_ad_date_created as VARCHAR) AS mang_ad_date_created, CAST(mang_ad_date_modified as VARCHAR) AS mang_ad_date_modified, CAST(mang_ad_date_modified_timestamp as VARCHAR) AS mang_ad_date_modified_timestamp, CAST(mang_pricing_type as VARCHAR) AS mang_pricing_type, CAST(network_id as VARCHAR) AS network_id, CAST(mang_impressions as VARCHAR) AS mang_impressions, CAST(max_bid as VARCHAR) AS max_bid, CAST(mang_average_cpc as VARCHAR) AS mang_average_cpc, CAST(mang_spend as VARCHAR) AS mang_spend, CAST(mang_ctr_percentage as VARCHAR) AS mang_ctr_percentage, CAST(mang_ctr as VARCHAR) AS mang_ctr, CAST(mang_country as VARCHAR) AS mang_country
FROM(
SELECT getFormattedDate(stats_date) mang_day, COALESCE(CAST(campaign_id as bigint), 0) campaign_id, COALESCE(CAST(ad_group_id as bigint), 0) ad_group_id, COALESCE(CAST(asp0.ad_id as bigint), 0) ad_id, getCsvEscapedString(CAST(COALESCE(a1.mang_ad_title, '') AS VARCHAR)) mang_ad_title, COALESCE(CAST(a1.mang_ad_status as VARCHAR), 'NA') mang_ad_status, COALESCE(CAST(a1.mang_ad_date_created as VARCHAR), 'NA') mang_ad_date_created, COALESCE(CAST(a1.mang_ad_date_modified as VARCHAR), 'NA') mang_ad_date_modified, COALESCE(cast(a1.mang_ad_date_modified_timestamp as VARCHAR), 'NA') mang_ad_date_modified_timestamp, COALESCE(CAST(price_type as varchar), 'NA') mang_pricing_type, COALESCE(CAST(network_type as VARCHAR), 'NA') network_id, COALESCE(CAST(impressions as bigint), 1) mang_impressions, ROUND(COALESCE(max_bid, 0.0), 10) max_bid, ROUND(COALESCE((spend / clicks), 0), 10) mang_average_cpc, ROUND(COALESCE(spend, 0.0), 10) mang_spend, ROUND(COALESCE((CASE WHEN impressions = 0 THEN 0.0 ELSE CAST(clicks AS DOUBLE) / impressions END * 100), 0), 10) mang_ctr_percentage, ROUND(COALESCE(CTR, 0), 10) mang_ctr, COALESCE(CAST(country as VARCHAR), 'NA') mang_country
FROM(SELECT CASE WHEN (network_type IN ('TEST_PUBLISHER')) THEN 'Test Publisher' WHEN (network_type IN ('CONTENT_S')) THEN 'Content Secured' WHEN (network_type IN ('EXTERNAL')) THEN 'External Partners' WHEN (network_type IN ('INTERNAL')) THEN 'Internal Properties' ELSE 'NONE' END network_type, stats_date, CASE WHEN (price_type IN (1)) THEN 'CPC' WHEN (price_type IN (6)) THEN 'CPV' WHEN (price_type IN (2)) THEN 'CPA' WHEN (price_type IN (-10)) THEN 'CPE' WHEN (price_type IN (-20)) THEN 'CPF' WHEN (price_type IN (7)) THEN 'CPCV' WHEN (price_type IN (3)) THEN 'CPM' ELSE 'NONE' END price_type, country, ad_group_id, ad_id, campaign_id, SUM(impressions) impressions, SUM(spend) spend, MAX(max_bid) max_bid, (SUM(CASE WHEN impressions = 0 THEN 0.0 ELSE CAST(clicks AS DOUBLE) / impressions END)) CTR, SUM(clicks) clicks
FROM ad_stats_presto
WHERE (advertiser_id = 1) AND (stats_source = 2) AND (price_type IN (1,2)) AND (stats_date >= '2020-11-03' AND stats_date <= '2020-11-10')
GROUP BY CASE WHEN (network_type IN ('TEST_PUBLISHER')) THEN 'Test Publisher' WHEN (network_type IN ('CONTENT_S')) THEN 'Content Secured' WHEN (network_type IN ('EXTERNAL')) THEN 'External Partners' WHEN (network_type IN ('INTERNAL')) THEN 'Internal Properties' ELSE 'NONE' END, stats_date, CASE WHEN (price_type IN (1)) THEN 'CPC' WHEN (price_type IN (6)) THEN 'CPV' WHEN (price_type IN (2)) THEN 'CPA' WHEN (price_type IN (-10)) THEN 'CPE' WHEN (price_type IN (-20)) THEN 'CPF' WHEN (price_type IN (7)) THEN 'CPCV' WHEN (price_type IN (3)) THEN 'CPM' ELSE 'NONE' END, country, ad_group_id, ad_id, campaign_id

       )
asp0
LEFT OUTER JOIN (
SELECT title AS mang_ad_title, id a1_id, functionIF(status = 'ON', 'ON', 'OFF') AS mang_ad_status, last_updated AS mang_ad_date_modified_timestamp, format_datetime(last_updated, 'YYYY-MM-DD') AS mang_ad_date_modified, format_datetime(last_updated, 'YYYY-MM-DD') AS mang_ad_date_created
FROM ad_presto
WHERE ((load_time = '2018' )) AND (advertiser_id = 1)
)
a1
ON
asp0.ad_id = a1.a1_id
       
ORDER BY mang_ad_title DESC
          )
        queryAlias LIMIT 100
09:17:19.451 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=1 label=mang_day
09:17:19.451 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=2 label=campaign_id
09:17:19.451 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=3 label=ad_group_id
09:17:19.451 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=4 label=ad_id
09:17:19.451 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=5 label=mang_ad_title
09:17:19.451 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=6 label=mang_ad_status
09:17:19.451 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=7 label=mang_ad_date_created
09:17:19.451 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=8 label=mang_ad_date_modified
09:17:19.451 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=9 label=mang_ad_date_modified_timestamp
09:17:19.451 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=10 label=mang_pricing_type
09:17:19.451 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=11 label=network_id
09:17:19.451 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=12 label=mang_impressions
09:17:19.451 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=13 label=max_bid
09:17:19.451 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=14 label=mang_average_cpc
09:17:19.451 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=15 label=mang_spend
09:17:19.452 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=16 label=mang_ctr_percentage
09:17:19.452 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=17 label=mang_ctr
09:17:19.452 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=18 label=mang_country
09:17:19.452 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - columnIndexMap from metaData 
(ad_group_id,3)
(ad_id,4)
(campaign_id,2)
(mang_ad_date_created,7)
(mang_ad_date_modified,8)
(mang_ad_date_modified_timestamp,9)
(mang_ad_status,6)
(mang_ad_title,5)
(mang_average_cpc,14)
(mang_country,18)
(mang_ctr,17)
(mang_ctr_percentage,16)
(mang_day,1)
(mang_impressions,12)
(mang_pricing_type,10)
(mang_spend,15)
(max_bid,13)
(network_id,11)

09:17:19.452 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - aliasColumnMap from query 
(ad_group_id,ad_group_id)
(ad_id,ad_id)
(campaign_id,campaign_id)
(mang_ad_date_created,Ad Date Created)
(mang_ad_date_modified,Ad Date Modified)
(mang_ad_date_modified_timestamp,last_updated)
(mang_ad_status,Ad Status)
(mang_ad_title,title)
(mang_average_cpc,average_cpc)
(mang_country,country)
(mang_ctr,CTR)
(mang_ctr_percentage,CTR Percentage)
(mang_day,stats_date)
(mang_impressions,impressions)
(mang_pricing_type,price_type)
(mang_spend,spend)
(max_bid,max_bid)
(network_id,network_type)

09:17:19.503 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - rowCount = 16
09:17:19.503 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - Successfully retrieved results from Presto: 16
- successfully execute async query for ad_stats
09:17:19.552 ERROR [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - Failed query : SELECT CAST(mang_day as VARCHAR) AS mang_day, CAST(ad_id as VARCHAR) AS ad_id, CAST(mang_ad_creation_date as VARCHAR) AS mang_ad_creation_date, CAST(mang_impressions as VARCHAR) AS mang_impressions
FROM(
SELECT getFormattedDate(stats_date) mang_day, COALESCE(CAST(asp0.ad_id as bigint), 0) ad_id, getFormattedDate(a1.mang_ad_creation_date) mang_ad_creation_date, COALESCE(CAST(impressions as bigint), 1) mang_impressions
FROM(SELECT ad_id, stats_date, SUM(impressions) impressions
FROM ad_stats_presto
WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= '2020-11-03' AND stats_date <= '2020-11-10')
GROUP BY ad_id, stats_date

       )
asp0
LEFT OUTER JOIN (
SELECT created_date AS mang_ad_creation_date, id a1_id
FROM ad_presto
WHERE ((load_time = '2018' )) AND (advertiser_id = 1)
)
a1
ON
asp0.ad_id = a1.a1_id
       

          )
        queryAlias LIMIT 100
java.lang.RuntimeException: query execution failed : Cannot parse "DATE" constant "01-03-2018" [22007-191]
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:20)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.$anonfun$execute$5(QueryPipeline.scala:167)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.execute(QueryPipeline.scala:166)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.execute(QueryPipeline.scala:161)
	at com.yahoo.maha.executor.presto.PrestoQueryExecutorTest.$anonfun$new$7(PrestoQueryExecutorTest.scala:725)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.funsuite.AnyFunSuiteLike$$anon$1.apply(AnyFunSuiteLike.scala:189)
	at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
	at org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)
	at org.scalatest.funsuite.AnyFunSuite.withFixture(AnyFunSuite.scala:1562)
	at org.scalatest.funsuite.AnyFunSuiteLike.invokeWithFixture$1(AnyFunSuiteLike.scala:187)
	at org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$runTest$1(AnyFunSuiteLike.scala:199)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTest(AnyFunSuiteLike.scala:199)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTest$(AnyFunSuiteLike.scala:181)
	at org.scalatest.funsuite.AnyFunSuite.runTest(AnyFunSuite.scala:1562)
	at org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$runTests$1(AnyFunSuiteLike.scala:232)
- test invalid result
	at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:413)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:475)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTests(AnyFunSuiteLike.scala:232)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTests$(AnyFunSuiteLike.scala:231)
	at org.scalatest.funsuite.AnyFunSuite.runTests(AnyFunSuite.scala:1562)
	at org.scalatest.Suite.run(Suite.scala:1112)
	at org.scalatest.Suite.run$(Suite.scala:1094)
	at org.scalatest.funsuite.AnyFunSuite.org$scalatest$funsuite$AnyFunSuiteLike$$super$run(AnyFunSuite.scala:1562)
	at org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$run$1(AnyFunSuiteLike.scala:236)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:535)
	at org.scalatest.funsuite.AnyFunSuiteLike.run(AnyFunSuiteLike.scala:236)
	at org.scalatest.funsuite.AnyFunSuiteLike.run$(AnyFunSuiteLike.scala:235)
	at com.yahoo.maha.executor.presto.PrestoQueryExecutorTest.org$scalatest$BeforeAndAfterAll$$super$run(PrestoQueryExecutorTest.scala:31)
	at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)
	at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:210)
	at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:208)
	at com.yahoo.maha.executor.presto.PrestoQueryExecutorTest.run(PrestoQueryExecutorTest.scala:31)
	at org.scalatest.Suite.callExecuteOnSuite$1(Suite.scala:1175)
	at org.scalatest.Suite.$anonfun$runNestedSuites$1(Suite.scala:1222)
	at scala.collection.IndexedSeqOptimized.foreach(IndexedSeqOptimized.scala:36)
	at scala.collection.IndexedSeqOptimized.foreach$(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:198)
	at org.scalatest.Suite.runNestedSuites(Suite.scala:1220)
	at org.scalatest.Suite.runNestedSuites$(Suite.scala:1154)
	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:30)
	at org.scalatest.Suite.run(Suite.scala:1109)
	at org.scalatest.Suite.run$(Suite.scala:1094)
	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:30)
	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:45)
	at org.scalatest.tools.Runner$.$anonfun$doRunRunRunDaDoRunRun$13(Runner.scala:1320)
	at org.scalatest.tools.Runner$.$anonfun$doRunRunRunDaDoRunRun$13$adapted(Runner.scala:1314)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:1314)
	at org.scalatest.tools.Runner$.$anonfun$runOptionallyWithPassFailReporter$24(Runner.scala:993)
	at org.scalatest.tools.Runner$.$anonfun$runOptionallyWithPassFailReporter$24$adapted(Runner.scala:971)
	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:1480)
	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:971)
	at org.scalatest.tools.Runner$.main(Runner.scala:775)
	at org.scalatest.tools.Runner.main(Runner.scala)
Caused by: org.h2.jdbc.JdbcSQLException: Cannot parse "DATE" constant "01-03-2018" [22007-191]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)
	at org.h2.message.DbException.get(DbException.java:168)
	at org.h2.value.ValueDate.parse(ValueDate.java:81)
	at org.h2.value.Value.convertTo(Value.java:909)
	at org.h2.value.Value.getDate(Value.java:404)
	at org.h2.jdbc.JdbcResultSet.getDate(JdbcResultSet.java:375)
	at com.zaxxer.hikari.pool.HikariProxyResultSet.getDate(HikariProxyResultSet.java)
	at com.yahoo.maha.core.query.ColumnValueExtractor.getColumnValue(QueryExecutor.scala:165)
	at com.yahoo.maha.executor.presto.PrestoQueryExecutor.$anonfun$execute$10(PrestoQueryExecutor.scala:69)
	at com.yahoo.maha.executor.presto.PrestoQueryExecutor.$anonfun$execute$10$adapted(PrestoQueryExecutor.scala:66)
	at scala.collection.TraversableLike$WithFilter.$anonfun$foreach$1(TraversableLike.scala:877)
	at scala.collection.immutable.Map$Map4.foreach(Map.scala:236)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:876)
	at com.yahoo.maha.executor.presto.PrestoQueryExecutor.$anonfun$execute$2(PrestoQueryExecutor.scala:66)
	at com.yahoo.maha.executor.presto.PrestoQueryExecutor.$anonfun$execute$2$adapted(PrestoQueryExecutor.scala:42)
	at com.yahoo.maha.jdbc.JdbcConnection.$anonfun$queryForObject$1(JdbcConnection.scala:72)
	at com.yahoo.maha.jdbc.JdbcConnection.$anonfun$withResultSet$1(JdbcConnection.scala:51)
	at com.yahoo.maha.jdbc.JdbcConnection.$anonfun$withStatement$1(JdbcConnection.scala:33)
	at com.yahoo.maha.jdbc.JdbcConnection.$anonfun$withConnection$3(JdbcConnection.scala:22)
	at resource.AbstractManagedResource.$anonfun$acquireFor$1(AbstractManagedResource.scala:88)
	at scala.util.control.Exception$Catch.$anonfun$either$1(Exception.scala:252)
	at scala.util.control.Exception$Catch.apply(Exception.scala:228)
	at scala.util.control.Exception$Catch.either(Exception.scala:252)
	at resource.AbstractManagedResource.acquireFor(AbstractManagedResource.scala:88)
	at resource.DeferredExtractableManagedResource.either(AbstractManagedResource.scala:29)
	at com.yahoo.maha.jdbc.JdbcConnection.$anonfun$withConnection$1(JdbcConnection.scala:22)
	at scala.concurrent.BlockContext$DefaultBlockContext$.blockOn(BlockContext.scala:57)
	at scala.concurrent.package$.blocking(package.scala:146)
	at com.yahoo.maha.jdbc.JdbcConnection.withConnection(JdbcConnection.scala:19)
	at com.yahoo.maha.jdbc.JdbcConnection.withStatement(JdbcConnection.scala:30)
	at com.yahoo.maha.jdbc.JdbcConnection.withResultSet(JdbcConnection.scala:51)
	at com.yahoo.maha.jdbc.JdbcConnection.queryForObject(JdbcConnection.scala:69)
	at com.yahoo.maha.executor.presto.PrestoQueryExecutor.execute(PrestoQueryExecutor.scala:42)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$8(QueryPipeline.scala:265)
	at scala.Option.fold(Option.scala:251)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:265)
	... 67 more
Caused by: java.lang.IllegalArgumentException: 1-3-2018
	at org.h2.util.DateTimeUtils.parseDateValue(DateTimeUtils.java:311)
	at org.h2.value.ValueDate.parse(ValueDate.java:79)
	... 100 more
- test null result
- test invalid query engine
09:17:20.024 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - Running query : SELECT CAST(mang_day as VARCHAR) AS mang_day, CAST(advertiser_id as VARCHAR) AS advertiser_id, CAST(campaign_id as VARCHAR) AS campaign_id, CAST(mang_source as VARCHAR) AS mang_source, CAST(mang_spend as VARCHAR) AS mang_spend
FROM(
SELECT getFormattedDate(stats_date) mang_day, COALESCE(CAST(advertiser_id as bigint), 0) advertiser_id, COALESCE(CAST(campaign_id as bigint), 0) campaign_id, '2' mang_source, ROUND(COALESCE(spend, 0.0), 10) mang_spend
FROM(SELECT advertiser_id, campaign_id, stats_date, SUM(spend) spend
FROM ad_stats_presto
WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= '2020-11-03' AND stats_date <= '2020-11-10')
GROUP BY advertiser_id, campaign_id, stats_date

       )
asp0

ORDER BY mang_spend DESC
          )
        queryAlias LIMIT 100
09:17:20.031 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=1 label=mang_day
09:17:20.031 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=2 label=advertiser_id
09:17:20.031 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=3 label=campaign_id
09:17:20.031 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=4 label=mang_source
09:17:20.032 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=5 label=mang_spend
09:17:20.032 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - columnIndexMap from metaData 
(advertiser_id,2)
(campaign_id,3)
(mang_day,1)
(mang_source,4)
(mang_spend,5)

09:17:20.032 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - aliasColumnMap from query 
(advertiser_id,advertiser_id)
(campaign_id,campaign_id)
(mang_day,stats_date)
(mang_source,stats_source)
(mang_spend,spend)

09:17:20.033 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - rowCount = 2
09:17:20.033 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - Successfully retrieved results from Presto: 2
- Non-ogb query for presto_v1 should have aliasColumnMap populated for constant column
09:17:20.098 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - Running query : SELECT CAST(mang_day as VARCHAR) AS mang_day, CAST(advertiser_id as VARCHAR) AS advertiser_id, CAST(mang_campaign_name as VARCHAR) AS mang_campaign_name, CAST(mang_source as VARCHAR) AS mang_source, CAST(mang_spend as VARCHAR) AS mang_spend
FROM(
SELECT mang_day AS mang_day, advertiser_id AS advertiser_id, mang_campaign_name AS mang_campaign_name, '2' AS mang_source, spend AS mang_spend
FROM(
SELECT getFormattedDate(stats_date) mang_day, COALESCE(CAST(advertiser_id as BIGINT), 0) advertiser_id, getCsvEscapedString(CAST(COALESCE(c1.mang_campaign_name, '') AS VARCHAR)) mang_campaign_name, SUM(spend) AS spend
FROM(SELECT advertiser_id, campaign_id, stats_date, SUM(spend) spend
FROM ad_stats_presto
WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= '2020-11-03' AND stats_date <= '2020-11-10')
GROUP BY advertiser_id, campaign_id, stats_date

       )
asp0
LEFT OUTER JOIN (
SELECT name AS mang_campaign_name, id c1_id
FROM campaign_presto
WHERE ((load_time = '2018' )) AND (advertiser_id = 1)
)
c1
ON
asp0.campaign_id = c1.c1_id
       
GROUP BY getFormattedDate(stats_date), COALESCE(CAST(advertiser_id as BIGINT), 0), getCsvEscapedString(CAST(COALESCE(c1.mang_campaign_name, '') AS VARCHAR))
ORDER BY mang_campaign_name DESC) OgbQueryAlias
)
        queryAlias LIMIT 100
09:17:20.126 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=1 label=mang_day
09:17:20.126 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=2 label=advertiser_id
09:17:20.126 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=3 label=mang_campaign_name
09:17:20.126 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=4 label=mang_source
09:17:20.126 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - metaData index=5 label=mang_spend
09:17:20.127 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - columnIndexMap from metaData 
(advertiser_id,2)
(mang_campaign_name,3)
(mang_day,1)
(mang_source,4)
(mang_spend,5)

09:17:20.127 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - aliasColumnMap from query 
(advertiser_id,advertiser_id)
(mang_campaign_name,name)
(mang_day,stats_date)
(mang_source,stats_source)
(mang_spend,spend)

09:17:20.128 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - rowCount = 2
09:17:20.128 INFO  [ScalaTest-main-running-PrestoQueryExecutorTest] c.y.m.e.p.PrestoQueryExecutor - Successfully retrieved results from Presto: 2
- ogb query should have aliasColumnMap populated
All tables with fact ad_stats: campaign,ad_group,advertiser,ad
- Should render proper JSON Strings for all public cols.
Run completed in 5 seconds, 32 milliseconds.
Total number of tests run: 9
Suites: completed 2, aborted 0
Tests: succeeded 9, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
[INFO] 
[INFO] <<< scoverage-maven-plugin:1.4.1:report (coverage) < [scoverage]test @ maha-presto-executor <<<
[INFO] 
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:report (coverage) @ maha-presto-executor ---
[INFO] Reading scoverage instrumentation [/Users/lgadde/git/Native-Ads/maha/presto/target/scoverage-data/scoverage.coverage]...
[INFO] Reading scoverage measurements [/Users/lgadde/git/Native-Ads/maha/presto/target/scoverage-data/scoverage.measurements.*]...
[INFO] Generating coverage reports...
[INFO] Written Cobertura XML report [/Users/lgadde/git/Native-Ads/maha/presto/target/cobertura.xml]
[INFO] Written XML coverage report [/Users/lgadde/git/Native-Ads/maha/presto/target/scoverage.xml]
[INFO] Written HTML coverage report [/Users/lgadde/git/Native-Ads/maha/presto/target/site/scoverage/index.html]
[INFO] Statement coverage.: 91.96%
[INFO] Branch coverage....: 81.82%
[INFO] Coverage reports completed.
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:check-only (coverage) @ maha-presto-executor ---
[INFO] Statement coverage.: 91.96%
[INFO] Branch coverage....: 81.82%
[INFO] Coverage is above minimum [91.96% >= 90.00%]
[INFO] 
[INFO] ---------------< com.yahoo.maha:maha-postgres-executor >----------------
[INFO] Building maha postgres executor 6.24-SNAPSHOT                    [11/15]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ maha-postgres-executor ---
[INFO] Deleting /Users/lgadde/git/Native-Ads/maha/postgres/target
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-postgres-executor ---
[INFO] Add Source directory: /Users/lgadde/git/Native-Ads/maha/postgres/src/main/scala
[INFO] Add Test Source directory: /Users/lgadde/git/Native-Ads/maha/postgres/src/test/scala
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-postgres-executor ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/lgadde/git/Native-Ads/maha/postgres/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ maha-postgres-executor ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-postgres-executor ---
[INFO] /Users/lgadde/git/Native-Ads/maha/postgres/src/main/scala:-1: info: compiling
[INFO] Compiling 2 source files to /Users/lgadde/git/Native-Ads/maha/postgres/target/classes at 1605028640865
[INFO] prepare-compile in 0 s
[INFO] compile in 5 s
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-postgres-executor ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ maha-postgres-executor ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-postgres-executor ---
[INFO] /Users/lgadde/git/Native-Ads/maha/postgres/src/test/scala:-1: info: compiling
[INFO] Compiling 1 source files to /Users/lgadde/git/Native-Ads/maha/postgres/target/test-classes at 1605028646297
[WARNING] /Users/lgadde/git/Native-Ads/maha/postgres/src/test/scala/com/yahoo/maha/executor/postgres/PostgresQueryExecutorTest.scala:842: warning: a pure expression does nothing in statement position
[WARNING]     withMockDruidQueryExecutor(rl => rl.foreach(r => r)) {
[WARNING]                                                      ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/postgres/src/test/scala/com/yahoo/maha/executor/postgres/PostgresQueryExecutorTest.scala:1082: warning: a pure expression does nothing in statement position; multiline expressions may require enclosing parentheses
[WARNING]         (q)
[WARNING]          ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/postgres/src/test/scala/com/yahoo/maha/executor/postgres/PostgresQueryExecutorTest.scala:24: warning: Unused import
[WARNING] import org.apache.druid.common.config.NullHandling
[WARNING]                                       ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/postgres/src/test/scala/com/yahoo/maha/executor/postgres/PostgresQueryExecutorTest.scala:48: warning: private val db in class PostgresQueryExecutorTest is never used
[WARNING]   private val db = UUID.randomUUID().toString.replace("-", "")
[WARNING]               ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/postgres/src/test/scala/com/yahoo/maha/executor/postgres/PostgresQueryExecutorTest.scala:233: warning: private default argument in class PostgresQueryExecutorTest is never used
[WARNING]   private[this] def pubfact(forcedFilters: Set[ForcedFilter] = Set.empty): PublicFact = {
[WARNING]                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/postgres/src/test/scala/com/yahoo/maha/executor/postgres/PostgresQueryExecutorTest.scala:289: warning: private default argument in class PostgresQueryExecutorTest is never used
[WARNING]   private[this] def pubfactInvalid(forcedFilters: Set[ForcedFilter] = Set.empty): PublicFact = {
[WARNING]                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/postgres/src/test/scala/com/yahoo/maha/executor/postgres/PostgresQueryExecutorTest.scala:343: warning: private default argument in class PostgresQueryExecutorTest is never used
[WARNING]   private[this] def druidpubfact(forcedFilters: Set[ForcedFilter] = Set.empty): PublicFact = {
[WARNING]                                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/postgres/src/test/scala/com/yahoo/maha/executor/postgres/PostgresQueryExecutorTest.scala:642: warning: local val sqlQuery in value <local PostgresQueryExecutorTest> is never used
[WARNING]     val sqlQuery =  queryPipeline.queryChain.drivingQuery.asInstanceOf[PostgresQuery].asString
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/postgres/src/test/scala/com/yahoo/maha/executor/postgres/PostgresQueryExecutorTest.scala:697: warning: local val sqlQuery in value <local PostgresQueryExecutorTest> is never used
[WARNING]     val sqlQuery =  queryPipeline.queryChain.drivingQuery.asInstanceOf[PostgresQuery].asString
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/postgres/src/test/scala/com/yahoo/maha/executor/postgres/PostgresQueryExecutorTest.scala:751: warning: local val sqlQuery in value <local PostgresQueryExecutorTest> is never used
[WARNING]     val sqlQuery =  queryPipeline.queryChain.drivingQuery.asInstanceOf[PostgresQuery].asString
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/postgres/src/test/scala/com/yahoo/maha/executor/postgres/PostgresQueryExecutorTest.scala:817: warning: local val sqlQuery in value <local PostgresQueryExecutorTest> is never used
[WARNING]     val sqlQuery =  queryPipeline.queryChain.drivingQuery.asInstanceOf[PostgresQuery].asString
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/postgres/src/test/scala/com/yahoo/maha/executor/postgres/PostgresQueryExecutorTest.scala:884: warning: local val sqlQuery in value <local PostgresQueryExecutorTest> is never used
[WARNING]       val sqlQuery = queryPipeline.queryChain.drivingQuery.asInstanceOf[PostgresQuery].asString
[WARNING]           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/postgres/src/test/scala/com/yahoo/maha/executor/postgres/PostgresQueryExecutorTest.scala:1000: warning: local val sqlQuery in value <local PostgresQueryExecutorTest> is never used
[WARNING]     val sqlQuery =  queryPipeline.queryChain.drivingQuery.asInstanceOf[PostgresQuery].asString
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/postgres/src/test/scala/com/yahoo/maha/executor/postgres/PostgresQueryExecutorTest.scala:1044: warning: local val sqlQuery in value <local PostgresQueryExecutorTest> is never used
[WARNING]     val sqlQuery =  queryPipeline.queryChain.drivingQuery.asInstanceOf[PostgresQuery].asString
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/postgres/src/test/scala/com/yahoo/maha/executor/postgres/PostgresQueryExecutorTest.scala:1096: warning: local var executor in value <local PostgresQueryExecutorTest> is never used
[WARNING]     var executor : PostgresQueryExecutor = Mockito.spy(postgresQueryExecutor.get)
[WARNING]         ^
[WARNING] 15 warnings found
[INFO] prepare-compile in 0 s
[INFO] compile in 8 s
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-postgres-executor ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- scalatest-maven-plugin:2.0.0:test (test) @ maha-postgres-executor ---
Discovery starting.
09:17:37,535 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Found resource [logback-test.xml] at [file:/Users/lgadde/git/Native-Ads/maha/postgres/target/test-classes/logback-test.xml]
09:17:37,536 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs multiple times on the classpath.
09:17:37,536 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [file:/Users/lgadde/git/Native-Ads/maha/postgres/target/test-classes/logback-test.xml]
09:17:37,536 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [jar:file:/Users/lgadde/git/Native-Ads/maha/core/target/maha-core-6.24-SNAPSHOT-tests.jar!/logback-test.xml]
09:17:37,695 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - debug attribute not set
09:17:37,696 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.rolling.RollingFileAppender]
09:17:37,706 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [FILE]
09:17:37,716 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
09:17:37,774 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@1365767549 - No compression will be used
09:17:37,776 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@1365767549 - Will use the pattern application.%d{yyyy-MM-dd}.log for the active file
09:17:37,783 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - The date pattern is 'yyyy-MM-dd' from file name pattern 'application.%d{yyyy-MM-dd}.log'.
09:17:37,783 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Roll-over at midnight.
09:17:37,786 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Setting initial period to Tue Nov 10 09:17:37 PST 2020
09:17:37,789 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - Active log file name: target/logs/application.log
09:17:37,789 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - File property is set to [target/logs/application.log]
09:17:37,791 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]
09:17:37,793 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [STDOUT]
09:17:37,793 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
09:17:37,796 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.classic.AsyncAppender]
09:17:37,798 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [ASYNCFILE]
09:17:37,799 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [FILE] to ch.qos.logback.classic.AsyncAppender[ASYNCFILE]
09:17:37,799 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCFILE] - Attaching appender named [FILE] to AsyncAppender.
09:17:37,799 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCFILE] - Setting discardingThreshold to 51
09:17:37,799 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.classic.AsyncAppender]
09:17:37,799 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [ASYNCSTDOUT]
09:17:37,799 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [STDOUT] to ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT]
09:17:37,799 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT] - Attaching appender named [STDOUT] to AsyncAppender.
09:17:37,799 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT] - Setting discardingThreshold to 51
09:17:37,800 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.zaxxer.hikari] to ERROR
09:17:37,800 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [org.http4s] to ERROR
09:17:37,800 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.yahoo.maha.core] to ERROR
09:17:37,800 |-INFO in ch.qos.logback.classic.joran.action.RootLoggerAction - Setting level of ROOT logger to INFO
09:17:37,800 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [ASYNCFILE] to Logger[ROOT]
09:17:37,800 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [ASYNCSTDOUT] to Logger[ROOT]
09:17:37,800 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration.
09:17:37,801 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@64b0598 - Registering current configuration as safe fallback point

09:17:37.836 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - Detected a Darwin x86_64 system
09:17:37.959 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - Extracting Postgres...
09:17:41.984 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - Postgres binaries at /Users/lgadde/git/Native-Ads/maha/postgres/target/embedded-pg/PG-3d7ce5d05cd575a649dd635576931b19
09:17:43.589 INFO  [log:pid(87986)] init-dbe5a9cc-6351-4b08-9ef5-893695053093:initdb - The files belonging to this database system will be owned by user "lgadde".
09:17:43.589 INFO  [log:pid(87986)] init-dbe5a9cc-6351-4b08-9ef5-893695053093:initdb - This user must also own the server process.
09:17:43.589 INFO  [log:pid(87986)] init-dbe5a9cc-6351-4b08-9ef5-893695053093:initdb - 
09:17:43.590 INFO  [log:pid(87986)] init-dbe5a9cc-6351-4b08-9ef5-893695053093:initdb - The database cluster will be initialized with locale "en_US.UTF-8".
09:17:43.590 INFO  [log:pid(87986)] init-dbe5a9cc-6351-4b08-9ef5-893695053093:initdb - The default text search configuration will be set to "english".
09:17:43.590 INFO  [log:pid(87986)] init-dbe5a9cc-6351-4b08-9ef5-893695053093:initdb - 
09:17:43.590 INFO  [log:pid(87986)] init-dbe5a9cc-6351-4b08-9ef5-893695053093:initdb - Data page checksums are disabled.
09:17:43.590 INFO  [log:pid(87986)] init-dbe5a9cc-6351-4b08-9ef5-893695053093:initdb - 
09:17:43.590 INFO  [log:pid(87986)] init-dbe5a9cc-6351-4b08-9ef5-893695053093:initdb - fixing permissions on existing directory /Users/lgadde/git/Native-Ads/maha/postgres/target/epg4950463023525111245 ... ok
09:17:43.590 INFO  [log:pid(87986)] init-dbe5a9cc-6351-4b08-9ef5-893695053093:initdb - creating subdirectories ... ok
09:17:43.627 INFO  [log:pid(87986)] init-dbe5a9cc-6351-4b08-9ef5-893695053093:initdb - selecting default max_connections ... 100
09:17:43.666 INFO  [log:pid(87986)] init-dbe5a9cc-6351-4b08-9ef5-893695053093:initdb - selecting default shared_buffers ... 128MB
09:17:43.666 INFO  [log:pid(87986)] init-dbe5a9cc-6351-4b08-9ef5-893695053093:initdb - selecting dynamic shared memory implementation ... posix
09:17:43.739 INFO  [log:pid(87986)] init-dbe5a9cc-6351-4b08-9ef5-893695053093:initdb - creating configuration files ... ok
09:17:44.071 INFO  [log:pid(87986)] init-dbe5a9cc-6351-4b08-9ef5-893695053093:initdb - running bootstrap script ... ok
09:17:46.385 INFO  [log:pid(87986)] init-dbe5a9cc-6351-4b08-9ef5-893695053093:initdb - performing post-bootstrap initialization ... ok
09:17:46.449 INFO  [log:pid(87986)] init-dbe5a9cc-6351-4b08-9ef5-893695053093:initdb - syncing data to disk ... ok
09:17:46.449 INFO  [log:pid(87986)] init-dbe5a9cc-6351-4b08-9ef5-893695053093:initdb - 
09:17:46.449 INFO  [log:pid(87986)] init-dbe5a9cc-6351-4b08-9ef5-893695053093:initdb - Success. You can now start the database server using:
09:17:46.449 INFO  [log:pid(87986)] init-dbe5a9cc-6351-4b08-9ef5-893695053093:initdb - 
09:17:46.449 INFO  [log:pid(87986)] init-dbe5a9cc-6351-4b08-9ef5-893695053093:initdb -     /Users/lgadde/git/Native-Ads/maha/postgres/target/embedded-pg/PG-3d7ce5d05cd575a649dd635576931b19/bin/pg_ctl -D /Users/lgadde/git/Native-Ads/maha/postgres/target/epg4950463023525111245 -l logfile start
09:17:46.449 INFO  [log:pid(87986)] init-dbe5a9cc-6351-4b08-9ef5-893695053093:initdb - 
09:17:46.450 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - dbe5a9cc-6351-4b08-9ef5-893695053093 initdb completed in 00:00:04.463
09:17:46.466 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - dbe5a9cc-6351-4b08-9ef5-893695053093 postmaster started as java.lang.UNIXProcess@13b3d178 on port 51639.  Waiting up to PT10S for server startup to finish.
09:17:46.588 INFO  [log:pid(88006)] pg-dbe5a9cc-6351-4b08-9ef5-893695053093 - waiting for server to start....2020-11-10 09:17:46.588 PST [88012] LOG:  listening on IPv4 address "127.0.0.1", port 51639
09:17:46.589 INFO  [log:pid(88006)] pg-dbe5a9cc-6351-4b08-9ef5-893695053093 - 2020-11-10 09:17:46.588 PST [88012] LOG:  listening on IPv6 address "::1", port 51639
09:17:46.589 INFO  [log:pid(88006)] pg-dbe5a9cc-6351-4b08-9ef5-893695053093 - 2020-11-10 09:17:46.589 PST [88012] LOG:  listening on Unix socket "/tmp/.s.PGSQL.51639"
09:17:46.606 INFO  [log:pid(88006)] pg-dbe5a9cc-6351-4b08-9ef5-893695053093 - 2020-11-10 09:17:46.606 PST [88013] LOG:  database system was shut down at 2020-11-10 09:17:46 PST
09:17:46.611 INFO  [log:pid(88006)] pg-dbe5a9cc-6351-4b08-9ef5-893695053093 - 2020-11-10 09:17:46.611 PST [88012] LOG:  database system is ready to accept connections
09:17:46.635 INFO  [log:pid(88006)] pg-dbe5a9cc-6351-4b08-9ef5-893695053093 - 2020-11-10 09:17:46.635 PST [88020] LOG:  incomplete startup packet
09:17:46.657 INFO  [log:pid(88006)] pg-dbe5a9cc-6351-4b08-9ef5-893695053093 -  done
09:17:46.761 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - dbe5a9cc-6351-4b08-9ef5-893695053093 postmaster startup finished in 00:00:00.308
Discovery completed in 9 seconds, 648 milliseconds.
Run starting. Expected test count is: 11
PostgresQueryExecutorTest:
- successfully execute async query for ad_stats
- successfully execute sync query for ad_stats
- successfully execute sync query for ad_stats with greater than filter
- successfully execute sync query for ad_stats with less than filter
09:17:48.936 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - Running query : SELECT  *
      FROM (
          SELECT "Campaign ID", "Ad Group ID", "Ad Group Name", "Ad Group Status", "Ad Group Date Created", "Ad Group Date Modified", ROW_NUMBER() OVER() AS ROWNUM
              FROM(SELECT agp0.campaign_id "Campaign ID", agp0.id "Ad Group ID", agp0.name "Ad Group Name", agp0."Ad Group Status" "Ad Group Status", agp0."Ad Group Date Created" "Ad Group Date Created", agp0."Ad Group Date Modified" "Ad Group Date Modified"
                  FROM 
                (SELECT  name, campaign_id, CASE WHEN status = 'ON' THEN 'ON' ELSE 'OFF' END AS "Ad Group Status", COALESCE(TO_CHAR(last_updated, 'YYYY-MM-DD'), 'NULL') AS "Ad Group Date Modified", COALESCE(TO_CHAR(created_date, 'YYYY-MM-DD'), 'NULL') AS "Ad Group Date Created", id
            FROM ad_group_postgres
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) agp0 
           

                  ) sqalias1 ) sqalias2
             WHERE ROWNUM >= 1 AND ROWNUM <= 100
09:17:48.940 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=1 label=Campaign ID
09:17:48.940 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=2 label=Ad Group ID
09:17:48.940 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=3 label=Ad Group Name
09:17:48.940 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=4 label=Ad Group Status
09:17:48.940 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=5 label=Ad Group Date Created
09:17:48.940 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=6 label=Ad Group Date Modified
09:17:48.940 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=7 label=rownum
09:17:48.942 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - columnIndexMap from metaData 
(Ad Group Date Created,5)
(Ad Group Date Modified,6)
(Ad Group ID,2)
(Ad Group Name,3)
(Ad Group Status,4)
(Campaign ID,1)
(rownum,7)

09:17:48.944 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - aliasColumnMap from query 
(Ad Group Date Created,Ad Group Date Created)
(Ad Group Date Modified,Ad Group Date Modified)
(Ad Group ID,id)
(Ad Group Name,name)
(Ad Group Status,Ad Group Status)
(Campaign ID,campaign_id)

09:17:48.951 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - rowCount = 4, rowList.size = 4, rowList.updatedSize = 4
- successfully execute dim driven sync query for ad_group_stats
09:17:49.179 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - Running query :  (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT  *
      FROM (
          SELECT "Campaign ID", "Ad Group ID", "Ad Group Name", "Ad Group Status", "Ad Group Date Created", "Ad Group Date Modified"
              FROM(SELECT agp0.campaign_id "Campaign ID", agp0.id "Ad Group ID", agp0.name "Ad Group Name", agp0."Ad Group Status" "Ad Group Status", agp0."Ad Group Date Created" "Ad Group Date Created", agp0."Ad Group Date Modified" "Ad Group Date Modified"
                  FROM 
                (SELECT  campaign_id, CASE WHEN status = 'ON' THEN 'ON' ELSE 'OFF' END AS "Ad Group Status", COALESCE(TO_CHAR(last_updated, 'YYYY-MM-DD'), 'NULL') AS "Ad Group Date Modified", COALESCE(TO_CHAR(created_date, 'YYYY-MM-DD'), 'NULL') AS "Ad Group Date Created", name, id
            FROM ad_group_postgres
            WHERE (advertiser_id = 1) AND (id IN (103,100,101))
             ) agp0 
           

                  ) sqalias1 ) sqalias2
            ) D ) sqalias3 WHERE ROWNUM >= 1 AND ROWNUM <= 100) UNION ALL (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT  *
      FROM (
          SELECT "Campaign ID", "Ad Group ID", "Ad Group Name", "Ad Group Status", "Ad Group Date Created", "Ad Group Date Modified"
              FROM(SELECT agp0.campaign_id "Campaign ID", agp0.id "Ad Group ID", agp0.name "Ad Group Name", agp0."Ad Group Status" "Ad Group Status", agp0."Ad Group Date Created" "Ad Group Date Created", agp0."Ad Group Date Modified" "Ad Group Date Modified"
                  FROM 
                (SELECT  campaign_id, CASE WHEN status = 'ON' THEN 'ON' ELSE 'OFF' END AS "Ad Group Status", COALESCE(TO_CHAR(last_updated, 'YYYY-MM-DD'), 'NULL') AS "Ad Group Date Modified", COALESCE(TO_CHAR(created_date, 'YYYY-MM-DD'), 'NULL') AS "Ad Group Date Created", name, id
            FROM ad_group_postgres
            WHERE (advertiser_id = 1) AND (id NOT IN (103,100,101))
             ) agp0 
           

                  ) sqalias4 ) sqalias5
            ) sqalias6 LIMIT 100) D ) sqalias7 WHERE ROWNUM >= 1 AND ROWNUM <= 100) 
09:17:49.181 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=1 label=Campaign ID
09:17:49.181 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=2 label=Ad Group ID
09:17:49.181 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=3 label=Ad Group Name
09:17:49.181 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=4 label=Ad Group Status
09:17:49.181 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=5 label=Ad Group Date Created
09:17:49.181 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=6 label=Ad Group Date Modified
09:17:49.181 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=7 label=rownum
09:17:49.181 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - columnIndexMap from metaData 
(Ad Group Date Created,5)
(Ad Group Date Modified,6)
(Ad Group ID,2)
(Ad Group Name,3)
(Ad Group Status,4)
(Campaign ID,1)
(rownum,7)

09:17:49.181 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - aliasColumnMap from query 
(Ad Group Date Created,Ad Group Date Created)
(Ad Group Date Modified,Ad Group Date Modified)
(Ad Group ID,id)
(Ad Group Name,name)
(Ad Group Status,Ad Group Status)
(Campaign ID,campaign_id)

09:17:49.188 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - rowCount = 4, rowList.size = 3, rowList.updatedSize = 3
- successfully execute fact driven sync query for ad_group_stats
09:17:49.198 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - Running query : SELECT *
FROM (SELECT ap1.campaign_id "Campaign ID", ap1.ad_group_id "Ad Group ID", ap1.id "Ad ID", ap1.title "Ad Title", ap1."Ad Status" "Ad Status", ap1."Ad Date Created" "Ad Date Created", ap1."Ad Date Modified" "Ad Date Modified", ap1.last_updated "Ad Date Modified Timestamp"
      FROM (SELECT 
                   ad_group_id, ad_id, campaign_id
            FROM ad_stats_postgres FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_group_id, ad_id, campaign_id
            
           ) asp0
           LEFT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT  title, campaign_id, COALESCE(TO_CHAR(last_updated, 'YYYY-MM-DD'), 'NULL') AS "Ad Date Modified", last_updated, CASE WHEN status = 'ON' THEN 'ON' ELSE 'OFF' END AS "Ad Status", id, ad_group_id, COALESCE(TO_CHAR(created_date, 'YYYY-MM-DD'), 'NULL') AS "Ad Date Created"
            FROM ad_postgres
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) sqalias1 LIMIT 101) D ) sqalias2 WHERE ROWNUM >= 2 AND ROWNUM <= 101) ap1 
            ON (asp0.ad_id = ap1.id)

) sqalias3 
   
09:17:49.200 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=1 label=Campaign ID
09:17:49.200 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=2 label=Ad Group ID
09:17:49.200 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=3 label=Ad ID
09:17:49.200 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=4 label=Ad Title
09:17:49.200 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=5 label=Ad Status
09:17:49.200 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=6 label=Ad Date Created
09:17:49.200 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=7 label=Ad Date Modified
09:17:49.200 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=8 label=Ad Date Modified Timestamp
09:17:49.201 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - columnIndexMap from metaData 
(Ad Date Created,6)
(Ad Date Modified,7)
(Ad Date Modified Timestamp,8)
(Ad Group ID,2)
(Ad ID,3)
(Ad Status,5)
(Ad Title,4)
(Campaign ID,1)

09:17:49.202 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - aliasColumnMap from query 
(Ad Date Created,Ad Date Created)
(Ad Date Modified,Ad Date Modified)
(Ad Date Modified Timestamp,last_updated)
(Ad Group ID,ad_group_id)
(Ad ID,ad_id)
(Ad Status,Ad Status)
(Ad Title,title)
(Campaign ID,campaign_id)

09:17:49.204 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - rowCount = 8
- successfully execute dim driven dim only sync query for ad_stats
09:17:49.212 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - Running query : SELECT *
FROM (SELECT ap1.campaign_id "Campaign ID", ap1.ad_group_id "Ad Group ID", ap1.id "Ad ID", ap1.title "Ad Title", ap1."Ad Status" "Ad Status", ap1.unknown "Ad Unknown Column"
      FROM (SELECT 
                   ad_group_id, ad_id, campaign_id
            FROM ad_stats_postgres FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_group_id, ad_id, campaign_id
            
           ) asp0
           LEFT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT  title, campaign_id, CASE WHEN status = 'ON' THEN 'ON' ELSE 'OFF' END AS "Ad Status", id, ad_group_id, unknown
            FROM ad_postgres
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) sqalias1 LIMIT 101) D ) sqalias2 WHERE ROWNUM >= 2 AND ROWNUM <= 101) ap1 
            ON (asp0.ad_id = ap1.id)

) sqalias3 
   
09:17:49.219 ERROR [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - Failed query : SELECT *
FROM (SELECT ap1.campaign_id "Campaign ID", ap1.ad_group_id "Ad Group ID", ap1.id "Ad ID", ap1.title "Ad Title", ap1."Ad Status" "Ad Status", ap1.unknown "Ad Unknown Column"
      FROM (SELECT 
                   ad_group_id, ad_id, campaign_id
            FROM ad_stats_postgres FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_group_id, ad_id, campaign_id
            
           ) asp0
           LEFT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT  title, campaign_id, CASE WHEN status = 'ON' THEN 'ON' ELSE 'OFF' END AS "Ad Status", id, ad_group_id, unknown
            FROM ad_postgres
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) sqalias1 LIMIT 101) D ) sqalias2 WHERE ROWNUM >= 2 AND ROWNUM <= 101) ap1 
            ON (asp0.ad_id = ap1.id)

) sqalias3 
   
- Execution Failure test
SELECT *
FROM (SELECT ap1.campaign_id "Campaign ID", ap1.ad_group_id "Ad Group ID", ap1.id "Ad ID", ap1.title "Ad Title", ap1."Ad Status" "Ad Status", coalesce(asp0."impressions_invalid", 1) "Impressions"
      FROM (SELECT 
                   ad_group_id, ad_id, campaign_id, SUM(impressions_invalid) AS "impressions_invalid"
            FROM ad_stats_postgres FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_group_id, ad_id, campaign_id
            
           ) asp0
           LEFT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT  title, campaign_id, CASE WHEN status = 'ON' THEN 'ON' ELSE 'OFF' END AS "Ad Status", id, ad_group_id
            FROM ad_postgres
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) sqalias1 LIMIT 101) D ) sqalias2 WHERE ROWNUM >= 2 AND ROWNUM <= 101) ap1 
            ON (asp0.ad_id = ap1.id)

) sqalias3 
   
09:17:49.229 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - Running query : SELECT *
FROM (SELECT ap1.campaign_id "Campaign ID", ap1.ad_group_id "Ad Group ID", ap1.id "Ad ID", ap1.title "Ad Title", ap1."Ad Status" "Ad Status", coalesce(asp0."impressions_invalid", 1) "Impressions"
      FROM (SELECT 
                   ad_group_id, ad_id, campaign_id, SUM(impressions_invalid) AS "impressions_invalid"
            FROM ad_stats_postgres FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_group_id, ad_id, campaign_id
            
           ) asp0
           LEFT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT  title, campaign_id, CASE WHEN status = 'ON' THEN 'ON' ELSE 'OFF' END AS "Ad Status", id, ad_group_id
            FROM ad_postgres
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) sqalias1 LIMIT 101) D ) sqalias2 WHERE ROWNUM >= 2 AND ROWNUM <= 101) ap1 
            ON (asp0.ad_id = ap1.id)

) sqalias3 
   
09:17:49.231 ERROR [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - Failed query : SELECT *
FROM (SELECT ap1.campaign_id "Campaign ID", ap1.ad_group_id "Ad Group ID", ap1.id "Ad ID", ap1.title "Ad Title", ap1."Ad Status" "Ad Status", coalesce(asp0."impressions_invalid", 1) "Impressions"
      FROM (SELECT 
                   ad_group_id, ad_id, campaign_id, SUM(impressions_invalid) AS "impressions_invalid"
            FROM ad_stats_postgres FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_group_id, ad_id, campaign_id
            
           ) asp0
           LEFT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT  title, campaign_id, CASE WHEN status = 'ON' THEN 'ON' ELSE 'OFF' END AS "Ad Status", id, ad_group_id
            FROM ad_postgres
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) sqalias1 LIMIT 101) D ) sqalias2 WHERE ROWNUM >= 2 AND ROWNUM <= 101) ap1 
            ON (asp0.ad_id = ap1.id)

) sqalias3 
   
- Invalid definition test
- test null result
SELECT *
FROM (SELECT ap1.id "Ad ID", ap1.title "Ad Title", ap1."Ad Status" "Ad Status", ap1."Ad Date Created" "Ad Date Created"
      FROM (SELECT 
                   ad_id
            FROM ad_stats_postgres FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_id
            
           ) asp0
           RIGHT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT  title, COALESCE(TO_CHAR(created_date, 'YYYY-MM-DD'), 'NULL') AS "Ad Date Created", CASE WHEN status = 'ON' THEN 'ON' ELSE 'OFF' END AS "Ad Status", id
            FROM ad_postgres
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) sqalias1 LIMIT 12) D ) sqalias2 WHERE ROWNUM >= 3 AND ROWNUM <= 12) ap1 
            ON (asp0.ad_id = ap1.id)

) sqalias3 
   
09:17:49.489 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - Running query : SELECT *
FROM (SELECT ap1.id "Ad ID", ap1.title "Ad Title", ap1."Ad Status" "Ad Status", ap1."Ad Date Created" "Ad Date Created"
      FROM (SELECT 
                   ad_id
            FROM ad_stats_postgres FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_id
            
           ) asp0
           RIGHT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT  title, COALESCE(TO_CHAR(created_date, 'YYYY-MM-DD'), 'NULL') AS "Ad Date Created", CASE WHEN status = 'ON' THEN 'ON' ELSE 'OFF' END AS "Ad Status", id
            FROM ad_postgres
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) sqalias1 LIMIT 12) D ) sqalias2 WHERE ROWNUM >= 3 AND ROWNUM <= 12) ap1 
            ON (asp0.ad_id = ap1.id)

) sqalias3 
   
09:17:49.490 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=1 label=Ad ID
09:17:49.490 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=2 label=Ad Title
09:17:49.490 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=3 label=Ad Status
09:17:49.490 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=4 label=Ad Date Created
09:17:49.491 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - columnIndexMap from metaData 
(Ad Date Created,4)
(Ad ID,1)
(Ad Status,3)
(Ad Title,2)

09:17:49.491 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - aliasColumnMap from query 
(Ad Date Created,Ad Date Created)
(Ad ID,ad_id)
(Ad Status,Ad Status)
(Ad Title,title)

09:17:49.492 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - rowCount = 6
- successfully execute driving and non union dim only query with pagination
Run completed in 12 seconds, 381 milliseconds.
Total number of tests run: 11
Suites: completed 2, aborted 0
Tests: succeeded 11, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
09:17:49.751 INFO  [log:pid(88027)] init-dbe5a9cc-6351-4b08-9ef5-893695053093:pg_ctl - waiting for server to shut down.... done
09:17:49.751 INFO  [log:pid(88027)] init-dbe5a9cc-6351-4b08-9ef5-893695053093:pg_ctl - server stopped
09:17:49.752 INFO  [postgres-dbe5a9cc-6351-4b08-9ef5-893695053093-closer] c.o.d.p.e.EmbeddedPostgres - dbe5a9cc-6351-4b08-9ef5-893695053093 shut down postmaster in 00:00:00.119
[INFO] 
[INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ maha-postgres-executor ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/postgres/target/maha-postgres-executor-6.24-SNAPSHOT.jar
[INFO] 
[INFO] --- maven-jar-plugin:2.6:test-jar (default) @ maha-postgres-executor ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/postgres/target/maha-postgres-executor-6.24-SNAPSHOT-tests.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:jar (default) > generate-sources @ maha-postgres-executor >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-postgres-executor ---
[INFO] 
[INFO] <<< maven-source-plugin:2.4:jar (default) < generate-sources @ maha-postgres-executor <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:jar (default) @ maha-postgres-executor ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/postgres/target/maha-postgres-executor-6.24-SNAPSHOT-sources.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:test-jar (default) > generate-sources @ maha-postgres-executor >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-postgres-executor ---
[INFO] 
[INFO] <<< maven-source-plugin:2.4:test-jar (default) < generate-sources @ maha-postgres-executor <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:test-jar (default) @ maha-postgres-executor ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/postgres/target/maha-postgres-executor-6.24-SNAPSHOT-test-sources.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ maha-postgres-executor ---
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/postgres/target/maha-postgres-executor-6.24-SNAPSHOT.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-postgres-executor/6.24-SNAPSHOT/maha-postgres-executor-6.24-SNAPSHOT.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/postgres/pom.xml to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-postgres-executor/6.24-SNAPSHOT/maha-postgres-executor-6.24-SNAPSHOT.pom
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/postgres/target/maha-postgres-executor-6.24-SNAPSHOT-tests.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-postgres-executor/6.24-SNAPSHOT/maha-postgres-executor-6.24-SNAPSHOT-tests.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/postgres/target/maha-postgres-executor-6.24-SNAPSHOT-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-postgres-executor/6.24-SNAPSHOT/maha-postgres-executor-6.24-SNAPSHOT-sources.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/postgres/target/maha-postgres-executor-6.24-SNAPSHOT-test-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-postgres-executor/6.24-SNAPSHOT/maha-postgres-executor-6.24-SNAPSHOT-test-sources.jar
[INFO] 
[INFO] >>> scoverage-maven-plugin:1.4.1:report (coverage) > [scoverage]test @ maha-postgres-executor >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-postgres-executor ---
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:pre-compile (coverage) @ maha-postgres-executor ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-postgres-executor ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/lgadde/git/Native-Ads/maha/postgres/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ maha-postgres-executor ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-postgres-executor ---
[INFO] /Users/lgadde/git/Native-Ads/maha/postgres/src/main/scala:-1: info: compiling
[INFO] Compiling 2 source files to /Users/lgadde/git/Native-Ads/maha/postgres/target/scoverage-classes at 1605028670110
[INFO] Cleaning datadir [/Users/lgadde/git/Native-Ads/maha/postgres/target/scoverage-data]
[INFO] Beginning coverage instrumentation
[INFO] Instrumentation completed [219 statements]
[INFO] Wrote instrumentation file [/Users/lgadde/git/Native-Ads/maha/postgres/target/scoverage-data/scoverage.coverage]
[INFO] Will write measurement data to [/Users/lgadde/git/Native-Ads/maha/postgres/target/scoverage-data]
[INFO] prepare-compile in 0 s
[INFO] compile in 5 s
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:post-compile (coverage) @ maha-postgres-executor ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-postgres-executor ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ maha-postgres-executor ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-postgres-executor ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-postgres-executor ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- scalatest-maven-plugin:2.0.0:test (test) @ maha-postgres-executor ---
Discovery starting.
09:17:58,317 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Found resource [logback-test.xml] at [file:/Users/lgadde/git/Native-Ads/maha/postgres/target/test-classes/logback-test.xml]
09:17:58,317 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs multiple times on the classpath.
09:17:58,318 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [file:/Users/lgadde/git/Native-Ads/maha/postgres/target/test-classes/logback-test.xml]
09:17:58,318 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [jar:file:/Users/lgadde/git/Native-Ads/maha/core/target/maha-core-6.24-SNAPSHOT-tests.jar!/logback-test.xml]
09:17:58,462 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - debug attribute not set
09:17:58,463 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.rolling.RollingFileAppender]
09:17:58,471 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [FILE]
09:17:58,481 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
09:17:58,535 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@1365767549 - No compression will be used
09:17:58,537 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@1365767549 - Will use the pattern application.%d{yyyy-MM-dd}.log for the active file
09:17:58,543 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - The date pattern is 'yyyy-MM-dd' from file name pattern 'application.%d{yyyy-MM-dd}.log'.
09:17:58,543 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Roll-over at midnight.
09:17:58,546 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Setting initial period to Tue Nov 10 09:17:49 PST 2020
09:17:58,548 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - Active log file name: target/logs/application.log
09:17:58,548 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - File property is set to [target/logs/application.log]
09:17:58,549 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]
09:17:58,550 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [STDOUT]
09:17:58,551 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
09:17:58,553 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.classic.AsyncAppender]
09:17:58,555 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [ASYNCFILE]
09:17:58,555 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [FILE] to ch.qos.logback.classic.AsyncAppender[ASYNCFILE]
09:17:58,555 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCFILE] - Attaching appender named [FILE] to AsyncAppender.
09:17:58,556 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCFILE] - Setting discardingThreshold to 51
09:17:58,556 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.classic.AsyncAppender]
09:17:58,556 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [ASYNCSTDOUT]
09:17:58,556 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [STDOUT] to ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT]
09:17:58,556 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT] - Attaching appender named [STDOUT] to AsyncAppender.
09:17:58,556 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT] - Setting discardingThreshold to 51
09:17:58,557 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.zaxxer.hikari] to ERROR
09:17:58,557 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [org.http4s] to ERROR
09:17:58,557 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.yahoo.maha.core] to ERROR
09:17:58,557 |-INFO in ch.qos.logback.classic.joran.action.RootLoggerAction - Setting level of ROOT logger to INFO
09:17:58,557 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [ASYNCFILE] to Logger[ROOT]
09:17:58,557 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [ASYNCSTDOUT] to Logger[ROOT]
09:17:58,557 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration.
09:17:58,558 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@64b0598 - Registering current configuration as safe fallback point

09:17:58.589 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - Detected a Darwin x86_64 system
09:17:58.697 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - Postgres binaries at /Users/lgadde/git/Native-Ads/maha/postgres/target/embedded-pg/PG-3d7ce5d05cd575a649dd635576931b19
09:17:58.751 INFO  [log:pid(88047)] init-52e57a8a-4142-43f7-b520-4fb52770f587:initdb - The files belonging to this database system will be owned by user "lgadde".
09:17:58.751 INFO  [log:pid(88047)] init-52e57a8a-4142-43f7-b520-4fb52770f587:initdb - This user must also own the server process.
09:17:58.751 INFO  [log:pid(88047)] init-52e57a8a-4142-43f7-b520-4fb52770f587:initdb - 
09:17:58.751 INFO  [log:pid(88047)] init-52e57a8a-4142-43f7-b520-4fb52770f587:initdb - The database cluster will be initialized with locale "en_US.UTF-8".
09:17:58.751 INFO  [log:pid(88047)] init-52e57a8a-4142-43f7-b520-4fb52770f587:initdb - The default text search configuration will be set to "english".
09:17:58.751 INFO  [log:pid(88047)] init-52e57a8a-4142-43f7-b520-4fb52770f587:initdb - 
09:17:58.751 INFO  [log:pid(88047)] init-52e57a8a-4142-43f7-b520-4fb52770f587:initdb - Data page checksums are disabled.
09:17:58.751 INFO  [log:pid(88047)] init-52e57a8a-4142-43f7-b520-4fb52770f587:initdb - 
09:17:58.751 INFO  [log:pid(88047)] init-52e57a8a-4142-43f7-b520-4fb52770f587:initdb - fixing permissions on existing directory /Users/lgadde/git/Native-Ads/maha/postgres/target/epg6268102309371670790 ... ok
09:17:58.752 INFO  [log:pid(88047)] init-52e57a8a-4142-43f7-b520-4fb52770f587:initdb - creating subdirectories ... ok
09:17:58.783 INFO  [log:pid(88047)] init-52e57a8a-4142-43f7-b520-4fb52770f587:initdb - selecting default max_connections ... 100
09:17:58.816 INFO  [log:pid(88047)] init-52e57a8a-4142-43f7-b520-4fb52770f587:initdb - selecting default shared_buffers ... 128MB
09:17:58.816 INFO  [log:pid(88047)] init-52e57a8a-4142-43f7-b520-4fb52770f587:initdb - selecting dynamic shared memory implementation ... posix
09:17:58.882 INFO  [log:pid(88047)] init-52e57a8a-4142-43f7-b520-4fb52770f587:initdb - creating configuration files ... ok
09:17:59.225 INFO  [log:pid(88047)] init-52e57a8a-4142-43f7-b520-4fb52770f587:initdb - running bootstrap script ... ok
09:18:00.219 INFO  [log:pid(88047)] init-52e57a8a-4142-43f7-b520-4fb52770f587:initdb - performing post-bootstrap initialization ... ok
09:18:00.286 INFO  [log:pid(88047)] init-52e57a8a-4142-43f7-b520-4fb52770f587:initdb - syncing data to disk ... ok
09:18:00.286 INFO  [log:pid(88047)] init-52e57a8a-4142-43f7-b520-4fb52770f587:initdb - 
09:18:00.286 INFO  [log:pid(88047)] init-52e57a8a-4142-43f7-b520-4fb52770f587:initdb - Success. You can now start the database server using:
09:18:00.286 INFO  [log:pid(88047)] init-52e57a8a-4142-43f7-b520-4fb52770f587:initdb - 
09:18:00.286 INFO  [log:pid(88047)] init-52e57a8a-4142-43f7-b520-4fb52770f587:initdb -     /Users/lgadde/git/Native-Ads/maha/postgres/target/embedded-pg/PG-3d7ce5d05cd575a649dd635576931b19/bin/pg_ctl -D /Users/lgadde/git/Native-Ads/maha/postgres/target/epg6268102309371670790 -l logfile start
09:18:00.286 INFO  [log:pid(88047)] init-52e57a8a-4142-43f7-b520-4fb52770f587:initdb - 
09:18:00.287 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - 52e57a8a-4142-43f7-b520-4fb52770f587 initdb completed in 00:00:01.588
09:18:00.308 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - 52e57a8a-4142-43f7-b520-4fb52770f587 postmaster started as java.lang.UNIXProcess@102cec62 on port 51646.  Waiting up to PT10S for server startup to finish.
09:18:00.371 INFO  [log:pid(88066)] pg-52e57a8a-4142-43f7-b520-4fb52770f587 - waiting for server to start....2020-11-10 09:18:00.371 PST [88068] LOG:  listening on IPv4 address "127.0.0.1", port 51646
09:18:00.371 INFO  [log:pid(88066)] pg-52e57a8a-4142-43f7-b520-4fb52770f587 - 2020-11-10 09:18:00.371 PST [88068] LOG:  listening on IPv6 address "::1", port 51646
09:18:00.372 INFO  [log:pid(88066)] pg-52e57a8a-4142-43f7-b520-4fb52770f587 - 2020-11-10 09:18:00.372 PST [88068] LOG:  listening on Unix socket "/tmp/.s.PGSQL.51646"
09:18:00.393 INFO  [log:pid(88066)] pg-52e57a8a-4142-43f7-b520-4fb52770f587 - 2020-11-10 09:18:00.393 PST [88069] LOG:  database system was shut down at 2020-11-10 09:18:00 PST
09:18:00.399 INFO  [log:pid(88066)] pg-52e57a8a-4142-43f7-b520-4fb52770f587 - 2020-11-10 09:18:00.399 PST [88068] LOG:  database system is ready to accept connections
09:18:00.430 INFO  [log:pid(88066)] pg-52e57a8a-4142-43f7-b520-4fb52770f587 - 2020-11-10 09:18:00.430 PST [88076] LOG:  incomplete startup packet
09:18:00.442 INFO  [log:pid(88066)] pg-52e57a8a-4142-43f7-b520-4fb52770f587 -  done
09:18:00.442 INFO  [log:pid(88066)] pg-52e57a8a-4142-43f7-b520-4fb52770f587 - server started
09:18:00.590 INFO  [ScalaTest-main] c.o.d.p.e.EmbeddedPostgres - 52e57a8a-4142-43f7-b520-4fb52770f587 postmaster startup finished in 00:00:00.293
Discovery completed in 2 seconds, 679 milliseconds.
Run starting. Expected test count is: 11
PostgresQueryExecutorTest:
- successfully execute async query for ad_stats
- successfully execute sync query for ad_stats
- successfully execute sync query for ad_stats with greater than filter
- successfully execute sync query for ad_stats with less than filter
09:18:02.652 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - Running query : SELECT  *
      FROM (
          SELECT "Campaign ID", "Ad Group ID", "Ad Group Name", "Ad Group Status", "Ad Group Date Created", "Ad Group Date Modified", ROW_NUMBER() OVER() AS ROWNUM
              FROM(SELECT agp0.campaign_id "Campaign ID", agp0.id "Ad Group ID", agp0.name "Ad Group Name", agp0."Ad Group Status" "Ad Group Status", agp0."Ad Group Date Created" "Ad Group Date Created", agp0."Ad Group Date Modified" "Ad Group Date Modified"
                  FROM 
                (SELECT  name, campaign_id, CASE WHEN status = 'ON' THEN 'ON' ELSE 'OFF' END AS "Ad Group Status", COALESCE(TO_CHAR(last_updated, 'YYYY-MM-DD'), 'NULL') AS "Ad Group Date Modified", COALESCE(TO_CHAR(created_date, 'YYYY-MM-DD'), 'NULL') AS "Ad Group Date Created", id
            FROM ad_group_postgres
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) agp0 
           

                  ) sqalias1 ) sqalias2
             WHERE ROWNUM >= 1 AND ROWNUM <= 100
09:18:02.656 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=1 label=Campaign ID
09:18:02.656 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=2 label=Ad Group ID
09:18:02.656 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=3 label=Ad Group Name
09:18:02.656 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=4 label=Ad Group Status
09:18:02.657 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=5 label=Ad Group Date Created
09:18:02.657 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=6 label=Ad Group Date Modified
09:18:02.657 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=7 label=rownum
09:18:02.658 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - columnIndexMap from metaData 
(Ad Group Date Created,5)
(Ad Group Date Modified,6)
(Ad Group ID,2)
(Ad Group Name,3)
(Ad Group Status,4)
(Campaign ID,1)
(rownum,7)

09:18:02.659 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - aliasColumnMap from query 
(Ad Group Date Created,Ad Group Date Created)
(Ad Group Date Modified,Ad Group Date Modified)
(Ad Group ID,id)
(Ad Group Name,name)
(Ad Group Status,Ad Group Status)
(Campaign ID,campaign_id)

09:18:02.666 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - rowCount = 4, rowList.size = 4, rowList.updatedSize = 4
- successfully execute dim driven sync query for ad_group_stats
09:18:02.895 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - Running query :  (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT  *
      FROM (
          SELECT "Campaign ID", "Ad Group ID", "Ad Group Name", "Ad Group Status", "Ad Group Date Created", "Ad Group Date Modified"
              FROM(SELECT agp0.campaign_id "Campaign ID", agp0.id "Ad Group ID", agp0.name "Ad Group Name", agp0."Ad Group Status" "Ad Group Status", agp0."Ad Group Date Created" "Ad Group Date Created", agp0."Ad Group Date Modified" "Ad Group Date Modified"
                  FROM 
                (SELECT  campaign_id, CASE WHEN status = 'ON' THEN 'ON' ELSE 'OFF' END AS "Ad Group Status", COALESCE(TO_CHAR(last_updated, 'YYYY-MM-DD'), 'NULL') AS "Ad Group Date Modified", COALESCE(TO_CHAR(created_date, 'YYYY-MM-DD'), 'NULL') AS "Ad Group Date Created", name, id
            FROM ad_group_postgres
            WHERE (advertiser_id = 1) AND (id IN (103,100,101))
             ) agp0 
           

                  ) sqalias1 ) sqalias2
            ) D ) sqalias3 WHERE ROWNUM >= 1 AND ROWNUM <= 100) UNION ALL (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT  *
      FROM (
          SELECT "Campaign ID", "Ad Group ID", "Ad Group Name", "Ad Group Status", "Ad Group Date Created", "Ad Group Date Modified"
              FROM(SELECT agp0.campaign_id "Campaign ID", agp0.id "Ad Group ID", agp0.name "Ad Group Name", agp0."Ad Group Status" "Ad Group Status", agp0."Ad Group Date Created" "Ad Group Date Created", agp0."Ad Group Date Modified" "Ad Group Date Modified"
                  FROM 
                (SELECT  campaign_id, CASE WHEN status = 'ON' THEN 'ON' ELSE 'OFF' END AS "Ad Group Status", COALESCE(TO_CHAR(last_updated, 'YYYY-MM-DD'), 'NULL') AS "Ad Group Date Modified", COALESCE(TO_CHAR(created_date, 'YYYY-MM-DD'), 'NULL') AS "Ad Group Date Created", name, id
            FROM ad_group_postgres
            WHERE (advertiser_id = 1) AND (id NOT IN (103,100,101))
             ) agp0 
           

                  ) sqalias4 ) sqalias5
            ) sqalias6 LIMIT 100) D ) sqalias7 WHERE ROWNUM >= 1 AND ROWNUM <= 100) 
09:18:02.898 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=1 label=Campaign ID
09:18:02.898 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=2 label=Ad Group ID
09:18:02.898 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=3 label=Ad Group Name
09:18:02.899 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=4 label=Ad Group Status
09:18:02.899 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=5 label=Ad Group Date Created
09:18:02.899 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=6 label=Ad Group Date Modified
09:18:02.899 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=7 label=rownum
09:18:02.899 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - columnIndexMap from metaData 
(Ad Group Date Created,5)
(Ad Group Date Modified,6)
(Ad Group ID,2)
(Ad Group Name,3)
(Ad Group Status,4)
(Campaign ID,1)
(rownum,7)

09:18:02.899 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - aliasColumnMap from query 
(Ad Group Date Created,Ad Group Date Created)
(Ad Group Date Modified,Ad Group Date Modified)
(Ad Group ID,id)
(Ad Group Name,name)
(Ad Group Status,Ad Group Status)
(Campaign ID,campaign_id)

09:18:02.905 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - rowCount = 4, rowList.size = 3, rowList.updatedSize = 3
- successfully execute fact driven sync query for ad_group_stats
09:18:02.916 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - Running query : SELECT *
FROM (SELECT ap1.campaign_id "Campaign ID", ap1.ad_group_id "Ad Group ID", ap1.id "Ad ID", ap1.title "Ad Title", ap1."Ad Status" "Ad Status", ap1."Ad Date Created" "Ad Date Created", ap1."Ad Date Modified" "Ad Date Modified", ap1.last_updated "Ad Date Modified Timestamp"
      FROM (SELECT 
                   ad_group_id, ad_id, campaign_id
            FROM ad_stats_postgres FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_group_id, ad_id, campaign_id
            
           ) asp0
           LEFT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT  title, campaign_id, COALESCE(TO_CHAR(last_updated, 'YYYY-MM-DD'), 'NULL') AS "Ad Date Modified", last_updated, CASE WHEN status = 'ON' THEN 'ON' ELSE 'OFF' END AS "Ad Status", id, ad_group_id, COALESCE(TO_CHAR(created_date, 'YYYY-MM-DD'), 'NULL') AS "Ad Date Created"
            FROM ad_postgres
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) sqalias1 LIMIT 101) D ) sqalias2 WHERE ROWNUM >= 2 AND ROWNUM <= 101) ap1 
            ON (asp0.ad_id = ap1.id)

) sqalias3 
   
09:18:02.919 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=1 label=Campaign ID
09:18:02.919 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=2 label=Ad Group ID
09:18:02.919 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=3 label=Ad ID
09:18:02.919 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=4 label=Ad Title
09:18:02.919 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=5 label=Ad Status
09:18:02.919 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=6 label=Ad Date Created
09:18:02.919 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=7 label=Ad Date Modified
09:18:02.919 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=8 label=Ad Date Modified Timestamp
09:18:02.920 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - columnIndexMap from metaData 
(Ad Date Created,6)
(Ad Date Modified,7)
(Ad Date Modified Timestamp,8)
(Ad Group ID,2)
(Ad ID,3)
(Ad Status,5)
(Ad Title,4)
(Campaign ID,1)

09:18:02.921 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - aliasColumnMap from query 
(Ad Date Created,Ad Date Created)
(Ad Date Modified,Ad Date Modified)
(Ad Date Modified Timestamp,last_updated)
(Ad Group ID,ad_group_id)
(Ad ID,ad_id)
(Ad Status,Ad Status)
(Ad Title,title)
(Campaign ID,campaign_id)

09:18:02.924 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - rowCount = 8
- successfully execute dim driven dim only sync query for ad_stats
09:18:02.932 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - Running query : SELECT *
FROM (SELECT ap1.campaign_id "Campaign ID", ap1.ad_group_id "Ad Group ID", ap1.id "Ad ID", ap1.title "Ad Title", ap1."Ad Status" "Ad Status", ap1.unknown "Ad Unknown Column"
      FROM (SELECT 
                   ad_group_id, ad_id, campaign_id
            FROM ad_stats_postgres FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_group_id, ad_id, campaign_id
            
           ) asp0
           LEFT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT  title, campaign_id, CASE WHEN status = 'ON' THEN 'ON' ELSE 'OFF' END AS "Ad Status", id, ad_group_id, unknown
            FROM ad_postgres
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) sqalias1 LIMIT 101) D ) sqalias2 WHERE ROWNUM >= 2 AND ROWNUM <= 101) ap1 
            ON (asp0.ad_id = ap1.id)

) sqalias3 
   
09:18:02.933 INFO  [log:pid(88066)] pg-52e57a8a-4142-43f7-b520-4fb52770f587 - 2020-11-10 09:18:02.933 PST [88081] ERROR:  column "unknown" does not exist at character 826
09:18:02.940 ERROR [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - Failed query : SELECT *
FROM (SELECT ap1.campaign_id "Campaign ID", ap1.ad_group_id "Ad Group ID", ap1.id "Ad ID", ap1.title "Ad Title", ap1."Ad Status" "Ad Status", ap1.unknown "Ad Unknown Column"
      FROM (SELECT 
                   ad_group_id, ad_id, campaign_id
            FROM ad_stats_postgres FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_group_id, ad_id, campaign_id
            
           ) asp0
           LEFT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT  title, campaign_id, CASE WHEN status = 'ON' THEN 'ON' ELSE 'OFF' END AS "Ad Status", id, ad_group_id, unknown
            FROM ad_postgres
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) sqalias1 LIMIT 101) D ) sqalias2 WHERE ROWNUM >= 2 AND ROWNUM <= 101) ap1 
            ON (asp0.ad_id = ap1.id)

) sqalias3 
   
- Execution Failure test
SELECT *
FROM (SELECT ap1.campaign_id "Campaign ID", ap1.ad_group_id "Ad Group ID", ap1.id "Ad ID", ap1.title "Ad Title", ap1."Ad Status" "Ad Status", coalesce(asp0."impressions_invalid", 1) "Impressions"
      FROM (SELECT 
                   ad_group_id, ad_id, campaign_id, SUM(impressions_invalid) AS "impressions_invalid"
            FROM ad_stats_postgres FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_group_id, ad_id, campaign_id
            
           ) asp0
           LEFT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT  title, campaign_id, CASE WHEN status = 'ON' THEN 'ON' ELSE 'OFF' END AS "Ad Status", id, ad_group_id
            FROM ad_postgres
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) sqalias1 LIMIT 101) D ) sqalias2 WHERE ROWNUM >= 2 AND ROWNUM <= 101) ap1 
            ON (asp0.ad_id = ap1.id)

) sqalias3 
   
09:18:02.950 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - Running query : SELECT *
FROM (SELECT ap1.campaign_id "Campaign ID", ap1.ad_group_id "Ad Group ID", ap1.id "Ad ID", ap1.title "Ad Title", ap1."Ad Status" "Ad Status", coalesce(asp0."impressions_invalid", 1) "Impressions"
      FROM (SELECT 
                   ad_group_id, ad_id, campaign_id, SUM(impressions_invalid) AS "impressions_invalid"
            FROM ad_stats_postgres FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_group_id, ad_id, campaign_id
            
           ) asp0
           LEFT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT  title, campaign_id, CASE WHEN status = 'ON' THEN 'ON' ELSE 'OFF' END AS "Ad Status", id, ad_group_id
            FROM ad_postgres
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) sqalias1 LIMIT 101) D ) sqalias2 WHERE ROWNUM >= 2 AND ROWNUM <= 101) ap1 
            ON (asp0.ad_id = ap1.id)

) sqalias3 
   
09:18:02.952 ERROR [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - Failed query : SELECT *
FROM (SELECT ap1.campaign_id "Campaign ID", ap1.ad_group_id "Ad Group ID", ap1.id "Ad ID", ap1.title "Ad Title", ap1."Ad Status" "Ad Status", coalesce(asp0."impressions_invalid", 1) "Impressions"
      FROM (SELECT 
                   ad_group_id, ad_id, campaign_id, SUM(impressions_invalid) AS "impressions_invalid"
            FROM ad_stats_postgres FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_group_id, ad_id, campaign_id
            
           ) asp0
           LEFT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT  title, campaign_id, CASE WHEN status = 'ON' THEN 'ON' ELSE 'OFF' END AS "Ad Status", id, ad_group_id
            FROM ad_postgres
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) sqalias1 LIMIT 101) D ) sqalias2 WHERE ROWNUM >= 2 AND ROWNUM <= 101) ap1 
            ON (asp0.ad_id = ap1.id)

) sqalias3 
   
- Invalid definition test
- test null result
SELECT *
FROM (SELECT ap1.id "Ad ID", ap1.title "Ad Title", ap1."Ad Status" "Ad Status", ap1."Ad Date Created" "Ad Date Created"
      FROM (SELECT 
                   ad_id
            FROM ad_stats_postgres FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_id
            
           ) asp0
           RIGHT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT  title, COALESCE(TO_CHAR(created_date, 'YYYY-MM-DD'), 'NULL') AS "Ad Date Created", CASE WHEN status = 'ON' THEN 'ON' ELSE 'OFF' END AS "Ad Status", id
            FROM ad_postgres
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) sqalias1 LIMIT 12) D ) sqalias2 WHERE ROWNUM >= 3 AND ROWNUM <= 12) ap1 
            ON (asp0.ad_id = ap1.id)

) sqalias3 
   
09:18:03.200 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - Running query : SELECT *
FROM (SELECT ap1.id "Ad ID", ap1.title "Ad Title", ap1."Ad Status" "Ad Status", ap1."Ad Date Created" "Ad Date Created"
      FROM (SELECT 
                   ad_id
            FROM ad_stats_postgres FactAlias
            WHERE (advertiser_id = 1) AND (stats_source = 2) AND (stats_date >= DATE_TRUNC('DAY', to_date('2020-11-03', 'YYYY-MM-DD')) AND stats_date <= DATE_TRUNC('DAY', to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY ad_id
            
           ) asp0
           RIGHT OUTER JOIN
                (SELECT * FROM (SELECT D.*, ROW_NUMBER() OVER() AS ROWNUM FROM (SELECT * FROM (SELECT  title, COALESCE(TO_CHAR(created_date, 'YYYY-MM-DD'), 'NULL') AS "Ad Date Created", CASE WHEN status = 'ON' THEN 'ON' ELSE 'OFF' END AS "Ad Status", id
            FROM ad_postgres
            WHERE (advertiser_id = 1)
            ORDER BY 1 DESC NULLS LAST ) sqalias1 LIMIT 12) D ) sqalias2 WHERE ROWNUM >= 3 AND ROWNUM <= 12) ap1 
            ON (asp0.ad_id = ap1.id)

) sqalias3 
   
09:18:03.202 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=1 label=Ad ID
09:18:03.202 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=2 label=Ad Title
09:18:03.202 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=3 label=Ad Status
09:18:03.202 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - metaData index=4 label=Ad Date Created
09:18:03.202 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - columnIndexMap from metaData 
(Ad Date Created,4)
(Ad ID,1)
(Ad Status,3)
(Ad Title,2)

09:18:03.202 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - aliasColumnMap from query 
(Ad Date Created,Ad Date Created)
(Ad ID,ad_id)
(Ad Status,Ad Status)
(Ad Title,title)

09:18:03.203 INFO  [ScalaTest-main-running-PostgresQueryExecutorTest] c.y.m.e.p.PostgresQueryExecutor - rowCount = 6
- successfully execute driving and non union dim only query with pagination
Run completed in 5 seconds, 289 milliseconds.
Total number of tests run: 11
Suites: completed 2, aborted 0
Tests: succeeded 11, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
09:18:03.455 INFO  [log:pid(88086)] init-52e57a8a-4142-43f7-b520-4fb52770f587:pg_ctl - waiting for server to shut down.... done
09:18:03.455 INFO  [log:pid(88086)] init-52e57a8a-4142-43f7-b520-4fb52770f587:pg_ctl - server stopped
09:18:03.455 INFO  [postgres-52e57a8a-4142-43f7-b520-4fb52770f587-closer] c.o.d.p.e.EmbeddedPostgres - 52e57a8a-4142-43f7-b520-4fb52770f587 shut down postmaster in 00:00:00.122
[INFO] 
[INFO] <<< scoverage-maven-plugin:1.4.1:report (coverage) < [scoverage]test @ maha-postgres-executor <<<
[INFO] 
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:report (coverage) @ maha-postgres-executor ---
[INFO] Reading scoverage instrumentation [/Users/lgadde/git/Native-Ads/maha/postgres/target/scoverage-data/scoverage.coverage]...
[INFO] Reading scoverage measurements [/Users/lgadde/git/Native-Ads/maha/postgres/target/scoverage-data/scoverage.measurements.*]...
[INFO] Generating coverage reports...
[INFO] Written Cobertura XML report [/Users/lgadde/git/Native-Ads/maha/postgres/target/cobertura.xml]
[INFO] Written XML coverage report [/Users/lgadde/git/Native-Ads/maha/postgres/target/scoverage.xml]
[INFO] Written HTML coverage report [/Users/lgadde/git/Native-Ads/maha/postgres/target/site/scoverage/index.html]
[INFO] Statement coverage.: 91.78%
[INFO] Branch coverage....: 76.32%
[INFO] Coverage reports completed.
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:check-only (coverage) @ maha-postgres-executor ---
[INFO] Statement coverage.: 91.78%
[INFO] Branch coverage....: 76.32%
[INFO] Coverage is above minimum [91.78% >= 90.00%]
[INFO] 
[INFO] --------------------< com.yahoo.maha:maha-service >---------------------
[INFO] Building maha service 6.24-SNAPSHOT                              [12/15]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ maha-service ---
[INFO] Deleting /Users/lgadde/git/Native-Ads/maha/service/target
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-service ---
[INFO] Add Source directory: /Users/lgadde/git/Native-Ads/maha/service/src/main/scala
[INFO] Add Test Source directory: /Users/lgadde/git/Native-Ads/maha/service/src/test/scala
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-service ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/lgadde/git/Native-Ads/maha/service/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ maha-service ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-service ---
[INFO] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala:-1: info: compiling
[INFO] Compiling 35 source files to /Users/lgadde/git/Native-Ads/maha/service/target/classes at 1605028684329
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/MahaService.scala:919: warning: local val formats in method findDynamicProperties is never used
[WARNING]     implicit val formats = org.json4s.DefaultFormats
[WARNING]                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/MahaService.scala:501: warning: local var defaultContext in method fromJson is never updated: consider using immutable val
[WARNING]     var defaultContext = DefaultMahaServiceConfigContext()
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/MahaService.scala:844: warning: local var defaultContext in method fromJson is never updated: consider using immutable val
[WARNING]     var defaultContext = DefaultMahaServiceConfigContext()
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/MahaService.scala:755: warning: parameter value context in method initKafkaLogWriter is never used
[WARNING]   def initKafkaLogWriter(jsonMahaRequestLogConfig: JsonMahaRequestLogConfig)(implicit context: MahaServiceConfigContext) : MahaServiceConfig.MahaConfigResult[MahaRequestLogWriter] = {
[WARNING]                                                                                       ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/RequestCoordinator.scala:175: warning: local val finalResultMap in method execute is never used
[WARNING]         val finalResultMap = resultMap ++ curatorInjector.resultMap
[WARNING]                                        ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/config/dynamic/DynamicConfigurationUtils.scala:35: warning: local val formats in method getDynamicFields is never used
[WARNING]     implicit val formats = org.json4s.DefaultFormats
[WARNING]                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/factory/DruidQueryExecutorConfigFactory.scala:5: warning: Unused import
[WARNING] import com.netflix.archaius.config.PollingDynamicConfig
[WARNING]                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/factory/DruidQueryExecutorConfigFactory.scala:10: warning: Unused import
[WARNING] import com.yahoo.maha.service.config.dynamic.DynamicConfigurations
[WARNING]                                              ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/factory/Factory.scala:244: warning: parameter value context in method fromJson is never used
[WARNING]   def fromJson(config: org.json4s.JValue)(implicit context: MahaServiceConfigContext) : MahaServiceConfig.MahaConfigResult[BucketingConfig] = {
[WARNING]                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/factory/package.scala:27: warning: parameter value tag in method getFactory is never used
[WARNING]   def getFactory[T](clazz: String, closerOption: Option[Closer])(implicit tag: TypeTag[T]) : MahaServiceConfig.MahaConfigResult[T] = {
[WARNING]                                                                           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/output/JsonOutputFormat.scala:13: warning: Unused import
[ERROR] import com.yahoo.maha.service.curators.{Curator, CuratorError, CuratorResult, DefaultCurator, RowCountCurator}
[INFO]                                                                ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/utils/MahaRequestLogUtils.scala:16: warning: Unused import
[WARNING] import org.apache.commons.codec.digest.DigestUtils
[WARNING]                                        ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/utils/MahaRequestLogUtils.scala:20: warning: Unused import
[WARNING] import scala.util.Try
[WARNING]                   ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/curators/DrilldownConfig.scala:19: warning: match may not be exhaustive.
[WARNING] It would fail on the following inputs: JBool(_), JDecimal(_), JDouble(_), JInt(_), JLong(_), JNothing, JNull, JSet(_), JString(_)
[WARNING]     curatorJsonConfig.json match {
[WARNING]                       ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/config/dynamic/DynamicConfigurations.scala:44: warning: Suspicious application of an implicit view (scala.Predef.Integer2int) in the argument to Option.apply.
[WARNING]       Option(map(configKey).get())
[WARNING]             ^
[WARNING] 15 warnings found
[INFO] prepare-compile in 0 s
[INFO] compile in 16 s
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-service ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ maha-service ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-service ---
[INFO] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala:-1: info: compiling
[INFO] Compiling 43 source files to /Users/lgadde/git/Native-Ads/maha/service/target/test-classes at 1605028700692
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/curators/DrilldownCuratorTest.scala:210: warning: local val qp in value <local DrilldownCuratorTest> is never used
[WARNING]     val qp = mahaService.generateQueryPipelines(REGISTRY, requestModelResult.model, bucketParams)._1
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/curators/DrilldownCuratorTest.scala:275: warning: local val qp in value <local DrilldownCuratorTest> is never used
[WARNING]     val qp = mahaService.generateQueryPipelines(REGISTRY, requestModelResult.model, bucketParams)._1
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/curators/RowCountCuratorTest.scala:12: warning: Unused import
[WARNING] import org.apache.druid.common.config.NullHandling
[WARNING]                                       ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/curators/TotalMetricsCuratorTest.scala:300: warning: local val curatorMahaRequestLogHelper in value <local TotalMetricsCuratorTest> is never used
[WARNING]     val curatorMahaRequestLogHelper = CuratorMahaRequestLogHelper(mahaRequestLogHelper)
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/example/MahaServiceExampleTest.scala:164: warning: local val thrown in value <local MahaServiceExampleTest> is never used
[WARNING]     val thrown = intercept[IllegalArgumentException] {
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/example/MahaServiceExampleTest.scala:261: warning: local val thrown in value <local MahaServiceExampleTest> is never used
[WARNING]     val thrown = intercept[IllegalArgumentException] {
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/example/MahaServiceExampleTest.scala:294: warning: local val mahaRequestContext in value <local MahaServiceExampleTest> is never used
[WARNING]     val mahaRequestContext = MahaRequestContext(REGISTRY,
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/example/SampleSchemaRegistrationFactory.scala:12: warning: Unused import
[WARNING] import javax.annotation.Nullable
[WARNING]                         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/factory/DataSourceConnectionPoolFactoryTest.scala:13: warning: Unused import
[WARNING] import org.scalatest.funsuite.AnyFunSuite
[WARNING]                               ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/factory/DataSourceConnectionPoolFactoryTest.scala:14: warning: Unused import
[WARNING] import org.scalatest.matchers.should.Matchers
[WARNING]                                      ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/factory/DruidQueryOptimizerFactoryTest.scala:8: warning: Unused import
[WARNING] import org.scalatest.funsuite.AnyFunSuite
[WARNING]                               ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/factory/DruidQueryOptimizerFactoryTest.scala:9: warning: Unused import
[WARNING] import org.scalatest.matchers.should.Matchers
[WARNING]                                      ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/factory/FactoryTest.scala:10: warning: Unused import
[WARNING] import org.scalatest.funsuite.AnyFunSuite
[WARNING]                               ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/factory/FactoryTest.scala:11: warning: Unused import
[WARNING] import org.scalatest.matchers.should.Matchers
[WARNING]                                      ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/factory/LiteralMapperTest.scala:5: warning: Unused import
[WARNING] import com.yahoo.maha.core.dimension.DimCol
[WARNING]                                      ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/factory/MahaServiceTest.scala:628: warning: local val json in value <local MahaServiceTest> is never used
[WARNING]     val json = parse(dynamicConfigJson)
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/factory/QueryExecutorFactoryTest.scala:12: warning: Unused import
[WARNING] import com.yahoo.maha.service.config.JsonDataSourceConfig
[WARNING]                                      ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/factory/QueryGeneratorFactoryTest.scala:7: warning: Unused import
[WARNING] import org.scalatest.funsuite.AnyFunSuite
[WARNING]                               ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/factory/QueryGeneratorFactoryTest.scala:8: warning: Unused import
[WARNING] import org.scalatest.matchers.should.Matchers
[WARNING]                                      ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/output/JsonOutputFormatTest.scala:20: warning: Unused import
[WARNING] import org.scalatest.matchers.should
[WARNING]                               ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/output/JsonOutputFormatTest.scala:200: warning: local val curatorResults in value <local JsonOutputFormatTest> is never used
[WARNING]     val curatorResults = IndexedSeq(curatorResult1, curatorResult2)
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/output/JsonOutputFormatTest.scala:241: warning: local val curatorResults in value <local JsonOutputFormatTest> is never used
[WARNING]     val curatorResults = IndexedSeq(curatorResult1, curatorResult2)
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/output/JsonOutputFormatTest.scala:276: warning: local val curatorInjector in value <local JsonOutputFormatTest> is never used
[WARNING]     val curatorInjector = new CuratorInjector(2, mahaService, mahaRequestLogBuilder, Set(FailingCurator.name))
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/output/JsonOutputFormatTest.scala:278: warning: local val curatorResults in value <local JsonOutputFormatTest> is never used
[WARNING]     val curatorResults = IndexedSeq(curatorResult1)
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/output/JsonOutputFormatTest.scala:312: warning: local val curatorInjector in value <local JsonOutputFormatTest> is never used
[WARNING]     val curatorInjector = new CuratorInjector(2, mahaService, mahaRequestLogBuilder, Set(FailingCurator.name))
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/output/JsonOutputFormatTest.scala:314: warning: local val curatorResults in value <local JsonOutputFormatTest> is never used
[WARNING]     val curatorResults = IndexedSeq(curatorResult1)
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/utils/MahaRequestLogHelperTest.scala:15: warning: Unused import
[WARNING] import org.apache.druid.common.config.NullHandling
[WARNING]                                       ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/utils/MahaRequestLogHelperTest.scala:139: warning: local val mahaRequestLogWriter in value <local MahaRequestLogHelperTest> is never used
[WARNING]     val mahaRequestLogWriter = mock(classOf[MahaRequestLogWriter])
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/utils/MahaRequestLogHelperTest.scala:147: warning: local val failedLog in value <local MahaRequestLogHelperTest> is never used
[ERROR]     val failedLog = mahaRequestLogHelper.logFailed("new error message")
[INFO]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/test/scala/com/yahoo/maha/service/factory/QueryExecutorFactoryTest.scala:43: warning: Reference to uninitialized value context
[WARNING]   val dataSourceOption = dataSourceFactoryResult.toOption.get.fromJson(parse(dataSourceConfigJson)).toOption
[WARNING]                                                                       ^
[WARNING] 30 warnings found
[INFO] prepare-compile in 0 s
[INFO] compile in 15 s
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-service ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- scalatest-maven-plugin:2.0.0:test (test) @ maha-service ---
Discovery starting.
09:18:41,528 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Found resource [logback-test.xml] at [file:/Users/lgadde/git/Native-Ads/maha/service/target/test-classes/logback-test.xml]
09:18:41,529 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs multiple times on the classpath.
09:18:41,529 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [file:/Users/lgadde/git/Native-Ads/maha/service/target/test-classes/logback-test.xml]
09:18:41,529 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [jar:file:/Users/lgadde/git/Native-Ads/maha/core/target/maha-core-6.24-SNAPSHOT-tests.jar!/logback-test.xml]
09:18:41,672 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - debug attribute not set
09:18:41,673 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.rolling.RollingFileAppender]
09:18:41,684 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [FILE]
09:18:41,692 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
09:18:41,726 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@605440398 - No compression will be used
09:18:41,728 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@605440398 - Will use the pattern application.%d{yyyy-MM-dd}.log for the active file
09:18:41,733 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - The date pattern is 'yyyy-MM-dd' from file name pattern 'application.%d{yyyy-MM-dd}.log'.
09:18:41,733 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Roll-over at midnight.
09:18:41,736 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Setting initial period to Tue Nov 10 09:18:41 PST 2020
09:18:41,739 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - Active log file name: target/logs/application.log
09:18:41,739 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - File property is set to [target/logs/application.log]
09:18:41,740 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]
09:18:41,742 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [STDOUT]
09:18:41,742 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
09:18:41,748 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.classic.AsyncAppender]
09:18:41,750 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [ASYNCFILE]
09:18:41,750 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [FILE] to ch.qos.logback.classic.AsyncAppender[ASYNCFILE]
09:18:41,750 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCFILE] - Attaching appender named [FILE] to AsyncAppender.
09:18:41,750 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCFILE] - Setting discardingThreshold to 51
09:18:41,750 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.classic.AsyncAppender]
09:18:41,750 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [ASYNCSTDOUT]
09:18:41,750 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [STDOUT] to ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT]
09:18:41,750 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT] - Attaching appender named [STDOUT] to AsyncAppender.
09:18:41,750 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT] - Setting discardingThreshold to 51
09:18:41,751 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.zaxxer.hikari] to ERROR
09:18:41,751 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.yahoo.maha.core] to ERROR
09:18:41,751 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.yahoo.maha.executor] to ERROR
09:18:41,751 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [org.http4s] to ERROR
09:18:41,751 |-INFO in ch.qos.logback.classic.joran.action.RootLoggerAction - Setting level of ROOT logger to INFO
09:18:41,751 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [ASYNCFILE] to Logger[ROOT]
09:18:41,751 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [ASYNCSTDOUT] to Logger[ROOT]
09:18:41,751 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration.
09:18:41,752 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@6b2e0f78 - Registering current configuration as safe fallback point

09:18:43.485 INFO  [ScalaTest-main] c.y.m.s.RequestCoordinatorTest - Starting blaze server on port : 51655
09:18:43.981 INFO  [ScalaTest-main] c.y.m.s.MahaSyncRequestProcessorTest - Starting blaze server on port : 51657
09:18:44.051 INFO  [ScalaTest-main] c.y.m.s.c.DrilldownCuratorTest - Starting blaze server on port : 51658
09:18:44.111 INFO  [ScalaTest-main] c.y.m.s.c.DrilldownConfigTest - Starting blaze server on port : 51659
09:18:44.165 INFO  [ScalaTest-main] c.y.m.s.e.MahaServiceExampleTest - Starting blaze server on port : 51660
09:18:44.325 INFO  [ScalaTest-main] c.y.m.s.c.TotalMetricsCuratorTest - Starting blaze server on port : 51661
09:18:44.375 INFO  [ScalaTest-main] c.y.m.s.c.DefaultCuratorTest - Starting blaze server on port : 51662
09:18:44.518 INFO  [ScalaTest-main] c.y.m.s.c.RowCountCuratorTest - Starting blaze server on port : 51663
09:18:44.572 INFO  [ScalaTest-main] c.y.m.s.o.JsonOutputFormatTest - Starting blaze server on port : 51664
ESAPI: WARNING: System property [org.owasp.esapi.opsteam] is not set
ESAPI: WARNING: System property [org.owasp.esapi.devteam] is not set
ESAPI: Attempting to load ESAPI.properties via file I/O.
ESAPI: Attempting to load ESAPI.properties as resource file via file I/O.
ESAPI: Not found in 'org.owasp.esapi.resources' directory or file not readable: /Users/lgadde/git/Native-Ads/maha/service/ESAPI.properties
ESAPI: Not found in SystemResource Directory/resourceDirectory: .esapi/ESAPI.properties
ESAPI: Not found in 'user.home' (/Users/lgadde) directory: /Users/lgadde/esapi/ESAPI.properties
ESAPI: Loading ESAPI.properties via file I/O failed. Exception was: java.io.FileNotFoundException
ESAPI: Attempting to load ESAPI.properties via the classpath.
ESAPI: SUCCESSFULLY LOADED ESAPI.properties via the CLASSPATH from '/ (root)' using current thread context class loader!
ESAPI: SecurityConfiguration for Validator.ConfigurationFile.MultiValued not found in ESAPI.properties. Using default: false
ESAPI: Attempting to load validation.properties via file I/O.
ESAPI: Attempting to load validation.properties as resource file via file I/O.
ESAPI: Not found in 'org.owasp.esapi.resources' directory or file not readable: /Users/lgadde/git/Native-Ads/maha/service/validation.properties
ESAPI: Not found in SystemResource Directory/resourceDirectory: .esapi/validation.properties
ESAPI: Not found in 'user.home' (/Users/lgadde) directory: /Users/lgadde/esapi/validation.properties
ESAPI: Loading validation.properties via file I/O failed.
ESAPI: Attempting to load validation.properties via the classpath.
ESAPI: SUCCESSFULLY LOADED validation.properties via the CLASSPATH from '/ (root)' using current thread context class loader!
09:18:44.869 INFO  [ScalaTest-main] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:44.870 INFO  [ScalaTest-main] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:44.870 INFO  [ScalaTest-main] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:44.875 INFO  [ScalaTest-main] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:44.876 INFO  [ScalaTest-main] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:44.876 INFO  [ScalaTest-main] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
Discovery completed in 6 seconds, 625 milliseconds.
Run starting. Expected test count is: 148
DefaultRejectedExecutionHandlerFactoryTest:
- successfully build factory from json
MahaServiceExceptionTest:
- MahaServiceExceptionTest: MahaServiceBadRequestException
- MahaServiceExceptionTest: MahaServiceExecutionException
JsonMahaServiceConfigTest:
- successfully parse json
CuratorFactoryTest:
- Test DrillDown Curator Factory
- Test TimeShift Curator Factory
- Test DefaultCuratorFactory
- Test RowCountCuratorFactory
- Test TotalMetricsCuratorFactory
RequestCoordinatorTest:
Row(Map(Marks Obtained -> 2, Top Student ID -> 3, Student Name -> 1, Student ID -> 0, Professor Name -> 4),ArrayBuffer(214, ACTIVE, 190, 213, L. Johnson))
Row(Map(Marks Obtained -> 2, Top Student ID -> 3, Student Name -> 1, Student ID -> 0, Professor Name -> 4),ArrayBuffer(213, ACTIVE, 125, 213, M. Byson))
- Test successful student award query - top student in class above a threshold grade.
- Test successful student award query - query via metrics
09:18:45.992 ERROR [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultMahaService - Failed to compile the query pipeline requirement failed: Metric-Dim Comparison Failed: Can only compare dim-dim or metric-metric
java.lang.IllegalArgumentException: requirement failed: Metric-Dim Comparison Failed: Can only compare dim-dim or metric-metric
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.core.query.oracle.OracleOuterGroupByQueryGenerator.$anonfun$generateDimFactOuterGroupByQuery$10(OracleOuterGroupByQueryGenerator.scala:135)
	at scala.collection.IndexedSeqOptimized.foreach(IndexedSeqOptimized.scala:36)
	at scala.collection.IndexedSeqOptimized.foreach$(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:198)
	at com.yahoo.maha.core.query.oracle.OracleOuterGroupByQueryGenerator.ogbGenerateWhereAndHavingClause$1(OracleOuterGroupByQueryGenerator.scala:89)
	at com.yahoo.maha.core.query.oracle.OracleOuterGroupByQueryGenerator.generateDimFactOuterGroupByQuery(OracleOuterGroupByQueryGenerator.scala:647)
	at com.yahoo.maha.core.query.oracle.OracleQueryGenerator.generate(OracleQueryGenerator.scala:34)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.getDimFactQuery(QueryPipeline.scala:772)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.runSyncSingleEngineQuery$1(QueryPipeline.scala:1005)
- Test failed student award query - can't compare metric to dimension.
09:18:46.001 ERROR [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultMahaService - Failed to compile the query pipeline requirement failed: Dim-Metric Comparison Failed: Can only compare dim-dim or metric-metric
java.lang.IllegalArgumentException: requirement failed: Dim-Metric Comparison Failed: Can only compare dim-dim or metric-metric
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.core.query.oracle.OracleOuterGroupByQueryGenerator.$anonfun$generateDimFactOuterGroupByQuery$10(OracleOuterGroupByQueryGenerator.scala:100)
	at scala.collection.IndexedSeqOptimized.foreach(IndexedSeqOptimized.scala:36)
	at scala.collection.IndexedSeqOptimized.foreach$(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:198)
	at com.yahoo.maha.core.query.oracle.OracleOuterGroupByQueryGenerator.ogbGenerateWhereAndHavingClause$1(OracleOuterGroupByQueryGenerator.scala:89)
	at com.yahoo.maha.core.query.oracle.OracleOuterGroupByQueryGenerator.generateDimFactOuterGroupByQuery(OracleOuterGroupByQueryGenerator.scala:647)
	at com.yahoo.maha.core.query.oracle.OracleQueryGenerator.generate(OracleQueryGenerator.scala:34)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.getDimFactQuery(QueryPipeline.scala:772)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.runSyncSingleEngineQuery$1(QueryPipeline.scala:1005)
- Test failed student award query - can't compare dimension to metric.
- Test successful processing of Default curator
- Test successful processing of Default curator with dimension driven
09:18:46.111 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(timeshift)
09:18:46.112 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - Curators not found : Set(test-blah-curator, test-blah_curator2)
09:18:46.114 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:46.115 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.115 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:46.128 INFO  [maha-test-pool-1] c.y.m.s.c.TimeShiftCurator - previous period day filter : BetweenFilter(Day,2020-10-26,2020-11-02)
09:18:46.129 INFO  [maha-test-pool-1] c.y.m.s.c.TimeShiftCurator - previous period filter expressions : Vector(EqualityFilter(Student ID,213,false,false), EqualityFilter(Student ID,213,false,false), InFilter(Class ID,List(200, 198, 199),false,false), InFilter(Section ID,List(200, 100),false,false))
09:18:46.131 INFO  [maha-test-pool-1] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:46.131 INFO  [maha-test-pool-1] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.131 INFO  [maha-test-pool-1] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- Test successful processing of Timeshift curator
09:18:46.219 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(timeshift)
09:18:46.219 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - Curators not found : Set(test-blah-curator, test-blah_curator2)
09:18:46.221 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:46.221 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.221 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:46.223 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:46.223 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.223 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:46.267 INFO  [maha-test-pool-8] c.y.m.s.c.TimeShiftCurator - previous period day filter : BetweenFilter(Day,2020-11-06,2020-11-07)
09:18:46.267 INFO  [maha-test-pool-8] c.y.m.s.c.TimeShiftCurator - previous period filter expressions : Vector(EqualityFilter(Student ID,214,false,false), EqualityFilter(Student ID,214,false,false), InFilter(Class ID,List(201, 198, 199),false,false), EqualityFilter(Section ID,311,false,false))
09:18:46.270 INFO  [maha-test-pool-8] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:46.270 INFO  [maha-test-pool-8] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.270 INFO  [maha-test-pool-8] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- Test successful processing of Timeshift curator with days offset
09:18:46.322 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(timeshift)
09:18:46.322 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - Curators not found : Set(test-blah-curator, test-blah_curator2)
09:18:46.324 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:46.324 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.324 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:46.330 INFO  [maha-test-pool-7] c.y.m.s.c.TimeShiftCurator - previous period day filter : BetweenFilter(Day,2020-10-26,2020-11-02)
09:18:46.330 INFO  [maha-test-pool-7] c.y.m.s.c.TimeShiftCurator - previous period filter expressions : Vector(EqualityFilter(Student ID,213,false,false), EqualityFilter(Student ID,213,false,false), InFilter(Class ID,List(200, 198, 199),false,false), InFilter(Section ID,List(200, 100),false,false))
09:18:46.332 INFO  [maha-test-pool-7] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:46.332 INFO  [maha-test-pool-7] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.332 INFO  [maha-test-pool-7] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- Test successful processing of Timeshift curator with desc order
09:18:46.341 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(timeshift)
09:18:46.341 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - Curators not found : Set(test-blah-curator, test-blah_curator2)
09:18:46.343 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:46.343 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.343 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:46.348 INFO  [maha-test-pool-6] c.y.m.s.c.TimeShiftCurator - previous period day filter : BetweenFilter(Day,2020-10-26,2020-11-02)
09:18:46.349 INFO  [maha-test-pool-6] c.y.m.s.c.TimeShiftCurator - previous period filter expressions : Vector(EqualityFilter(Student ID,213,false,false), EqualityFilter(Student ID,213,false,false), InFilter(Class ID,List(200, 198, 199),false,false), InFilter(Section ID,List(200, 100),false,false))
09:18:46.350 INFO  [maha-test-pool-6] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:46.350 INFO  [maha-test-pool-6] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.350 INFO  [maha-test-pool-6] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- Test successful processing of Timeshift curator with asc order
09:18:46.358 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(timeshift)
09:18:46.358 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - Curators not found : Set(test-blah-curator, test-blah_curator2)
09:18:46.360 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:46.360 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.361 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:46.362 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:46.363 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.363 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:46.370 INFO  [maha-test-pool-4] c.y.m.s.c.TimeShiftCurator - previous period day filter : BetweenFilter(Day,2020-10-26,2020-11-02)
09:18:46.374 INFO  [maha-test-pool-4] c.y.m.s.c.TimeShiftCurator - previous period filter expressions : Vector(EqualityFilter(Student ID,213,false,false), EqualityFilter(Student ID,213,false,false), InFilter(Class ID,List(200, 198, 199),false,false), InFilter(Section ID,List(200, 100),false,false))
09:18:46.382 INFO  [maha-test-pool-4] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:46.382 INFO  [maha-test-pool-4] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.382 INFO  [maha-test-pool-4] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- Test successful processing of Timeshift curator with desc order for unknown field
- Test successful processing of Timeshift curator with bad config
09:18:46.473 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(drilldown, timeshift)
- Test failure when processing of multiple curator when one is a singleton
09:18:46.477 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(fail)
09:18:46.478 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
09:18:46.480 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:46.480 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.480 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- successfully return result when curator process returns error
09:18:46.488 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(fail)
09:18:46.488 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
09:18:46.490 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:46.490 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.490 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:46.492 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:46.492 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.492 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- successfully return result when par request for curator result returns error
09:18:46.500 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(fail)
09:18:46.500 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
09:18:46.502 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:46.502 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.502 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- successfully return result when par request for request result returns error
09:18:46.510 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(fail)
09:18:46.510 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
- successfully return result when default curator process returns error
- Curator compare test
09:18:46.517 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(drilldown)
09:18:46.517 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
09:18:46.519 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:46.519 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.519 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:46.580 INFO  [maha-test-pool-0] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:46.581 INFO  [maha-test-pool-0] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.581 INFO  [maha-test-pool-0] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:46.586 INFO  [maha-test-pool-0] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias: Student ID
09:18:46.586 INFO  [maha-test-pool-0] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias values : Set(213)
09:18:46.610 INFO  [maha-test-pool-0] c.y.m.s.c.DrilldownCurator - drilldown request : {"queryType":"groupby","cube":"student_performance","reportDisplayName":null,"schema":"student","requestType":"SyncRequest","forceDimensionDriven":false,"selectFields":[{"field":"Year","alias":null,"value":null},{"field":"Remarks","alias":null,"value":null},{"field":"Student ID","alias":null,"value":null},{"field":"Total Marks","alias":null,"value":null}],"filterExpressions":[{"field":"Student ID","operator":"=","value":"213"},{"field":"Day","operator":"Between","from":"2020-11-03","to":"2020-11-10"}],"sortBy":[{"field":"Total Marks","order":"DESC"}],"paginationStartIndex":0,"rowsPerPage":1000,"includeRowCount":false,"additionalParameters":{"debug":true}}
09:18:46.613 INFO  [maha-test-pool-0] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:46.613 INFO  [maha-test-pool-0] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.613 INFO  [maha-test-pool-0] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- Test successful processing of Drilldown curator with no dim candidates
09:18:46.737 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(drilldown)
09:18:46.737 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
09:18:46.740 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student-class grainRows=Some(1000)
09:18:46.740 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.740 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:46.749 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student-class grainRows=Some(1000)
09:18:46.749 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.749 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:46.755 ERROR [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultMahaService - Failed to compile the query pipeline requirement failed: Failed to find best candidate, forceEngine=None, engine disqualifyingSet=Set(Druid, Hive, Presto), candidates=Set((student_grade_sheet,Druid))
java.lang.IllegalArgumentException: requirement failed: Failed to find best candidate, forceEngine=None, engine disqualifyingSet=Set(Druid, Hive, Presto), candidates=Set((student_grade_sheet,Druid))
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory$.findBestFactCandidate(QueryPipeline.scala:544)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.findBestFactCandidate(QueryPipeline.scala:858)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.$anonfun$builder$25(QueryPipeline.scala:1078)
	at scala.Option.map(Option.scala:230)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.findBestCandidates$1(QueryPipeline.scala:1078)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.$anonfun$builder$52(QueryPipeline.scala:1206)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.builder(QueryPipeline.scala:1195)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.builder(QueryPipeline.scala:881)
09:18:46.843 INFO  [maha-test-pool-3] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student-class grainRows=Some(1000)
09:18:46.843 INFO  [maha-test-pool-3] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.843 INFO  [maha-test-pool-3] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:46.843 INFO  [maha-test-pool-3] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias: Student ID
09:18:46.843 INFO  [maha-test-pool-3] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias values : Set(213)
09:18:46.844 INFO  [maha-test-pool-3] c.y.m.s.c.DrilldownCurator - drilldown request : {"queryType":"groupby","cube":"student_performance","reportDisplayName":null,"schema":"student","requestType":"SyncRequest","forceDimensionDriven":false,"selectFields":[{"field":"Remarks","alias":null,"value":null},{"field":"Student ID","alias":null,"value":null},{"field":"Total Marks","alias":null,"value":null}],"filterExpressions":[{"field":"Student ID","operator":"=","value":"213"},{"field":"Class ID","operator":"=","value":"200"},{"field":"Day","operator":"Between","from":"2020-11-03","to":"2020-11-10"}],"sortBy":[{"field":"Total Marks","order":"DESC"}],"paginationStartIndex":0,"rowsPerPage":1000,"includeRowCount":false,"additionalParameters":{"debug":true}}
09:18:46.846 INFO  [maha-test-pool-3] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:46.846 INFO  [maha-test-pool-3] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.846 INFO  [maha-test-pool-3] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- Test successful processing of Drilldown curator with dim candidates
09:18:46.889 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(drilldown)
09:18:46.889 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
09:18:46.892 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:46.892 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.892 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:46.968 INFO  [maha-test-pool-3] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:46.968 INFO  [maha-test-pool-3] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.968 INFO  [maha-test-pool-3] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:46.969 INFO  [maha-test-pool-3] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias: Section ID
09:18:46.969 INFO  [maha-test-pool-3] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias values : Set(311)
09:18:46.972 INFO  [maha-test-pool-3] c.y.m.s.c.DrilldownCurator - drilldown request : {"queryType":"groupby","cube":"student_performance","reportDisplayName":null,"schema":"student","requestType":"SyncRequest","forceDimensionDriven":false,"selectFields":[{"field":"Remarks","alias":null,"value":null},{"field":"Section ID","alias":null,"value":null},{"field":"Total Marks","alias":null,"value":null}],"filterExpressions":[{"field":"Student ID","operator":"=","value":"214"},{"field":"Section ID","operator":"In","values":["311"]},{"field":"Day","operator":"Between","from":"2020-11-03","to":"2020-11-10"}],"sortBy":[{"field":"Total Marks","order":"DESC"}],"paginationStartIndex":0,"rowsPerPage":1000,"includeRowCount":false,"additionalParameters":{"debug":true}}
09:18:46.974 INFO  [maha-test-pool-3] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:46.974 INFO  [maha-test-pool-3] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:46.974 INFO  [maha-test-pool-3] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- Test successful processing of Drilldown curator with primary key and no dims
09:18:47.027 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(drilldown)
09:18:47.027 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
09:18:47.029 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:47.029 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:47.029 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:47.034 INFO  [maha-test-pool-9] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:47.034 INFO  [maha-test-pool-9] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:47.034 INFO  [maha-test-pool-9] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:47.035 INFO  [maha-test-pool-9] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias: Section ID
09:18:47.035 INFO  [maha-test-pool-9] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias values : Set(311)
09:18:47.036 INFO  [maha-test-pool-9] c.y.m.s.c.DrilldownCurator - drilldown request : {"queryType":"groupby","cube":"student_performance","reportDisplayName":null,"schema":"student","requestType":"SyncRequest","forceDimensionDriven":false,"selectFields":[{"field":"Remarks","alias":null,"value":null},{"field":"Section ID","alias":null,"value":null},{"field":"Total Marks","alias":null,"value":null}],"filterExpressions":[{"field":"Student ID","operator":"=","value":"214"},{"field":"Remarks","operator":"In","values":["some comment 1","some comment 2"]},{"field":"Section ID","operator":"In","values":["311"]},{"field":"Day","operator":"Between","from":"2020-11-03","to":"2020-11-10"}],"sortBy":[{"field":"Total Marks","order":"DESC"}],"paginationStartIndex":0,"rowsPerPage":1000,"includeRowCount":false,"additionalParameters":{"debug":true}}
09:18:47.038 INFO  [maha-test-pool-9] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:47.038 INFO  [maha-test-pool-9] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:47.038 INFO  [maha-test-pool-9] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- Test successful processing of Drilldown curator with filters
09:18:47.087 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(drilldown)
09:18:47.087 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
09:18:47.089 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student-class grainRows=Some(1000)
09:18:47.089 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:47.089 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:47.098 INFO  [maha-test-pool-5] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student-class grainRows=Some(1000)
09:18:47.098 INFO  [maha-test-pool-5] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:47.098 INFO  [maha-test-pool-5] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:47.098 INFO  [maha-test-pool-5] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias: Student ID
09:18:47.098 INFO  [maha-test-pool-5] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias values : Set(213)
09:18:47.098 INFO  [maha-test-pool-5] c.y.m.s.c.DrilldownCurator - drilldown request : {"queryType":"groupby","cube":"student_performance","reportDisplayName":null,"schema":"student","requestType":"SyncRequest","forceDimensionDriven":false,"selectFields":[{"field":"Remarks","alias":null,"value":null},{"field":"Student ID","alias":null,"value":null},{"field":"Total Marks","alias":null,"value":null}],"filterExpressions":[{"field":"Student ID","operator":"In","values":["213"]},{"field":"Day","operator":"Between","from":"2020-11-03","to":"2020-11-10"}],"sortBy":[{"field":"Total Marks","order":"DESC"}],"paginationStartIndex":0,"rowsPerPage":1000,"includeRowCount":false,"additionalParameters":{"debug":true}}
09:18:47.100 INFO  [maha-test-pool-5] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:47.100 INFO  [maha-test-pool-5] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:47.100 INFO  [maha-test-pool-5] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- Test successful processing of Drilldown curator with dim candidates without enforcing filters
09:18:47.139 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(drilldown)
09:18:47.139 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
09:18:47.141 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student-class grainRows=Some(1000)
09:18:47.142 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:47.142 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- successful erroring of Drilldown curator when join key not present in request
- Test failed processing of Drilldown curator on non-existent DrillDown Dim
- Test successful processing of TotalMetrics Curator
- Test successful processing of TotalMetrics Curator with bad forceRevision
09:18:47.369 WARN  [maha-test-pool-5] c.y.m.s.u.MahaRequestLogHelper - Something went wrong in extracting cube revision for logging purpose java.util.NoSuchElementException: None.get
09:18:47.373 ERROR [maha-test-pool-5] c.y.m.e.o.OracleQueryExecutor - Failed query : SELECT /*+ FIRST_ROWS */ *
      FROM (
          SELECT "Student ID", "TOTALROWS", ROWNUM AS ROW_NUMBER
              FROM(SELECT s0.id "Student ID", Count(*) OVER() TOTALROWS
                  FROM 
                (SELECT  id
            FROM student
            WHERE (id = 213)
             ) s0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 1
09:18:47.374 ERROR [maha-test-pool-5] c.y.m.s.DefaultMahaService - Failed to execute the query pipeline
java.lang.RuntimeException: query execution failed : Syntax error in SQL statement "SELECT                   *
      FROM (
          SELECT ""Student ID"", ""TOTALROWS"", ROWNUM AS ROW_NUMBER
              FROM(SELECT S0.ID ""Student ID"", COUNT(*) OVER([*]) TOTALROWS
                  FROM 
                (SELECT  ID
            FROM STUDENT
            WHERE (ID = 213)
             ) S0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 1 "; expected ",, FROM, WHERE, GROUP, HAVING, UNION, MINUS, EXCEPT, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, FOR, )"; SQL statement:
SELECT /*+ FIRST_ROWS */ *
      FROM (
          SELECT "Student ID", "TOTALROWS", ROWNUM AS ROW_NUMBER
              FROM(SELECT s0.id "Student ID", Count(*) OVER() TOTALROWS
                  FROM 
                (SELECT  id
            FROM student
            WHERE (id = 213)
             ) s0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 1 [42001-191]
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:20)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.$anonfun$execute$5(QueryPipeline.scala:167)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.execute(QueryPipeline.scala:166)
	at com.yahoo.maha.service.DefaultMahaService.com$yahoo$maha$service$DefaultMahaService$$processQueryPipeline(MahaService.scala:346)
Caused by: org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "SELECT                   *
      FROM (
          SELECT ""Student ID"", ""TOTALROWS"", ROWNUM AS ROW_NUMBER
              FROM(SELECT S0.ID ""Student ID"", COUNT(*) OVER([*]) TOTALROWS
                  FROM 
                (SELECT  ID
            FROM STUDENT
            WHERE (ID = 213)
             ) S0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 1 "; expected ",, FROM, WHERE, GROUP, HAVING, UNION, MINUS, EXCEPT, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, FOR, )"; SQL statement:
SELECT /*+ FIRST_ROWS */ *
      FROM (
          SELECT "Student ID", "TOTALROWS", ROWNUM AS ROW_NUMBER
              FROM(SELECT s0.id "Student ID", Count(*) OVER() TOTALROWS
                  FROM 
                (SELECT  id
            FROM student
            WHERE (id = 213)
             ) s0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 1 [42001-191]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)
	at org.h2.message.DbException.getSyntaxError(DbException.java:205)
	at org.h2.command.Parser.getSyntaxError(Parser.java:535)
	at org.h2.command.Parser.read(Parser.java:3170)
	at org.h2.command.Parser.readTableFilter(Parser.java:1170)
	at org.h2.command.Parser.parseSelectSimpleFromPart(Parser.java:1884)
	at org.h2.command.Parser.parseSelectSimple(Parser.java:2032)
	at org.h2.command.Parser.parseSelectSub(Parser.java:1878)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:1699)
	at org.h2.command.Parser.readTableFilter(Parser.java:1169)
- Test successful processing of Default curator and RowCountCurator MultiEngine (druid+oracle) case
09:18:48.124 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(drilldown)
09:18:48.124 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
09:18:48.125 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:48.126 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:48.126 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:48.193 INFO  [maha-test-pool-8] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:48.193 INFO  [maha-test-pool-8] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:48.193 INFO  [maha-test-pool-8] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:48.195 INFO  [maha-test-pool-8] c.y.m.s.c.DrilldownCurator - Removed fact fields: Vector(Field(Performance Factor,None,None))
09:18:48.196 INFO  [maha-test-pool-8] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias: Student ID
09:18:48.196 INFO  [maha-test-pool-8] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias values : Set(213)
09:18:48.196 INFO  [maha-test-pool-8] c.y.m.s.c.DrilldownCurator - drilldown request : {"queryType":"groupby","cube":"student_performance2","reportDisplayName":null,"schema":"student","requestType":"SyncRequest","forceDimensionDriven":false,"selectFields":[{"field":"Class ID","alias":null,"value":null},{"field":"Student ID","alias":null,"value":null},{"field":"Total Marks","alias":null,"value":null}],"filterExpressions":[{"field":"Student ID","operator":"=","value":"213"},{"field":"Class ID","operator":"=","value":"200"},{"field":"Day","operator":"Between","from":"2020-11-03","to":"2020-11-10"}],"sortBy":[{"field":"Total Marks","order":"DESC"}],"paginationStartIndex":0,"rowsPerPage":1000,"includeRowCount":false,"additionalParameters":{"debug":true}}
09:18:48.198 INFO  [maha-test-pool-8] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:48.198 INFO  [maha-test-pool-8] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-section grainRows=Some(1000)
09:18:48.198 INFO  [maha-test-pool-8] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- successful remove of DrillDown curator cross-cube fields when second cube lacks facts from initial request
09:18:48.228 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(drilldown)
09:18:48.228 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
09:18:48.230 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:48.230 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:48.230 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:48.300 INFO  [maha-test-pool-9] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:48.300 INFO  [maha-test-pool-9] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:48.300 INFO  [maha-test-pool-9] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:48.301 INFO  [maha-test-pool-9] c.y.m.s.c.DrilldownCurator - Failed to select valid bucket for fact java.lang.IllegalArgumentException: requirement failed: Default revision not found for cube student_performance222 in the registry
09:18:48.303 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.o.JsonOutputFormat - GeneralError{stage='processDrillDownCurator', message='requirement failed: Default revision not found for cube student_performance222 in the registry', throwableOption=Some(com.yahoo.maha.service.error.MahaServiceBadRequestException: MahaServiceBadRequestException: requirement failed: Default revision not found for cube student_performance222 in the registry)}
09:18:48.303 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.o.JsonOutputFormat - GeneralError{stage='processDrillDownCurator', message='requirement failed: Default revision not found for cube student_performance222 in the registry', throwableOption=Some(com.yahoo.maha.service.error.MahaServiceBadRequestException: MahaServiceBadRequestException: requirement failed: Default revision not found for cube student_performance222 in the registry)}
- Force fail DrillDown using wrong drill down cube.
- DrillDown Curator should discard non selected orderBy fields
09:18:48.497 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(drilldown)
09:18:48.497 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
09:18:48.499 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:48.499 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:48.499 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:48.553 INFO  [maha-test-pool-7] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:48.553 INFO  [maha-test-pool-7] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:48.553 INFO  [maha-test-pool-7] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:48.554 INFO  [maha-test-pool-7] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:48.555 INFO  [maha-test-pool-7] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:48.555 INFO  [maha-test-pool-7] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:48.555 INFO  [maha-test-pool-7] c.y.m.s.c.DrilldownCurator - Removed fact fields: Vector(Field(Performance Factor,None,None))
09:18:48.555 INFO  [maha-test-pool-7] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias: Student ID
09:18:48.555 INFO  [maha-test-pool-7] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias values : Set()
09:18:48.556 INFO  [maha-test-pool-7] c.y.m.s.c.DrilldownCurator - drilldown request : {"queryType":"groupby","cube":"student_performance2","reportDisplayName":null,"schema":"student","requestType":"SyncRequest","forceDimensionDriven":false,"selectFields":[{"field":"Class ID","alias":null,"value":null},{"field":"Student ID","alias":null,"value":null},{"field":"Total Marks","alias":null,"value":null}],"filterExpressions":[{"field":"Day","operator":"Between","from":"2020-11-03","to":"2020-11-10"}],"sortBy":[{"field":"Total Marks","order":"DESC"}],"paginationStartIndex":0,"rowsPerPage":1000,"includeRowCount":false,"additionalParameters":{"debug":true}}
- DrillDown Curator should fail with error on empty filters
- DrillDown Curator should work correctly with level 3 dimension with the id injections(Here Section ID is being injected in the drilldown request)
- DrillDown Curator should work correctly with multiple drilldown requests)
09:18:48.757 INFO  [maha-test-pool-8] c.y.m.s.c.DrilldownCurator - Failed to select valid bucket for fact java.lang.IllegalArgumentException: requirement failed: Default revision not found for cube student_performance222 in the registry
- DrillDown Curator should work correctly with multiple drilldown requests with some failed)
- DrillDown Curator should fail with no most granular key
- DrillDown Curator should work correctly with level 3 dimension with the id injections with NO Data from Default Curator(Here Section ID is being injected in the drilldown request)
- DrillDown Curator should override the paginationStartIndex given in the original request
- Test RowCountCurator for Druid fact-driven query
MahaServiceTest:
- Test MahaService Init and Validation test
- Test MahaService Validation: Expects Success in registry Validation should fail to load factory class
- Invalid MahaServiceEngine
Map(student_performance.external.rev0.percent -> DynamicPropertyInfo(student_performance.external.rev0.percent,50,Map(bucketingConfigMap -> java.lang.Object@7d61468c)), student_performance.external.rev1.percent -> DynamicPropertyInfo(student_performance.external.rev1.percent,50,Map(bucketingConfigMap -> java.lang.Object@7d61468c)))
09:18:49.239 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicConfigurations - Adding dynamic property: student_performance.external.rev0.percent defaultValue: 50
09:18:49.240 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicConfigurations - Adding dynamic property: student_performance.external.rev1.percent defaultValue: 50
- Find dynamic objects successfully in a json containing dynamic property values
09:18:49.311 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicConfigurations - Adding dynamic property: student_performance.external.rev0.percent defaultValue: 50
09:18:49.311 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicConfigurations - Adding dynamic property: student_performance.external.rev1.percent defaultValue: 50
09:18:49.344 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicConfigurations - Adding callback for dynamic property: com.netflix.archaius.DefaultPropertyFactory$PropertyImpl@18989e0
09:18:49.345 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicConfigurations - Adding callback for dynamic property: com.netflix.archaius.DefaultPropertyFactory$PropertyImpl@7ab2ba47
09:18:49.349 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicWrapper$ - Updating: bucketingConfigMap - Map(commonbucket -> com.yahoo.maha.core.bucketing.DefaultBucketingConfig@20027c44)
09:18:49.350 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicConfigurations - Adding dynamic property: student_performance.external.rev0.percent defaultValue: 50
09:18:49.351 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicConfigurations - Adding dynamic property: student_performance.external.rev1.percent defaultValue: 50
09:18:49.352 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicWrapper$ - Updating: bucketingConfigMap - Map(commonbucket -> com.yahoo.maha.core.bucketing.DefaultBucketingConfig@20027c44)
09:18:49.353 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicConfigurations - Adding dynamic property: student_performance.external.rev0.percent defaultValue: 50
09:18:49.354 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicConfigurations - Adding dynamic property: student_performance.external.rev1.percent defaultValue: 50
09:18:49.355 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicWrapper$ - Replaced BucketSelector: com.yahoo.maha.core.bucketing.DefaultBucketingConfig@6335f04a
- Successfully swap dynamic objects in the registry on dynamic property change
DynamicConfigurationUtilsTest:
- getDynamicFields should return all dynamic fields in the json
- extractDynamicFields should return all dynamic fields in the json
DruidQueryOptimizerFactoryTest:
- Test instantiation of SyncDruidQueryOptimizer from factory
- Test instantiation of AsyncDruidQueryOptimizer from factory
ParallelServiceExecutoryFactoryTest:
- ParallelServiceExecutoryFactory Test
DefaultResultSetTransformersFactoryTest:
- successfully build factory from json
DataSourceConnectionPoolFactoryTest:
- Test Creation of HikariDataSource
DefaultDimCostEstimatorFactoryTest:
- successfully build factory from json
MahaSyncRequestProcessorTest:
- Test MahaRequestProcessor instantiation
- Test MahaRequestProcessor RequestModel Validation Failure
09:18:52.336 ERROR [maha-test-pool-1] c.y.m.p.f.ParFunction - Exception in callable
java.lang.IllegalArgumentException: failed in success function
	at com.yahoo.maha.service.MahaSyncRequestProcessorTest.$anonfun$new$8(MahaSyncRequestProcessorTest.scala:142)
	at com.yahoo.maha.service.MahaSyncRequestProcessorTest.$anonfun$new$8$adapted(MahaSyncRequestProcessorTest.scala:141)
	at com.yahoo.maha.service.MahaSyncRequestProcessor.$anonfun$process$6(MahaSyncRequestProcessor.scala:77)
	at com.yahoo.maha.service.MahaSyncRequestProcessor.$anonfun$process$6$adapted(MahaSyncRequestProcessor.scala:77)
	at scala.Option.foreach(Option.scala:407)
	at com.yahoo.maha.service.MahaSyncRequestProcessor.$anonfun$process$5(MahaSyncRequestProcessor.scala:77)
	at com.yahoo.maha.service.MahaSyncRequestProcessor.$anonfun$process$5$adapted(MahaSyncRequestProcessor.scala:76)
	at com.yahoo.maha.parrequest2.future.ParFunction.apply(ParFunction.java:104)
	at com.yahoo.maha.parrequest2.EitherUtils.fold(EitherUtils.java:41)
	at com.yahoo.maha.parrequest2.future.FoldableFuture.run(FoldableFuture.java:57)
- Test MahaRequestProcessor RequestResult Validation Failure
09:18:53.242 ERROR [maha-test-pool-3] c.y.m.p.f.ParFunction - Exception in callable
com.yahoo.maha.service.error.MahaServiceBadRequestException: MahaServiceBadRequestException: requirement failed: ERROR_CODE:10005 Failed to find primary key alias for Student Blah
	at com.yahoo.maha.service.curators.DefaultCurator.process(Curator.scala:146)
	at com.yahoo.maha.service.DefaultRequestCoordinator.$anonfun$execute$9(RequestCoordinator.scala:168)
	at scala.collection.TraversableOnce.$anonfun$foldLeft$1(TraversableOnce.scala:162)
	at scala.collection.TraversableOnce.$anonfun$foldLeft$1$adapted(TraversableOnce.scala:162)
	at scala.collection.immutable.RedBlackTree$._foreachKey(RedBlackTree.scala:111)
	at scala.collection.immutable.RedBlackTree$.foreachKey(RedBlackTree.scala:107)
	at scala.collection.immutable.TreeSet.foreach(TreeSet.scala:170)
	at scala.collection.TraversableOnce.foldLeft(TraversableOnce.scala:162)
	at scala.collection.TraversableOnce.foldLeft$(TraversableOnce.scala:160)
java.util.concurrent.ExecutionException: com.yahoo.maha.service.error.MahaServiceBadRequestException: MahaServiceBadRequestException: requirement failed: ERROR_CODE:10005 Failed to find primary key alias for Student Blah
	at scala.collection.immutable.TreeSet.foldLeft(TreeSet.scala:53)
09:18:53.243 INFO  [maha-test-pool-3] c.y.m.s.MahaSyncRequestProcessorTest - exception from upstream
	at com.google.common.util.concurrent.AbstractFuture.getDoneValue(AbstractFuture.java:564)
	at com.google.common.util.concurrent.AbstractFuture.get(AbstractFuture.java:525)
	at com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly(Uninterruptibles.java:237)
	at com.yahoo.maha.parrequest2.future.FoldableFuture.run(FoldableFuture.java:56)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.yahoo.maha.service.error.MahaServiceBadRequestException: MahaServiceBadRequestException: requirement failed: ERROR_CODE:10005 Failed to find primary key alias for Student Blah
	at com.yahoo.maha.service.curators.DefaultCurator.process(Curator.scala:146)
	at com.yahoo.maha.service.DefaultRequestCoordinator.$anonfun$execute$9(RequestCoordinator.scala:168)
	at scala.collection.TraversableOnce.$anonfun$foldLeft$1(TraversableOnce.scala:162)
	at scala.collection.TraversableOnce.$anonfun$foldLeft$1$adapted(TraversableOnce.scala:162)
	at scala.collection.immutable.RedBlackTree$._foreachKey(RedBlackTree.scala:111)
	at scala.collection.immutable.RedBlackTree$.foreachKey(RedBlackTree.scala:107)
	at scala.collection.immutable.TreeSet.foreach(TreeSet.scala:170)
	at scala.collection.TraversableOnce.foldLeft(TraversableOnce.scala:162)
	at scala.collection.TraversableOnce.foldLeft$(TraversableOnce.scala:160)
	at scala.collection.immutable.TreeSet.foldLeft(TreeSet.scala:53)
	at com.yahoo.maha.service.DefaultRequestCoordinator.execute(RequestCoordinator.scala:165)
	at com.yahoo.maha.service.MahaSyncRequestProcessor.process(MahaSyncRequestProcessor.scala:65)
	at com.yahoo.maha.service.MahaSyncRequestProcessorTest.$anonfun$new$10(MahaSyncRequestProcessorTest.scala:196)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.funsuite.AnyFunSuiteLike$$anon$1.apply(AnyFunSuiteLike.scala:189)
	at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
	at org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)
	at org.scalatest.funsuite.AnyFunSuite.withFixture(AnyFunSuite.scala:1562)
	at org.scalatest.funsuite.AnyFunSuiteLike.invokeWithFixture$1(AnyFunSuiteLike.scala:187)
	at org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$runTest$1(AnyFunSuiteLike.scala:199)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTest(AnyFunSuiteLike.scala:199)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTest$(AnyFunSuiteLike.scala:181)
	at org.scalatest.funsuite.AnyFunSuite.runTest(AnyFunSuite.scala:1562)
	at org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$runTests$1(AnyFunSuiteLike.scala:232)
	at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:413)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:475)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTests(AnyFunSuiteLike.scala:232)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTests$(AnyFunSuiteLike.scala:231)
	at org.scalatest.funsuite.AnyFunSuite.runTests(AnyFunSuite.scala:1562)
	at org.scalatest.Suite.run(Suite.scala:1112)
	at org.scalatest.Suite.run$(Suite.scala:1094)
	at org.scalatest.funsuite.AnyFunSuite.org$scalatest$funsuite$AnyFunSuiteLike$$super$run(AnyFunSuite.scala:1562)
	at org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$run$1(AnyFunSuiteLike.scala:236)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:535)
	at org.scalatest.funsuite.AnyFunSuiteLike.run(AnyFunSuiteLike.scala:236)
	at org.scalatest.funsuite.AnyFunSuiteLike.run$(AnyFunSuiteLike.scala:235)
	at com.yahoo.maha.service.MahaSyncRequestProcessorTest.org$scalatest$BeforeAndAfterAll$$super$run(MahaSyncRequestProcessorTest.scala:12)
	at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)
	at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:210)
	at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:208)
	at com.yahoo.maha.service.MahaSyncRequestProcessorTest.run(MahaSyncRequestProcessorTest.scala:12)
	at org.scalatest.Suite.callExecuteOnSuite$1(Suite.scala:1175)
	at org.scalatest.Suite.$anonfun$runNestedSuites$1(Suite.scala:1222)
	at scala.collection.IndexedSeqOptimized.foreach(IndexedSeqOptimized.scala:36)
	at scala.collection.IndexedSeqOptimized.foreach$(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:198)
	at org.scalatest.Suite.runNestedSuites(Suite.scala:1220)
	at org.scalatest.Suite.runNestedSuites$(Suite.scala:1154)
	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:30)
	at org.scalatest.Suite.run(Suite.scala:1109)
	at org.scalatest.Suite.run$(Suite.scala:1094)
	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:30)
	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:45)
	at org.scalatest.tools.Runner$.$anonfun$doRunRunRunDaDoRunRun$13(Runner.scala:1320)
	at org.scalatest.tools.Runner$.$anonfun$doRunRunRunDaDoRunRun$13$adapted(Runner.scala:1314)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:1314)
	at org.scalatest.tools.Runner$.$anonfun$runOptionallyWithPassFailReporter$24(Runner.scala:993)
	at org.scalatest.tools.Runner$.$anonfun$runOptionallyWithPassFailReporter$24$adapted(Runner.scala:971)
	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:1480)
	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:971)
	at org.scalatest.tools.Runner$.main(Runner.scala:775)
	at org.scalatest.tools.Runner.main(Runner.scala)
- Test MahaRequestProcessor request model failure
DefaultFactCostEstimatorFactoryTest:
- successfully build factory from json
DefaultBucketingConfigFactoryTest:
- successfully build factory from json
- successfully build query gen bucketing config from json
QueryGeneratorFactoryTest:
- successfully construct druid query generator from json
- successfully construct oracle query generator from json
- successfully construct Hive query generator from json
- successfully construct Hive query generator V0 from json
- successfully construct Hive query generator V2 from json
- successfully construct Presto query generator from json
- successfully construct Presto query generator V1 from json
FactoryTest:
- Test PassThroughPasswordProviderFactory 
- Test PassThroughUTCTimeProviderFactory 
- Test NoopExecutionLifecycleListenerFactory 
- Create a BaseUTCTimeProviderFactory
- Test NoopUserTimeZoneProviderFactory 
09:18:54.254 WARN  [maha-test-pool-6] c.y.m.s.u.MahaRequestLogHelper - logFailed called more than once!
DrilldownCuratorTest:
- Test failure of DrilldownCurator with no default curator
- Test failure of DrilldownCurator with default curator failed
- Test failure of DrilldownCurator with no default curator request result
- Test failure of DrilldownCurator with bad config
- Test failure of DrilldownCurator with failing default curator request result
09:18:54.280 ERROR [maha-test-pool-7] c.y.m.s.c.DrilldownCurator - Row has null Remarks (position 4)!  Found row [213,200,100,99,null]
09:18:54.280 ERROR [maha-test-pool-7] c.y.m.s.c.DrilldownCurator - Row has null Remarks (position 4)!  Found row [sid,cid,sid,999,null]
09:18:54.314 WARN  [maha-test-pool-9] c.y.m.s.u.MahaRequestLogHelper - logSuccess called more than once!
- Should succeed even when DrillDown metric isn't present
BaseJsonModelsTest:
- successfully parse json JsonBucketingConfig
- successfully parse json JsonUTCTimeProviderConfig
- successfully parse json JsonQueryGeneratorConfig
- successfully parse json JsonQueryExecutorConfig
- Validate JSONHelpers
09:18:54.352 ERROR [maha-test-pool-0] c.y.m.e.o.OracleQueryExecutor - Failed query : SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT sgs0.student_id "Student ID", sgs0.class_id "Class ID", sgs0.section_id "Section ID", sgs0."total_marks" "Total Marks"
      FROM (SELECT 
                   section_id, student_id, class_id, SUM(total_marks) AS "total_marks"
            FROM student_grade_sheet
            WHERE (student_id = 213) AND (date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY section_id, student_id, class_id
            
           ) sgs0

) 
   ) WHERE ROWNUM <= 200) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 200
09:18:54.353 ERROR [maha-test-pool-0] c.y.m.s.DefaultMahaService - Failed to execute the query pipeline
java.lang.RuntimeException: query execution failed : Table "STUDENT_GRADE_SHEET" not found; SQL statement:
SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT sgs0.student_id "Student ID", sgs0.class_id "Class ID", sgs0.section_id "Section ID", sgs0."total_marks" "Total Marks"
      FROM (SELECT 
                   section_id, student_id, class_id, SUM(total_marks) AS "total_marks"
            FROM student_grade_sheet
            WHERE (student_id = 213) AND (date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY section_id, student_id, class_id
            
           ) sgs0

) 
   ) WHERE ROWNUM <= 200) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 200 [42102-191]
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:20)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.$anonfun$execute$5(QueryPipeline.scala:167)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.execute(QueryPipeline.scala:166)
	at com.yahoo.maha.service.DefaultMahaService.com$yahoo$maha$service$DefaultMahaService$$processQueryPipeline(MahaService.scala:346)
Caused by: org.h2.jdbc.JdbcSQLException: Table "STUDENT_GRADE_SHEET" not found; SQL statement:
SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT sgs0.student_id "Student ID", sgs0.class_id "Class ID", sgs0.section_id "Section ID", sgs0."total_marks" "Total Marks"
      FROM (SELECT 
                   section_id, student_id, class_id, SUM(total_marks) AS "total_marks"
            FROM student_grade_sheet
            WHERE (student_id = 213) AND (date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY section_id, student_id, class_id
            
           ) sgs0

) 
   ) WHERE ROWNUM <= 200) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 200 [42102-191]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.command.Parser.readTableOrView(Parser.java:5349)
	at org.h2.command.Parser.readTableFilter(Parser.java:1245)
	at org.h2.command.Parser.parseSelectSimpleFromPart(Parser.java:1884)
	at org.h2.command.Parser.parseSelectSimple(Parser.java:2032)
	at org.h2.command.Parser.parseSelectSub(Parser.java:1878)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:1699)
	at org.h2.command.Parser.readTableFilter(Parser.java:1169)
09:18:54.358 ERROR [maha-test-pool-1] c.y.m.e.o.OracleQueryExecutor - Failed query : SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT sgs0.student_id "Student ID", sgs0.class_id "Class ID", sgs0.section_id "Section ID", sgs0."total_marks" "Total Marks"
      FROM (SELECT 
                   section_id, student_id, class_id, SUM(total_marks) AS "total_marks"
            FROM student_grade_sheet
            WHERE (student_id = 213) AND (date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY section_id, student_id, class_id
            
           ) sgs0

) 
   ) WHERE ROWNUM <= 200) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 200
09:18:54.359 ERROR [maha-test-pool-1] c.y.m.s.DefaultMahaService - Failed to execute the query pipeline
java.lang.RuntimeException: query execution failed : Table "STUDENT_GRADE_SHEET" not found; SQL statement:
SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT sgs0.student_id "Student ID", sgs0.class_id "Class ID", sgs0.section_id "Section ID", sgs0."total_marks" "Total Marks"
      FROM (SELECT 
                   section_id, student_id, class_id, SUM(total_marks) AS "total_marks"
            FROM student_grade_sheet
            WHERE (student_id = 213) AND (date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY section_id, student_id, class_id
            
           ) sgs0

) 
   ) WHERE ROWNUM <= 200) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 200 [42102-191]
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:20)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.$anonfun$execute$5(QueryPipeline.scala:167)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.execute(QueryPipeline.scala:166)
	at com.yahoo.maha.service.DefaultMahaService.com$yahoo$maha$service$DefaultMahaService$$processQueryPipeline(MahaService.scala:346)
Caused by: org.h2.jdbc.JdbcSQLException: Table "STUDENT_GRADE_SHEET" not found; SQL statement:
SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT sgs0.student_id "Student ID", sgs0.class_id "Class ID", sgs0.section_id "Section ID", sgs0."total_marks" "Total Marks"
      FROM (SELECT 
                   section_id, student_id, class_id, SUM(total_marks) AS "total_marks"
            FROM student_grade_sheet
            WHERE (student_id = 213) AND (date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY section_id, student_id, class_id
            
           ) sgs0

) 
   ) WHERE ROWNUM <= 200) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 200 [42102-191]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.command.Parser.readTableOrView(Parser.java:5349)
	at org.h2.command.Parser.readTableFilter(Parser.java:1245)
	at org.h2.command.Parser.parseSelectSimpleFromPart(Parser.java:1884)
	at org.h2.command.Parser.parseSelectSimple(Parser.java:2032)
	at org.h2.command.Parser.parseSelectSub(Parser.java:1878)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:1699)
	at org.h2.command.Parser.readTableFilter(Parser.java:1169)
09:18:54.359 WARN  [maha-test-pool-1] c.y.m.s.u.MahaRequestLogHelper - logFailed called more than once!
09:18:54.363 ERROR [ScalaTest-main-running-MahaServiceExampleTest] c.y.m.e.o.OracleQueryExecutor - Failed query : SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT sgs0.student_id "Student ID", sgs0.class_id "Class ID", sgs0.section_id "Section ID", sgs0."total_marks" "Total Marks"
      FROM (SELECT 
                   section_id, student_id, class_id, SUM(total_marks) AS "total_marks"
            FROM student_grade_sheet
            WHERE (student_id = 213) AND (date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY section_id, student_id, class_id
            
           ) sgs0

) 
   ) WHERE ROWNUM <= 200) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 200
09:18:54.365 ERROR [ScalaTest-main-running-MahaServiceExampleTest] c.y.m.s.DefaultMahaService - Failed to execute the query pipeline
java.lang.RuntimeException: query execution failed : Table "STUDENT_GRADE_SHEET" not found; SQL statement:
SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT sgs0.student_id "Student ID", sgs0.class_id "Class ID", sgs0.section_id "Section ID", sgs0."total_marks" "Total Marks"
      FROM (SELECT 
                   section_id, student_id, class_id, SUM(total_marks) AS "total_marks"
            FROM student_grade_sheet
            WHERE (student_id = 213) AND (date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY section_id, student_id, class_id
            
           ) sgs0

) 
   ) WHERE ROWNUM <= 200) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 200 [42102-191]
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:20)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.$anonfun$execute$5(QueryPipeline.scala:167)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.execute(QueryPipeline.scala:166)
	at com.yahoo.maha.service.DefaultMahaService.com$yahoo$maha$service$DefaultMahaService$$processQueryPipeline(MahaService.scala:346)
Caused by: org.h2.jdbc.JdbcSQLException: Table "STUDENT_GRADE_SHEET" not found; SQL statement:
SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT sgs0.student_id "Student ID", sgs0.class_id "Class ID", sgs0.section_id "Section ID", sgs0."total_marks" "Total Marks"
      FROM (SELECT 
                   section_id, student_id, class_id, SUM(total_marks) AS "total_marks"
            FROM student_grade_sheet
            WHERE (student_id = 213) AND (date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY section_id, student_id, class_id
            
           ) sgs0

) 
   ) WHERE ROWNUM <= 200) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 200 [42102-191]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.command.Parser.readTableOrView(Parser.java:5349)
	at org.h2.command.Parser.readTableFilter(Parser.java:1245)
	at org.h2.command.Parser.parseSelectSimpleFromPart(Parser.java:1884)
	at org.h2.command.Parser.parseSelectSimple(Parser.java:2032)
	at org.h2.command.Parser.parseSelectSub(Parser.java:1878)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:1699)
	at org.h2.command.Parser.readTableFilter(Parser.java:1169)
09:18:54.365 WARN  [ScalaTest-main-running-MahaServiceExampleTest] c.y.m.s.u.MahaRequestLogHelper - logFailed called more than once!
DrilldownConfigTest:
- Create a valid DrillDownConfig
- Create a valid DrillDownConfig with reversed ordering
- Create a valid DrillDownConfig with multiple requests
- Create a valid DrillDownConfig with invalid ordering
- DrildownConfig with one request error should error
- DrillDownConfig should throw error on no dimension.
09:18:54.369 ERROR [ScalaTest-main-running-MahaServiceExampleTest] c.y.m.e.o.OracleQueryExecutor - Failed query : SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT sgs0.student_id "Student ID", sgs0.class_id "Class ID", sgs0.section_id "Section ID", sgs0."total_marks" "Total Marks"
      FROM (SELECT 
                   section_id, student_id, class_id, SUM(total_marks) AS "total_marks"
            FROM student_grade_sheet
            WHERE (student_id = 213) AND (date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY section_id, student_id, class_id
            
           ) sgs0

) 
   ) WHERE ROWNUM <= 200) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 200
- Create a valid DrillDownConfig with Descending order and multiple orderings
- Create a valid DrillDownConfig with Descending order and no given ordering
09:18:54.369 ERROR [ScalaTest-main-running-MahaServiceExampleTest] c.y.m.s.DefaultMahaService - Failed to execute the query pipeline
java.lang.RuntimeException: query execution failed : Table "STUDENT_GRADE_SHEET" not found; SQL statement:
SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT sgs0.student_id "Student ID", sgs0.class_id "Class ID", sgs0.section_id "Section ID", sgs0."total_marks" "Total Marks"
      FROM (SELECT 
                   section_id, student_id, class_id, SUM(total_marks) AS "total_marks"
            FROM student_grade_sheet
            WHERE (student_id = 213) AND (date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY section_id, student_id, class_id
            
           ) sgs0

) 
   ) WHERE ROWNUM <= 200) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 200 [42102-191]
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:20)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.$anonfun$execute$5(QueryPipeline.scala:167)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.execute(QueryPipeline.scala:166)
	at com.yahoo.maha.service.DefaultMahaService.com$yahoo$maha$service$DefaultMahaService$$processQueryPipeline(MahaService.scala:346)
Caused by: org.h2.jdbc.JdbcSQLException: Table "STUDENT_GRADE_SHEET" not found; SQL statement:
SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT sgs0.student_id "Student ID", sgs0.class_id "Class ID", sgs0.section_id "Section ID", sgs0."total_marks" "Total Marks"
      FROM (SELECT 
                   section_id, student_id, class_id, SUM(total_marks) AS "total_marks"
            FROM student_grade_sheet
            WHERE (student_id = 213) AND (date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY section_id, student_id, class_id
            
           ) sgs0

) 
   ) WHERE ROWNUM <= 200) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 200 [42102-191]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.command.Parser.readTableOrView(Parser.java:5349)
	at org.h2.command.Parser.readTableFilter(Parser.java:1245)
	at org.h2.command.Parser.parseSelectSimpleFromPart(Parser.java:1884)
	at org.h2.command.Parser.parseSelectSimple(Parser.java:2032)
	at org.h2.command.Parser.parseSelectSub(Parser.java:1878)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:1699)
	at org.h2.command.Parser.readTableFilter(Parser.java:1169)
09:18:54.369 WARN  [ScalaTest-main-running-MahaServiceExampleTest] c.y.m.s.u.MahaRequestLogHelper - logFailed called more than once!
MahaServiceExampleTest:
09:18:54.440 INFO  [maha-test-pool-8] c.y.m.s.e.MahaServiceExampleTest - Inside onSuccess function
- Test MahaService with Example Schema
09:18:54.447 WARN  [ScalaTest-main-running-MahaServiceExampleTest] c.y.m.s.u.MahaRequestLogHelper - Something went wrong in extracting cube revision for logging purpose java.util.NoSuchElementException: None.get
09:18:54.453 WARN  [maha-test-pool-7] c.y.m.s.u.MahaRequestLogHelper - Something went wrong in extracting cube revision for logging purpose java.util.NoSuchElementException: None.get
- Test MahaService with Example Schema generating valid Dim Candidates
09:18:54.459 WARN  [ScalaTest-main-running-MahaServiceExampleTest] c.y.m.s.u.MahaRequestLogHelper - logFailed called more than once!
09:18:54.461 ERROR [ScalaTest-main-running-MahaServiceExampleTest] c.y.m.s.DefaultMahaService - Failed to create Report Model:
java.lang.IllegalArgumentException: requirement failed: ERROR_CODE:10005 Failed to find primary key alias for Student Status Unknown Column
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.core.RequestModel$.$anonfun$from$32(RequestModel.scala:519)
	at scala.collection.mutable.RedBlackTree$.foreachNodeKeyNonNull(RedBlackTree.scala:454)
	at scala.collection.mutable.RedBlackTree$.foreachKey(RedBlackTree.scala:450)
	at scala.collection.mutable.TreeSet.foreach(TreeSet.scala:107)
	at com.yahoo.maha.core.RequestModel$.$anonfun$from$1(RequestModel.scala:514)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.RequestModel$.from(RequestModel.scala:326)
	at com.yahoo.maha.core.RequestModelFactory$.fromBucketSelector(RequestModel.scala:1392)
	at com.yahoo.maha.service.DefaultMahaService.generateRequestModel(MahaService.scala:292)
- Test RequestModel Failure using mahaService
- Test MahaService with Example Schema generating valid query pipeline
- Test Query Gen bucketing
DruidQueryExecutorConfigFactoryTest:
- Druid Executor Config
MahaUDFRegistrationFactoryTest:
- successfully build factory from json
09:18:54.581 ERROR [ScalaTest-main-running-TotalMetricsCuratorTest] c.y.m.s.DefaultMahaService - Failed to compile the query pipeline None.get
java.util.NoSuchElementException: None.get
	at scala.None$.get(Option.scala:529)
	at scala.None$.get(Option.scala:527)
	at scala.collection.mutable.TreeSet.head(TreeSet.scala:102)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.$anonfun$builder$52(QueryPipeline.scala:1243)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.builder(QueryPipeline.scala:1195)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.builder(QueryPipeline.scala:881)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.fromBucketSelector(QueryPipeline.scala:1287)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.fromBucketSelector(QueryPipeline.scala:1303)
	at com.yahoo.maha.service.DefaultMahaService.generateQueryPipelines(MahaService.scala:336)
TotalMetricsCuratorTest:
- Test successful processing of TotalMetricsCurator
- Test failure of TotalMetricsCurator
- Test failure of TotalMetricsCurator with unknown col
- Test failure of TotalMetricsCurator with BadTestRequestModelValidator
- Test failure when bad config
MahaRequestLogWriterFactoryTest:
- Noop MahaRequestLogWriterFactoryTest
- Kafka MahaRequestLogWriterFactoryTest
- MultiColoRequestLogWriter Factory test
DefaultPartitionColumnRendererFactoryTest:
- successfully build factory from json
DefaultCuratorTest:
- Default Curator test
09:18:54.663 ERROR [maha-test-pool-3] c.y.m.s.c.DefaultCurator - error in post processor, returning original result
java.lang.IllegalArgumentException: CuratorResultPostProcessor failed
	at com.yahoo.maha.service.curators.DefaultCuratorTest$CuratorCustomPostProcessor$2.process(DefaultCuratorTest.scala:90)
	at com.yahoo.maha.service.curators.DefaultCurator.$anonfun$process$1(Curator.scala:177)
	at com.yahoo.maha.parrequest2.future.ParFunction.apply(ParFunction.java:104)
	at com.yahoo.maha.parrequest2.EitherUtils.flatMap(EitherUtils.java:28)
	at com.yahoo.maha.parrequest2.future.ComposableFuture.run(ComposableFuture.java:54)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
09:18:54.663 WARN  [maha-test-pool-3] c.y.m.s.u.MahaRequestLogHelper - logFailed called more than once!
- Default Curator test with failing curatorResultPostProcessor
09:18:54.665 WARN  [ScalaTest-main-running-DefaultCuratorTest] c.y.m.s.u.MahaRequestLogHelper - logFailed called more than once!
- Default Curator test with BadTestRequestModelValidator
AuthHeaderProdiverFactoryTest:
- shouldCreateValidNoopAuthHeaderProvider
09:18:54.697 INFO  [ScalaTest-main-running-RowCountCuratorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:54.698 INFO  [ScalaTest-main-running-RowCountCuratorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:54.698 INFO  [ScalaTest-main-running-RowCountCuratorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:18:54.702 INFO  [ScalaTest-main-running-RowCountCuratorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:18:54.702 INFO  [ScalaTest-main-running-RowCountCuratorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:18:54.702 INFO  [ScalaTest-main-running-RowCountCuratorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
QueryExecutorFactoryTest:
- Test Oracle Query Executor Instantiation
- Test Oracle Query Executor Instantiation without fetch size
- Test Druid Query Executor Instantiation
- Test Presto Query Executor Instantiation
- Test Failure in Presto Query Executor Instantiation
09:18:54.707 WARN  [maha-test-pool-0] c.y.m.s.u.MahaRequestLogHelper - Something went wrong in extracting cube revision for logging purpose java.util.NoSuchElementException: None.get
09:18:54.709 ERROR [maha-test-pool-0] c.y.m.e.o.OracleQueryExecutor - Failed query : SELECT /*+ FIRST_ROWS */ *
      FROM (
          SELECT "Student ID", "TOTALROWS", ROWNUM AS ROW_NUMBER
              FROM(SELECT s0.id "Student ID", Count(*) OVER() TOTALROWS
                  FROM 
                (SELECT  id
            FROM student
            WHERE (id = 213)
             ) s0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 1
09:18:54.710 INFO  [ScalaTest-main-running-RowCountCuratorTest] c.y.m.s.c.RowCountCurator - Unfiltered request should not generate any fact candidates!   : Request fields : ()  : generated Model columns and candidate names : ()  : ()
09:18:54.710 ERROR [maha-test-pool-0] c.y.m.s.DefaultMahaService - Failed to execute the query pipeline
java.lang.RuntimeException: query execution failed : Syntax error in SQL statement "SELECT                   *
      FROM (
          SELECT ""Student ID"", ""TOTALROWS"", ROWNUM AS ROW_NUMBER
              FROM(SELECT S0.ID ""Student ID"", COUNT(*) OVER([*]) TOTALROWS
                  FROM 
                (SELECT  ID
            FROM STUDENT
            WHERE (ID = 213)
             ) S0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 1 "; expected ",, FROM, WHERE, GROUP, HAVING, UNION, MINUS, EXCEPT, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, FOR, )"; SQL statement:
SELECT /*+ FIRST_ROWS */ *
      FROM (
          SELECT "Student ID", "TOTALROWS", ROWNUM AS ROW_NUMBER
              FROM(SELECT s0.id "Student ID", Count(*) OVER() TOTALROWS
                  FROM 
                (SELECT  id
            FROM student
            WHERE (id = 213)
             ) s0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 1 [42001-191]
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:20)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.$anonfun$execute$5(QueryPipeline.scala:167)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.execute(QueryPipeline.scala:166)
	at com.yahoo.maha.service.DefaultMahaService.com$yahoo$maha$service$DefaultMahaService$$processQueryPipeline(MahaService.scala:346)
Caused by: org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "SELECT                   *
      FROM (
          SELECT ""Student ID"", ""TOTALROWS"", ROWNUM AS ROW_NUMBER
              FROM(SELECT S0.ID ""Student ID"", COUNT(*) OVER([*]) TOTALROWS
                  FROM 
                (SELECT  ID
            FROM STUDENT
            WHERE (ID = 213)
             ) S0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 1 "; expected ",, FROM, WHERE, GROUP, HAVING, UNION, MINUS, EXCEPT, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, FOR, )"; SQL statement:
SELECT /*+ FIRST_ROWS */ *
      FROM (
          SELECT "Student ID", "TOTALROWS", ROWNUM AS ROW_NUMBER
              FROM(SELECT s0.id "Student ID", Count(*) OVER() TOTALROWS
                  FROM 
                (SELECT  id
            FROM student
            WHERE (id = 213)
             ) s0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 1 [42001-191]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)
	at org.h2.message.DbException.getSyntaxError(DbException.java:205)
	at org.h2.command.Parser.getSyntaxError(Parser.java:535)
	at org.h2.command.Parser.read(Parser.java:3170)
	at org.h2.command.Parser.readTableFilter(Parser.java:1170)
	at org.h2.command.Parser.parseSelectSimpleFromPart(Parser.java:1884)
	at org.h2.command.Parser.parseSelectSimple(Parser.java:2032)
	at org.h2.command.Parser.parseSelectSub(Parser.java:1878)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:1699)
	at org.h2.command.Parser.readTableFilter(Parser.java:1169)
09:18:54.716 ERROR [ScalaTest-main-running-RowCountCuratorTest] c.y.m.s.CuratorInjector - Failed to inject curator : totalmetrics
java.lang.IllegalArgumentException: requirement failed: Cannot inject curator already requested : totalmetrics
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.service.CuratorInjector.injectCurator(RequestCoordinator.scala:58)
	at com.yahoo.maha.service.curators.RowCountCuratorTest.$anonfun$new$5(RowCountCuratorTest.scala:312)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.funsuite.AnyFunSuiteLike$$anon$1.apply(AnyFunSuiteLike.scala:189)
	at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
BaseFactoryTest:
RowCountCuratorTest:
- Test processing of RowCountCurator with fact only operations
- Test processing of RowCountCurator with fact only operations with dim cost > 5000
- Test processing of RowCountCurator with failure of RowCountCurator with dim driven request
- Test curator Injection
- Test curator Injection Failure
- Test failure of RowCountCurator
- Test failure of RowCountCurator unknown col
- Test failure of RowCountCurator with BadTestRequestModelValidator
- Test RowCountCurator for fact driven queries in druid
09:18:54.784 ERROR [AsyncHttpClient-17-12] c.y.m.e.d.f.TimeoutThrottlingFilter - Connection or Timeout Exception caught. java.net.ConnectException: Connection refused: localhost/0:0:0:0:0:0:0:1:51663 Adding to timeoutList for url: http://localhost:51663/mock/studentPerf
09:18:54.786 ERROR [maha-test-pool-6] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.util.concurrent.ExecutionException: java.net.ConnectException: Connection refused: localhost/0:0:0:0:0:0:0:1:51663
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:357)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1895)
	at org.asynchttpclient.netty.NettyResponseFuture.get(NettyResponseFuture.java:201)
	at com.yahoo.maha.executor.druid.HttpUtils.execute$1(HttpUtils.scala:52)
	at com.yahoo.maha.executor.druid.HttpUtils.sendRequest(HttpUtils.scala:55)
	at com.yahoo.maha.executor.druid.HttpUtils.post(HttpUtils.scala:88)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:493)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
Caused by: java.net.ConnectException: Connection refused: localhost/0:0:0:0:0:0:0:1:51663
	at org.asynchttpclient.netty.channel.NettyConnectListener.onFailure(NettyConnectListener.java:179)
	at org.asynchttpclient.netty.channel.NettyChannelConnector$1.onFailure(NettyChannelConnector.java:108)
	at org.asynchttpclient.netty.SimpleChannelFutureListener.operationComplete(SimpleChannelFutureListener.java:28)
	at org.asynchttpclient.netty.SimpleChannelFutureListener.operationComplete(SimpleChannelFutureListener.java:20)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:570)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:549)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:608)
Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/0:0:0:0:0:0:0:1:51663
Caused by: java.net.ConnectException: Connection refused
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:717)
	at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:327)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:334)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:688)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:635)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:552)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:514)
	at io.netty.util.concurrent.SingleThreadEventExecutor$6.run(SingleThreadEventExecutor.java:1044)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
09:18:54.786 ERROR [maha-test-pool-6] c.y.m.s.DefaultMahaService - Failed to execute the query pipeline
java.lang.RuntimeException: query execution failed : java.net.ConnectException: Connection refused: localhost/0:0:0:0:0:0:0:1:51663
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:20)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.$anonfun$execute$5(QueryPipeline.scala:167)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.execute(QueryPipeline.scala:166)
	at com.yahoo.maha.service.DefaultMahaService.com$yahoo$maha$service$DefaultMahaService$$processQueryPipeline(MahaService.scala:346)
Caused by: java.util.concurrent.ExecutionException: java.net.ConnectException: Connection refused: localhost/0:0:0:0:0:0:0:1:51663
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:357)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1895)
	at org.asynchttpclient.netty.NettyResponseFuture.get(NettyResponseFuture.java:201)
	at com.yahoo.maha.executor.druid.HttpUtils.execute$1(HttpUtils.scala:52)
	at com.yahoo.maha.executor.druid.HttpUtils.sendRequest(HttpUtils.scala:55)
	at com.yahoo.maha.executor.druid.HttpUtils.post(HttpUtils.scala:88)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:493)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
Caused by: java.net.ConnectException: Connection refused: localhost/0:0:0:0:0:0:0:1:51663
	at org.asynchttpclient.netty.channel.NettyConnectListener.onFailure(NettyConnectListener.java:179)
	at org.asynchttpclient.netty.channel.NettyChannelConnector$1.onFailure(NettyChannelConnector.java:108)
	at org.asynchttpclient.netty.SimpleChannelFutureListener.operationComplete(SimpleChannelFutureListener.java:28)
	at org.asynchttpclient.netty.SimpleChannelFutureListener.operationComplete(SimpleChannelFutureListener.java:20)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:570)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:549)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:608)
Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/0:0:0:0:0:0:0:1:51663
Caused by: java.net.ConnectException: Connection refused
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:717)
	at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:327)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:334)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:688)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:635)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:552)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:514)
	at io.netty.util.concurrent.SingleThreadEventExecutor$6.run(SingleThreadEventExecutor.java:1044)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
LiteralMapperTest:
- Test OracleLiteralMapper 
- Test DruidLiteralMapper 
- Test DefaultPostgresLiteralMapper
- Test DefaultPostgresLiteralMapperUsingDriver
MahaRequestLogHelperTest:
09:18:54.961 WARN  [ScalaTest-main-running-MahaRequestLogHelperTest] c.y.m.s.u.MahaRequestLogHelper - Failed to log the event to kafka null java.lang.NullPointerException
- Test MahaRequestLogHelper
09:18:54.969 WARN  [ScalaTest-main-running-MahaRequestLogHelperTest] c.y.m.s.u.MahaRequestLogHelper - Failed to log the event to kafka null java.lang.NullPointerException
- Test MahaRequestLogHelper LogFailed with status
09:18:55.062 WARN  [ScalaTest-main-running-MahaRequestLogHelperTest] c.y.m.s.u.MahaRequestLogHelper - Failed to log the event to kafka Message missing required fields: requestId, json com.google.protobuf.UninitializedMessageException: Message missing required fields: requestId, json
- Test MahaRequestLogHelper LogFailed with status and null request context
09:18:55.069 WARN  [ScalaTest-main-running-MahaRequestLogHelperTest] c.y.m.s.u.MahaRequestLogHelper - Failed to log the event to kafka null java.lang.NullPointerException
09:18:55.069 WARN  [ScalaTest-main-running-MahaRequestLogHelperTest] c.y.m.s.u.MahaRequestLogHelper - logSuccess called more than once!
09:18:55.069 WARN  [ScalaTest-main-running-MahaRequestLogHelperTest] c.y.m.s.u.MahaRequestLogHelper - logSuccess called more than once!
09:18:55.069 WARN  [ScalaTest-main-running-MahaRequestLogHelperTest] c.y.m.s.u.MahaRequestLogHelper - Failed to log the event to kafka null java.lang.NullPointerException
- Create curatorMahaRequestLogHelper to check logging
JsonOutputFormatTest:
- Test JsonOutputFormat with DefaultCurator, totalRow Option, empty curator result
- Test JsonOutputFormat with DefaultCurator and valid other curator result
- Test JsonOutputFormat with DefaultCurator and failed other curator result
- Test JsonOutputFormat with DefaultCurator row count in row list
- Test JsonOutputFormat with DefaultCurator row count in row list for fact driven query
- Test JsonOutputFormat with RowCountCurator while rowList is empty
PrestoQueryTemplateFactoryTest:
- Test PrestoQueryTemplateFactory 
Run completed in 16 seconds, 613 milliseconds.
Total number of tests run: 148
Suites: completed 36, aborted 0
Tests: succeeded 148, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
[INFO] 
[INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ maha-service ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/service/target/maha-service-6.24-SNAPSHOT.jar
[INFO] 
[INFO] --- maven-jar-plugin:2.6:test-jar (default) @ maha-service ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/service/target/maha-service-6.24-SNAPSHOT-tests.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:jar (default) > generate-sources @ maha-service >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-service ---
[INFO] 
[INFO] <<< maven-source-plugin:2.4:jar (default) < generate-sources @ maha-service <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:jar (default) @ maha-service ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/service/target/maha-service-6.24-SNAPSHOT-sources.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:test-jar (default) > generate-sources @ maha-service >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-service ---
[INFO] 
[INFO] <<< maven-source-plugin:2.4:test-jar (default) < generate-sources @ maha-service <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:test-jar (default) @ maha-service ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/service/target/maha-service-6.24-SNAPSHOT-test-sources.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ maha-service ---
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/service/target/maha-service-6.24-SNAPSHOT.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-service/6.24-SNAPSHOT/maha-service-6.24-SNAPSHOT.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/service/pom.xml to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-service/6.24-SNAPSHOT/maha-service-6.24-SNAPSHOT.pom
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/service/target/maha-service-6.24-SNAPSHOT-tests.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-service/6.24-SNAPSHOT/maha-service-6.24-SNAPSHOT-tests.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/service/target/maha-service-6.24-SNAPSHOT-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-service/6.24-SNAPSHOT/maha-service-6.24-SNAPSHOT-sources.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/service/target/maha-service-6.24-SNAPSHOT-test-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-service/6.24-SNAPSHOT/maha-service-6.24-SNAPSHOT-test-sources.jar
[INFO] 
[INFO] >>> scoverage-maven-plugin:1.4.1:report (coverage) > [scoverage]test @ maha-service >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-service ---
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:pre-compile (coverage) @ maha-service ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-service ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/lgadde/git/Native-Ads/maha/service/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ maha-service ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-service ---
[INFO] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala:-1: info: compiling
[INFO] Compiling 35 source files to /Users/lgadde/git/Native-Ads/maha/service/target/scoverage-classes at 1605028736108
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/MahaService.scala:919: warning: local val formats in method findDynamicProperties is never used
[WARNING]     implicit val formats = org.json4s.DefaultFormats
[WARNING]                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/MahaService.scala:501: warning: local var defaultContext in method fromJson is never updated: consider using immutable val
[WARNING]     var defaultContext = DefaultMahaServiceConfigContext()
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/MahaService.scala:844: warning: local var defaultContext in method fromJson is never updated: consider using immutable val
[WARNING]     var defaultContext = DefaultMahaServiceConfigContext()
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/MahaService.scala:755: warning: parameter value context in method initKafkaLogWriter is never used
[WARNING]   def initKafkaLogWriter(jsonMahaRequestLogConfig: JsonMahaRequestLogConfig)(implicit context: MahaServiceConfigContext) : MahaServiceConfig.MahaConfigResult[MahaRequestLogWriter] = {
[WARNING]                                                                                       ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/RequestCoordinator.scala:175: warning: local val finalResultMap in method execute is never used
[WARNING]         val finalResultMap = resultMap ++ curatorInjector.resultMap
[WARNING]             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/config/dynamic/DynamicConfigurationUtils.scala:35: warning: local val formats in method getDynamicFields is never used
[WARNING]     implicit val formats = org.json4s.DefaultFormats
[WARNING]                  ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/factory/DruidQueryExecutorConfigFactory.scala:5: warning: Unused import
[WARNING] import com.netflix.archaius.config.PollingDynamicConfig
[WARNING]                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/factory/DruidQueryExecutorConfigFactory.scala:10: warning: Unused import
[WARNING] import com.yahoo.maha.service.config.dynamic.DynamicConfigurations
[WARNING]                                              ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/factory/Factory.scala:244: warning: parameter value context in method fromJson is never used
[WARNING]   def fromJson(config: org.json4s.JValue)(implicit context: MahaServiceConfigContext) : MahaServiceConfig.MahaConfigResult[BucketingConfig] = {
[WARNING]                                                    ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/factory/package.scala:27: warning: parameter value tag in method getFactory is never used
[WARNING]   def getFactory[T](clazz: String, closerOption: Option[Closer])(implicit tag: TypeTag[T]) : MahaServiceConfig.MahaConfigResult[T] = {
[WARNING]                                                                           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/output/JsonOutputFormat.scala:13: warning: Unused import
[ERROR] import com.yahoo.maha.service.curators.{Curator, CuratorError, CuratorResult, DefaultCurator, RowCountCurator}
[INFO]                                                                ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/utils/MahaRequestLogUtils.scala:16: warning: Unused import
[WARNING] import org.apache.commons.codec.digest.DigestUtils
[WARNING]                                        ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/utils/MahaRequestLogUtils.scala:20: warning: Unused import
[WARNING] import scala.util.Try
[WARNING]                   ^
[INFO] Cleaning datadir [/Users/lgadde/git/Native-Ads/maha/service/target/scoverage-data]
[INFO] Beginning coverage instrumentation
[INFO] Instrumentation completed [5133 statements]
[INFO] Wrote instrumentation file [/Users/lgadde/git/Native-Ads/maha/service/target/scoverage-data/scoverage.coverage]
[INFO] Will write measurement data to [/Users/lgadde/git/Native-Ads/maha/service/target/scoverage-data]
[WARNING] /Users/lgadde/git/Native-Ads/maha/service/src/main/scala/com/yahoo/maha/service/curators/DrilldownConfig.scala:19: warning: match may not be exhaustive.
[WARNING] It would fail on the following inputs: JBool(_), JDecimal(_), JDouble(_), JInt(_), JLong(_), JNothing, JNull, JSet(_), JString(_)
[WARNING]     curatorJsonConfig.json match {
[WARNING]                       ^
[WARNING] 14 warnings found
[INFO] prepare-compile in 0 s
[INFO] compile in 19 s
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:post-compile (coverage) @ maha-service ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-service ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ maha-service ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-service ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-service ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- scalatest-maven-plugin:2.0.0:test (test) @ maha-service ---
Discovery starting.
09:19:21,178 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Found resource [logback-test.xml] at [file:/Users/lgadde/git/Native-Ads/maha/service/target/test-classes/logback-test.xml]
09:19:21,179 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs multiple times on the classpath.
09:19:21,180 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [file:/Users/lgadde/git/Native-Ads/maha/service/target/test-classes/logback-test.xml]
09:19:21,180 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [jar:file:/Users/lgadde/git/Native-Ads/maha/core/target/maha-core-6.24-SNAPSHOT-tests.jar!/logback-test.xml]
09:19:21,319 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - debug attribute not set
09:19:21,320 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.rolling.RollingFileAppender]
09:19:21,329 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [FILE]
09:19:21,337 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
09:19:21,367 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@566698125 - No compression will be used
09:19:21,368 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@566698125 - Will use the pattern application.%d{yyyy-MM-dd}.log for the active file
09:19:21,372 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - The date pattern is 'yyyy-MM-dd' from file name pattern 'application.%d{yyyy-MM-dd}.log'.
09:19:21,372 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Roll-over at midnight.
09:19:21,376 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Setting initial period to Tue Nov 10 09:18:55 PST 2020
09:19:21,379 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - Active log file name: target/logs/application.log
09:19:21,379 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - File property is set to [target/logs/application.log]
09:19:21,380 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]
09:19:21,381 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [STDOUT]
09:19:21,384 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
09:19:21,386 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.classic.AsyncAppender]
09:19:21,388 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [ASYNCFILE]
09:19:21,388 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [FILE] to ch.qos.logback.classic.AsyncAppender[ASYNCFILE]
09:19:21,388 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCFILE] - Attaching appender named [FILE] to AsyncAppender.
09:19:21,388 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCFILE] - Setting discardingThreshold to 51
09:19:21,389 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.classic.AsyncAppender]
09:19:21,389 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [ASYNCSTDOUT]
09:19:21,389 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [STDOUT] to ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT]
09:19:21,389 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT] - Attaching appender named [STDOUT] to AsyncAppender.
09:19:21,389 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT] - Setting discardingThreshold to 51
09:19:21,389 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.zaxxer.hikari] to ERROR
09:19:21,389 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.yahoo.maha.core] to ERROR
09:19:21,389 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.yahoo.maha.executor] to ERROR
09:19:21,389 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [org.http4s] to ERROR
09:19:21,389 |-INFO in ch.qos.logback.classic.joran.action.RootLoggerAction - Setting level of ROOT logger to INFO
09:19:21,390 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [ASYNCFILE] to Logger[ROOT]
09:19:21,390 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [ASYNCSTDOUT] to Logger[ROOT]
09:19:21,390 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration.
09:19:21,390 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@58516c91 - Registering current configuration as safe fallback point

09:19:23.040 INFO  [ScalaTest-main] c.y.m.s.RequestCoordinatorTest - Starting blaze server on port : 51684
09:19:23.532 INFO  [ScalaTest-main] c.y.m.s.MahaSyncRequestProcessorTest - Starting blaze server on port : 51686
09:19:23.600 INFO  [ScalaTest-main] c.y.m.s.c.DrilldownCuratorTest - Starting blaze server on port : 51687
09:19:23.658 INFO  [ScalaTest-main] c.y.m.s.c.DrilldownConfigTest - Starting blaze server on port : 51688
09:19:23.709 INFO  [ScalaTest-main] c.y.m.s.e.MahaServiceExampleTest - Starting blaze server on port : 51689
09:19:23.863 INFO  [ScalaTest-main] c.y.m.s.c.TotalMetricsCuratorTest - Starting blaze server on port : 51690
09:19:23.921 INFO  [ScalaTest-main] c.y.m.s.c.DefaultCuratorTest - Starting blaze server on port : 51691
09:19:24.085 INFO  [ScalaTest-main] c.y.m.s.c.RowCountCuratorTest - Starting blaze server on port : 51692
09:19:24.144 INFO  [ScalaTest-main] c.y.m.s.o.JsonOutputFormatTest - Starting blaze server on port : 51693
ESAPI: WARNING: System property [org.owasp.esapi.opsteam] is not set
ESAPI: WARNING: System property [org.owasp.esapi.devteam] is not set
ESAPI: Attempting to load ESAPI.properties via file I/O.
ESAPI: Attempting to load ESAPI.properties as resource file via file I/O.
ESAPI: Not found in 'org.owasp.esapi.resources' directory or file not readable: /Users/lgadde/git/Native-Ads/maha/service/ESAPI.properties
ESAPI: Not found in SystemResource Directory/resourceDirectory: .esapi/ESAPI.properties
ESAPI: Not found in 'user.home' (/Users/lgadde) directory: /Users/lgadde/esapi/ESAPI.properties
ESAPI: Loading ESAPI.properties via file I/O failed. Exception was: java.io.FileNotFoundException
ESAPI: Attempting to load ESAPI.properties via the classpath.
ESAPI: SUCCESSFULLY LOADED ESAPI.properties via the CLASSPATH from '/ (root)' using current thread context class loader!
ESAPI: SecurityConfiguration for Validator.ConfigurationFile.MultiValued not found in ESAPI.properties. Using default: false
ESAPI: Attempting to load validation.properties via file I/O.
ESAPI: Attempting to load validation.properties as resource file via file I/O.
ESAPI: Not found in 'org.owasp.esapi.resources' directory or file not readable: /Users/lgadde/git/Native-Ads/maha/service/validation.properties
ESAPI: Not found in SystemResource Directory/resourceDirectory: .esapi/validation.properties
ESAPI: Not found in 'user.home' (/Users/lgadde) directory: /Users/lgadde/esapi/validation.properties
ESAPI: Loading validation.properties via file I/O failed.
ESAPI: Attempting to load validation.properties via the classpath.
ESAPI: SUCCESSFULLY LOADED validation.properties via the CLASSPATH from '/ (root)' using current thread context class loader!
09:19:24.489 INFO  [ScalaTest-main] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:24.489 INFO  [ScalaTest-main] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:24.490 INFO  [ScalaTest-main] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
Discovery completed in 6 seconds, 360 milliseconds.
Run starting. Expected test count is: 148
DefaultRejectedExecutionHandlerFactoryTest:
- successfully build factory from json
MahaServiceExceptionTest:
- MahaServiceExceptionTest: MahaServiceBadRequestException
- MahaServiceExceptionTest: MahaServiceExecutionException
JsonMahaServiceConfigTest:
- successfully parse json
CuratorFactoryTest:
- Test DrillDown Curator Factory
- Test TimeShift Curator Factory
- Test DefaultCuratorFactory
- Test RowCountCuratorFactory
- Test TotalMetricsCuratorFactory
RequestCoordinatorTest:
Row(Map(Marks Obtained -> 2, Top Student ID -> 3, Student Name -> 1, Student ID -> 0, Professor Name -> 4),ArrayBuffer(214, ACTIVE, 190, 213, L. Johnson))
Row(Map(Marks Obtained -> 2, Top Student ID -> 3, Student Name -> 1, Student ID -> 0, Professor Name -> 4),ArrayBuffer(213, ACTIVE, 125, 213, M. Byson))
- Test successful student award query - top student in class above a threshold grade.
- Test successful student award query - query via metrics
09:19:25.799 ERROR [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultMahaService - Failed to compile the query pipeline requirement failed: Metric-Dim Comparison Failed: Can only compare dim-dim or metric-metric
java.lang.IllegalArgumentException: requirement failed: Metric-Dim Comparison Failed: Can only compare dim-dim or metric-metric
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.core.query.oracle.OracleOuterGroupByQueryGenerator.$anonfun$generateDimFactOuterGroupByQuery$10(OracleOuterGroupByQueryGenerator.scala:135)
	at scala.collection.IndexedSeqOptimized.foreach(IndexedSeqOptimized.scala:36)
	at scala.collection.IndexedSeqOptimized.foreach$(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:198)
	at com.yahoo.maha.core.query.oracle.OracleOuterGroupByQueryGenerator.ogbGenerateWhereAndHavingClause$1(OracleOuterGroupByQueryGenerator.scala:89)
	at com.yahoo.maha.core.query.oracle.OracleOuterGroupByQueryGenerator.generateDimFactOuterGroupByQuery(OracleOuterGroupByQueryGenerator.scala:647)
	at com.yahoo.maha.core.query.oracle.OracleQueryGenerator.generate(OracleQueryGenerator.scala:34)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.getDimFactQuery(QueryPipeline.scala:772)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.runSyncSingleEngineQuery$1(QueryPipeline.scala:1005)
09:19:25.801 ERROR [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultMahaService - Failed to compile the query pipeline requirement failed: Metric-Dim Comparison Failed: Can only compare dim-dim or metric-metric
java.lang.IllegalArgumentException: requirement failed: Metric-Dim Comparison Failed: Can only compare dim-dim or metric-metric
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.core.query.oracle.OracleOuterGroupByQueryGenerator.$anonfun$generateDimFactOuterGroupByQuery$10(OracleOuterGroupByQueryGenerator.scala:135)
	at scala.collection.IndexedSeqOptimized.foreach(IndexedSeqOptimized.scala:36)
	at scala.collection.IndexedSeqOptimized.foreach$(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:198)
	at com.yahoo.maha.core.query.oracle.OracleOuterGroupByQueryGenerator.ogbGenerateWhereAndHavingClause$1(OracleOuterGroupByQueryGenerator.scala:89)
	at com.yahoo.maha.core.query.oracle.OracleOuterGroupByQueryGenerator.generateDimFactOuterGroupByQuery(OracleOuterGroupByQueryGenerator.scala:647)
	at com.yahoo.maha.core.query.oracle.OracleQueryGenerator.generate(OracleQueryGenerator.scala:34)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.getDimFactQuery(QueryPipeline.scala:772)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.runSyncSingleEngineQuery$1(QueryPipeline.scala:1005)
- Test failed student award query - can't compare metric to dimension.
09:19:25.811 ERROR [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultMahaService - Failed to compile the query pipeline requirement failed: Dim-Metric Comparison Failed: Can only compare dim-dim or metric-metric
java.lang.IllegalArgumentException: requirement failed: Dim-Metric Comparison Failed: Can only compare dim-dim or metric-metric
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.core.query.oracle.OracleOuterGroupByQueryGenerator.$anonfun$generateDimFactOuterGroupByQuery$10(OracleOuterGroupByQueryGenerator.scala:100)
	at scala.collection.IndexedSeqOptimized.foreach(IndexedSeqOptimized.scala:36)
	at scala.collection.IndexedSeqOptimized.foreach$(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:198)
	at com.yahoo.maha.core.query.oracle.OracleOuterGroupByQueryGenerator.ogbGenerateWhereAndHavingClause$1(OracleOuterGroupByQueryGenerator.scala:89)
	at com.yahoo.maha.core.query.oracle.OracleOuterGroupByQueryGenerator.generateDimFactOuterGroupByQuery(OracleOuterGroupByQueryGenerator.scala:647)
	at com.yahoo.maha.core.query.oracle.OracleQueryGenerator.generate(OracleQueryGenerator.scala:34)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.getDimFactQuery(QueryPipeline.scala:772)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.runSyncSingleEngineQuery$1(QueryPipeline.scala:1005)
- Test failed student award query - can't compare dimension to metric.
- Test successful processing of Default curator
- Test successful processing of Default curator with dimension driven
09:19:25.952 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(timeshift)
09:19:25.953 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - Curators not found : Set(test-blah-curator, test-blah_curator2)
09:19:25.955 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:25.956 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:25.956 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:25.974 INFO  [maha-test-pool-2] c.y.m.s.c.TimeShiftCurator - previous period day filter : BetweenFilter(Day,2020-10-26,2020-11-02)
09:19:25.975 INFO  [maha-test-pool-2] c.y.m.s.c.TimeShiftCurator - previous period filter expressions : Vector(EqualityFilter(Student ID,213,false,false), EqualityFilter(Student ID,213,false,false), InFilter(Class ID,List(200, 198, 199),false,false), InFilter(Section ID,List(200, 100),false,false))
09:19:25.977 INFO  [maha-test-pool-2] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:25.977 INFO  [maha-test-pool-2] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:25.977 INFO  [maha-test-pool-2] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- Test successful processing of Timeshift curator
09:19:26.056 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(timeshift)
09:19:26.056 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - Curators not found : Set(test-blah-curator, test-blah_curator2)
09:19:26.058 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:26.058 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.058 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:26.090 INFO  [maha-test-pool-3] c.y.m.s.c.TimeShiftCurator - previous period day filter : BetweenFilter(Day,2020-11-06,2020-11-07)
09:19:26.090 INFO  [maha-test-pool-3] c.y.m.s.c.TimeShiftCurator - previous period filter expressions : Vector(EqualityFilter(Student ID,214,false,false), EqualityFilter(Student ID,214,false,false), InFilter(Class ID,List(201, 198, 199),false,false), EqualityFilter(Section ID,311,false,false))
09:19:26.093 INFO  [maha-test-pool-3] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:26.093 INFO  [maha-test-pool-3] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.093 INFO  [maha-test-pool-3] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- Test successful processing of Timeshift curator with days offset
09:19:26.138 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(timeshift)
09:19:26.138 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - Curators not found : Set(test-blah-curator, test-blah_curator2)
09:19:26.139 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:26.139 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.139 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:26.144 INFO  [maha-test-pool-2] c.y.m.s.c.TimeShiftCurator - previous period day filter : BetweenFilter(Day,2020-10-26,2020-11-02)
09:19:26.144 INFO  [maha-test-pool-2] c.y.m.s.c.TimeShiftCurator - previous period filter expressions : Vector(EqualityFilter(Student ID,213,false,false), EqualityFilter(Student ID,213,false,false), InFilter(Class ID,List(200, 198, 199),false,false), InFilter(Section ID,List(200, 100),false,false))
09:19:26.146 INFO  [maha-test-pool-2] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:26.146 INFO  [maha-test-pool-2] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.146 INFO  [maha-test-pool-2] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- Test successful processing of Timeshift curator with desc order
09:19:26.155 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(timeshift)
09:19:26.156 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - Curators not found : Set(test-blah-curator, test-blah_curator2)
09:19:26.158 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:26.158 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.158 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:26.164 INFO  [maha-test-pool-6] c.y.m.s.c.TimeShiftCurator - previous period day filter : BetweenFilter(Day,2020-10-26,2020-11-02)
09:19:26.164 INFO  [maha-test-pool-6] c.y.m.s.c.TimeShiftCurator - previous period filter expressions : Vector(EqualityFilter(Student ID,213,false,false), EqualityFilter(Student ID,213,false,false), InFilter(Class ID,List(200, 198, 199),false,false), InFilter(Section ID,List(200, 100),false,false))
09:19:26.166 INFO  [maha-test-pool-6] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:26.166 INFO  [maha-test-pool-6] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.166 INFO  [maha-test-pool-6] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- Test successful processing of Timeshift curator with asc order
09:19:26.214 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(timeshift)
09:19:26.214 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - Curators not found : Set(test-blah-curator, test-blah_curator2)
09:19:26.215 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:26.215 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.215 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:26.217 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:26.217 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.217 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:26.236 INFO  [maha-test-pool-0] c.y.m.s.c.TimeShiftCurator - previous period day filter : BetweenFilter(Day,2020-10-26,2020-11-02)
09:19:26.236 INFO  [maha-test-pool-0] c.y.m.s.c.TimeShiftCurator - previous period filter expressions : Vector(EqualityFilter(Student ID,213,false,false), EqualityFilter(Student ID,213,false,false), InFilter(Class ID,List(200, 198, 199),false,false), InFilter(Section ID,List(200, 100),false,false))
09:19:26.238 INFO  [maha-test-pool-0] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:26.238 INFO  [maha-test-pool-0] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.238 INFO  [maha-test-pool-0] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- Test successful processing of Timeshift curator with desc order for unknown field
- Test successful processing of Timeshift curator with bad config
09:19:26.326 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(drilldown, timeshift)
- Test failure when processing of multiple curator when one is a singleton
09:19:26.331 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(fail)
09:19:26.332 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
09:19:26.334 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:26.334 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.334 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- successfully return result when curator process returns error
09:19:26.342 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(fail)
09:19:26.342 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
09:19:26.344 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:26.344 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.345 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- successfully return result when par request for curator result returns error
09:19:26.352 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(fail)
09:19:26.352 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
09:19:26.353 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:26.353 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.353 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- successfully return result when par request for request result returns error
09:19:26.361 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(fail)
09:19:26.361 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
- successfully return result when default curator process returns error
- Curator compare test
09:19:26.367 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(drilldown)
09:19:26.367 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
09:19:26.369 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:26.369 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.369 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:26.416 INFO  [maha-test-pool-5] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:26.416 INFO  [maha-test-pool-5] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.416 INFO  [maha-test-pool-5] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:26.418 INFO  [maha-test-pool-5] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:26.418 INFO  [maha-test-pool-5] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.418 INFO  [maha-test-pool-5] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:26.423 INFO  [maha-test-pool-5] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias: Student ID
09:19:26.424 INFO  [maha-test-pool-5] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias values : Set(213)
09:19:26.433 INFO  [maha-test-pool-5] c.y.m.s.c.DrilldownCurator - drilldown request : {"queryType":"groupby","cube":"student_performance","reportDisplayName":null,"schema":"student","requestType":"SyncRequest","forceDimensionDriven":false,"selectFields":[{"field":"Year","alias":null,"value":null},{"field":"Remarks","alias":null,"value":null},{"field":"Student ID","alias":null,"value":null},{"field":"Total Marks","alias":null,"value":null}],"filterExpressions":[{"field":"Student ID","operator":"=","value":"213"},{"field":"Day","operator":"Between","from":"2020-11-03","to":"2020-11-10"}],"sortBy":[{"field":"Total Marks","order":"DESC"}],"paginationStartIndex":0,"rowsPerPage":1000,"includeRowCount":false,"additionalParameters":{"debug":true}}
09:19:26.435 INFO  [maha-test-pool-5] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:26.435 INFO  [maha-test-pool-5] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.435 INFO  [maha-test-pool-5] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- Test successful processing of Drilldown curator with no dim candidates
09:19:26.508 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(drilldown)
09:19:26.508 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
09:19:26.510 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student-class grainRows=Some(1000)
09:19:26.510 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.510 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:26.575 INFO  [maha-test-pool-8] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student-class grainRows=Some(1000)
09:19:26.575 INFO  [maha-test-pool-8] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.575 INFO  [maha-test-pool-8] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:26.575 INFO  [maha-test-pool-8] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias: Student ID
09:19:26.575 INFO  [maha-test-pool-8] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias values : Set(213)
09:19:26.576 INFO  [maha-test-pool-8] c.y.m.s.c.DrilldownCurator - drilldown request : {"queryType":"groupby","cube":"student_performance","reportDisplayName":null,"schema":"student","requestType":"SyncRequest","forceDimensionDriven":false,"selectFields":[{"field":"Remarks","alias":null,"value":null},{"field":"Student ID","alias":null,"value":null},{"field":"Total Marks","alias":null,"value":null}],"filterExpressions":[{"field":"Student ID","operator":"=","value":"213"},{"field":"Class ID","operator":"=","value":"200"},{"field":"Day","operator":"Between","from":"2020-11-03","to":"2020-11-10"}],"sortBy":[{"field":"Total Marks","order":"DESC"}],"paginationStartIndex":0,"rowsPerPage":1000,"includeRowCount":false,"additionalParameters":{"debug":true}}
09:19:26.577 INFO  [maha-test-pool-8] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:26.577 INFO  [maha-test-pool-8] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.577 INFO  [maha-test-pool-8] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- Test successful processing of Drilldown curator with dim candidates
09:19:26.614 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(drilldown)
09:19:26.614 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
09:19:26.615 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:26.615 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.615 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:26.651 INFO  [maha-test-pool-3] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:26.651 INFO  [maha-test-pool-3] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.651 INFO  [maha-test-pool-3] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:26.652 INFO  [maha-test-pool-3] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias: Section ID
09:19:26.652 INFO  [maha-test-pool-3] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias values : Set(311)
09:19:26.654 INFO  [maha-test-pool-3] c.y.m.s.c.DrilldownCurator - drilldown request : {"queryType":"groupby","cube":"student_performance","reportDisplayName":null,"schema":"student","requestType":"SyncRequest","forceDimensionDriven":false,"selectFields":[{"field":"Remarks","alias":null,"value":null},{"field":"Section ID","alias":null,"value":null},{"field":"Total Marks","alias":null,"value":null}],"filterExpressions":[{"field":"Student ID","operator":"=","value":"214"},{"field":"Section ID","operator":"In","values":["311"]},{"field":"Day","operator":"Between","from":"2020-11-03","to":"2020-11-10"}],"sortBy":[{"field":"Total Marks","order":"DESC"}],"paginationStartIndex":0,"rowsPerPage":1000,"includeRowCount":false,"additionalParameters":{"debug":true}}
09:19:26.655 INFO  [maha-test-pool-3] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:26.656 INFO  [maha-test-pool-3] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.656 INFO  [maha-test-pool-3] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- Test successful processing of Drilldown curator with primary key and no dims
09:19:26.703 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(drilldown)
09:19:26.704 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
09:19:26.705 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:26.705 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.705 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:26.734 INFO  [maha-test-pool-6] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:26.734 INFO  [maha-test-pool-6] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.734 INFO  [maha-test-pool-6] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:26.736 INFO  [maha-test-pool-6] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias: Section ID
09:19:26.736 INFO  [maha-test-pool-6] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias values : Set(311)
09:19:26.736 INFO  [maha-test-pool-6] c.y.m.s.c.DrilldownCurator - drilldown request : {"queryType":"groupby","cube":"student_performance","reportDisplayName":null,"schema":"student","requestType":"SyncRequest","forceDimensionDriven":false,"selectFields":[{"field":"Remarks","alias":null,"value":null},{"field":"Section ID","alias":null,"value":null},{"field":"Total Marks","alias":null,"value":null}],"filterExpressions":[{"field":"Student ID","operator":"=","value":"214"},{"field":"Remarks","operator":"In","values":["some comment 1","some comment 2"]},{"field":"Section ID","operator":"In","values":["311"]},{"field":"Day","operator":"Between","from":"2020-11-03","to":"2020-11-10"}],"sortBy":[{"field":"Total Marks","order":"DESC"}],"paginationStartIndex":0,"rowsPerPage":1000,"includeRowCount":false,"additionalParameters":{"debug":true}}
09:19:26.738 INFO  [maha-test-pool-6] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:26.738 INFO  [maha-test-pool-6] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.738 INFO  [maha-test-pool-6] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:26.740 INFO  [maha-test-pool-6] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:26.740 INFO  [maha-test-pool-6] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.740 INFO  [maha-test-pool-6] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- Test successful processing of Drilldown curator with filters
09:19:26.814 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(drilldown)
09:19:26.814 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
09:19:26.817 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student-class grainRows=Some(1000)
09:19:26.817 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.817 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:26.826 INFO  [maha-test-pool-8] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student-class grainRows=Some(1000)
09:19:26.826 INFO  [maha-test-pool-8] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.826 INFO  [maha-test-pool-8] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:26.826 INFO  [maha-test-pool-8] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias: Student ID
09:19:26.827 INFO  [maha-test-pool-8] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias values : Set(213)
09:19:26.827 INFO  [maha-test-pool-8] c.y.m.s.c.DrilldownCurator - drilldown request : {"queryType":"groupby","cube":"student_performance","reportDisplayName":null,"schema":"student","requestType":"SyncRequest","forceDimensionDriven":false,"selectFields":[{"field":"Remarks","alias":null,"value":null},{"field":"Student ID","alias":null,"value":null},{"field":"Total Marks","alias":null,"value":null}],"filterExpressions":[{"field":"Student ID","operator":"In","values":["213"]},{"field":"Day","operator":"Between","from":"2020-11-03","to":"2020-11-10"}],"sortBy":[{"field":"Total Marks","order":"DESC"}],"paginationStartIndex":0,"rowsPerPage":1000,"includeRowCount":false,"additionalParameters":{"debug":true}}
09:19:26.828 INFO  [maha-test-pool-8] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:26.828 INFO  [maha-test-pool-8] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.828 INFO  [maha-test-pool-8] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- Test successful processing of Drilldown curator with dim candidates without enforcing filters
09:19:26.873 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(drilldown)
09:19:26.874 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
09:19:26.876 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student-class grainRows=Some(1000)
09:19:26.876 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.876 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:26.880 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student-class grainRows=Some(1000)
09:19:26.880 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:26.880 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:26.884 ERROR [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultMahaService - Failed to compile the query pipeline requirement failed: Failed to find best candidate, forceEngine=None, engine disqualifyingSet=Set(Druid, Hive, Presto), candidates=Set((student_grade_sheet,Druid))
java.lang.IllegalArgumentException: requirement failed: Failed to find best candidate, forceEngine=None, engine disqualifyingSet=Set(Druid, Hive, Presto), candidates=Set((student_grade_sheet,Druid))
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory$.findBestFactCandidate(QueryPipeline.scala:544)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.findBestFactCandidate(QueryPipeline.scala:858)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.$anonfun$builder$25(QueryPipeline.scala:1078)
	at scala.Option.map(Option.scala:230)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.findBestCandidates$1(QueryPipeline.scala:1078)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.$anonfun$builder$52(QueryPipeline.scala:1206)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.builder(QueryPipeline.scala:1195)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.builder(QueryPipeline.scala:881)
- successful erroring of Drilldown curator when join key not present in request
- Test failed processing of Drilldown curator on non-existent DrillDown Dim
- Test successful processing of TotalMetrics Curator
- Test successful processing of TotalMetrics Curator with bad forceRevision
09:19:27.068 ERROR [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultMahaService - Failed to compile the query pipeline requirement failed: subquery dim primary key not found in primary dimension, dim=student, subquery dim=class
java.lang.IllegalArgumentException: requirement failed: subquery dim primary key not found in primary dimension, dim=student, subquery dim=class
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.core.query.oracle.OracleQueryGenerator.$anonfun$generateDimensionSql$4(OracleQueryGenerator.scala:111)
	at scala.collection.immutable.Set$Set1.foreach(Set.scala:97)
	at com.yahoo.maha.core.query.oracle.OracleQueryGenerator.generateWhereClause$1(OracleQueryGenerator.scala:107)
	at com.yahoo.maha.core.query.oracle.OracleQueryGenerator.generateRenderedDimension$1(OracleQueryGenerator.scala:240)
	at com.yahoo.maha.core.query.oracle.OracleQueryGenerator.generateDimensionSql(OracleQueryGenerator.scala:503)
	at com.yahoo.maha.core.query.oracle.OracleQueryGenerator.generateDimensionSql(OracleQueryGenerator.scala:42)
	at com.yahoo.maha.core.query.oracle.OracleQueryGenerator.generateDimJoin$1(OracleQueryGenerator.scala:1044)
	at com.yahoo.maha.core.query.oracle.OracleQueryGenerator.generateDimFactQuery(OracleQueryGenerator.scala:1251)
	at com.yahoo.maha.core.query.oracle.OracleQueryGenerator.generate(OracleQueryGenerator.scala:30)
09:19:27.095 WARN  [maha-test-pool-4] c.y.m.s.u.MahaRequestLogHelper - Something went wrong in extracting cube revision for logging purpose java.util.NoSuchElementException: None.get
09:19:27.097 WARN  [maha-test-pool-6] c.y.m.s.u.MahaRequestLogHelper - Something went wrong in extracting cube revision for logging purpose java.util.NoSuchElementException: None.get
09:19:27.099 ERROR [maha-test-pool-4] c.y.m.e.o.OracleQueryExecutor - Failed query : SELECT /*+ FIRST_ROWS */ *
      FROM (
          SELECT "Student ID", "TOTALROWS", ROWNUM AS ROW_NUMBER
              FROM(SELECT s0.id "Student ID", Count(*) OVER() TOTALROWS
                  FROM 
                (SELECT  id
            FROM student
            WHERE (id = 213)
             ) s0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 1
09:19:27.099 ERROR [maha-test-pool-6] c.y.m.e.o.OracleQueryExecutor - Failed query : SELECT /*+ FIRST_ROWS */ *
      FROM (
          SELECT "Student ID", "TOTALROWS", ROWNUM AS ROW_NUMBER
              FROM(SELECT s0.id "Student ID", Count(*) OVER() TOTALROWS
                  FROM 
                (SELECT  id
            FROM student
            WHERE (id = 213)
             ) s0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 1
09:19:27.101 ERROR [maha-test-pool-4] c.y.m.s.DefaultMahaService - Failed to execute the query pipeline
java.lang.RuntimeException: query execution failed : Syntax error in SQL statement "SELECT                   *
      FROM (
          SELECT ""Student ID"", ""TOTALROWS"", ROWNUM AS ROW_NUMBER
              FROM(SELECT S0.ID ""Student ID"", COUNT(*) OVER([*]) TOTALROWS
                  FROM 
                (SELECT  ID
            FROM STUDENT
            WHERE (ID = 213)
             ) S0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 1 "; expected ",, FROM, WHERE, GROUP, HAVING, UNION, MINUS, EXCEPT, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, FOR, )"; SQL statement:
SELECT /*+ FIRST_ROWS */ *
      FROM (
          SELECT "Student ID", "TOTALROWS", ROWNUM AS ROW_NUMBER
              FROM(SELECT s0.id "Student ID", Count(*) OVER() TOTALROWS
                  FROM 
                (SELECT  id
            FROM student
            WHERE (id = 213)
             ) s0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 1 [42001-191]
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:20)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.$anonfun$execute$5(QueryPipeline.scala:167)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.execute(QueryPipeline.scala:166)
	at com.yahoo.maha.service.DefaultMahaService.com$yahoo$maha$service$DefaultMahaService$$processQueryPipeline(MahaService.scala:346)
Caused by: org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "SELECT                   *
      FROM (
          SELECT ""Student ID"", ""TOTALROWS"", ROWNUM AS ROW_NUMBER
              FROM(SELECT S0.ID ""Student ID"", COUNT(*) OVER([*]) TOTALROWS
                  FROM 
                (SELECT  ID
            FROM STUDENT
            WHERE (ID = 213)
             ) S0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 1 "; expected ",, FROM, WHERE, GROUP, HAVING, UNION, MINUS, EXCEPT, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, FOR, )"; SQL statement:
SELECT /*+ FIRST_ROWS */ *
      FROM (
          SELECT "Student ID", "TOTALROWS", ROWNUM AS ROW_NUMBER
              FROM(SELECT s0.id "Student ID", Count(*) OVER() TOTALROWS
                  FROM 
                (SELECT  id
            FROM student
            WHERE (id = 213)
             ) s0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 1 [42001-191]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)
	at org.h2.message.DbException.getSyntaxError(DbException.java:205)
	at org.h2.command.Parser.getSyntaxError(Parser.java:535)
	at org.h2.command.Parser.read(Parser.java:3170)
	at org.h2.command.Parser.readTableFilter(Parser.java:1170)
	at org.h2.command.Parser.parseSelectSimpleFromPart(Parser.java:1884)
	at org.h2.command.Parser.parseSelectSimple(Parser.java:2032)
	at org.h2.command.Parser.parseSelectSub(Parser.java:1878)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:1699)
	at org.h2.command.Parser.readTableFilter(Parser.java:1169)
09:19:27.101 ERROR [maha-test-pool-6] c.y.m.s.DefaultMahaService - Failed to execute the query pipeline
java.lang.RuntimeException: query execution failed : Syntax error in SQL statement "SELECT                   *
      FROM (
          SELECT ""Student ID"", ""TOTALROWS"", ROWNUM AS ROW_NUMBER
              FROM(SELECT S0.ID ""Student ID"", COUNT(*) OVER([*]) TOTALROWS
                  FROM 
                (SELECT  ID
            FROM STUDENT
            WHERE (ID = 213)
             ) S0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 1 "; expected ",, FROM, WHERE, GROUP, HAVING, UNION, MINUS, EXCEPT, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, FOR, )"; SQL statement:
SELECT /*+ FIRST_ROWS */ *
      FROM (
          SELECT "Student ID", "TOTALROWS", ROWNUM AS ROW_NUMBER
              FROM(SELECT s0.id "Student ID", Count(*) OVER() TOTALROWS
                  FROM 
                (SELECT  id
            FROM student
            WHERE (id = 213)
             ) s0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 1 [42001-191]
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:20)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.$anonfun$execute$5(QueryPipeline.scala:167)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.execute(QueryPipeline.scala:166)
	at com.yahoo.maha.service.DefaultMahaService.com$yahoo$maha$service$DefaultMahaService$$processQueryPipeline(MahaService.scala:346)
Caused by: org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "SELECT                   *
      FROM (
          SELECT ""Student ID"", ""TOTALROWS"", ROWNUM AS ROW_NUMBER
              FROM(SELECT S0.ID ""Student ID"", COUNT(*) OVER([*]) TOTALROWS
                  FROM 
                (SELECT  ID
            FROM STUDENT
            WHERE (ID = 213)
             ) S0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 1 "; expected ",, FROM, WHERE, GROUP, HAVING, UNION, MINUS, EXCEPT, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, FOR, )"; SQL statement:
SELECT /*+ FIRST_ROWS */ *
      FROM (
          SELECT "Student ID", "TOTALROWS", ROWNUM AS ROW_NUMBER
              FROM(SELECT s0.id "Student ID", Count(*) OVER() TOTALROWS
                  FROM 
                (SELECT  id
            FROM student
            WHERE (id = 213)
             ) s0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 1 [42001-191]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)
	at org.h2.message.DbException.getSyntaxError(DbException.java:205)
	at org.h2.command.Parser.getSyntaxError(Parser.java:535)
	at org.h2.command.Parser.read(Parser.java:3170)
	at org.h2.command.Parser.readTableFilter(Parser.java:1170)
	at org.h2.command.Parser.parseSelectSimpleFromPart(Parser.java:1884)
	at org.h2.command.Parser.parseSelectSimple(Parser.java:2032)
	at org.h2.command.Parser.parseSelectSub(Parser.java:1878)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:1699)
	at org.h2.command.Parser.readTableFilter(Parser.java:1169)
- Test successful processing of Default curator and RowCountCurator MultiEngine (druid+oracle) case
09:19:27.897 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(drilldown)
09:19:27.897 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
09:19:27.899 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:27.899 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:27.899 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:27.900 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:27.900 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:27.900 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:27.963 INFO  [maha-test-pool-0] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:27.963 INFO  [maha-test-pool-0] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:27.963 INFO  [maha-test-pool-0] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:27.966 INFO  [maha-test-pool-0] c.y.m.s.c.DrilldownCurator - Removed fact fields: Vector(Field(Performance Factor,None,None))
09:19:27.966 INFO  [maha-test-pool-0] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias: Student ID
09:19:27.966 INFO  [maha-test-pool-0] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias values : Set(213)
09:19:27.966 INFO  [maha-test-pool-0] c.y.m.s.c.DrilldownCurator - drilldown request : {"queryType":"groupby","cube":"student_performance2","reportDisplayName":null,"schema":"student","requestType":"SyncRequest","forceDimensionDriven":false,"selectFields":[{"field":"Class ID","alias":null,"value":null},{"field":"Student ID","alias":null,"value":null},{"field":"Total Marks","alias":null,"value":null}],"filterExpressions":[{"field":"Student ID","operator":"=","value":"213"},{"field":"Class ID","operator":"=","value":"200"},{"field":"Day","operator":"Between","from":"2020-11-03","to":"2020-11-10"}],"sortBy":[{"field":"Total Marks","order":"DESC"}],"paginationStartIndex":0,"rowsPerPage":1000,"includeRowCount":false,"additionalParameters":{"debug":true}}
09:19:27.968 INFO  [maha-test-pool-0] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:27.968 INFO  [maha-test-pool-0] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-section grainRows=Some(1000)
09:19:27.969 INFO  [maha-test-pool-0] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
- successful remove of DrillDown curator cross-cube fields when second cube lacks facts from initial request
09:19:27.996 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(drilldown)
09:19:27.996 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
09:19:27.998 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:27.998 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:27.998 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:28.052 INFO  [maha-test-pool-7] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:28.052 INFO  [maha-test-pool-7] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:28.052 INFO  [maha-test-pool-7] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:28.053 INFO  [maha-test-pool-7] c.y.m.s.c.DrilldownCurator - Failed to select valid bucket for fact java.lang.IllegalArgumentException: requirement failed: Default revision not found for cube student_performance222 in the registry
09:19:28.055 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.o.JsonOutputFormat - GeneralError{stage='processDrillDownCurator', message='requirement failed: Default revision not found for cube student_performance222 in the registry', throwableOption=Some(com.yahoo.maha.service.error.MahaServiceBadRequestException: MahaServiceBadRequestException: requirement failed: Default revision not found for cube student_performance222 in the registry)}
09:19:28.055 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.o.JsonOutputFormat - GeneralError{stage='processDrillDownCurator', message='requirement failed: Default revision not found for cube student_performance222 in the registry', throwableOption=Some(com.yahoo.maha.service.error.MahaServiceBadRequestException: MahaServiceBadRequestException: requirement failed: Default revision not found for cube student_performance222 in the registry)}
- Force fail DrillDown using wrong drill down cube.
- DrillDown Curator should discard non selected orderBy fields
09:19:28.138 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - curators from request : TreeSet(drilldown)
09:19:28.138 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.DefaultRequestCoordinator - injecting default curator
09:19:28.139 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:28.139 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:28.139 INFO  [ScalaTest-main-running-RequestCoordinatorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:28.188 INFO  [maha-test-pool-8] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:28.188 INFO  [maha-test-pool-8] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:28.188 INFO  [maha-test-pool-8] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:28.189 INFO  [maha-test-pool-8] c.y.m.s.c.DrilldownCurator - Removed fact fields: Vector(Field(Performance Factor,None,None))
09:19:28.189 INFO  [maha-test-pool-8] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias: Student ID
09:19:28.189 INFO  [maha-test-pool-8] c.y.m.s.c.DrilldownCurator - drilldown most granular field alias values : Set()
09:19:28.189 INFO  [maha-test-pool-8] c.y.m.s.c.DrilldownCurator - drilldown request : {"queryType":"groupby","cube":"student_performance2","reportDisplayName":null,"schema":"student","requestType":"SyncRequest","forceDimensionDriven":false,"selectFields":[{"field":"Class ID","alias":null,"value":null},{"field":"Student ID","alias":null,"value":null},{"field":"Total Marks","alias":null,"value":null}],"filterExpressions":[{"field":"Day","operator":"Between","from":"2020-11-03","to":"2020-11-10"}],"sortBy":[{"field":"Total Marks","order":"DESC"}],"paginationStartIndex":0,"rowsPerPage":1000,"includeRowCount":false,"additionalParameters":{"debug":true}}
- DrillDown Curator should fail with error on empty filters
- DrillDown Curator should work correctly with level 3 dimension with the id injections(Here Section ID is being injected in the drilldown request)
- DrillDown Curator should work correctly with multiple drilldown requests)
09:19:28.367 INFO  [maha-test-pool-7] c.y.m.s.c.DrilldownCurator - Failed to select valid bucket for fact java.lang.IllegalArgumentException: requirement failed: Default revision not found for cube student_performance222 in the registry
- DrillDown Curator should work correctly with multiple drilldown requests with some failed)
- DrillDown Curator should fail with no most granular key
- DrillDown Curator should work correctly with level 3 dimension with the id injections with NO Data from Default Curator(Here Section ID is being injected in the drilldown request)
- DrillDown Curator should override the paginationStartIndex given in the original request
- Test RowCountCurator for Druid fact-driven query
MahaServiceTest:
- Test MahaService Init and Validation test
- Test MahaService Validation: Expects Success in registry Validation should fail to load factory class
- Invalid MahaServiceEngine
Map(student_performance.external.rev0.percent -> DynamicPropertyInfo(student_performance.external.rev0.percent,50,Map(bucketingConfigMap -> java.lang.Object@e881e46)), student_performance.external.rev1.percent -> DynamicPropertyInfo(student_performance.external.rev1.percent,50,Map(bucketingConfigMap -> java.lang.Object@e881e46)))
09:19:28.683 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicConfigurations - Adding dynamic property: student_performance.external.rev0.percent defaultValue: 50
09:19:28.684 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicConfigurations - Adding dynamic property: student_performance.external.rev1.percent defaultValue: 50
- Find dynamic objects successfully in a json containing dynamic property values
09:19:28.748 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicConfigurations - Adding dynamic property: student_performance.external.rev0.percent defaultValue: 50
09:19:28.748 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicConfigurations - Adding dynamic property: student_performance.external.rev1.percent defaultValue: 50
09:19:28.779 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicConfigurations - Adding callback for dynamic property: com.netflix.archaius.DefaultPropertyFactory$PropertyImpl@678586f0
09:19:28.780 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicConfigurations - Adding callback for dynamic property: com.netflix.archaius.DefaultPropertyFactory$PropertyImpl@786ff0ea
09:19:28.783 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicWrapper$ - Updating: bucketingConfigMap - Map(commonbucket -> com.yahoo.maha.core.bucketing.DefaultBucketingConfig@6335f04a)
09:19:28.785 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicConfigurations - Adding dynamic property: student_performance.external.rev0.percent defaultValue: 50
09:19:28.786 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicConfigurations - Adding dynamic property: student_performance.external.rev1.percent defaultValue: 50
09:19:28.787 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicWrapper$ - Updating: bucketingConfigMap - Map(commonbucket -> com.yahoo.maha.core.bucketing.DefaultBucketingConfig@6335f04a)
09:19:28.789 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicConfigurations - Adding dynamic property: student_performance.external.rev0.percent defaultValue: 50
09:19:28.789 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicConfigurations - Adding dynamic property: student_performance.external.rev1.percent defaultValue: 50
09:19:28.791 INFO  [ScalaTest-main-running-MahaServiceTest] c.y.m.s.c.d.DynamicWrapper$ - Replaced BucketSelector: com.yahoo.maha.core.bucketing.DefaultBucketingConfig@45297e7
- Successfully swap dynamic objects in the registry on dynamic property change
DynamicConfigurationUtilsTest:
- getDynamicFields should return all dynamic fields in the json
- extractDynamicFields should return all dynamic fields in the json
DruidQueryOptimizerFactoryTest:
- Test instantiation of SyncDruidQueryOptimizer from factory
- Test instantiation of AsyncDruidQueryOptimizer from factory
ParallelServiceExecutoryFactoryTest:
- ParallelServiceExecutoryFactory Test
DefaultResultSetTransformersFactoryTest:
- successfully build factory from json
DataSourceConnectionPoolFactoryTest:
- Test Creation of HikariDataSource
DefaultDimCostEstimatorFactoryTest:
- successfully build factory from json
MahaSyncRequestProcessorTest:
- Test MahaRequestProcessor instantiation
- Test MahaRequestProcessor RequestModel Validation Failure
09:19:31.745 ERROR [maha-test-pool-2] c.y.m.p.f.ParFunction - Exception in callable
java.lang.IllegalArgumentException: failed in success function
	at com.yahoo.maha.service.MahaSyncRequestProcessorTest.$anonfun$new$8(MahaSyncRequestProcessorTest.scala:142)
	at com.yahoo.maha.service.MahaSyncRequestProcessorTest.$anonfun$new$8$adapted(MahaSyncRequestProcessorTest.scala:141)
	at com.yahoo.maha.service.MahaSyncRequestProcessor.$anonfun$process$6(MahaSyncRequestProcessor.scala:77)
	at com.yahoo.maha.service.MahaSyncRequestProcessor.$anonfun$process$6$adapted(MahaSyncRequestProcessor.scala:77)
	at scala.Option.foreach(Option.scala:407)
	at com.yahoo.maha.service.MahaSyncRequestProcessor.$anonfun$process$5(MahaSyncRequestProcessor.scala:77)
	at com.yahoo.maha.service.MahaSyncRequestProcessor.$anonfun$process$5$adapted(MahaSyncRequestProcessor.scala:76)
	at com.yahoo.maha.parrequest2.future.ParFunction.apply(ParFunction.java:104)
	at com.yahoo.maha.parrequest2.EitherUtils.fold(EitherUtils.java:41)
	at com.yahoo.maha.parrequest2.future.FoldableFuture.run(FoldableFuture.java:57)
- Test MahaRequestProcessor RequestResult Validation Failure
09:19:32.658 ERROR [maha-test-pool-0] c.y.m.p.f.ParFunction - Exception in callable
com.yahoo.maha.service.error.MahaServiceBadRequestException: MahaServiceBadRequestException: requirement failed: ERROR_CODE:10005 Failed to find primary key alias for Student Blah
	at com.yahoo.maha.service.curators.DefaultCurator.process(Curator.scala:146)
	at com.yahoo.maha.service.DefaultRequestCoordinator.$anonfun$execute$9(RequestCoordinator.scala:168)
	at scala.collection.TraversableOnce.$anonfun$foldLeft$1(TraversableOnce.scala:162)
	at scala.collection.TraversableOnce.$anonfun$foldLeft$1$adapted(TraversableOnce.scala:162)
	at scala.collection.immutable.RedBlackTree$._foreachKey(RedBlackTree.scala:111)
	at scala.collection.immutable.RedBlackTree$.foreachKey(RedBlackTree.scala:107)
	at scala.collection.immutable.TreeSet.foreach(TreeSet.scala:170)
	at scala.collection.TraversableOnce.foldLeft(TraversableOnce.scala:162)
	at scala.collection.TraversableOnce.foldLeft$(TraversableOnce.scala:160)
java.util.concurrent.ExecutionException: com.yahoo.maha.service.error.MahaServiceBadRequestException: MahaServiceBadRequestException: requirement failed: ERROR_CODE:10005 Failed to find primary key alias for Student Blah
	at scala.collection.immutable.TreeSet.foldLeft(TreeSet.scala:53)
09:19:32.658 INFO  [maha-test-pool-0] c.y.m.s.MahaSyncRequestProcessorTest - exception from upstream
	at com.google.common.util.concurrent.AbstractFuture.getDoneValue(AbstractFuture.java:564)
	at com.google.common.util.concurrent.AbstractFuture.get(AbstractFuture.java:525)
	at com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly(Uninterruptibles.java:237)
	at com.yahoo.maha.parrequest2.future.FoldableFuture.run(FoldableFuture.java:56)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.yahoo.maha.service.error.MahaServiceBadRequestException: MahaServiceBadRequestException: requirement failed: ERROR_CODE:10005 Failed to find primary key alias for Student Blah
	at com.yahoo.maha.service.curators.DefaultCurator.process(Curator.scala:146)
	at com.yahoo.maha.service.DefaultRequestCoordinator.$anonfun$execute$9(RequestCoordinator.scala:168)
	at scala.collection.TraversableOnce.$anonfun$foldLeft$1(TraversableOnce.scala:162)
	at scala.collection.TraversableOnce.$anonfun$foldLeft$1$adapted(TraversableOnce.scala:162)
	at scala.collection.immutable.RedBlackTree$._foreachKey(RedBlackTree.scala:111)
	at scala.collection.immutable.RedBlackTree$.foreachKey(RedBlackTree.scala:107)
	at scala.collection.immutable.TreeSet.foreach(TreeSet.scala:170)
	at scala.collection.TraversableOnce.foldLeft(TraversableOnce.scala:162)
	at scala.collection.TraversableOnce.foldLeft$(TraversableOnce.scala:160)
	at scala.collection.immutable.TreeSet.foldLeft(TreeSet.scala:53)
	at com.yahoo.maha.service.DefaultRequestCoordinator.execute(RequestCoordinator.scala:165)
	at com.yahoo.maha.service.MahaSyncRequestProcessor.process(MahaSyncRequestProcessor.scala:65)
	at com.yahoo.maha.service.MahaSyncRequestProcessorTest.$anonfun$new$10(MahaSyncRequestProcessorTest.scala:196)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.funsuite.AnyFunSuiteLike$$anon$1.apply(AnyFunSuiteLike.scala:189)
	at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
	at org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)
	at org.scalatest.funsuite.AnyFunSuite.withFixture(AnyFunSuite.scala:1562)
	at org.scalatest.funsuite.AnyFunSuiteLike.invokeWithFixture$1(AnyFunSuiteLike.scala:187)
	at org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$runTest$1(AnyFunSuiteLike.scala:199)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTest(AnyFunSuiteLike.scala:199)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTest$(AnyFunSuiteLike.scala:181)
	at org.scalatest.funsuite.AnyFunSuite.runTest(AnyFunSuite.scala:1562)
	at org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$runTests$1(AnyFunSuiteLike.scala:232)
	at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:413)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:475)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTests(AnyFunSuiteLike.scala:232)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTests$(AnyFunSuiteLike.scala:231)
	at org.scalatest.funsuite.AnyFunSuite.runTests(AnyFunSuite.scala:1562)
	at org.scalatest.Suite.run(Suite.scala:1112)
	at org.scalatest.Suite.run$(Suite.scala:1094)
	at org.scalatest.funsuite.AnyFunSuite.org$scalatest$funsuite$AnyFunSuiteLike$$super$run(AnyFunSuite.scala:1562)
	at org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$run$1(AnyFunSuiteLike.scala:236)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:535)
	at org.scalatest.funsuite.AnyFunSuiteLike.run(AnyFunSuiteLike.scala:236)
	at org.scalatest.funsuite.AnyFunSuiteLike.run$(AnyFunSuiteLike.scala:235)
	at com.yahoo.maha.service.MahaSyncRequestProcessorTest.org$scalatest$BeforeAndAfterAll$$super$run(MahaSyncRequestProcessorTest.scala:12)
	at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)
	at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:210)
	at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:208)
	at com.yahoo.maha.service.MahaSyncRequestProcessorTest.run(MahaSyncRequestProcessorTest.scala:12)
	at org.scalatest.Suite.callExecuteOnSuite$1(Suite.scala:1175)
	at org.scalatest.Suite.$anonfun$runNestedSuites$1(Suite.scala:1222)
	at scala.collection.IndexedSeqOptimized.foreach(IndexedSeqOptimized.scala:36)
	at scala.collection.IndexedSeqOptimized.foreach$(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:198)
	at org.scalatest.Suite.runNestedSuites(Suite.scala:1220)
	at org.scalatest.Suite.runNestedSuites$(Suite.scala:1154)
	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:30)
	at org.scalatest.Suite.run(Suite.scala:1109)
	at org.scalatest.Suite.run$(Suite.scala:1094)
	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:30)
	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:45)
	at org.scalatest.tools.Runner$.$anonfun$doRunRunRunDaDoRunRun$13(Runner.scala:1320)
	at org.scalatest.tools.Runner$.$anonfun$doRunRunRunDaDoRunRun$13$adapted(Runner.scala:1314)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:1314)
	at org.scalatest.tools.Runner$.$anonfun$runOptionallyWithPassFailReporter$24(Runner.scala:993)
	at org.scalatest.tools.Runner$.$anonfun$runOptionallyWithPassFailReporter$24$adapted(Runner.scala:971)
	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:1480)
	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:971)
	at org.scalatest.tools.Runner$.main(Runner.scala:775)
	at org.scalatest.tools.Runner.main(Runner.scala)
- Test MahaRequestProcessor request model failure
DefaultFactCostEstimatorFactoryTest:
- successfully build factory from json
DefaultBucketingConfigFactoryTest:
- successfully build factory from json
- successfully build query gen bucketing config from json
QueryGeneratorFactoryTest:
- successfully construct druid query generator from json
- successfully construct oracle query generator from json
- successfully construct Hive query generator from json
- successfully construct Hive query generator V0 from json
- successfully construct Hive query generator V2 from json
- successfully construct Presto query generator from json
- successfully construct Presto query generator V1 from json
FactoryTest:
- Test PassThroughPasswordProviderFactory 
- Test PassThroughUTCTimeProviderFactory 
- Test NoopExecutionLifecycleListenerFactory 
- Create a BaseUTCTimeProviderFactory
- Test NoopUserTimeZoneProviderFactory 
09:19:33.649 WARN  [ScalaTest-main-running-DrilldownCuratorTest] c.y.m.s.u.MahaRequestLogHelper - logFailed called more than once!
DrilldownCuratorTest:
- Test failure of DrilldownCurator with no default curator
- Test failure of DrilldownCurator with default curator failed
- Test failure of DrilldownCurator with no default curator request result
- Test failure of DrilldownCurator with bad config
- Test failure of DrilldownCurator with failing default curator request result
09:19:33.670 ERROR [maha-test-pool-7] c.y.m.s.c.DrilldownCurator - Row has null Remarks (position 4)!  Found row [213,200,100,99,null]
09:19:33.670 ERROR [maha-test-pool-7] c.y.m.s.c.DrilldownCurator - Row has null Remarks (position 4)!  Found row [sid,cid,sid,999,null]
09:19:33.699 WARN  [maha-test-pool-9] c.y.m.s.u.MahaRequestLogHelper - logSuccess called more than once!
- Should succeed even when DrillDown metric isn't present
BaseJsonModelsTest:
- successfully parse json JsonBucketingConfig
- successfully parse json JsonUTCTimeProviderConfig
- successfully parse json JsonQueryGeneratorConfig
- successfully parse json JsonQueryExecutorConfig
- Validate JSONHelpers
09:19:33.730 ERROR [maha-test-pool-0] c.y.m.e.o.OracleQueryExecutor - Failed query : SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT sgs0.student_id "Student ID", sgs0.class_id "Class ID", sgs0.section_id "Section ID", sgs0."total_marks" "Total Marks"
      FROM (SELECT 
                   section_id, student_id, class_id, SUM(total_marks) AS "total_marks"
            FROM student_grade_sheet
            WHERE (student_id = 213) AND (date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY section_id, student_id, class_id
            
           ) sgs0

) 
   ) WHERE ROWNUM <= 200) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 200
09:19:33.730 ERROR [maha-test-pool-0] c.y.m.s.DefaultMahaService - Failed to execute the query pipeline
java.lang.RuntimeException: query execution failed : Table "STUDENT_GRADE_SHEET" not found; SQL statement:
SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT sgs0.student_id "Student ID", sgs0.class_id "Class ID", sgs0.section_id "Section ID", sgs0."total_marks" "Total Marks"
      FROM (SELECT 
                   section_id, student_id, class_id, SUM(total_marks) AS "total_marks"
            FROM student_grade_sheet
            WHERE (student_id = 213) AND (date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY section_id, student_id, class_id
            
           ) sgs0

) 
   ) WHERE ROWNUM <= 200) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 200 [42102-191]
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:20)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.$anonfun$execute$5(QueryPipeline.scala:167)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.execute(QueryPipeline.scala:166)
	at com.yahoo.maha.service.DefaultMahaService.com$yahoo$maha$service$DefaultMahaService$$processQueryPipeline(MahaService.scala:346)
Caused by: org.h2.jdbc.JdbcSQLException: Table "STUDENT_GRADE_SHEET" not found; SQL statement:
SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT sgs0.student_id "Student ID", sgs0.class_id "Class ID", sgs0.section_id "Section ID", sgs0."total_marks" "Total Marks"
      FROM (SELECT 
                   section_id, student_id, class_id, SUM(total_marks) AS "total_marks"
            FROM student_grade_sheet
            WHERE (student_id = 213) AND (date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY section_id, student_id, class_id
            
           ) sgs0

) 
   ) WHERE ROWNUM <= 200) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 200 [42102-191]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.command.Parser.readTableOrView(Parser.java:5349)
	at org.h2.command.Parser.readTableFilter(Parser.java:1245)
	at org.h2.command.Parser.parseSelectSimpleFromPart(Parser.java:1884)
	at org.h2.command.Parser.parseSelectSimple(Parser.java:2032)
	at org.h2.command.Parser.parseSelectSub(Parser.java:1878)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:1699)
	at org.h2.command.Parser.readTableFilter(Parser.java:1169)
09:19:33.735 ERROR [maha-test-pool-1] c.y.m.e.o.OracleQueryExecutor - Failed query : SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT sgs0.student_id "Student ID", sgs0.class_id "Class ID", sgs0.section_id "Section ID", sgs0."total_marks" "Total Marks"
      FROM (SELECT 
                   section_id, student_id, class_id, SUM(total_marks) AS "total_marks"
            FROM student_grade_sheet
            WHERE (student_id = 213) AND (date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY section_id, student_id, class_id
            
           ) sgs0

) 
   ) WHERE ROWNUM <= 200) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 200
09:19:33.735 ERROR [maha-test-pool-1] c.y.m.s.DefaultMahaService - Failed to execute the query pipeline
java.lang.RuntimeException: query execution failed : Table "STUDENT_GRADE_SHEET" not found; SQL statement:
SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT sgs0.student_id "Student ID", sgs0.class_id "Class ID", sgs0.section_id "Section ID", sgs0."total_marks" "Total Marks"
      FROM (SELECT 
                   section_id, student_id, class_id, SUM(total_marks) AS "total_marks"
            FROM student_grade_sheet
            WHERE (student_id = 213) AND (date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY section_id, student_id, class_id
            
           ) sgs0

) 
   ) WHERE ROWNUM <= 200) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 200 [42102-191]
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:20)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.$anonfun$execute$5(QueryPipeline.scala:167)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.execute(QueryPipeline.scala:166)
	at com.yahoo.maha.service.DefaultMahaService.com$yahoo$maha$service$DefaultMahaService$$processQueryPipeline(MahaService.scala:346)
Caused by: org.h2.jdbc.JdbcSQLException: Table "STUDENT_GRADE_SHEET" not found; SQL statement:
SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT sgs0.student_id "Student ID", sgs0.class_id "Class ID", sgs0.section_id "Section ID", sgs0."total_marks" "Total Marks"
      FROM (SELECT 
                   section_id, student_id, class_id, SUM(total_marks) AS "total_marks"
            FROM student_grade_sheet
            WHERE (student_id = 213) AND (date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY section_id, student_id, class_id
            
           ) sgs0

) 
   ) WHERE ROWNUM <= 200) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 200 [42102-191]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.command.Parser.readTableOrView(Parser.java:5349)
	at org.h2.command.Parser.readTableFilter(Parser.java:1245)
	at org.h2.command.Parser.parseSelectSimpleFromPart(Parser.java:1884)
	at org.h2.command.Parser.parseSelectSimple(Parser.java:2032)
	at org.h2.command.Parser.parseSelectSub(Parser.java:1878)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:1699)
	at org.h2.command.Parser.readTableFilter(Parser.java:1169)
09:19:33.735 WARN  [maha-test-pool-1] c.y.m.s.u.MahaRequestLogHelper - logFailed called more than once!
09:19:33.740 ERROR [ScalaTest-main-running-MahaServiceExampleTest] c.y.m.e.o.OracleQueryExecutor - Failed query : SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT sgs0.student_id "Student ID", sgs0.class_id "Class ID", sgs0.section_id "Section ID", sgs0."total_marks" "Total Marks"
      FROM (SELECT 
                   section_id, student_id, class_id, SUM(total_marks) AS "total_marks"
            FROM student_grade_sheet
            WHERE (student_id = 213) AND (date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY section_id, student_id, class_id
            
           ) sgs0

) 
   ) WHERE ROWNUM <= 200) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 200
DrilldownConfigTest:
- Create a valid DrillDownConfig
- Create a valid DrillDownConfig with reversed ordering
09:19:33.742 ERROR [ScalaTest-main-running-MahaServiceExampleTest] c.y.m.s.DefaultMahaService - Failed to execute the query pipeline
java.lang.RuntimeException: query execution failed : Table "STUDENT_GRADE_SHEET" not found; SQL statement:
SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT sgs0.student_id "Student ID", sgs0.class_id "Class ID", sgs0.section_id "Section ID", sgs0."total_marks" "Total Marks"
      FROM (SELECT 
                   section_id, student_id, class_id, SUM(total_marks) AS "total_marks"
            FROM student_grade_sheet
            WHERE (student_id = 213) AND (date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY section_id, student_id, class_id
            
           ) sgs0

) 
   ) WHERE ROWNUM <= 200) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 200 [42102-191]
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:20)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.$anonfun$execute$5(QueryPipeline.scala:167)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.execute(QueryPipeline.scala:166)
	at com.yahoo.maha.service.DefaultMahaService.com$yahoo$maha$service$DefaultMahaService$$processQueryPipeline(MahaService.scala:346)
Caused by: org.h2.jdbc.JdbcSQLException: Table "STUDENT_GRADE_SHEET" not found; SQL statement:
SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT sgs0.student_id "Student ID", sgs0.class_id "Class ID", sgs0.section_id "Section ID", sgs0."total_marks" "Total Marks"
      FROM (SELECT 
                   section_id, student_id, class_id, SUM(total_marks) AS "total_marks"
            FROM student_grade_sheet
            WHERE (student_id = 213) AND (date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY section_id, student_id, class_id
            
           ) sgs0

) 
   ) WHERE ROWNUM <= 200) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 200 [42102-191]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.command.Parser.readTableOrView(Parser.java:5349)
	at org.h2.command.Parser.readTableFilter(Parser.java:1245)
	at org.h2.command.Parser.parseSelectSimpleFromPart(Parser.java:1884)
	at org.h2.command.Parser.parseSelectSimple(Parser.java:2032)
	at org.h2.command.Parser.parseSelectSub(Parser.java:1878)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:1699)
	at org.h2.command.Parser.readTableFilter(Parser.java:1169)
09:19:33.742 WARN  [ScalaTest-main-running-MahaServiceExampleTest] c.y.m.s.u.MahaRequestLogHelper - logFailed called more than once!
- Create a valid DrillDownConfig with multiple requests
- Create a valid DrillDownConfig with invalid ordering
- DrildownConfig with one request error should error
- DrillDownConfig should throw error on no dimension.
- Create a valid DrillDownConfig with Descending order and multiple orderings
- Create a valid DrillDownConfig with Descending order and no given ordering
09:19:33.745 ERROR [ScalaTest-main-running-MahaServiceExampleTest] c.y.m.e.o.OracleQueryExecutor - Failed query : SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT sgs0.student_id "Student ID", sgs0.class_id "Class ID", sgs0.section_id "Section ID", sgs0."total_marks" "Total Marks"
      FROM (SELECT 
                   section_id, student_id, class_id, SUM(total_marks) AS "total_marks"
            FROM student_grade_sheet
            WHERE (student_id = 213) AND (date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY section_id, student_id, class_id
            
           ) sgs0

) 
   ) WHERE ROWNUM <= 200) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 200
09:19:33.746 ERROR [ScalaTest-main-running-MahaServiceExampleTest] c.y.m.s.DefaultMahaService - Failed to execute the query pipeline
java.lang.RuntimeException: query execution failed : Table "STUDENT_GRADE_SHEET" not found; SQL statement:
SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT sgs0.student_id "Student ID", sgs0.class_id "Class ID", sgs0.section_id "Section ID", sgs0."total_marks" "Total Marks"
      FROM (SELECT 
                   section_id, student_id, class_id, SUM(total_marks) AS "total_marks"
            FROM student_grade_sheet
            WHERE (student_id = 213) AND (date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY section_id, student_id, class_id
            
           ) sgs0

) 
   ) WHERE ROWNUM <= 200) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 200 [42102-191]
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:20)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.$anonfun$execute$5(QueryPipeline.scala:167)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.execute(QueryPipeline.scala:166)
	at com.yahoo.maha.service.DefaultMahaService.com$yahoo$maha$service$DefaultMahaService$$processQueryPipeline(MahaService.scala:346)
Caused by: org.h2.jdbc.JdbcSQLException: Table "STUDENT_GRADE_SHEET" not found; SQL statement:
SELECT * FROM (SELECT D.*, ROWNUM AS ROW_NUMBER FROM (SELECT * FROM (SELECT *
FROM (SELECT sgs0.student_id "Student ID", sgs0.class_id "Class ID", sgs0.section_id "Section ID", sgs0."total_marks" "Total Marks"
      FROM (SELECT 
                   section_id, student_id, class_id, SUM(total_marks) AS "total_marks"
            FROM student_grade_sheet
            WHERE (student_id = 213) AND (date >= trunc(to_date('2020-11-03', 'YYYY-MM-DD')) AND date <= trunc(to_date('2020-11-10', 'YYYY-MM-DD'))) 
            GROUP BY section_id, student_id, class_id
            
           ) sgs0

) 
   ) WHERE ROWNUM <= 200) D ) WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 200 [42102-191]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.command.Parser.readTableOrView(Parser.java:5349)
	at org.h2.command.Parser.readTableFilter(Parser.java:1245)
	at org.h2.command.Parser.parseSelectSimpleFromPart(Parser.java:1884)
	at org.h2.command.Parser.parseSelectSimple(Parser.java:2032)
	at org.h2.command.Parser.parseSelectSub(Parser.java:1878)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:1699)
	at org.h2.command.Parser.readTableFilter(Parser.java:1169)
09:19:33.746 WARN  [ScalaTest-main-running-MahaServiceExampleTest] c.y.m.s.u.MahaRequestLogHelper - logFailed called more than once!
MahaServiceExampleTest:
- Test MahaService with Example Schema
09:19:33.791 INFO  [maha-test-pool-1] c.y.m.s.e.MahaServiceExampleTest - Inside onSuccess function
09:19:33.796 WARN  [ScalaTest-main-running-MahaServiceExampleTest] c.y.m.s.u.MahaRequestLogHelper - Something went wrong in extracting cube revision for logging purpose java.util.NoSuchElementException: None.get
09:19:33.801 WARN  [maha-test-pool-6] c.y.m.s.u.MahaRequestLogHelper - Something went wrong in extracting cube revision for logging purpose java.util.NoSuchElementException: None.get
09:19:33.804 WARN  [maha-test-pool-4] c.y.m.s.u.MahaRequestLogHelper - Something went wrong in extracting cube revision for logging purpose java.util.NoSuchElementException: None.get
- Test MahaService with Example Schema generating valid Dim Candidates
09:19:33.808 WARN  [ScalaTest-main-running-MahaServiceExampleTest] c.y.m.s.u.MahaRequestLogHelper - logFailed called more than once!
09:19:33.810 ERROR [ScalaTest-main-running-MahaServiceExampleTest] c.y.m.s.DefaultMahaService - Failed to create Report Model:
java.lang.IllegalArgumentException: requirement failed: ERROR_CODE:10005 Failed to find primary key alias for Student Status Unknown Column
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.core.RequestModel$.$anonfun$from$32(RequestModel.scala:519)
	at scala.collection.mutable.RedBlackTree$.foreachNodeKeyNonNull(RedBlackTree.scala:454)
	at scala.collection.mutable.RedBlackTree$.foreachKey(RedBlackTree.scala:450)
	at scala.collection.mutable.TreeSet.foreach(TreeSet.scala:107)
	at com.yahoo.maha.core.RequestModel$.$anonfun$from$1(RequestModel.scala:514)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.RequestModel$.from(RequestModel.scala:326)
	at com.yahoo.maha.core.RequestModelFactory$.fromBucketSelector(RequestModel.scala:1392)
	at com.yahoo.maha.service.DefaultMahaService.generateRequestModel(MahaService.scala:292)
- Test RequestModel Failure using mahaService
- Test MahaService with Example Schema generating valid query pipeline
- Test Query Gen bucketing
DruidQueryExecutorConfigFactoryTest:
- Druid Executor Config
09:19:33.882 ERROR [ScalaTest-main-running-TotalMetricsCuratorTest] c.y.m.s.DefaultMahaService - Failed to compile the query pipeline None.get
java.util.NoSuchElementException: None.get
	at scala.None$.get(Option.scala:529)
	at scala.None$.get(Option.scala:527)
	at scala.collection.mutable.TreeSet.head(TreeSet.scala:102)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.$anonfun$builder$52(QueryPipeline.scala:1243)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.builder(QueryPipeline.scala:1195)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.builder(QueryPipeline.scala:881)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.fromBucketSelector(QueryPipeline.scala:1287)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.fromBucketSelector(QueryPipeline.scala:1303)
	at com.yahoo.maha.service.DefaultMahaService.generateQueryPipelines(MahaService.scala:336)
09:19:33.882 ERROR [ScalaTest-main-running-TotalMetricsCuratorTest] c.y.m.s.DefaultMahaService - Failed to compile the query pipeline None.get
java.util.NoSuchElementException: None.get
	at scala.None$.get(Option.scala:529)
	at scala.None$.get(Option.scala:527)
	at scala.collection.mutable.TreeSet.head(TreeSet.scala:102)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.$anonfun$builder$52(QueryPipeline.scala:1243)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.builder(QueryPipeline.scala:1195)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.builder(QueryPipeline.scala:881)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.fromBucketSelector(QueryPipeline.scala:1287)
	at com.yahoo.maha.core.query.DefaultQueryPipelineFactory.fromBucketSelector(QueryPipeline.scala:1303)
	at com.yahoo.maha.service.DefaultMahaService.generateQueryPipelines(MahaService.scala:336)
MahaUDFRegistrationFactoryTest:
- successfully build factory from json
TotalMetricsCuratorTest:
- Test successful processing of TotalMetricsCurator
- Test failure of TotalMetricsCurator
- Test failure of TotalMetricsCurator with unknown col
- Test failure of TotalMetricsCurator with BadTestRequestModelValidator
- Test failure when bad config
MahaRequestLogWriterFactoryTest:
- Noop MahaRequestLogWriterFactoryTest
- Kafka MahaRequestLogWriterFactoryTest
- MultiColoRequestLogWriter Factory test
DefaultPartitionColumnRendererFactoryTest:
- successfully build factory from json
09:19:33.956 ERROR [maha-test-pool-2] c.y.m.s.c.DefaultCurator - error in post processor, returning original result
java.lang.IllegalArgumentException: CuratorResultPostProcessor failed
	at com.yahoo.maha.service.curators.DefaultCuratorTest$CuratorCustomPostProcessor$2.process(DefaultCuratorTest.scala:90)
	at com.yahoo.maha.service.curators.DefaultCurator.$anonfun$process$1(Curator.scala:177)
	at com.yahoo.maha.parrequest2.future.ParFunction.apply(ParFunction.java:104)
	at com.yahoo.maha.parrequest2.EitherUtils.flatMap(EitherUtils.java:28)
	at com.yahoo.maha.parrequest2.future.ComposableFuture.run(ComposableFuture.java:54)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
09:19:33.956 WARN  [maha-test-pool-2] c.y.m.s.u.MahaRequestLogHelper - logFailed called more than once!
09:19:33.958 WARN  [ScalaTest-main-running-DefaultCuratorTest] c.y.m.s.u.MahaRequestLogHelper - logFailed called more than once!
DefaultCuratorTest:
- Default Curator test
- Default Curator test with failing curatorResultPostProcessor
- Default Curator test with BadTestRequestModelValidator
09:19:33.989 INFO  [ScalaTest-main-running-RowCountCuratorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:33.990 INFO  [ScalaTest-main-running-RowCountCuratorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:33.990 INFO  [ScalaTest-main-running-RowCountCuratorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:33.991 INFO  [ScalaTest-main-running-RowCountCuratorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:33.991 INFO  [ScalaTest-main-running-RowCountCuratorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:33.991 INFO  [ScalaTest-main-running-RowCountCuratorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
AuthHeaderProdiverFactoryTest:
- shouldCreateValidNoopAuthHeaderProvider
09:19:33.995 INFO  [ScalaTest-main-running-RowCountCuratorTest] c.y.m.s.f.TestFactEstimator - schemaBasedResult grainKey=student grainRows=Some(1000)
09:19:33.995 INFO  [ScalaTest-main-running-RowCountCuratorTest] c.y.m.s.f.TestFactEstimator - allBasedResult grainKey=*-student grainRows=Some(1000)
09:19:33.995 INFO  [ScalaTest-main-running-RowCountCuratorTest] c.y.m.s.f.TestFactEstimator - RowsEstimate(1000,true,1000,true)
09:19:33.999 WARN  [maha-test-pool-0] c.y.m.s.u.MahaRequestLogHelper - Something went wrong in extracting cube revision for logging purpose java.util.NoSuchElementException: None.get
09:19:34.002 ERROR [maha-test-pool-0] c.y.m.e.o.OracleQueryExecutor - Failed query : SELECT /*+ FIRST_ROWS */ *
      FROM (
          SELECT "Student ID", "TOTALROWS", ROWNUM AS ROW_NUMBER
              FROM(SELECT s0.id "Student ID", Count(*) OVER() TOTALROWS
                  FROM 
                (SELECT  id
            FROM student
            WHERE (id = 213)
             ) s0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 1
09:19:34.002 ERROR [maha-test-pool-0] c.y.m.s.DefaultMahaService - Failed to execute the query pipeline
java.lang.RuntimeException: query execution failed : Syntax error in SQL statement "SELECT                   *
      FROM (
          SELECT ""Student ID"", ""TOTALROWS"", ROWNUM AS ROW_NUMBER
              FROM(SELECT S0.ID ""Student ID"", COUNT(*) OVER([*]) TOTALROWS
                  FROM 
                (SELECT  ID
            FROM STUDENT
            WHERE (ID = 213)
             ) S0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 1 "; expected ",, FROM, WHERE, GROUP, HAVING, UNION, MINUS, EXCEPT, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, FOR, )"; SQL statement:
SELECT /*+ FIRST_ROWS */ *
      FROM (
          SELECT "Student ID", "TOTALROWS", ROWNUM AS ROW_NUMBER
              FROM(SELECT s0.id "Student ID", Count(*) OVER() TOTALROWS
                  FROM 
                (SELECT  id
            FROM student
            WHERE (id = 213)
             ) s0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 1 [42001-191]
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:20)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.$anonfun$execute$5(QueryPipeline.scala:167)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.execute(QueryPipeline.scala:166)
	at com.yahoo.maha.service.DefaultMahaService.com$yahoo$maha$service$DefaultMahaService$$processQueryPipeline(MahaService.scala:346)
Caused by: org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "SELECT                   *
      FROM (
          SELECT ""Student ID"", ""TOTALROWS"", ROWNUM AS ROW_NUMBER
              FROM(SELECT S0.ID ""Student ID"", COUNT(*) OVER([*]) TOTALROWS
                  FROM 
                (SELECT  ID
            FROM STUDENT
            WHERE (ID = 213)
             ) S0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 1 "; expected ",, FROM, WHERE, GROUP, HAVING, UNION, MINUS, EXCEPT, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, FOR, )"; SQL statement:
SELECT /*+ FIRST_ROWS */ *
      FROM (
          SELECT "Student ID", "TOTALROWS", ROWNUM AS ROW_NUMBER
              FROM(SELECT s0.id "Student ID", Count(*) OVER() TOTALROWS
                  FROM 
                (SELECT  id
            FROM student
            WHERE (id = 213)
             ) s0 
           

                  ))
                   WHERE ROW_NUMBER >= 1 AND ROW_NUMBER <= 1 [42001-191]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)
	at org.h2.message.DbException.getSyntaxError(DbException.java:205)
	at org.h2.command.Parser.getSyntaxError(Parser.java:535)
	at org.h2.command.Parser.read(Parser.java:3170)
	at org.h2.command.Parser.readTableFilter(Parser.java:1170)
	at org.h2.command.Parser.parseSelectSimpleFromPart(Parser.java:1884)
	at org.h2.command.Parser.parseSelectSimple(Parser.java:2032)
	at org.h2.command.Parser.parseSelectSub(Parser.java:1878)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:1699)
	at org.h2.command.Parser.readTableFilter(Parser.java:1169)
09:19:34.002 INFO  [ScalaTest-main-running-RowCountCuratorTest] c.y.m.s.c.RowCountCurator - Unfiltered request should not generate any fact candidates!   : Request fields : ()  : generated Model columns and candidate names : ()  : ()
09:19:34.009 ERROR [ScalaTest-main-running-RowCountCuratorTest] c.y.m.s.CuratorInjector - Failed to inject curator : totalmetrics
java.lang.IllegalArgumentException: requirement failed: Cannot inject curator already requested : totalmetrics
	at scala.Predef$.require(Predef.scala:281)
	at com.yahoo.maha.service.CuratorInjector.injectCurator(RequestCoordinator.scala:58)
	at com.yahoo.maha.service.curators.RowCountCuratorTest.$anonfun$new$5(RowCountCuratorTest.scala:312)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.funsuite.AnyFunSuiteLike$$anon$1.apply(AnyFunSuiteLike.scala:189)
	at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
QueryExecutorFactoryTest:
- Test Oracle Query Executor Instantiation
- Test Oracle Query Executor Instantiation without fetch size
- Test Druid Query Executor Instantiation
- Test Presto Query Executor Instantiation
- Test Failure in Presto Query Executor Instantiation
BaseFactoryTest:
09:19:34.074 ERROR [AsyncHttpClient-17-12] c.y.m.e.d.f.TimeoutThrottlingFilter - Connection or Timeout Exception caught. java.net.ConnectException: Connection refused: localhost/0:0:0:0:0:0:0:1:51692 Adding to timeoutList for url: http://localhost:51692/mock/studentPerf
09:19:34.076 ERROR [maha-test-pool-4] c.y.m.e.d.DruidQueryExecutor - Exception occurred while executing druid query
java.util.concurrent.ExecutionException: java.net.ConnectException: Connection refused: localhost/0:0:0:0:0:0:0:1:51692
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:357)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1895)
	at org.asynchttpclient.netty.NettyResponseFuture.get(NettyResponseFuture.java:201)
	at com.yahoo.maha.executor.druid.HttpUtils.execute$1(HttpUtils.scala:52)
	at com.yahoo.maha.executor.druid.HttpUtils.sendRequest(HttpUtils.scala:55)
	at com.yahoo.maha.executor.druid.HttpUtils.post(HttpUtils.scala:88)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:493)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
Caused by: java.net.ConnectException: Connection refused: localhost/0:0:0:0:0:0:0:1:51692
	at org.asynchttpclient.netty.channel.NettyConnectListener.onFailure(NettyConnectListener.java:179)
	at org.asynchttpclient.netty.channel.NettyChannelConnector$1.onFailure(NettyChannelConnector.java:108)
	at org.asynchttpclient.netty.SimpleChannelFutureListener.operationComplete(SimpleChannelFutureListener.java:28)
	at org.asynchttpclient.netty.SimpleChannelFutureListener.operationComplete(SimpleChannelFutureListener.java:20)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:570)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:549)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:608)
Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/0:0:0:0:0:0:0:1:51692
Caused by: java.net.ConnectException: Connection refused
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:717)
	at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:327)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:334)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:688)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:635)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:552)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:514)
	at io.netty.util.concurrent.SingleThreadEventExecutor$6.run(SingleThreadEventExecutor.java:1044)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
09:19:34.076 ERROR [maha-test-pool-4] c.y.m.s.DefaultMahaService - Failed to execute the query pipeline
java.lang.RuntimeException: query execution failed : java.net.ConnectException: Connection refused: localhost/0:0:0:0:0:0:0:1:51692
	at com.yahoo.maha.core.query.QueryResult.requireSuccess(QueryResult.scala:20)
	at com.yahoo.maha.core.query.SingleEngineQuery.$anonfun$execute$6(QueryPipeline.scala:269)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle(RowList.scala:84)
	at com.yahoo.maha.core.query.RowListLifeCycle.withLifeCycle$(RowList.scala:81)
	at com.yahoo.maha.core.query.CompleteRowList.withLifeCycle(RowList.scala:242)
	at com.yahoo.maha.core.query.SingleEngineQuery.execute(QueryPipeline.scala:262)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.$anonfun$execute$5(QueryPipeline.scala:167)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.core.query.DefaultQueryPipeline.execute(QueryPipeline.scala:166)
	at com.yahoo.maha.service.DefaultMahaService.com$yahoo$maha$service$DefaultMahaService$$processQueryPipeline(MahaService.scala:346)
Caused by: java.util.concurrent.ExecutionException: java.net.ConnectException: Connection refused: localhost/0:0:0:0:0:0:0:1:51692
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:357)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1895)
	at org.asynchttpclient.netty.NettyResponseFuture.get(NettyResponseFuture.java:201)
	at com.yahoo.maha.executor.druid.HttpUtils.execute$1(HttpUtils.scala:52)
	at com.yahoo.maha.executor.druid.HttpUtils.sendRequest(HttpUtils.scala:55)
	at com.yahoo.maha.executor.druid.HttpUtils.post(HttpUtils.scala:88)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.$anonfun$execute$11(DruidQueryExecutor.scala:493)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.util.Try$.apply(Try.scala:213)
	at com.yahoo.maha.executor.druid.DruidQueryExecutor.execute(DruidQueryExecutor.scala:492)
Caused by: java.net.ConnectException: Connection refused: localhost/0:0:0:0:0:0:0:1:51692
	at org.asynchttpclient.netty.channel.NettyConnectListener.onFailure(NettyConnectListener.java:179)
	at org.asynchttpclient.netty.channel.NettyChannelConnector$1.onFailure(NettyChannelConnector.java:108)
	at org.asynchttpclient.netty.SimpleChannelFutureListener.operationComplete(SimpleChannelFutureListener.java:28)
	at org.asynchttpclient.netty.SimpleChannelFutureListener.operationComplete(SimpleChannelFutureListener.java:20)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:570)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:549)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:608)
Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/0:0:0:0:0:0:0:1:51692
Caused by: java.net.ConnectException: Connection refused
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:717)
	at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:327)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:334)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:688)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:635)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:552)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:514)
	at io.netty.util.concurrent.SingleThreadEventExecutor$6.run(SingleThreadEventExecutor.java:1044)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
RowCountCuratorTest:
- Test processing of RowCountCurator with fact only operations
- Test processing of RowCountCurator with fact only operations with dim cost > 5000
- Test processing of RowCountCurator with failure of RowCountCurator with dim driven request
- Test curator Injection
- Test curator Injection Failure
- Test failure of RowCountCurator
- Test failure of RowCountCurator unknown col
- Test failure of RowCountCurator with BadTestRequestModelValidator
- Test RowCountCurator for fact driven queries in druid
LiteralMapperTest:
- Test OracleLiteralMapper 
- Test DruidLiteralMapper 
- Test DefaultPostgresLiteralMapper
- Test DefaultPostgresLiteralMapperUsingDriver
MahaRequestLogHelperTest:
09:19:34.186 WARN  [ScalaTest-main-running-MahaRequestLogHelperTest] c.y.m.s.u.MahaRequestLogHelper - Failed to log the event to kafka null java.lang.NullPointerException
- Test MahaRequestLogHelper
09:19:34.192 WARN  [ScalaTest-main-running-MahaRequestLogHelperTest] c.y.m.s.u.MahaRequestLogHelper - Failed to log the event to kafka null java.lang.NullPointerException
- Test MahaRequestLogHelper LogFailed with status
09:19:34.268 WARN  [ScalaTest-main-running-MahaRequestLogHelperTest] c.y.m.s.u.MahaRequestLogHelper - Failed to log the event to kafka Message missing required fields: requestId, json com.google.protobuf.UninitializedMessageException: Message missing required fields: requestId, json
- Test MahaRequestLogHelper LogFailed with status and null request context
09:19:34.274 WARN  [ScalaTest-main-running-MahaRequestLogHelperTest] c.y.m.s.u.MahaRequestLogHelper - Failed to log the event to kafka null java.lang.NullPointerException
09:19:34.274 WARN  [ScalaTest-main-running-MahaRequestLogHelperTest] c.y.m.s.u.MahaRequestLogHelper - logSuccess called more than once!
09:19:34.274 WARN  [ScalaTest-main-running-MahaRequestLogHelperTest] c.y.m.s.u.MahaRequestLogHelper - logSuccess called more than once!
09:19:34.274 WARN  [ScalaTest-main-running-MahaRequestLogHelperTest] c.y.m.s.u.MahaRequestLogHelper - Failed to log the event to kafka null java.lang.NullPointerException
- Create curatorMahaRequestLogHelper to check logging
JsonOutputFormatTest:
- Test JsonOutputFormat with DefaultCurator, totalRow Option, empty curator result
- Test JsonOutputFormat with DefaultCurator and valid other curator result
- Test JsonOutputFormat with DefaultCurator and failed other curator result
- Test JsonOutputFormat with DefaultCurator row count in row list
- Test JsonOutputFormat with DefaultCurator row count in row list for fact driven query
- Test JsonOutputFormat with RowCountCurator while rowList is empty
PrestoQueryTemplateFactoryTest:
- Test PrestoQueryTemplateFactory 
Run completed in 15 seconds, 922 milliseconds.
Total number of tests run: 148
Suites: completed 36, aborted 0
Tests: succeeded 148, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
[INFO] 
[INFO] <<< scoverage-maven-plugin:1.4.1:report (coverage) < [scoverage]test @ maha-service <<<
[INFO] 
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:report (coverage) @ maha-service ---
[INFO] Reading scoverage instrumentation [/Users/lgadde/git/Native-Ads/maha/service/target/scoverage-data/scoverage.coverage]...
[INFO] Reading scoverage measurements [/Users/lgadde/git/Native-Ads/maha/service/target/scoverage-data/scoverage.measurements.*]...
[INFO] Generating coverage reports...
[INFO] Written Cobertura XML report [/Users/lgadde/git/Native-Ads/maha/service/target/cobertura.xml]
[INFO] Written XML coverage report [/Users/lgadde/git/Native-Ads/maha/service/target/scoverage.xml]
[INFO] Written HTML coverage report [/Users/lgadde/git/Native-Ads/maha/service/target/site/scoverage/index.html]
[INFO] Statement coverage.: 90.40%
[INFO] Branch coverage....: 83.29%
[INFO] Coverage reports completed.
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:check-only (coverage) @ maha-service ---
[INFO] Statement coverage.: 90.40%
[INFO] Branch coverage....: 83.29%
[INFO] Coverage is above minimum [90.40% >= 90.00%]
[INFO] 
[INFO] ---------------------< com.yahoo.maha:maha-worker >---------------------
[INFO] Building maha worker 6.24-SNAPSHOT                               [13/15]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ maha-worker ---
[INFO] Deleting /Users/lgadde/git/Native-Ads/maha/worker/target
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-worker ---
[INFO] Add Source directory: /Users/lgadde/git/Native-Ads/maha/worker/src/main/scala
[INFO] Add Test Source directory: /Users/lgadde/git/Native-Ads/maha/worker/src/test/scala
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-worker ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/lgadde/git/Native-Ads/maha/worker/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ maha-worker ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 1 source file to /Users/lgadde/git/Native-Ads/maha/worker/target/classes
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-worker ---
[INFO] /Users/lgadde/git/Native-Ads/maha/worker/src/main/java:-1: info: compiling
[INFO] /Users/lgadde/git/Native-Ads/maha/worker/src/main/scala:-1: info: compiling
[INFO] /Users/lgadde/git/Native-Ads/maha/worker/target/generated-sources/annotations:-1: info: compiling
[INFO] Compiling 7 source files to /Users/lgadde/git/Native-Ads/maha/worker/target/classes at 1605028776887
[WARNING] /Users/lgadde/git/Native-Ads/maha/worker/src/main/scala/com/yahoo/maha/worker/SyncReportWorker.scala:4: warning: Unused import
[WARNING] import com.yahoo.maha.worker.proto.MahaWorkerReportingProto.MahaCustomReportRequest
[WARNING]                                                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/worker/src/main/scala/com/yahoo/maha/worker/throttling/ThrottlingConfig.scala:89: warning: postfix operator millis should be enabled
[WARNING] by making the implicit value scala.language.postfixOps visible.
[WARNING] This can be achieved by adding the import clause 'import scala.language.postfixOps'
[WARNING] or by setting the compiler option -language:postfixOps.
[WARNING] See the Scaladoc for value scala.language.postfixOps for a discussion
[WARNING] why the feature should be explicitly enabled.
[WARNING]       Await.result(countOfRunningJobsFuture, jobMetaExecConfig.maxWaitMills millis)
[WARNING]                                                                             ^
[WARNING] two warnings found
[INFO] prepare-compile in 0 s
[INFO] compile in 8 s
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-worker ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ maha-worker ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-worker ---
[INFO] /Users/lgadde/git/Native-Ads/maha/worker/src/test/scala:-1: info: compiling
[INFO] Compiling 6 source files to /Users/lgadde/git/Native-Ads/maha/worker/target/test-classes at 1605028785061
[WARNING] /Users/lgadde/git/Native-Ads/maha/worker/src/test/scala/com/yahoo/maha/worker/WorkerTest.scala:99: warning: local val mahaWorkerRequest in value exception is never used
[WARNING]       val mahaWorkerRequest: MahaWorkerRequest = baseMahaWorker.initializeWork(mahaCustomReportRequestProto)
[WARNING]           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/worker/src/test/scala/com/yahoo/maha/worker/WorkerTest.scala:195: warning: local val mahaWorkerRequest in value exception is never used
[WARNING]       val mahaWorkerRequest: MahaWorkerRequest = baseMahaWorker.initializeWork(mahaCustomReportRequestProto)
[WARNING]           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/worker/src/test/scala/com/yahoo/maha/worker/WorkerTest.scala:221: warning: local val mahaWorkerRequest in value exception is never used
[WARNING]       val mahaWorkerRequest: MahaWorkerRequest = baseMahaWorker.initializeWork(mahaCustomReportRequestProto)
[WARNING]           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/worker/src/test/scala/com/yahoo/maha/worker/request/MahaWorkerProtoParserTest.scala:203: warning: local val workerRequest in value exception is never used
[WARNING]       val workerRequest = defaultMahaWorkerProtoParser.parseProto(mahaCustomReportRequestProto)
[WARNING]           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/worker/src/test/scala/com/yahoo/maha/worker/request/MahaWorkerProtoParserTest.scala:226: warning: local val workerRequest in value exception is never used
[WARNING]       val workerRequest = defaultMahaWorkerProtoParser.parseProto(mahaCustomReportRequestProto)
[WARNING]           ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/worker/src/test/scala/com/yahoo/maha/worker/state/WorkerStateReporterTest.scala:40: warning: postfix operator millis should be enabled
[WARNING] by making the implicit value scala.language.postfixOps visible.
[WARNING] This can be achieved by adding the import clause 'import scala.language.postfixOps'
[WARNING] or by setting the compiler option -language:postfixOps.
[WARNING] See the Scaladoc for value scala.language.postfixOps for a discussion
[WARNING] why the feature should be explicitly enabled.
[WARNING]     val workerStateActorFuture = workerStateActorSelection.resolveOne(1000 millis)
[WARNING]                                                                            ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/worker/src/test/scala/com/yahoo/maha/worker/state/WorkerStateReporterTest.scala:47: warning: postfix operator millis should be enabled
[WARNING] by making the implicit value scala.language.postfixOps visible.
[WARNING]     Await.result(workerStateActorFuture, 500 millis)
[WARNING]                                              ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/worker/src/test/scala/com/yahoo/maha/worker/throttling/ThrotterTest.scala:10: warning: Unused import
[WARNING] import com.yahoo.maha.worker.request.{AsyncAdhocMahaWorkerRequest, DefaultMahaWorkerProtoParser, MahaWorkerRequest}
[WARNING]                                       ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/worker/src/test/scala/com/yahoo/maha/worker/WorkerTest.scala:29: warning: method workerConfig does nothing other than call itself recursively
[WARNING]     override def workerConfig: WorkerConfig = workerConfig
[WARNING]                                               ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/worker/src/test/scala/com/yahoo/maha/worker/WorkerTest.scala:31: warning: method workerStateReporter does nothing other than call itself recursively
[WARNING]     override def workerStateReporter: WorkerStateReporter = workerStateReporter
[WARNING]                                                             ^
[WARNING] 10 warnings found
[INFO] prepare-compile in 0 s
[INFO] compile in 7 s
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-worker ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- scalatest-maven-plugin:2.0.0:test (test) @ maha-worker ---
Discovery starting.
09:19:57,635 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Found resource [logback-test.xml] at [file:/Users/lgadde/git/Native-Ads/maha/worker/target/test-classes/logback-test.xml]
09:19:57,636 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs multiple times on the classpath.
09:19:57,637 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [jar:file:/Users/lgadde/git/Native-Ads/maha/service/target/maha-service-6.24-SNAPSHOT-tests.jar!/logback-test.xml]
09:19:57,637 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [file:/Users/lgadde/git/Native-Ads/maha/worker/target/test-classes/logback-test.xml]
09:19:57,785 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - debug attribute not set
09:19:57,786 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.rolling.RollingFileAppender]
09:19:57,796 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [FILE]
09:19:57,807 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
09:19:57,845 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@956365425 - No compression will be used
09:19:57,847 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@956365425 - Will use the pattern application.%d{yyyy-MM-dd}.log for the active file
09:19:57,852 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - The date pattern is 'yyyy-MM-dd' from file name pattern 'application.%d{yyyy-MM-dd}.log'.
09:19:57,852 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Roll-over at midnight.
09:19:57,856 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Setting initial period to Tue Nov 10 09:19:57 PST 2020
09:19:57,859 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - Active log file name: target/logs/application.log
09:19:57,859 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - File property is set to [target/logs/application.log]
09:19:57,860 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]
09:19:57,862 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [STDOUT]
09:19:57,865 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
09:19:57,867 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.classic.AsyncAppender]
09:19:57,869 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [ASYNCFILE]
09:19:57,870 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [FILE] to ch.qos.logback.classic.AsyncAppender[ASYNCFILE]
09:19:57,870 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCFILE] - Attaching appender named [FILE] to AsyncAppender.
09:19:57,870 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCFILE] - Setting discardingThreshold to 51
09:19:57,870 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.classic.AsyncAppender]
09:19:57,870 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [ASYNCSTDOUT]
09:19:57,870 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [STDOUT] to ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT]
09:19:57,870 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT] - Attaching appender named [STDOUT] to AsyncAppender.
09:19:57,870 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT] - Setting discardingThreshold to 51
09:19:57,871 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.zaxxer.hikari] to ERROR
09:19:57,871 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.yahoo.maha.executor] to ERROR
09:19:57,871 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [org.http4s] to ERROR
09:19:57,871 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.yahoo.maha.core] to ERROR
09:19:57,871 |-INFO in ch.qos.logback.classic.joran.action.RootLoggerAction - Setting level of ROOT logger to INFO
09:19:57,871 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [ASYNCFILE] to Logger[ROOT]
09:19:57,871 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [ASYNCSTDOUT] to Logger[ROOT]
09:19:57,872 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration.
09:19:57,872 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@26722665 - Registering current configuration as safe fallback point

09:19:59.595 INFO  [ScalaTest-main] c.y.m.w.t.ThrotterTest - Starting blaze server on port : 51722
09:20:00.092 INFO  [ScalaTest-main] c.y.m.w.s.WorkerStateReporter - Using default akka config
09:20:00.629 INFO  [maha-workers-akka.actor.default-dispatcher-3] a.e.s.Slf4jLogger - Slf4jLogger started
09:20:00.665 INFO  [ScalaTest-main] c.y.m.w.s.WorkerStateReporter - Using default akka config
09:20:00.675 INFO  [maha-workers-akka.actor.default-dispatcher-3] a.e.s.Slf4jLogger - Slf4jLogger started
09:20:00.763 INFO  [ScalaTest-main] c.y.m.w.WorkerTest - Starting blaze server on port : 51725
09:20:00.767 INFO  [ScalaTest-main] c.y.m.w.s.WorkerStateReporter - Using default akka config
09:20:00.776 INFO  [maha-workers-akka.actor.default-dispatcher-2] a.e.s.Slf4jLogger - Slf4jLogger started
09:20:00.846 INFO  [ScalaTest-main] c.y.m.w.r.MahaWorkerProtoParserTest - Starting blaze server on port : 51726
Discovery completed in 5 seconds, 804 milliseconds.
Run starting. Expected test count is: 24
ThrotterTest:
09:20:01.041 INFO  [ScalaTest-main-running-ThrotterTest] c.y.m.w.r.DefaultMahaWorkerProtoParser - Timezone is null or empty
09:20:01.051 INFO  [ScalaTest-main-running-ThrotterTest] c.y.m.w.t.EngineBasedThrottler - Number of running jobs (2) below threshold (2), proceeding to process message.
- Test engine based throttling, should not throttle with count = threshold
09:20:01.060 INFO  [ScalaTest-main-running-ThrotterTest] c.y.m.w.r.DefaultMahaWorkerProtoParser - Timezone is null or empty
09:20:01.060 WARN  [ScalaTest-main-running-ThrotterTest] c.y.m.w.t.EngineBasedThrottler - Throttling: Number of running jobs (2) exceeds threshold (1). Checked 0 times.
09:20:01.170 WARN  [ScalaTest-main-running-ThrotterTest] c.y.m.w.t.EngineBasedThrottler - Throttling: Number of running jobs (2) exceeds threshold (1). Checked 1 times.
09:20:01.274 WARN  [ScalaTest-main-running-ThrotterTest] c.y.m.w.t.EngineBasedThrottler - Timeout: Count of running jobs exceeds threshold even after 200 ms. Continuing to process to avoid increasing PULSAR/KAFKA backlog.
09:20:01.274 INFO  [ScalaTest-main-running-ThrotterTest] c.y.m.w.t.EngineBasedThrottler - Number of running jobs (2) below threshold (1), proceeding to process message.
- Engine Base throttling should throttle with count > threshold
09:20:01.277 INFO  [ScalaTest-main-running-ThrotterTest] c.y.m.w.r.DefaultMahaWorkerProtoParser - Timezone is null or empty
java.util.concurrent.TimeoutException: Future timed out after [100 milliseconds]
	at scala.concurrent.Future$never$.ready(Future.scala:578)
	at scala.concurrent.Future$never$.result(Future.scala:584)
	at scala.concurrent.Future$never$.result(Future.scala:566)
	at scala.concurrent.Await$.$anonfun$result$1(package.scala:220)
	at scala.concurrent.BlockContext$DefaultBlockContext$.blockOn(BlockContext.scala:57)
	at scala.concurrent.Await$.result(package.scala:146)
	at com.yahoo.maha.worker.throttling.EngineBasedThrottler.getRunningJobs(ThrottlingConfig.scala:89)
	at com.yahoo.maha.worker.throttling.EngineBasedThrottler.throttle(ThrottlingConfig.scala:66)
	at com.yahoo.maha.worker.throttling.ThrotterTest.$anonfun$new$3(ThrotterTest.scala:112)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.funsuite.AnyFunSuiteLike$$anon$1.apply(AnyFunSuiteLike.scala:189)
	at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
	at org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)
	at org.scalatest.funsuite.AnyFunSuite.withFixture(AnyFunSuite.scala:1562)
	at org.scalatest.funsuite.AnyFunSuiteLike.invokeWithFixture$1(AnyFunSuiteLike.scala:187)
09:20:01.384 INFO  [ScalaTest-main-running-ThrotterTest] c.y.m.w.t.EngineBasedThrottler - Number of running jobs (0) below threshold (1), proceeding to process message.
	at org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$runTest$1(AnyFunSuiteLike.scala:199)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTest(AnyFunSuiteLike.scala:199)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTest$(AnyFunSuiteLike.scala:181)
	at org.scalatest.funsuite.AnyFunSuite.runTest(AnyFunSuite.scala:1562)
	at org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$runTests$1(AnyFunSuiteLike.scala:232)
	at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:413)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:475)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTests(AnyFunSuiteLike.scala:232)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTests$(AnyFunSuiteLike.scala:231)
	at org.scalatest.funsuite.AnyFunSuite.runTests(AnyFunSuite.scala:1562)
	at org.scalatest.Suite.run(Suite.scala:1112)
	at org.scalatest.Suite.run$(Suite.scala:1094)
	at org.scalatest.funsuite.AnyFunSuite.org$scalatest$funsuite$AnyFunSuiteLike$$super$run(AnyFunSuite.scala:1562)
	at org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$run$1(AnyFunSuiteLike.scala:236)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:535)
	at org.scalatest.funsuite.AnyFunSuiteLike.run(AnyFunSuiteLike.scala:236)
	at org.scalatest.funsuite.AnyFunSuiteLike.run$(AnyFunSuiteLike.scala:235)
	at com.yahoo.maha.worker.throttling.ThrotterTest.org$scalatest$BeforeAndAfterAll$$super$run(ThrotterTest.scala:18)
	at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)
	at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:210)
	at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:208)
	at com.yahoo.maha.worker.throttling.ThrotterTest.run(ThrotterTest.scala:18)
	at org.scalatest.Suite.callExecuteOnSuite$1(Suite.scala:1175)
	at org.scalatest.Suite.$anonfun$runNestedSuites$1(Suite.scala:1222)
	at scala.collection.IndexedSeqOptimized.foreach(IndexedSeqOptimized.scala:36)
	at scala.collection.IndexedSeqOptimized.foreach$(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:198)
	at org.scalatest.Suite.runNestedSuites(Suite.scala:1220)
	at org.scalatest.Suite.runNestedSuites$(Suite.scala:1154)
	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:30)
	at org.scalatest.Suite.run(Suite.scala:1109)
	at org.scalatest.Suite.run$(Suite.scala:1094)
	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:30)
	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:45)
	at org.scalatest.tools.Runner$.$anonfun$doRunRunRunDaDoRunRun$13(Runner.scala:1320)
	at org.scalatest.tools.Runner$.$anonfun$doRunRunRunDaDoRunRun$13$adapted(Runner.scala:1314)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:1314)
	at org.scalatest.tools.Runner$.$anonfun$runOptionallyWithPassFailReporter$24(Runner.scala:993)
- Engine Base throttling should not throttle with count > threshold with failing jobMeta
	at org.scalatest.tools.Runner$.$anonfun$runOptionallyWithPassFailReporter$24$adapted(Runner.scala:971)
	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:1480)
	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:971)
	at org.scalatest.tools.Runner$.main(Runner.scala:775)
	at org.scalatest.tools.Runner.main(Runner.scala)
09:20:01.409 INFO  [ScalaTest-main-running-WorkerStateReporterTest] c.y.m.w.s.WorkerStateReporter - Created WorkerStateActor: akka://maha-workers/user/maha-worker-state
09:20:01.414 INFO  [maha-workers-akka.actor.default-dispatcher-2] c.y.m.w.s.a.WorkerStateActor - Starting actor com.yahoo.maha.worker.state.actor.WorkerStateActor
09:20:01.423 INFO  [ScalaTest-main-running-WorkerStateReporterTest] c.y.m.w.s.WorkerStateReporter - Created WorkerStateActor: akka://maha-workers/user/maha-worker-state
09:20:01.423 INFO  [maha-workers-akka.actor.default-dispatcher-2] c.y.m.w.s.a.WorkerStateActor - Starting actor com.yahoo.maha.worker.state.actor.WorkerStateActor
09:20:01.429 INFO  [maha-workers-akka.actor.default-dispatcher-3] a.a.DeadLetterActorRef - Message [scala.collection.immutable.$colon$colon] from Actor[akka://maha-workers/user/maha-worker-state#1885964159] to Actor[akka://maha-workers/deadLetters] was not delivered. [1] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.
09:20:01.446 INFO  [maha-workers-akka.actor.default-dispatcher-3] a.a.DeadLetterActorRef - Message [scala.Some] from Actor[akka://maha-workers/user/maha-worker-state#1885964159] to Actor[akka://maha-workers/deadLetters] was not delivered. [2] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.
09:20:01.447 INFO  [maha-workers-akka.actor.default-dispatcher-3] a.a.DeadLetterActorRef - Message [scala.collection.immutable.$colon$colon] from Actor[akka://maha-workers/user/maha-worker-state#1885964159] to Actor[akka://maha-workers/deadLetters] was not delivered. [3] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.
09:20:01.447 INFO  [maha-workers-akka.actor.default-dispatcher-3] a.a.DeadLetterActorRef - Message [scala.None$] from Actor[akka://maha-workers/user/maha-worker-state#1885964159] to Actor[akka://maha-workers/deadLetters] was not delivered. [4] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.
09:20:01.447 INFO  [maha-workers-akka.actor.default-dispatcher-3] a.a.DeadLetterActorRef - Message [com.yahoo.maha.worker.state.actor.JobsState] from Actor[akka://maha-workers/user/maha-worker-state#1885964159] to Actor[akka://maha-workers/deadLetters] was not delivered. [5] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.
09:20:01.467 INFO  [ScalaTest-main-running-WorkerTest] c.y.m.w.r.DefaultMahaWorkerProtoParser - Updated timezone: Some(TimeZoneValue(UTC))
WorkerStateActorTest:
- Test WorkerStateActor
WorkerStateReporterTest:
- Test workerStateReporter
WorkerTest:
- Validate the proto and init MahaWorkerRequest
- Missing Registry Name in  proto
- Missing Schema in  proto
- Missing JobID in  proto
09:20:01.574 WARN  [ScalaTest-main-running-WorkerTest] c.y.m.w.WorkerTest$$anon$1 - QueueType is not populated in the MahaCustomReportRequest raw_request: "{\n                          \"cube\": \"student_performance\",\n                          \"selectFields\": [\n                            {\"field\": \"Student ID\"},\n                            {\"field\": \"Class ID\"},\n                            {\"field\": \"Section ID\"},\n                            {\"field\": \"Total Marks\"}\n                          ],\n                          \"filterExpressions\": [\n                            {\"field\": \"Day\", \"operator\": \"between\", \"from\": \"2020-11-03\", \"to\": \"2020-11-10\"},\n                            {\"field\": \"Student ID\", \"operator\": \"=\", \"value\": \"213\"}\n                          ]\n                        }"
delivery_method: CONTENT_STORE
query_engine: ORACLE
output_format: CSV
job_id: 12345
schema: "student"
report_type: AD_HOC
timezone: "UTC"
dryrun: false
revision: 1
registry_name: "er"

09:20:01.574 WARN  [ScalaTest-main-running-WorkerTest] c.y.m.w.WorkerTest$$anon$1 - UserId is not populated in the MahaCustomReportRequest raw_request: "{\n                          \"cube\": \"student_performance\",\n                          \"selectFields\": [\n                            {\"field\": \"Student ID\"},\n                            {\"field\": \"Class ID\"},\n                            {\"field\": \"Section ID\"},\n                            {\"field\": \"Total Marks\"}\n                          ],\n                          \"filterExpressions\": [\n                            {\"field\": \"Day\", \"operator\": \"between\", \"from\": \"2020-11-03\", \"to\": \"2020-11-10\"},\n                            {\"field\": \"Student ID\", \"operator\": \"=\", \"value\": \"213\"}\n                          ]\n                        }"
delivery_method: CONTENT_STORE
query_engine: ORACLE
output_format: CSV
job_id: 12345
schema: "student"
report_type: AD_HOC
timezone: "UTC"
dryrun: false
revision: 1
registry_name: "er"

09:20:01.575 WARN  [ScalaTest-main-running-WorkerTest] c.y.m.w.WorkerTest$$anon$1 - RequestSubmittedTime is not populated in the MahaCustomReportRequest raw_request: "{\n                          \"cube\": \"student_performance\",\n                          \"selectFields\": [\n                            {\"field\": \"Student ID\"},\n                            {\"field\": \"Class ID\"},\n                            {\"field\": \"Section ID\"},\n                            {\"field\": \"Total Marks\"}\n                          ],\n                          \"filterExpressions\": [\n                            {\"field\": \"Day\", \"operator\": \"between\", \"from\": \"2020-11-03\", \"to\": \"2020-11-10\"},\n                            {\"field\": \"Student ID\", \"operator\": \"=\", \"value\": \"213\"}\n                          ]\n                        }"
delivery_method: CONTENT_STORE
query_engine: ORACLE
output_format: CSV
job_id: 12345
schema: "student"
report_type: AD_HOC
timezone: "UTC"
dryrun: false
revision: 1
registry_name: "er"

09:20:01.577 INFO  [ScalaTest-main-running-WorkerTest] c.y.m.w.r.DefaultMahaWorkerProtoParser - Updated timezone: Some(TimeZoneValue(UTC))
- Generate the warnings on missing optional fields
- Unsupported Engine in  proto
- Invalid Schema in  proto
09:20:01.585 INFO  [ScalaTest-main-running-MahaWorkerProtoParserTest] c.y.m.w.r.DefaultMahaWorkerProtoParser - Updated timezone: Some(TimeZoneValue(UTC))
09:20:01.591 INFO  [ScalaTest-main-running-MahaWorkerProtoParserTest] c.y.m.w.r.DefaultMahaWorkerProtoParser - Timezone is null or empty
09:20:01.594 INFO  [ScalaTest-main-running-MahaWorkerProtoParserTest] c.y.m.w.r.DefaultMahaWorkerProtoParser - Updated timezone: Some(TimeZoneValue(UTC))
09:20:01.596 INFO  [ScalaTest-main-running-MahaWorkerProtoParserTest] c.y.m.w.r.DefaultMahaWorkerProtoParser - Updated timezone: Some(TimeZoneValue(UTC))
MahaWorkerProtoParserTest:
- test proto parser
- Validate the proto parser
- Validate the proto parser for valid serde map
- Validate the proto parser for valid serde map SCHEDULED
- Validate the proto parser for correct schema
- With no timezone
- With Json Output Format
- With Json Output Format and druid engine
- With Bad ReportingRequest
- With Bad Scheduled ReportingRequest
09:20:01.645 INFO  [ScalaTest-main-running-MahaWorkerProtoParserTest] c.y.m.w.r.DefaultMahaWorkerProtoParser - Updated timezone: Some(TimeZoneValue(UTC))
- With scheduled reportType
- ack status
Run completed in 6 seconds, 603 milliseconds.
Total number of tests run: 24
Suites: completed 6, aborted 0
Tests: succeeded 24, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
09:20:01.691 INFO  [maha-workers-akka.actor.default-dispatcher-3] a.a.CoordinatedShutdown - Starting coordinated shutdown from JVM shutdown hook
09:20:01.691 INFO  [maha-workers-akka.actor.default-dispatcher-2] a.a.CoordinatedShutdown - Starting coordinated shutdown from JVM shutdown hook
09:20:01.691 INFO  [maha-workers-akka.actor.default-dispatcher-2] a.a.CoordinatedShutdown - Starting coordinated shutdown from JVM shutdown hook
09:20:01.716 INFO  [maha-workers-akka.actor.default-dispatcher-2] c.y.m.w.s.a.WorkerStateActor - Stopping actor com.yahoo.maha.worker.state.actor.WorkerStateActor
09:20:01.716 INFO  [maha-workers-akka.actor.default-dispatcher-2] c.y.m.w.s.a.WorkerStateActor - Stopping actor com.yahoo.maha.worker.state.actor.WorkerStateActor
[INFO] 
[INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ maha-worker ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/worker/target/maha-worker-6.24-SNAPSHOT.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:jar (default) > generate-sources @ maha-worker >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-worker ---
[INFO] 
[INFO] <<< maven-source-plugin:2.4:jar (default) < generate-sources @ maha-worker <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:jar (default) @ maha-worker ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/worker/target/maha-worker-6.24-SNAPSHOT-sources.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:test-jar (default) > generate-sources @ maha-worker >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-worker ---
[INFO] 
[INFO] <<< maven-source-plugin:2.4:test-jar (default) < generate-sources @ maha-worker <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:test-jar (default) @ maha-worker ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/worker/target/maha-worker-6.24-SNAPSHOT-test-sources.jar
[INFO] 
[INFO] --- maven-jar-plugin:2.6:test-jar (default) @ maha-worker ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/worker/target/maha-worker-6.24-SNAPSHOT-tests.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ maha-worker ---
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/worker/target/maha-worker-6.24-SNAPSHOT.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-worker/6.24-SNAPSHOT/maha-worker-6.24-SNAPSHOT.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/worker/pom.xml to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-worker/6.24-SNAPSHOT/maha-worker-6.24-SNAPSHOT.pom
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/worker/target/maha-worker-6.24-SNAPSHOT-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-worker/6.24-SNAPSHOT/maha-worker-6.24-SNAPSHOT-sources.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/worker/target/maha-worker-6.24-SNAPSHOT-test-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-worker/6.24-SNAPSHOT/maha-worker-6.24-SNAPSHOT-test-sources.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/worker/target/maha-worker-6.24-SNAPSHOT-tests.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-worker/6.24-SNAPSHOT/maha-worker-6.24-SNAPSHOT-tests.jar
[INFO] 
[INFO] >>> scoverage-maven-plugin:1.4.1:report (coverage) > [scoverage]test @ maha-worker >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-worker ---
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:pre-compile (coverage) @ maha-worker ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-worker ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/lgadde/git/Native-Ads/maha/worker/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ maha-worker ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 1 source file to /Users/lgadde/git/Native-Ads/maha/worker/target/scoverage-classes
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-worker ---
[INFO] /Users/lgadde/git/Native-Ads/maha/worker/src/main/java:-1: info: compiling
[INFO] /Users/lgadde/git/Native-Ads/maha/worker/src/main/scala:-1: info: compiling
[INFO] /Users/lgadde/git/Native-Ads/maha/worker/target/generated-sources/annotations:-1: info: compiling
[INFO] Compiling 7 source files to /Users/lgadde/git/Native-Ads/maha/worker/target/scoverage-classes at 1605028802724
[WARNING] /Users/lgadde/git/Native-Ads/maha/worker/src/main/scala/com/yahoo/maha/worker/SyncReportWorker.scala:4: warning: Unused import
[WARNING] import com.yahoo.maha.worker.proto.MahaWorkerReportingProto.MahaCustomReportRequest
[WARNING]                                                             ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/worker/src/main/scala/com/yahoo/maha/worker/throttling/ThrottlingConfig.scala:89: warning: postfix operator millis should be enabled
[WARNING] by making the implicit value scala.language.postfixOps visible.
[WARNING] This can be achieved by adding the import clause 'import scala.language.postfixOps'
[WARNING] or by setting the compiler option -language:postfixOps.
[WARNING] See the Scaladoc for value scala.language.postfixOps for a discussion
[WARNING] why the feature should be explicitly enabled.
[WARNING]       Await.result(countOfRunningJobsFuture, jobMetaExecConfig.maxWaitMills millis)
[WARNING]                                                                             ^
[INFO] Cleaning datadir [/Users/lgadde/git/Native-Ads/maha/worker/target/scoverage-data]
[INFO] Beginning coverage instrumentation
[INFO] Instrumentation completed [533 statements]
[INFO] Wrote instrumentation file [/Users/lgadde/git/Native-Ads/maha/worker/target/scoverage-data/scoverage.coverage]
[INFO] Will write measurement data to [/Users/lgadde/git/Native-Ads/maha/worker/target/scoverage-data]
[WARNING] two warnings found
[INFO] prepare-compile in 0 s
[INFO] compile in 9 s
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:post-compile (coverage) @ maha-worker ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-worker ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ maha-worker ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-worker ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-worker ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- scalatest-maven-plugin:2.0.0:test (test) @ maha-worker ---
Discovery starting.
09:20:16,706 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Found resource [logback-test.xml] at [file:/Users/lgadde/git/Native-Ads/maha/worker/target/test-classes/logback-test.xml]
09:20:16,707 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs multiple times on the classpath.
09:20:16,707 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [jar:file:/Users/lgadde/git/Native-Ads/maha/service/target/maha-service-6.24-SNAPSHOT-tests.jar!/logback-test.xml]
09:20:16,707 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [file:/Users/lgadde/git/Native-Ads/maha/worker/target/test-classes/logback-test.xml]
09:20:16,881 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - debug attribute not set
09:20:16,882 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.rolling.RollingFileAppender]
09:20:16,896 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [FILE]
09:20:16,908 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
09:20:16,951 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@956365425 - No compression will be used
09:20:16,953 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@956365425 - Will use the pattern application.%d{yyyy-MM-dd}.log for the active file
09:20:16,957 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - The date pattern is 'yyyy-MM-dd' from file name pattern 'application.%d{yyyy-MM-dd}.log'.
09:20:16,957 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Roll-over at midnight.
09:20:16,961 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Setting initial period to Tue Nov 10 09:20:01 PST 2020
09:20:16,964 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - Active log file name: target/logs/application.log
09:20:16,964 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - File property is set to [target/logs/application.log]
09:20:16,965 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]
09:20:16,968 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [STDOUT]
09:20:16,968 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
09:20:16,974 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.classic.AsyncAppender]
09:20:16,976 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [ASYNCFILE]
09:20:16,976 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [FILE] to ch.qos.logback.classic.AsyncAppender[ASYNCFILE]
09:20:16,976 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCFILE] - Attaching appender named [FILE] to AsyncAppender.
09:20:16,977 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCFILE] - Setting discardingThreshold to 51
09:20:16,977 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.classic.AsyncAppender]
09:20:16,977 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [ASYNCSTDOUT]
09:20:16,977 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [STDOUT] to ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT]
09:20:16,977 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT] - Attaching appender named [STDOUT] to AsyncAppender.
09:20:16,977 |-INFO in ch.qos.logback.classic.AsyncAppender[ASYNCSTDOUT] - Setting discardingThreshold to 51
09:20:16,978 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.zaxxer.hikari] to ERROR
09:20:16,978 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.yahoo.maha.executor] to ERROR
09:20:16,978 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [org.http4s] to ERROR
09:20:16,978 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.yahoo.maha.core] to ERROR
09:20:16,978 |-INFO in ch.qos.logback.classic.joran.action.RootLoggerAction - Setting level of ROOT logger to INFO
09:20:16,978 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [ASYNCFILE] to Logger[ROOT]
09:20:16,978 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [ASYNCSTDOUT] to Logger[ROOT]
09:20:16,978 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration.
09:20:16,979 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@26722665 - Registering current configuration as safe fallback point

09:20:18.719 INFO  [ScalaTest-main] c.y.m.w.t.ThrotterTest - Starting blaze server on port : 51730
09:20:19.254 INFO  [ScalaTest-main] c.y.m.w.s.WorkerStateReporter - Using default akka config
09:20:19.758 INFO  [maha-workers-akka.actor.default-dispatcher-3] a.e.s.Slf4jLogger - Slf4jLogger started
09:20:19.798 INFO  [ScalaTest-main] c.y.m.w.s.WorkerStateReporter - Using default akka config
09:20:19.809 INFO  [maha-workers-akka.actor.default-dispatcher-3] a.e.s.Slf4jLogger - Slf4jLogger started
09:20:19.930 INFO  [ScalaTest-main] c.y.m.w.WorkerTest - Starting blaze server on port : 51732
09:20:19.934 INFO  [ScalaTest-main] c.y.m.w.s.WorkerStateReporter - Using default akka config
09:20:19.945 INFO  [maha-workers-akka.actor.default-dispatcher-2] a.e.s.Slf4jLogger - Slf4jLogger started
09:20:20.024 INFO  [ScalaTest-main] c.y.m.w.r.MahaWorkerProtoParserTest - Starting blaze server on port : 51733
Discovery completed in 5 seconds, 859 milliseconds.
Run starting. Expected test count is: 24
ThrotterTest:
09:20:20.235 INFO  [ScalaTest-main-running-ThrotterTest] c.y.m.w.r.DefaultMahaWorkerProtoParser - Timezone is null or empty
09:20:20.250 INFO  [ScalaTest-main-running-ThrotterTest] c.y.m.w.t.EngineBasedThrottler - Number of running jobs (2) below threshold (2), proceeding to process message.
- Test engine based throttling, should not throttle with count = threshold
09:20:20.262 INFO  [ScalaTest-main-running-ThrotterTest] c.y.m.w.r.DefaultMahaWorkerProtoParser - Timezone is null or empty
09:20:20.264 WARN  [ScalaTest-main-running-ThrotterTest] c.y.m.w.t.EngineBasedThrottler - Throttling: Number of running jobs (2) exceeds threshold (1). Checked 0 times.
09:20:20.366 WARN  [ScalaTest-main-running-ThrotterTest] c.y.m.w.t.EngineBasedThrottler - Throttling: Number of running jobs (2) exceeds threshold (1). Checked 1 times.
09:20:20.475 WARN  [ScalaTest-main-running-ThrotterTest] c.y.m.w.t.EngineBasedThrottler - Timeout: Count of running jobs exceeds threshold even after 200 ms. Continuing to process to avoid increasing PULSAR/KAFKA backlog.
09:20:20.476 INFO  [ScalaTest-main-running-ThrotterTest] c.y.m.w.t.EngineBasedThrottler - Number of running jobs (2) below threshold (1), proceeding to process message.
- Engine Base throttling should throttle with count > threshold
09:20:20.478 INFO  [ScalaTest-main-running-ThrotterTest] c.y.m.w.r.DefaultMahaWorkerProtoParser - Timezone is null or empty
java.util.concurrent.TimeoutException: Future timed out after [100 milliseconds]
	at scala.concurrent.Future$never$.ready(Future.scala:578)
	at scala.concurrent.Future$never$.result(Future.scala:584)
	at scala.concurrent.Future$never$.result(Future.scala:566)
	at scala.concurrent.Await$.$anonfun$result$1(package.scala:220)
	at scala.concurrent.BlockContext$DefaultBlockContext$.blockOn(BlockContext.scala:57)
	at scala.concurrent.Await$.result(package.scala:146)
	at com.yahoo.maha.worker.throttling.EngineBasedThrottler.getRunningJobs(ThrottlingConfig.scala:89)
	at com.yahoo.maha.worker.throttling.EngineBasedThrottler.throttle(ThrottlingConfig.scala:66)
	at com.yahoo.maha.worker.throttling.ThrotterTest.$anonfun$new$3(ThrotterTest.scala:112)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.funsuite.AnyFunSuiteLike$$anon$1.apply(AnyFunSuiteLike.scala:189)
	at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
	at org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)
	at org.scalatest.funsuite.AnyFunSuite.withFixture(AnyFunSuite.scala:1562)
09:20:20.591 INFO  [ScalaTest-main-running-ThrotterTest] c.y.m.w.t.EngineBasedThrottler - Number of running jobs (0) below threshold (1), proceeding to process message.
- Engine Base throttling should not throttle with count > threshold with failing jobMeta
	at org.scalatest.funsuite.AnyFunSuiteLike.invokeWithFixture$1(AnyFunSuiteLike.scala:187)
	at org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$runTest$1(AnyFunSuiteLike.scala:199)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTest(AnyFunSuiteLike.scala:199)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTest$(AnyFunSuiteLike.scala:181)
	at org.scalatest.funsuite.AnyFunSuite.runTest(AnyFunSuite.scala:1562)
	at org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$runTests$1(AnyFunSuiteLike.scala:232)
	at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:413)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:475)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTests(AnyFunSuiteLike.scala:232)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTests$(AnyFunSuiteLike.scala:231)
	at org.scalatest.funsuite.AnyFunSuite.runTests(AnyFunSuite.scala:1562)
	at org.scalatest.Suite.run(Suite.scala:1112)
	at org.scalatest.Suite.run$(Suite.scala:1094)
	at org.scalatest.funsuite.AnyFunSuite.org$scalatest$funsuite$AnyFunSuiteLike$$super$run(AnyFunSuite.scala:1562)
	at org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$run$1(AnyFunSuiteLike.scala:236)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:535)
	at org.scalatest.funsuite.AnyFunSuiteLike.run(AnyFunSuiteLike.scala:236)
	at org.scalatest.funsuite.AnyFunSuiteLike.run$(AnyFunSuiteLike.scala:235)
	at com.yahoo.maha.worker.throttling.ThrotterTest.org$scalatest$BeforeAndAfterAll$$super$run(ThrotterTest.scala:18)
	at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)
	at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:210)
	at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:208)
	at com.yahoo.maha.worker.throttling.ThrotterTest.run(ThrotterTest.scala:18)
	at org.scalatest.Suite.callExecuteOnSuite$1(Suite.scala:1175)
	at org.scalatest.Suite.$anonfun$runNestedSuites$1(Suite.scala:1222)
	at scala.collection.IndexedSeqOptimized.foreach(IndexedSeqOptimized.scala:36)
	at scala.collection.IndexedSeqOptimized.foreach$(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:198)
	at org.scalatest.Suite.runNestedSuites(Suite.scala:1220)
	at org.scalatest.Suite.runNestedSuites$(Suite.scala:1154)
	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:30)
	at org.scalatest.Suite.run(Suite.scala:1109)
	at org.scalatest.Suite.run$(Suite.scala:1094)
	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:30)
	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:45)
	at org.scalatest.tools.Runner$.$anonfun$doRunRunRunDaDoRunRun$13(Runner.scala:1320)
	at org.scalatest.tools.Runner$.$anonfun$doRunRunRunDaDoRunRun$13$adapted(Runner.scala:1314)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:1314)
	at org.scalatest.tools.Runner$.$anonfun$runOptionallyWithPassFailReporter$24(Runner.scala:993)
	at org.scalatest.tools.Runner$.$anonfun$runOptionallyWithPassFailReporter$24$adapted(Runner.scala:971)
	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:1480)
	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:971)
	at org.scalatest.tools.Runner$.main(Runner.scala:775)
	at org.scalatest.tools.Runner.main(Runner.scala)
09:20:20.622 INFO  [ScalaTest-main-running-WorkerStateReporterTest] c.y.m.w.s.WorkerStateReporter - Created WorkerStateActor: akka://maha-workers/user/maha-worker-state
09:20:20.626 INFO  [maha-workers-akka.actor.default-dispatcher-2] c.y.m.w.s.a.WorkerStateActor - Starting actor com.yahoo.maha.worker.state.actor.WorkerStateActor
09:20:20.633 INFO  [ScalaTest-main-running-WorkerStateReporterTest] c.y.m.w.s.WorkerStateReporter - Created WorkerStateActor: akka://maha-workers/user/maha-worker-state
09:20:20.633 INFO  [maha-workers-akka.actor.default-dispatcher-4] c.y.m.w.s.a.WorkerStateActor - Starting actor com.yahoo.maha.worker.state.actor.WorkerStateActor
09:20:20.658 INFO  [maha-workers-akka.actor.default-dispatcher-3] a.a.DeadLetterActorRef - Message [scala.collection.immutable.$colon$colon] from Actor[akka://maha-workers/user/maha-worker-state#-527390336] to Actor[akka://maha-workers/deadLetters] was not delivered. [1] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.
09:20:20.661 INFO  [maha-workers-akka.actor.default-dispatcher-3] a.a.DeadLetterActorRef - Message [scala.Some] from Actor[akka://maha-workers/user/maha-worker-state#-527390336] to Actor[akka://maha-workers/deadLetters] was not delivered. [2] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.
09:20:20.661 INFO  [maha-workers-akka.actor.default-dispatcher-3] a.a.DeadLetterActorRef - Message [scala.collection.immutable.$colon$colon] from Actor[akka://maha-workers/user/maha-worker-state#-527390336] to Actor[akka://maha-workers/deadLetters] was not delivered. [3] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.
09:20:20.662 INFO  [maha-workers-akka.actor.default-dispatcher-3] a.a.DeadLetterActorRef - Message [scala.None$] from Actor[akka://maha-workers/user/maha-worker-state#-527390336] to Actor[akka://maha-workers/deadLetters] was not delivered. [4] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.
09:20:20.662 INFO  [maha-workers-akka.actor.default-dispatcher-3] a.a.DeadLetterActorRef - Message [com.yahoo.maha.worker.state.actor.JobsState] from Actor[akka://maha-workers/user/maha-worker-state#-527390336] to Actor[akka://maha-workers/deadLetters] was not delivered. [5] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.
09:20:20.675 INFO  [ScalaTest-main-running-WorkerTest] c.y.m.w.r.DefaultMahaWorkerProtoParser - Updated timezone: Some(TimeZoneValue(UTC))
WorkerStateActorTest:
- Test WorkerStateActor
WorkerStateReporterTest:
- Test workerStateReporter
WorkerTest:
- Validate the proto and init MahaWorkerRequest
- Missing Registry Name in  proto
- Missing Schema in  proto
- Missing JobID in  proto
09:20:20.777 WARN  [ScalaTest-main-running-WorkerTest] c.y.m.w.WorkerTest$$anon$1 - QueueType is not populated in the MahaCustomReportRequest raw_request: "{\n                          \"cube\": \"student_performance\",\n                          \"selectFields\": [\n                            {\"field\": \"Student ID\"},\n                            {\"field\": \"Class ID\"},\n                            {\"field\": \"Section ID\"},\n                            {\"field\": \"Total Marks\"}\n                          ],\n                          \"filterExpressions\": [\n                            {\"field\": \"Day\", \"operator\": \"between\", \"from\": \"2020-11-03\", \"to\": \"2020-11-10\"},\n                            {\"field\": \"Student ID\", \"operator\": \"=\", \"value\": \"213\"}\n                          ]\n                        }"
delivery_method: CONTENT_STORE
query_engine: ORACLE
output_format: CSV
job_id: 12345
schema: "student"
report_type: AD_HOC
timezone: "UTC"
dryrun: false
revision: 1
registry_name: "er"

09:20:20.778 WARN  [ScalaTest-main-running-WorkerTest] c.y.m.w.WorkerTest$$anon$1 - UserId is not populated in the MahaCustomReportRequest raw_request: "{\n                          \"cube\": \"student_performance\",\n                          \"selectFields\": [\n                            {\"field\": \"Student ID\"},\n                            {\"field\": \"Class ID\"},\n                            {\"field\": \"Section ID\"},\n                            {\"field\": \"Total Marks\"}\n                          ],\n                          \"filterExpressions\": [\n                            {\"field\": \"Day\", \"operator\": \"between\", \"from\": \"2020-11-03\", \"to\": \"2020-11-10\"},\n                            {\"field\": \"Student ID\", \"operator\": \"=\", \"value\": \"213\"}\n                          ]\n                        }"
delivery_method: CONTENT_STORE
query_engine: ORACLE
output_format: CSV
job_id: 12345
schema: "student"
report_type: AD_HOC
timezone: "UTC"
dryrun: false
revision: 1
registry_name: "er"

09:20:20.779 WARN  [ScalaTest-main-running-WorkerTest] c.y.m.w.WorkerTest$$anon$1 - RequestSubmittedTime is not populated in the MahaCustomReportRequest raw_request: "{\n                          \"cube\": \"student_performance\",\n                          \"selectFields\": [\n                            {\"field\": \"Student ID\"},\n                            {\"field\": \"Class ID\"},\n                            {\"field\": \"Section ID\"},\n                            {\"field\": \"Total Marks\"}\n                          ],\n                          \"filterExpressions\": [\n                            {\"field\": \"Day\", \"operator\": \"between\", \"from\": \"2020-11-03\", \"to\": \"2020-11-10\"},\n                            {\"field\": \"Student ID\", \"operator\": \"=\", \"value\": \"213\"}\n                          ]\n                        }"
delivery_method: CONTENT_STORE
query_engine: ORACLE
output_format: CSV
job_id: 12345
schema: "student"
report_type: AD_HOC
timezone: "UTC"
dryrun: false
revision: 1
registry_name: "er"

09:20:20.781 INFO  [ScalaTest-main-running-WorkerTest] c.y.m.w.r.DefaultMahaWorkerProtoParser - Updated timezone: Some(TimeZoneValue(UTC))
- Generate the warnings on missing optional fields
- Unsupported Engine in  proto
- Invalid Schema in  proto
09:20:20.790 INFO  [ScalaTest-main-running-MahaWorkerProtoParserTest] c.y.m.w.r.DefaultMahaWorkerProtoParser - Updated timezone: Some(TimeZoneValue(UTC))
09:20:20.797 INFO  [ScalaTest-main-running-MahaWorkerProtoParserTest] c.y.m.w.r.DefaultMahaWorkerProtoParser - Timezone is null or empty
09:20:20.800 INFO  [ScalaTest-main-running-MahaWorkerProtoParserTest] c.y.m.w.r.DefaultMahaWorkerProtoParser - Updated timezone: Some(TimeZoneValue(UTC))
09:20:20.802 INFO  [ScalaTest-main-running-MahaWorkerProtoParserTest] c.y.m.w.r.DefaultMahaWorkerProtoParser - Updated timezone: Some(TimeZoneValue(UTC))
MahaWorkerProtoParserTest:
- test proto parser
- Validate the proto parser
- Validate the proto parser for valid serde map
- Validate the proto parser for valid serde map SCHEDULED
- Validate the proto parser for correct schema
- With no timezone
- With Json Output Format
- With Json Output Format and druid engine
- With Bad ReportingRequest
- With Bad Scheduled ReportingRequest
09:20:20.851 INFO  [ScalaTest-main-running-MahaWorkerProtoParserTest] c.y.m.w.r.DefaultMahaWorkerProtoParser - Updated timezone: Some(TimeZoneValue(UTC))
- With scheduled reportType
- ack status
Run completed in 6 seconds, 689 milliseconds.
Total number of tests run: 24
Suites: completed 6, aborted 0
Tests: succeeded 24, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
09:20:20.907 INFO  [maha-workers-akka.actor.default-dispatcher-2] a.a.CoordinatedShutdown - Starting coordinated shutdown from JVM shutdown hook
09:20:20.907 INFO  [maha-workers-akka.actor.default-dispatcher-2] a.a.CoordinatedShutdown - Starting coordinated shutdown from JVM shutdown hook
09:20:20.907 INFO  [maha-workers-akka.actor.default-dispatcher-4] a.a.CoordinatedShutdown - Starting coordinated shutdown from JVM shutdown hook
09:20:20.932 INFO  [maha-workers-akka.actor.default-dispatcher-4] c.y.m.w.s.a.WorkerStateActor - Stopping actor com.yahoo.maha.worker.state.actor.WorkerStateActor
09:20:20.932 INFO  [maha-workers-akka.actor.default-dispatcher-2] c.y.m.w.s.a.WorkerStateActor - Stopping actor com.yahoo.maha.worker.state.actor.WorkerStateActor
[INFO] 
[INFO] <<< scoverage-maven-plugin:1.4.1:report (coverage) < [scoverage]test @ maha-worker <<<
[INFO] 
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:report (coverage) @ maha-worker ---
[INFO] Reading scoverage instrumentation [/Users/lgadde/git/Native-Ads/maha/worker/target/scoverage-data/scoverage.coverage]...
[INFO] Reading scoverage measurements [/Users/lgadde/git/Native-Ads/maha/worker/target/scoverage-data/scoverage.measurements.*]...
[INFO] Generating coverage reports...
[INFO] Written Cobertura XML report [/Users/lgadde/git/Native-Ads/maha/worker/target/cobertura.xml]
[INFO] Written XML coverage report [/Users/lgadde/git/Native-Ads/maha/worker/target/scoverage.xml]
[INFO] Written HTML coverage report [/Users/lgadde/git/Native-Ads/maha/worker/target/site/scoverage/index.html]
[INFO] Statement coverage.: 90.06%
[INFO] Branch coverage....: 78.57%
[INFO] Coverage reports completed.
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:check-only (coverage) @ maha-worker ---
[INFO] Statement coverage.: 90.06%
[INFO] Branch coverage....: 78.57%
[INFO] Coverage is above minimum [90.06% >= 90.00%]
[INFO] 
[INFO] -------------------< com.yahoo.maha:maha-api-jersey >-------------------
[INFO] Building maha api-jersey 6.24-SNAPSHOT                           [14/15]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ maha-api-jersey ---
[INFO] Deleting /Users/lgadde/git/Native-Ads/maha/api-jersey/target
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-api-jersey ---
[INFO] Add Source directory: /Users/lgadde/git/Native-Ads/maha/api-jersey/src/main/scala
[INFO] Add Test Source directory: /Users/lgadde/git/Native-Ads/maha/api-jersey/src/test/scala
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-api-jersey ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ maha-api-jersey ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-api-jersey ---
[INFO] /Users/lgadde/git/Native-Ads/maha/api-jersey/src/main/scala:-1: info: compiling
[INFO] Compiling 6 source files to /Users/lgadde/git/Native-Ads/maha/api-jersey/target/classes at 1605028822231
[INFO] prepare-compile in 0 s
[INFO] compile in 5 s
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-api-jersey ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ maha-api-jersey ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-api-jersey ---
[INFO] /Users/lgadde/git/Native-Ads/maha/api-jersey/src/test/scala:-1: info: compiling
[INFO] Compiling 6 source files to /Users/lgadde/git/Native-Ads/maha/api-jersey/target/test-classes at 1605028827759
[WARNING] /Users/lgadde/git/Native-Ads/maha/api-jersey/src/test/scala/com/yahoo/maha/api/jersey/JsonStreamingOutputTest.scala:110: warning: local val curatorResults in value <local JsonStreamingOutputTest> is never used
[WARNING]     val curatorResults= IndexedSeq(curatorResult)
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/api-jersey/src/test/scala/com/yahoo/maha/api/jersey/JsonStreamingOutputTest.scala:151: warning: local val curatorResults in value <local JsonStreamingOutputTest> is never used
[WARNING]     val curatorResults= IndexedSeq(curatorResult1, curatorResult2)
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/api-jersey/src/test/scala/com/yahoo/maha/api/jersey/MahaResourceTest.scala:76: warning: local val domainJson in method testDomainForCubeEndpointWithInvalidCube is never used
[WARNING]     val domainJson: String = EntityUtils.toString(httpResponse.getEntity)
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/api-jersey/src/test/scala/com/yahoo/maha/api/jersey/MahaResourceTest.scala:144: warning: local val flattenDomainJson in method testFlattenDomainForCubeEndpointWithInvalidCube is never used
[WARNING]     val flattenDomainJson: String = EntityUtils.toString(httpResponse.getEntity)
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/api-jersey/src/test/scala/com/yahoo/maha/api/jersey/MahaResourceTest.scala:156: warning: local val flattenDomainJson in method testFlattenDomainForCubeEndpointWithInvalidRevision is never used
[WARNING]     val flattenDomainJson: String = EntityUtils.toString(httpResponse.getEntity)
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/api-jersey/src/test/scala/com/yahoo/maha/api/jersey/example/ExampleMahaService.scala:39: warning: method readFileToString in class FileUtils is deprecated: see corresponding Javadoc for more information.
[WARNING]     val jsonString = FileUtils.readFileToString(new File(s"src/$scope/resources/maha-service-config.json"))
[WARNING]                                ^
[WARNING] 6 warnings found
[INFO] prepare-compile in 0 s
[INFO] compile in 7 s
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-api-jersey ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running com.yahoo.maha.api.jersey.MahaResourceTest
[INFO] Tests run: 22, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 9.988 s - in com.yahoo.maha.api.jersey.MahaResourceTest
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 22, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- scalatest-maven-plugin:2.0.0:test (test) @ maha-api-jersey ---
Discovery starting.
ESAPI: WARNING: System property [org.owasp.esapi.opsteam] is not set
ESAPI: WARNING: System property [org.owasp.esapi.devteam] is not set
ESAPI: Attempting to load ESAPI.properties via file I/O.
ESAPI: Attempting to load ESAPI.properties as resource file via file I/O.
ESAPI: Not found in 'org.owasp.esapi.resources' directory or file not readable: /Users/lgadde/git/Native-Ads/maha/api-jersey/ESAPI.properties
ESAPI: Not found in SystemResource Directory/resourceDirectory: .esapi/ESAPI.properties
ESAPI: Not found in 'user.home' (/Users/lgadde) directory: /Users/lgadde/esapi/ESAPI.properties
ESAPI: Loading ESAPI.properties via file I/O failed. Exception was: java.io.FileNotFoundException
ESAPI: Attempting to load ESAPI.properties via the classpath.
ESAPI: SUCCESSFULLY LOADED ESAPI.properties via the CLASSPATH from '/ (root)' using current thread context class loader!
ESAPI: SecurityConfiguration for Validator.ConfigurationFile.MultiValued not found in ESAPI.properties. Using default: false
ESAPI: Attempting to load validation.properties via file I/O.
ESAPI: Attempting to load validation.properties as resource file via file I/O.
ESAPI: Not found in 'org.owasp.esapi.resources' directory or file not readable: /Users/lgadde/git/Native-Ads/maha/api-jersey/validation.properties
ESAPI: Not found in SystemResource Directory/resourceDirectory: .esapi/validation.properties
ESAPI: Not found in 'user.home' (/Users/lgadde) directory: /Users/lgadde/esapi/validation.properties
ESAPI: Loading validation.properties via file I/O failed.
ESAPI: Attempting to load validation.properties via the classpath.
ESAPI: SUCCESSFULLY LOADED validation.properties via the CLASSPATH from '/ (root)' using current thread context class loader!
Discovery completed in 5 seconds, 834 milliseconds.
Run starting. Expected test count is: 2
JsonStreamingOutputTest:
- Test JsonStreamingOutput with DefaultCurator, totalRow Option, empty curator result
- Test JsonStreamingOutput with DefaultCurator and valid other curator result
Run completed in 6 seconds.
Total number of tests run: 2
Suites: completed 2, aborted 0
Tests: succeeded 2, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
[INFO] 
[INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ maha-api-jersey ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/api-jersey/target/maha-api-jersey-6.24-SNAPSHOT.jar
[INFO] 
[INFO] --- maven-jar-plugin:2.6:test-jar (default) @ maha-api-jersey ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/api-jersey/target/maha-api-jersey-6.24-SNAPSHOT-tests.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:jar (default) > generate-sources @ maha-api-jersey >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-api-jersey ---
[INFO] 
[INFO] <<< maven-source-plugin:2.4:jar (default) < generate-sources @ maha-api-jersey <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:jar (default) @ maha-api-jersey ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/api-jersey/target/maha-api-jersey-6.24-SNAPSHOT-sources.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:test-jar (default) > generate-sources @ maha-api-jersey >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-api-jersey ---
[INFO] 
[INFO] <<< maven-source-plugin:2.4:test-jar (default) < generate-sources @ maha-api-jersey <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:test-jar (default) @ maha-api-jersey ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/api-jersey/target/maha-api-jersey-6.24-SNAPSHOT-test-sources.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ maha-api-jersey ---
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/api-jersey/target/maha-api-jersey-6.24-SNAPSHOT.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-api-jersey/6.24-SNAPSHOT/maha-api-jersey-6.24-SNAPSHOT.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/api-jersey/pom.xml to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-api-jersey/6.24-SNAPSHOT/maha-api-jersey-6.24-SNAPSHOT.pom
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/api-jersey/target/maha-api-jersey-6.24-SNAPSHOT-tests.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-api-jersey/6.24-SNAPSHOT/maha-api-jersey-6.24-SNAPSHOT-tests.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/api-jersey/target/maha-api-jersey-6.24-SNAPSHOT-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-api-jersey/6.24-SNAPSHOT/maha-api-jersey-6.24-SNAPSHOT-sources.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/api-jersey/target/maha-api-jersey-6.24-SNAPSHOT-test-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-api-jersey/6.24-SNAPSHOT/maha-api-jersey-6.24-SNAPSHOT-test-sources.jar
[INFO] 
[INFO] >>> scoverage-maven-plugin:1.4.1:report (coverage) > [scoverage]test @ maha-api-jersey >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-api-jersey ---
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:pre-compile (coverage) @ maha-api-jersey ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-api-jersey ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ maha-api-jersey ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-api-jersey ---
[INFO] /Users/lgadde/git/Native-Ads/maha/api-jersey/src/main/scala:-1: info: compiling
[INFO] Compiling 6 source files to /Users/lgadde/git/Native-Ads/maha/api-jersey/target/scoverage-classes at 1605028854164
[INFO] Cleaning datadir [/Users/lgadde/git/Native-Ads/maha/api-jersey/target/scoverage-data]
[INFO] Beginning coverage instrumentation
[INFO] Instrumentation completed [160 statements]
[INFO] Wrote instrumentation file [/Users/lgadde/git/Native-Ads/maha/api-jersey/target/scoverage-data/scoverage.coverage]
[INFO] Will write measurement data to [/Users/lgadde/git/Native-Ads/maha/api-jersey/target/scoverage-data]
[INFO] prepare-compile in 0 s
[INFO] compile in 7 s
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:post-compile (coverage) @ maha-api-jersey ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-api-jersey ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ maha-api-jersey ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-api-jersey ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-api-jersey ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running com.yahoo.maha.api.jersey.MahaResourceTest
[INFO] Tests run: 22, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 8.861 s - in com.yahoo.maha.api.jersey.MahaResourceTest
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 22, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- scalatest-maven-plugin:2.0.0:test (test) @ maha-api-jersey ---
Discovery starting.
ESAPI: WARNING: System property [org.owasp.esapi.opsteam] is not set
ESAPI: WARNING: System property [org.owasp.esapi.devteam] is not set
ESAPI: Attempting to load ESAPI.properties via file I/O.
ESAPI: Attempting to load ESAPI.properties as resource file via file I/O.
ESAPI: Not found in 'org.owasp.esapi.resources' directory or file not readable: /Users/lgadde/git/Native-Ads/maha/api-jersey/ESAPI.properties
ESAPI: Not found in SystemResource Directory/resourceDirectory: .esapi/ESAPI.properties
ESAPI: Not found in 'user.home' (/Users/lgadde) directory: /Users/lgadde/esapi/ESAPI.properties
ESAPI: Loading ESAPI.properties via file I/O failed. Exception was: java.io.FileNotFoundException
ESAPI: Attempting to load ESAPI.properties via the classpath.
ESAPI: SUCCESSFULLY LOADED ESAPI.properties via the CLASSPATH from '/ (root)' using current thread context class loader!
ESAPI: SecurityConfiguration for Validator.ConfigurationFile.MultiValued not found in ESAPI.properties. Using default: false
ESAPI: Attempting to load validation.properties via file I/O.
ESAPI: Attempting to load validation.properties as resource file via file I/O.
ESAPI: Not found in 'org.owasp.esapi.resources' directory or file not readable: /Users/lgadde/git/Native-Ads/maha/api-jersey/validation.properties
ESAPI: Not found in SystemResource Directory/resourceDirectory: .esapi/validation.properties
ESAPI: Not found in 'user.home' (/Users/lgadde) directory: /Users/lgadde/esapi/validation.properties
ESAPI: Loading validation.properties via file I/O failed.
ESAPI: Attempting to load validation.properties via the classpath.
ESAPI: SUCCESSFULLY LOADED validation.properties via the CLASSPATH from '/ (root)' using current thread context class loader!
Discovery completed in 5 seconds, 59 milliseconds.
Run starting. Expected test count is: 2
JsonStreamingOutputTest:
- Test JsonStreamingOutput with DefaultCurator, totalRow Option, empty curator result
- Test JsonStreamingOutput with DefaultCurator and valid other curator result
Run completed in 5 seconds, 199 milliseconds.
Total number of tests run: 2
Suites: completed 2, aborted 0
Tests: succeeded 2, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
[INFO] 
[INFO] <<< scoverage-maven-plugin:1.4.1:report (coverage) < [scoverage]test @ maha-api-jersey <<<
[INFO] 
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:report (coverage) @ maha-api-jersey ---
[INFO] Reading scoverage instrumentation [/Users/lgadde/git/Native-Ads/maha/api-jersey/target/scoverage-data/scoverage.coverage]...
[INFO] Reading scoverage measurements [/Users/lgadde/git/Native-Ads/maha/api-jersey/target/scoverage-data/scoverage.measurements.*]...
[INFO] Generating coverage reports...
[INFO] Written Cobertura XML report [/Users/lgadde/git/Native-Ads/maha/api-jersey/target/cobertura.xml]
[INFO] Written XML coverage report [/Users/lgadde/git/Native-Ads/maha/api-jersey/target/scoverage.xml]
[INFO] Written HTML coverage report [/Users/lgadde/git/Native-Ads/maha/api-jersey/target/site/scoverage/index.html]
[INFO] Statement coverage.: 91.25%
[INFO] Branch coverage....: 85.71%
[INFO] Coverage reports completed.
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:check-only (coverage) @ maha-api-jersey ---
[INFO] Statement coverage.: 91.25%
[INFO] Branch coverage....: 85.71%
[INFO] Coverage is above minimum [91.25% >= 90.00%]
[INFO] 
[INFO] ------------------< com.yahoo.maha:maha-api-example >-------------------
[INFO] Building maha api-example 6.24-SNAPSHOT                          [15/15]
[INFO] --------------------------------[ war ]---------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ maha-api-example ---
[INFO] Deleting /Users/lgadde/git/Native-Ads/maha/api-example/target
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-api-example ---
[INFO] Add Source directory: /Users/lgadde/git/Native-Ads/maha/api-example/src/main/scala
[INFO] Add Test Source directory: /Users/lgadde/git/Native-Ads/maha/api-example/src/test/scala
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-api-example ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ maha-api-example ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-api-example ---
[INFO] /Users/lgadde/git/Native-Ads/maha/api-example/src/main/scala:-1: info: compiling
[INFO] Compiling 5 source files to /Users/lgadde/git/Native-Ads/maha/api-example/target/classes at 1605028879162
[WARNING] /Users/lgadde/git/Native-Ads/maha/api-example/src/main/scala/com/yahoo/maha/api/example/student/SampleSchemaRegistrationFactory.scala:5: warning: Unused import
[WARNING] import com.yahoo.maha.api.example.ExampleSchema
[WARNING]                                   ^
[WARNING] one warning found
[INFO] prepare-compile in 0 s
[INFO] compile in 6 s
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-api-example ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ maha-api-example ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-api-example ---
[INFO] /Users/lgadde/git/Native-Ads/maha/api-example/src/test/scala:-1: info: compiling
[INFO] Compiling 1 source files to /Users/lgadde/git/Native-Ads/maha/api-example/target/test-classes at 1605028885976
[WARNING] /Users/lgadde/git/Native-Ads/maha/api-example/src/test/scala/com/yahoo/maha/api/example/ExampleTest.scala:15: warning: local val baseRequest in value <local ExampleTest> is never used
[WARNING]     val baseRequest = ExampleRequest.getRequest
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/api-example/src/test/scala/com/yahoo/maha/api/example/ExampleTest.scala:22: warning: local val studentSchema in value <local ExampleTest> is never used
[WARNING]     val studentSchema = StudentSchema
[WARNING]         ^
[WARNING] /Users/lgadde/git/Native-Ads/maha/api-example/src/test/scala/com/yahoo/maha/api/example/ExampleTest.scala:23: warning: local val wikiSchema in value <local ExampleTest> is never used
[WARNING]     val wikiSchema = WikiSchema
[WARNING]         ^
[WARNING] three warnings found
[INFO] prepare-compile in 0 s
[INFO] compile in 3 s
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-api-example ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- scalatest-maven-plugin:2.0.0:test (test) @ maha-api-example ---
Discovery starting.
Discovery completed in 163 milliseconds.
Run starting. Expected test count is: 2
ExampleTest:
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/Users/lgadde/.m2/repository/org/slf4j/slf4j-simple/1.7.30/slf4j-simple-1.7.30.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/Users/lgadde/.m2/repository/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [org.slf4j.impl.SimpleLoggerFactory]
[ScalaTest-main-running-ExampleTest] INFO com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
[ScalaTest-main-running-ExampleTest] INFO com.zaxxer.hikari.pool.PoolBase - HikariPool-1 - Driver does not support get/set network timeout for connections. (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
[ScalaTest-main-running-ExampleTest] INFO com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
[ScalaTest-main-running-ExampleTest] INFO com.zaxxer.hikari.HikariDataSource - test-pool - Starting...
[ScalaTest-main-running-ExampleTest] INFO com.zaxxer.hikari.pool.PoolBase - test-pool - Driver does not support get/set network timeout for connections. (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
[ScalaTest-main-running-ExampleTest] INFO com.zaxxer.hikari.HikariDataSource - test-pool - Start completed.
[ScalaTest-main-running-ExampleTest] INFO com.zaxxer.hikari.HikariDataSource - test-pool - Starting...
[ScalaTest-main-running-ExampleTest] INFO com.zaxxer.hikari.pool.PoolBase - test-pool - Driver does not support get/set network timeout for connections. (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
[ScalaTest-main-running-ExampleTest] INFO com.zaxxer.hikari.HikariDataSource - test-pool - Start completed.
[ScalaTest-main-running-ExampleTest] INFO com.zaxxer.hikari.HikariDataSource - test-pool - Starting...
[ScalaTest-main-running-ExampleTest] INFO com.zaxxer.hikari.pool.PoolBase - test-pool - Driver does not support get/set network timeout for connections. (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
[ScalaTest-main-running-ExampleTest] INFO com.zaxxer.hikari.HikariDataSource - test-pool - Start completed.
- Test for Example Test
- Test for example schema
Run completed in 3 seconds, 972 milliseconds.
Total number of tests run: 2
Suites: completed 2, aborted 0
Tests: succeeded 2, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
[INFO] 
[INFO] --- maven-war-plugin:3.2.3:war (default-war) @ maha-api-example ---
[INFO] Packaging webapp
[INFO] Assembling webapp [maha-api-example] in [/Users/lgadde/git/Native-Ads/maha/api-example/target/maha-api-example-6.24-SNAPSHOT]
[INFO] Processing war project
[INFO] Copying webapp resources [/Users/lgadde/git/Native-Ads/maha/api-example/src/main/webapp]
[INFO] Webapp assembled in [909 msecs]
[INFO] Building war: /Users/lgadde/git/Native-Ads/maha/api-example/target/maha-api-example-6.24-SNAPSHOT.war
[INFO] Packaging classes
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/api-example/target/maha-api-example-6.24-SNAPSHOT-classes.jar
[INFO] 
[INFO] --- maven-jar-plugin:2.6:test-jar (default) @ maha-api-example ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/api-example/target/maha-api-example-6.24-SNAPSHOT-tests.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:jar (default) > generate-sources @ maha-api-example >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-api-example ---
[INFO] 
[INFO] <<< maven-source-plugin:2.4:jar (default) < generate-sources @ maha-api-example <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:jar (default) @ maha-api-example ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/api-example/target/maha-api-example-6.24-SNAPSHOT-sources.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.4:test-jar (default) > generate-sources @ maha-api-example >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-api-example ---
[INFO] 
[INFO] <<< maven-source-plugin:2.4:test-jar (default) < generate-sources @ maha-api-example <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.4:test-jar (default) @ maha-api-example ---
[INFO] Building jar: /Users/lgadde/git/Native-Ads/maha/api-example/target/maha-api-example-6.24-SNAPSHOT-test-sources.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ maha-api-example ---
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/api-example/target/maha-api-example-6.24-SNAPSHOT.war to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-api-example/6.24-SNAPSHOT/maha-api-example-6.24-SNAPSHOT.war
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/api-example/pom.xml to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-api-example/6.24-SNAPSHOT/maha-api-example-6.24-SNAPSHOT.pom
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/api-example/target/maha-api-example-6.24-SNAPSHOT-classes.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-api-example/6.24-SNAPSHOT/maha-api-example-6.24-SNAPSHOT-classes.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/api-example/target/maha-api-example-6.24-SNAPSHOT-tests.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-api-example/6.24-SNAPSHOT/maha-api-example-6.24-SNAPSHOT-tests.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/api-example/target/maha-api-example-6.24-SNAPSHOT-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-api-example/6.24-SNAPSHOT/maha-api-example-6.24-SNAPSHOT-sources.jar
[INFO] Installing /Users/lgadde/git/Native-Ads/maha/api-example/target/maha-api-example-6.24-SNAPSHOT-test-sources.jar to /Users/lgadde/.m2/repository/com/yahoo/maha/maha-api-example/6.24-SNAPSHOT/maha-api-example-6.24-SNAPSHOT-test-sources.jar
[INFO] 
[INFO] >>> scoverage-maven-plugin:1.4.1:report (coverage) > [scoverage]test @ maha-api-example >>>
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:add-source (default) @ maha-api-example ---
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:pre-compile (coverage) @ maha-api-example ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maha-api-example ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ maha-api-example ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:compile (default) @ maha-api-example ---
[INFO] /Users/lgadde/git/Native-Ads/maha/api-example/src/main/scala:-1: info: compiling
[INFO] Compiling 5 source files to /Users/lgadde/git/Native-Ads/maha/api-example/target/scoverage-classes at 1605028900263
[WARNING] /Users/lgadde/git/Native-Ads/maha/api-example/src/main/scala/com/yahoo/maha/api/example/student/SampleSchemaRegistrationFactory.scala:5: warning: Unused import
[WARNING] import com.yahoo.maha.api.example.ExampleSchema
[WARNING]                                   ^
[INFO] Cleaning datadir [/Users/lgadde/git/Native-Ads/maha/api-example/target/scoverage-data]
[INFO] Beginning coverage instrumentation
[INFO] Instrumentation completed [742 statements]
[INFO] Wrote instrumentation file [/Users/lgadde/git/Native-Ads/maha/api-example/target/scoverage-data/scoverage.coverage]
[INFO] Will write measurement data to [/Users/lgadde/git/Native-Ads/maha/api-example/target/scoverage-data]
[WARNING] one warning found
[INFO] prepare-compile in 0 s
[INFO] compile in 7 s
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:post-compile (coverage) @ maha-api-example ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maha-api-example ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ maha-api-example ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- scala-maven-plugin:3.3.2:testCompile (default) @ maha-api-example ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maha-api-example ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- scalatest-maven-plugin:2.0.0:test (test) @ maha-api-example ---
Discovery starting.
Discovery completed in 168 milliseconds.
Run starting. Expected test count is: 2
ExampleTest:
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/Users/lgadde/.m2/repository/org/slf4j/slf4j-simple/1.7.30/slf4j-simple-1.7.30.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/Users/lgadde/.m2/repository/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [org.slf4j.impl.SimpleLoggerFactory]
[ScalaTest-main-running-ExampleTest] INFO com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
[ScalaTest-main-running-ExampleTest] INFO com.zaxxer.hikari.pool.PoolBase - HikariPool-1 - Driver does not support get/set network timeout for connections. (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
[ScalaTest-main-running-ExampleTest] INFO com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
[ScalaTest-main-running-ExampleTest] INFO com.zaxxer.hikari.HikariDataSource - test-pool - Starting...
[ScalaTest-main-running-ExampleTest] INFO com.zaxxer.hikari.pool.PoolBase - test-pool - Driver does not support get/set network timeout for connections. (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
[ScalaTest-main-running-ExampleTest] INFO com.zaxxer.hikari.HikariDataSource - test-pool - Start completed.
[ScalaTest-main-running-ExampleTest] INFO com.zaxxer.hikari.HikariDataSource - test-pool - Starting...
[ScalaTest-main-running-ExampleTest] INFO com.zaxxer.hikari.pool.PoolBase - test-pool - Driver does not support get/set network timeout for connections. (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
[ScalaTest-main-running-ExampleTest] INFO com.zaxxer.hikari.HikariDataSource - test-pool - Start completed.
[ScalaTest-main-running-ExampleTest] INFO com.zaxxer.hikari.HikariDataSource - test-pool - Starting...
[ScalaTest-main-running-ExampleTest] INFO com.zaxxer.hikari.pool.PoolBase - test-pool - Driver does not support get/set network timeout for connections. (org.h2.jdbc.JdbcConnection.getNetworkTimeout()I)
[ScalaTest-main-running-ExampleTest] INFO com.zaxxer.hikari.HikariDataSource - test-pool - Start completed.
- Test for Example Test
- Test for example schema
Run completed in 4 seconds, 544 milliseconds.
Total number of tests run: 2
Suites: completed 2, aborted 0
Tests: succeeded 2, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
[INFO] 
[INFO] <<< scoverage-maven-plugin:1.4.1:report (coverage) < [scoverage]test @ maha-api-example <<<
[INFO] 
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:report (coverage) @ maha-api-example ---
[INFO] Reading scoverage instrumentation [/Users/lgadde/git/Native-Ads/maha/api-example/target/scoverage-data/scoverage.coverage]...
[INFO] Reading scoverage measurements [/Users/lgadde/git/Native-Ads/maha/api-example/target/scoverage-data/scoverage.measurements.*]...
[INFO] Generating coverage reports...
[INFO] Written Cobertura XML report [/Users/lgadde/git/Native-Ads/maha/api-example/target/cobertura.xml]
[INFO] Written XML coverage report [/Users/lgadde/git/Native-Ads/maha/api-example/target/scoverage.xml]
[INFO] Written HTML coverage report [/Users/lgadde/git/Native-Ads/maha/api-example/target/site/scoverage/index.html]
[INFO] Statement coverage.: 98.52%
[INFO] Branch coverage....: 83.33%
[INFO] Coverage reports completed.
[INFO] Found 12 subproject scoverage data directories.
[INFO] Generating coverage aggregated reports...
[INFO] Written Cobertura XML report [/Users/lgadde/git/Native-Ads/maha/target/cobertura.xml]
[INFO] Written XML coverage report [/Users/lgadde/git/Native-Ads/maha/target/scoverage.xml]
[INFO] Written HTML coverage report [/Users/lgadde/git/Native-Ads/maha/target/site/scoverage/index.html]
[INFO] Statement coverage.: 90.42%
[INFO] Branch coverage....: 83.59%
[INFO] Coverage aggregated reports completed.
[INFO] 
[INFO] --- scoverage-maven-plugin:1.4.1:check-only (coverage) @ maha-api-example ---
[INFO] Statement coverage.: 98.52%
[INFO] Branch coverage....: 83.33%
[INFO] Coverage is above minimum [98.52% >= 90.00%]
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary for maha parent 6.24-SNAPSHOT:
[INFO] 
[INFO] maha parent ........................................ SUCCESS [  1.654 s]
[INFO] maha-par-request-2 ................................. SUCCESS [01:02 min]
[INFO] maha db ............................................ SUCCESS [ 58.335 s]
[INFO] maha request log ................................... SUCCESS [ 49.058 s]
[INFO] maha-druid-lookups ................................. SUCCESS [ 52.546 s]
[INFO] maha core .......................................... SUCCESS [03:41 min]
[INFO] maha job service ................................... SUCCESS [ 25.013 s]
[INFO] maha druid executor ................................ SUCCESS [01:05 min]
[INFO] maha oracle executor ............................... SUCCESS [ 31.753 s]
[INFO] maha presto executor ............................... SUCCESS [ 34.118 s]
[INFO] maha postgres executor ............................. SUCCESS [ 43.255 s]
[INFO] maha service ....................................... SUCCESS [01:32 min]
[INFO] maha worker ........................................ SUCCESS [ 45.352 s]
[INFO] maha api-jersey .................................... SUCCESS [ 56.747 s]
[INFO] maha api-example ................................... SUCCESS [ 44.668 s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  14:44 min
[INFO] Finished at: 2020-11-10T09:22:02-08:00
[INFO] ------------------------------------------------------------------------
